(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3809492,      66526]
NotebookOptionsPosition[   3782488,      66087]
NotebookOutlinePosition[   3782957,      66105]
CellTagsIndexPosition[   3782914,      66102]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Lanthanide Oxide AL ", "Title",
 CellChangeTimes->{{3.781546394314378*^9, 3.7815464002744484`*^9}, {
  3.7977282872651854`*^9, 
  3.7977282873653164`*^9}},ExpressionUUID->"0e687f9e-3d11-4b16-962e-\
ea370c7f2d7d"],

Cell["Will Borrelli", "Author",
 CellChangeTimes->{{3.7821630396155148`*^9, 
  3.78216304120625*^9}},ExpressionUUID->"7ddb4b38-e074-445f-8a4c-\
04d9f5fbe65d"],

Cell["\<\
Focus on active learning reaction sampling. This NB includes models trained \
on MACCs keys and One-Hot Encoded amine descriptors. \
\>", "Text",
 CellChangeTimes->{{3.7977282893328834`*^9, 3.7977282936793056`*^9}, {
  3.7985498218613663`*^9, 
  3.7985498621602025`*^9}},ExpressionUUID->"e5b4dc54-fa83-4f68-884c-\
36cb084e7a1c"],

Cell[CellGroupData[{

Cell["Initial Data Import", "Section",
 CellChangeTimes->{{3.797728301126897*^9, 
  3.797728303946023*^9}},ExpressionUUID->"ec552e2c-6408-4c6f-aa03-\
8bd60697ab52"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "googleSheet", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"googleSheet", "[", 
    RowBox[{"docKey_String", ",", "sheetName_String", ",", 
     RowBox[{"columns_String", ":", "\"\<\>\""}], ",", 
     RowBox[{"format_String", ":", "\"\<csv\>\""}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rangeSpec", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringLength", "[", "columns", "]"}], ">", "0"}], ",", 
         RowBox[{"\"\<&range=\>\"", "<>", "columns"}], ",", "\"\<\>\""}], 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<https://docs.google.com/spreadsheets/d/\>\"", "<>", "docKey", 
       "<>", "\"\</gviz/tq?tqx=out:\>\"", "<>", "format", "<>", 
       "\"\<&sheet=\>\"", "<>", "sheetName", "<>", "rangeSpec"}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"googleSheet", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<Amines\>\"", ",", "\"\<A:E\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<name\>\"", ",", "\"\<abbreviation\>\"", ",", 
     "\"\<Chloride salt?\>\"", ",", "\"\<Amine formula\>\"", ",", 
     "\"\<SMILES \>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<ethylenediamine\>\"", ",", "\"\<en\>\"", ",", "\"\<no\>\"", ",", 
     "\"\<C2H8N2\>\"", ",", "\"\<NCCN\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<1,3-diaminopropane\>\"", ",", "\"\<1,3-dap\>\"", ",", "\"\<no\>\"", 
     ",", "\"\<C3H10N2\>\"", ",", "\"\<NCCCN\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<1,4-diaminobutane\>\"", ",", "\"\<1,4-dab\>\"", ",", "\"\<no\>\"", 
     ",", "\"\<C4H12N2\>\"", ",", "\"\<NCCCCN\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<1,5-diaminopentane\>\"", ",", "\"\<1,5-dap\>\"", ",", "\"\<no\>\"", 
     ",", "\"\<C5H14N2\>\"", ",", "\"\<NCCCCCN\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<1,6-diaminohexane\>\"", ",", "\"\<1,6-dah\>\"", ",", "\"\<no\>\"", 
     ",", "\"\<C6H16N2\>\"", ",", "\"\<NCCCCCCCN\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<spermine\>\"", ",", "\"\<spermine\>\"", ",", "\"\<no\>\"", ",", 
     "\"\<C10H26N4\>\"", ",", "\"\<NCCCNCCCCNCCCN\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<N,N,N',N'-tetramethylethylenediamine\>\"", ",", "\"\<tmed\>\"", ",", 
     "\"\<no\>\"", ",", "\"\<C6H16N2\>\"", ",", "\"\<CN(C)CCN(C)C\>\""}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<N,N'-dimethylethylenediamine\>\"", ",", "\"\<dmed\>\"", ",", 
     "\"\<no\>\"", ",", "\"\<C4H12N2\>\"", ",", "\"\<CNCCNC\>\""}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<piperazine\>\"", ",", "\"\<pip\>\"", ",", "\"\<no\>\"", ",", 
     "\"\<C4H10N2\>\"", ",", "\"\<C1CNCCN1\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<2-methylpiperazine\>\"", ",", "\"\<2-mpip\>\"", ",", "\"\<no\>\"", 
     ",", "\"\<C5H12N2\>\"", ",", "\"\<CC1CNCCN1\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<2,5-dimethylpiperazine\>\"", ",", "\"\<2,5-dmpip\>\"", ",", 
     "\"\<no\>\"", ",", "\"\<C6H14N2\>\"", ",", "\"\<CC1CNC(C)CN1\>\""}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<1,4-diaza[2.2.2]bicyclooctane\>\"", ",", "\"\<dabco\>\"", ",", 
     "\"\<no\>\"", ",", "\"\<C6H12N2\>\"", ",", "\"\<C1CN2CCN1CC2\>\""}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<3-aminoquinuclidine.2HCl\>\"", ",", "\"\<3-aqn\>\"", ",", 
     "\"\<yes\>\"", ",", "\"\<C7H14N2.2HCl\>\"", ",", 
     "\"\<Cl.Cl.NC1CN2CCC1CC2\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<3-aminopyrrolidine.2HCl\>\"", ",", "\"\<3-apry\>\"", ",", 
     "\"\<yes\>\"", ",", "\"\<C4H10N2.2HCl\>\"", ",", 
     "\"\<Cl.Cl.NC1CCNC1\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<2-(aminomethyl)piperidine\>\"", ",", "\"\<2-amp\>\"", ",", 
     "\"\<no\>\"", ",", "\"\<C6H14N2\>\"", ",", "\"\<NCC1CCCCN1\>\""}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<2-methylpyrazine\>\"", ",", "\"\<2-mpyr\>\"", ",", "\"\<no\>\"", 
     ",", "\"\<C5H6N2\>\"", ",", "\"\<CC1=NC=CN=C1\>\""}], "}"}]}], 
  "}"}], "\n", 
 RowBox[{
  RowBox[{"smiles", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Rest", "@", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "5"}], "]"}], "]"}]}], ",", 
     RowBox[{"{", "\"\<C(CN)CN\>\"", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"amines", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"Molecule", "[", 
       RowBox[{
        RowBox[{"StringReplace", "[", 
         RowBox[{"\"\<Cl.\>\"", "\[Rule]", "\"\<\>\""}], "]"}], "[", "#", 
        "]"}], "]"}], "&"}], "/@", "smiles"}]}], " ", ";"}], 
  RowBox[{"(*", 
   RowBox[{"remove", " ", "salts"}], "*)"}]}], "\n", 
 RowBox[{"{", 
  RowBox[{
  "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
   "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", "\"\<NCCCNCCCCNCCCN\>\"",
    ",", "\"\<CN(C)CCN(C)C\>\"", ",", "\"\<CNCCNC\>\"", ",", 
   "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", ",", "\"\<CC1CNC(C)CN1\>\"", 
   ",", "\"\<C1CN2CCN1CC2\>\"", ",", "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", 
   "\"\<Cl.Cl.NC1CCNC1\>\"", ",", "\"\<NCC1CCCCN1\>\"", ",", 
   "\"\<CC1=NC=CN=C1\>\""}], "}"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781546417928156*^9, 3.781546430534261*^9}, {
   3.7816021001566825`*^9, 3.7816021125612*^9}, {3.7816022308967695`*^9, 
   3.781602255699417*^9}, {3.781616996568091*^9, 3.7816170018758907`*^9}, 
   3.7816214627140718`*^9, {3.781739990456283*^9, 3.7817399945573225`*^9}, {
   3.7898348504343276`*^9, 3.7898348527750654`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"f1ef0786-2283-4573-b4f9-747cb6df7c71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"name\"\>", ",", "\<\"abbreviation\"\>", 
     ",", "\<\"Chloride salt?\"\>", ",", "\<\"Amine formula\"\>", 
     ",", "\<\"SMILES \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"ethylenediamine\"\>", ",", "\<\"en\"\>", ",", "\<\"no\"\>", 
     ",", "\<\"C2H8N2\"\>", ",", "\<\"NCCN\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"1,3-diaminopropane\"\>", ",", "\<\"1,3-dap\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C3H10N2\"\>", ",", "\<\"NCCCN\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"1,4-diaminobutane\"\>", ",", "\<\"1,4-dab\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C4H12N2\"\>", ",", "\<\"NCCCCN\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"1,5-diaminopentane\"\>", ",", "\<\"1,5-dap\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C5H14N2\"\>", ",", "\<\"NCCCCCN\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"1,6-diaminohexane\"\>", ",", "\<\"1,6-dah\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C6H16N2\"\>", ",", "\<\"NCCCCCCCN\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"spermine\"\>", ",", "\<\"spermine\"\>", ",", "\<\"no\"\>", 
     ",", "\<\"C10H26N4\"\>", ",", "\<\"NCCCNCCCCNCCCN\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"N,N,N',N'-tetramethylethylenediamine\"\>", 
     ",", "\<\"tmed\"\>", ",", "\<\"no\"\>", ",", "\<\"C6H16N2\"\>", 
     ",", "\<\"CN(C)CCN(C)C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"N,N'-dimethylethylenediamine\"\>", ",", "\<\"dmed\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C4H12N2\"\>", ",", "\<\"CNCCNC\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"piperazine\"\>", ",", "\<\"pip\"\>", ",", "\<\"no\"\>", 
     ",", "\<\"C4H10N2\"\>", ",", "\<\"C1CNCCN1\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"2-methylpiperazine\"\>", ",", "\<\"2-mpip\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C5H12N2\"\>", ",", "\<\"CC1CNCCN1\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"2,5-dimethylpiperazine\"\>", ",", "\<\"2,5-dmpip\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C6H14N2\"\>", ",", "\<\"CC1CNC(C)CN1\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"1,4-diaza[2.2.2]bicyclooctane\"\>", ",", "\<\"dabco\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C6H12N2\"\>", ",", "\<\"C1CN2CCN1CC2\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"3-aminoquinuclidine.2HCl\"\>", ",", "\<\"3-aqn\"\>", 
     ",", "\<\"yes\"\>", ",", "\<\"C7H14N2.2HCl\"\>", 
     ",", "\<\"Cl.Cl.NC1CN2CCC1CC2\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"3-aminopyrrolidine.2HCl\"\>", ",", "\<\"3-apry\"\>", 
     ",", "\<\"yes\"\>", ",", "\<\"C4H10N2.2HCl\"\>", 
     ",", "\<\"Cl.Cl.NC1CCNC1\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"2-(aminomethyl)piperidine\"\>", ",", "\<\"2-amp\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C6H14N2\"\>", ",", "\<\"NCC1CCCCN1\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"2-methylpyrazine\"\>", ",", "\<\"2-mpyr\"\>", 
     ",", "\<\"no\"\>", ",", "\<\"C5H6N2\"\>", ",", "\<\"CC1=NC=CN=C1\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.781621465484666*^9, 3.781739955622349*^9, 3.7817399972700424`*^9, 
   3.7818139733886523`*^9, 3.781862853123275*^9, 3.7818630488071833`*^9, 
   3.781869286141327*^9, {3.7818693348359075`*^9, 3.78186935498785*^9}, 
   3.7820390247960887`*^9, 3.7821732257223253`*^9, 3.7826473273150053`*^9, 
   3.78265763525307*^9, 3.7826589371516733`*^9, 3.7826930458314395`*^9, 
   3.7844711603643875`*^9, 3.7880326477522006`*^9, 3.788034891476864*^9, 
   3.788141392327519*^9, 3.7888271442740808`*^9, 3.788827772832114*^9, 
   3.788827981319663*^9, 3.7888282501566315`*^9, 3.789139973035065*^9, 
   3.7893021131725054`*^9, 3.789329549379745*^9, 3.7893326274830265`*^9, 
   3.789384868343398*^9, 3.78983199701445*^9, 3.7899066601234007`*^9, 
   3.7899425607572684`*^9, 3.790081394991028*^9, 3.790081431125972*^9, 
   3.7902868177213135`*^9, 3.790427111115492*^9, 3.790511737318327*^9, 
   3.7906103366274033`*^9, 3.7906315968390617`*^9, 3.7916682191581936`*^9, 
   3.791669182325575*^9, 3.7918984375264754`*^9, {3.792104321173934*^9, 
   3.7921043447145524`*^9}, 3.7928443295556374`*^9, 3.794304302946761*^9, 
   3.7943045876122465`*^9, 3.794315008877186*^9, 3.794350016243232*^9, 
   3.7944038011917377`*^9, 3.7946037300283537`*^9, 3.794864892231795*^9, 
   3.795346665523398*^9, 3.7953762641180544`*^9, 3.7959264867062936`*^9, 
   3.7959523769024353`*^9, 3.7977275829120817`*^9, {3.7977283997353687`*^9, 
   3.7977284005376587`*^9}, 3.7977677288649917`*^9, 3.797773111920882*^9, 
   3.7977766258022957`*^9, 3.7977778909253826`*^9, 3.797785609301967*^9, 
   3.7977858634570045`*^9, 3.797797396111433*^9, 3.7978054018123817`*^9, 
   3.7985479566383667`*^9, 3.7985482039006157`*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"f3a7dbed-7841-4b2e-bb04-b22697e70861"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"NCCN\"\>", ",", "\<\"NCCCN\"\>", ",", "\<\"NCCCCN\"\>", 
   ",", "\<\"NCCCCCN\"\>", ",", "\<\"NCCCCCCCN\"\>", 
   ",", "\<\"NCCCNCCCCNCCCN\"\>", ",", "\<\"CN(C)CCN(C)C\"\>", 
   ",", "\<\"CNCCNC\"\>", ",", "\<\"C1CNCCN1\"\>", ",", "\<\"CC1CNCCN1\"\>", 
   ",", "\<\"CC1CNC(C)CN1\"\>", ",", "\<\"C1CN2CCN1CC2\"\>", 
   ",", "\<\"Cl.Cl.NC1CN2CCC1CC2\"\>", ",", "\<\"Cl.Cl.NC1CCNC1\"\>", 
   ",", "\<\"NCC1CCCCN1\"\>", ",", "\<\"CC1=NC=CN=C1\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.781621465484666*^9, 3.781739955622349*^9, 3.7817399972700424`*^9, 
   3.7818139733886523`*^9, 3.781862853123275*^9, 3.7818630488071833`*^9, 
   3.781869286141327*^9, {3.7818693348359075`*^9, 3.78186935498785*^9}, 
   3.7820390247960887`*^9, 3.7821732257223253`*^9, 3.7826473273150053`*^9, 
   3.78265763525307*^9, 3.7826589371516733`*^9, 3.7826930458314395`*^9, 
   3.7844711603643875`*^9, 3.7880326477522006`*^9, 3.788034891476864*^9, 
   3.788141392327519*^9, 3.7888271442740808`*^9, 3.788827772832114*^9, 
   3.788827981319663*^9, 3.7888282501566315`*^9, 3.789139973035065*^9, 
   3.7893021131725054`*^9, 3.789329549379745*^9, 3.7893326274830265`*^9, 
   3.789384868343398*^9, 3.78983199701445*^9, 3.7899066601234007`*^9, 
   3.7899425607572684`*^9, 3.790081394991028*^9, 3.790081431125972*^9, 
   3.7902868177213135`*^9, 3.790427111115492*^9, 3.790511737318327*^9, 
   3.7906103366274033`*^9, 3.7906315968390617`*^9, 3.7916682191581936`*^9, 
   3.791669182325575*^9, 3.7918984375264754`*^9, {3.792104321173934*^9, 
   3.7921043447145524`*^9}, 3.7928443295556374`*^9, 3.794304302946761*^9, 
   3.7943045876122465`*^9, 3.794315008877186*^9, 3.794350016243232*^9, 
   3.7944038011917377`*^9, 3.7946037300283537`*^9, 3.794864892231795*^9, 
   3.795346665523398*^9, 3.7953762641180544`*^9, 3.7959264867062936`*^9, 
   3.7959523769024353`*^9, 3.7977275829120817`*^9, {3.7977283997353687`*^9, 
   3.7977284005376587`*^9}, 3.7977677288649917`*^9, 3.797773111920882*^9, 
   3.7977766258022957`*^9, 3.7977778909253826`*^9, 3.797785609301967*^9, 
   3.7977858634570045`*^9, 3.797797396111433*^9, 3.7978054018123817`*^9, 
   3.7985479566383667`*^9, 3.7985482039619894`*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"bf1676d8-756b-4b33-8b73-f14cfa1c34fc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"googleSheetDataset", "[", 
   RowBox[{"docKey_String", ",", "sheetName_String", ",", 
    RowBox[{"columns_String", ":", "\"\<\>\""}], ",", 
    RowBox[{"format_String", ":", "\"\<csv\>\""}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rangeSpec", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "columns", "]"}], ">", "0"}], ",", 
        RowBox[{"\"\<&range=\>\"", "<>", "columns"}], ",", "\"\<\>\""}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Import", "[", 
     RowBox[{
      RowBox[{
      "\"\<https://docs.google.com/spreadsheets/d/\>\"", "<>", "docKey", 
       "<>", "\"\</gviz/tq?tqx=out:\>\"", "<>", "format", "<>", 
       "\"\<&sheet=\>\"", "<>", "sheetName", "<>", "rangeSpec"}], ",", 
      "\"\<Dataset\>\"", ",", 
      RowBox[{"HeaderLines", "\[Rule]", "1"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816022642929835`*^9, 3.7816022759838495`*^9}, {
  3.7817400036511955`*^9, 3.7817400049078007`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"14400471-f92d-4f76-9411-a159184d0902"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJE", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<JE_Lanthanide_reactions\>\"", ",", "\"\<A:L\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7815471126650867`*^9, 3.7815471166813517`*^9}, {
  3.7815630959481087`*^9, 3.7815631269771585`*^9}, {3.7815631800636263`*^9, 
  3.781563295748209*^9}, {3.7815665877287083`*^9, 3.7815665889803643`*^9}, {
  3.7816002305472493`*^9, 3.781600249695258*^9}, {3.781601977892505*^9, 
  3.7816020304303226`*^9}, {3.7816020672680607`*^9, 3.7816020827940273`*^9}, {
  3.7816022830706987`*^9, 3.781602333091202*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"9cd20d70-281b-4515-8917-96ff9fb5c214"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJZDunordered", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<JZD_Lanthanide_reactions\>\"", ",", "\"\<A:L\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781602363412743*^9, 3.7816023768451166`*^9}, {
  3.7816024491298723`*^9, 3.7816024894045286`*^9}, {3.78160253611205*^9, 
  3.7816026252922573`*^9}, {3.781602681574018*^9, 3.781602699229116*^9}, {
  3.782657906954549*^9, 3.782657916224681*^9}, {3.782661063452709*^9, 
  3.782661067986163*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"95a8d02a-cdaa-4220-a98c-cf2bfd49505a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJZD", "=", 
   RowBox[{"dataJZDunordered", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"dataJE", "//", "First"}], "//", "Keys"}], "//", "Normal"}]}],
      "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816027018717785`*^9, 3.7816027266596203`*^9}, {
  3.781602762947981*^9, 3.781602771068947*^9}, {3.78265789922052*^9, 
  3.7826579050229096`*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"49c3e8e9-febd-4820-8b59-7d04d9254e40"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMD", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<MD_Lanthanide_reactions\>\"", ",", "\"\<A:S\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.789341399313546*^9, 3.7893414112144556`*^9}, {
   3.789341443887838*^9, 3.789341473748061*^9}, {3.789341624269355*^9, 
   3.7893416281829476`*^9}, 3.7898348811072493`*^9},
 CellLabel->"In[99]:=",ExpressionUUID->"e74da9c2-3db6-48b6-91ef-f8d41401a2cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDord", "=", 
   RowBox[{"dataMD", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Reference\>\"", ",", "\"\<Ln ID\>\"", ",", "\"\<Ln Mass/g\>\"", 
       ",", "\"\<H2SeO4 (aq) 40%w/w /g\>\"", ",", "\"\<Na2C2O4/g\>\"", ",", 
       "\"\<Amine/g\>\"", ",", "\"\<Amine name\>\"", ",", "\"\<SMILES\>\"", 
       ",", "\"\<Added H2O/g\>\"", ",", "\"\<pH\>\"", ",", "\"\<Outcome\>\"", 
       ",", "\"\<Purity\>\""}], "}"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7893416301744895`*^9, 3.7893417528008356`*^9}, {
  3.7904607738810253`*^9, 3.790460776041793*^9}, {3.7912040602334223`*^9, 
  3.7912040609445353`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"306c9187-3c44-4b49-9609-675df3d85296"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "take", " ", "only", " ", "reactions", " ", "that", " ", "have", " ", 
   "outcome", " ", "entries"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7912179442892313`*^9, 3.791217956642193*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"45844a54-127e-4003-9c83-9c61f8e2a945"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDord", "=", 
   RowBox[{"dataMDord", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "200"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7912179596361895`*^9, 3.7912179643725195`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"f6190d35-c127-43d2-85a6-4ed5d6cad109"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDFull", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"dataMDord", "[", 
      RowBox[{"All", ",", 
       RowBox[{
        RowBox[{"KeyMap", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "/.", 
            RowBox[{
            "\"\<Reference\>\"", "\[Rule]", "\"\<Reaction number\>\""}]}], 
           "&"}], ",", "#"}], "]"}], "&"}]}], "]"}], "[", 
     RowBox[{"All", ",", 
      RowBox[{
       RowBox[{"KeyMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "/.", 
           RowBox[{
           "\"\<H2SeO4 (aq) 40%w/w /g\>\"", "\[Rule]", 
            "\"\<H2SeO4 (40 wt %)/g\>\""}]}], "&"}], ",", "#"}], "]"}], 
       "&"}]}], "]"}], "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"KeyMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "/.", 
          RowBox[{"\"\<Added H2O/g\>\"", "\[Rule]", "\"\<H2O/g\>\""}]}], 
         "&"}], ",", "#"}], "]"}], "&"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7912414155230637`*^9, 3.7912414598906307`*^9}, {
  3.791241498066386*^9, 3.791241620348447*^9}, {3.7912416813879967`*^9, 
  3.7912417362433567`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"f0269ccf-2c46-4393-9eca-6b79d80a8c47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataCombined", "=", 
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{"Catenate", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Normal", "[", "dataJE", "]"}], ",", 
         RowBox[{"Normal", "[", "dataJZD", "]"}]}], "}"}], "]"}], "]"}], ",", 
     RowBox[{"-", "25"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781602865872223*^9, 3.7816028879329557`*^9}, {
   3.7816029521238112`*^9, 3.7816030114814105`*^9}, 3.781603925653813*^9, 
   3.781615540265335*^9, {3.7821728512473164`*^9, 3.7821728544821634`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"2d5c8a34-6412-40da-9692-92e63bbca57f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataCombined", "=", 
   RowBox[{"dataCombined", "/.", 
    RowBox[{"\"\<ErCl3.6H2O/g\>\"", "\[Rule]", "\"\<ErCl3.6H2O\>\""}]}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797816954789365*^9, 3.7978169566574745`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"0432a505-8eef-4d0d-b5e2-83c4d178e301"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genData2D", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\genData2D.csv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7954089003983264`*^9, 3.7954089207081604`*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"5abf05de-e703-4224-a3b6-dec8ed8a85a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genData2Dv2", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\genData2Dv2.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7954089226455493`*^9, 3.7954089314147415`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"23941c56-2814-4283-9ee1-3ca43b3beb8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allDataMACCs", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\allDataMACCs.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.795376380925789*^9, 3.7953764503252993`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"9a10d79d-1129-423f-885b-c7a1c1933efe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allDataOneHot", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\allDataOneHot.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.79534690939496*^9, 3.7953469300087214`*^9}, {
  3.7953470373660774`*^9, 3.795347044136973*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"1e567500-600a-40df-80b2-dd15c8afeb80"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7978169015061026`*^9, 3.797816950793996*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"3dd3d28d-fa09-479c-ba9e-3d3ad072ac0c"],

Cell[CellGroupData[{

Cell["Data Processing Functions", "Subsection",
 CellChangeTimes->{{3.7977283618435545`*^9, 
  3.7977283717906923`*^9}},ExpressionUUID->"a59a34fa-84d0-4a2b-94d9-\
ed4416886013"],

Cell[BoxData[
 RowBox[{
  RowBox[{"laGroupQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<LaCl3.6H2O\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816155714819126`*^9, 3.781615577177689*^9}, {
  3.7816156247321773`*^9, 3.7816156292391233`*^9}, {3.782658876652196*^9, 
  3.7826588769882216`*^9}, {3.7918998515832415`*^9, 3.791899869640334*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"ef22dd3d-591d-410d-9c67-bc5c5152f3f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"erGroupQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<ErCl3.6H2O\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921040103059583`*^9, 3.792104021030526*^9}, {
  3.792104068501077*^9, 3.792104073095149*^9}, {3.7921041462506914`*^9, 
  3.7921041470356154`*^9}, {3.792104487220478*^9, 3.7921044913074737`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"a9fb8e6f-c071-4f4a-aa36-21ef24602910"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lanthGroup", "[", 
   RowBox[{"df_", ",", "lanth_String"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"lanthGroupQ", "[", 
      RowBox[{"row_", ",", 
       RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
      RowBox[{"lanth", "<>", "\"\<Cl3.6H2O\>\""}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "lanthGroupQ"}], "]"}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.797816682445188*^9, 3.797816765523422*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"f83d9803-b602-485a-aae2-3c9ad0d0fbf0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<SMILES\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<NCCCNCCCCNCCCN\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816157028235025`*^9, 3.7816157458544636`*^9}, {
  3.782172411151492*^9, 3.7821724138827496`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"9b1af78f-6839-4346-b0d6-0369e05c54c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineGroup", "[", 
   RowBox[{"df_", ",", "amine_String"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"amineQ", "[", 
      RowBox[{"row_", ",", 
       RowBox[{"query_String", ":", "\"\<SMILES\>\""}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"row", "[", "query", "]"}], "\[Equal]", "amine"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "amineQ"}], "]"}]}], ")"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797816526361371*^9, 3.7978166174643745`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"9c9ea8ba-cc5c-4262-b25b-e989c9e1bb49"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rxnSuccessQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", " ", "\"\<Outcome\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[GreaterEqual]", "3"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781622007317878*^9, 3.7816220195361867`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"362d1d6d-c589-422d-b09f-ad0ed1117286"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccs", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", "7", "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.791803122882662*^9, 3.7918031382559056`*^9}, {
   3.7918035309814463`*^9, 3.7918035696370006`*^9}, {3.792106289580659*^9, 
   3.792106290085314*^9}, {3.792148276635498*^9, 3.79214829072795*^9}, {
   3.7953765358516235`*^9, 3.795376538303071*^9}, 3.797778826863719*^9},
 CellLabel->
  "In[117]:=",ExpressionUUID->"81fdfeab-0e81-407f-85d7-0c7f0ea11800"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccsRed", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Delete", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "5", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "7", "}"}]}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921911434126787`*^9, 3.792191197483028*^9}, {
   3.7953765445483775`*^9, 3.795376544787736*^9}, 3.797778830770344*^9},
 CellLabel->
  "In[118]:=",ExpressionUUID->"c732c5cf-f296-4d68-bd9a-dce0069b240a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccsRedpH", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Delete", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "5", "}"}], ",", 
         RowBox[{"{", "7", "}"}]}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921919063748302`*^9, 3.79219191467488*^9}, {
   3.795376549355523*^9, 3.795376549498181*^9}, 3.7977788341736927`*^9},
 CellLabel->
  "In[119]:=",ExpressionUUID->"4c1eea0b-2b64-4a42-b05b-c70c43c941f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOH", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<H2SeO4 Mole Fraction\>\"", ",", 
       "\"\<Sodium Oxalate Mole Fraction\>\"", ",", 
       "\"\<Amine Mole Fraction\>\"", ",", "\"\<H2O Mole Fraction\>\"", ",", 
       "\"\<pH\>\"", ",", "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", 
       "\"\<NCCCCN\>\"", ",", "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", 
       ",", "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948837777078834`*^9, 3.7948837984704933`*^9}, {
   3.7948844019697094`*^9, 3.794884405660018*^9}, 3.797798003770788*^9},
 CellLabel->
  "In[120]:=",ExpressionUUID->"a8ab51ed-374b-40f4-9762-ca9d7fe52943"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHred", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<Sodium Oxalate Mole Fraction\>\"",
        ",", "\"\<Amine Mole Fraction\>\"", ",", "\"\<NCCN\>\"", ",", 
       "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", "\"\<NCCCCCN\>\"", ",", 
       "\"\<NCCCCCCCN\>\"", ",", "\"\<NCCCNCCCCNCCCN\>\"", ",", 
       "\"\<CN(C)CCN(C)C\>\"", ",", "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"",
        ",", "\"\<CC1CNCCN1\>\"", ",", "\"\<CC1CNC(C)CN1\>\"", ",", 
       "\"\<C1CN2CCN1CC2\>\"", ",", "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CCNC1\>\"", ",", "\"\<NCC1CCCCN1\>\"", ",", 
       "\"\<CC1=NC=CN=C1\>\"", ",", "\"\<NCCNCCN\>\"", ",", 
       "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", "\"\<C(CN)CN\>\""}], "}"}]}], "]"}],
    "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948847695973425`*^9, 3.79488478779722*^9}, 
   3.797778862286379*^9},
 CellLabel->
  "In[121]:=",ExpressionUUID->"aa072809-94c0-460f-85f5-db92344a7a8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHredpH", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<Sodium Oxalate Mole Fraction\>\"",
        ",", "\"\<Amine Mole Fraction\>\"", ",", "\"\<pH\>\"", ",", 
       "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
       "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", 
       "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794884796554892*^9, 3.7948848103915005`*^9}, 
   3.797778849797413*^9},
 CellLabel->
  "In[122]:=",ExpressionUUID->"87ed8975-48b7-4a59-a69b-d55d56250459"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHonly", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
       "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", 
       "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948849660265164`*^9, 3.7948849850306168`*^9}, 
   3.797778856985733*^9},
 CellLabel->
  "In[123]:=",ExpressionUUID->"b4e6cbdf-1b8c-496e-bbfa-16e549080bba"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainTestSplit", "[", "fraction_", "]"}], "[", "df_Dataset", 
   "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nTrainingItems", " ", "=", " ", 
      RowBox[{"UpTo", "@", 
       RowBox[{"Round", "@", 
        RowBox[{"(", 
         RowBox[{"fraction", "*", 
          RowBox[{"Length", "[", "df", "]"}]}], ")"}]}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TakeDrop", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"RandomSample", "[", "df", "]"}], ",", " ", 
      "\[IndentingNewLine]", "nTrainingItems"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], " "}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7915552591974335`*^9, 3.791555263437021*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"8585c208-2222-46bd-a472-c310087cf282"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classMeasures", "[", "cm_ClassifierMeasurementsObject", "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", " ", 
       RowBox[{"cm", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Accuracy\>\"", ",", "\"\<Recall\>\"", ",", "\"\<MCC\>\"", ",", 
      "\"\<Sensitivity\>\"", ",", "\"\<Specificity\>\"", ",", 
      "\"\<AreaUnderROCCurve\>\"", ",", "\"\<F1Score\>\""}], "}"}]}], "//", 
   "TableForm"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.791293828248836*^9, 3.791293830784854*^9}, {
  3.791293873577479*^9, 3.7912938758373833`*^9}, {3.791720537960402*^9, 
  3.7917205555484447`*^9}, {3.7923259283658032`*^9, 3.7923259303311443`*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"e8b0db08-c135-4ea4-8a38-56928e770a76"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["MACCs Keys as Amine Descriptors ", "Section",
 CellChangeTimes->{{3.7977285732384944`*^9, 3.7977285815411444`*^9}, 
   3.797767770136372*^9},ExpressionUUID->"3b93617e-4988-4ed3-a5cb-\
390a12f420ee"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "all", " ", "reactions", " ", "erbium", " ", "and", " ", "lanthanum"}], " ",
   "*)"}]], "Input",
 CellChangeTimes->{{3.7977288252154617`*^9, 3.7977288311353526`*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"86bf2c2c-4858-4ac9-9eb2-150c386f4eeb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "1841", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"allDataMACCsTrain", ",", "allDataMACCsTest"}], "}"}], "=", 
   RowBox[{
    RowBox[{"trainTestSplit", "[", "0.8", "]"}], "[", "allDataMACCs", "]"}]}],
   ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.792148343756383*^9, 3.79214838279676*^9}, {
  3.7921914961601677`*^9, 3.7921915021187954`*^9}, {3.795376474371026*^9, 
  3.795376484573709*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"58817331-a03a-408f-839c-226dff8d8310"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"just", " ", "lanthanum"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977288392231555`*^9, 3.7977288423512793`*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"4d26e7fa-b689-473b-9b41-71cdd98b901f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SeedRandom", "[", "1841", "]"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"laDataMaccsTrain", ",", "laDataMaccsTest"}], "}"}], "=", 
   RowBox[{
    RowBox[{"trainTestSplit", "[", "0.8", "]"}], "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"allDataMACCs", ",", "laGroupQ"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921915118417764`*^9, 3.792191527314459*^9}, {
  3.795376501485495*^9, 3.7953765175834618`*^9}, {3.7953766551895986`*^9, 
  3.79537665783253*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"7fc6f787-0fc6-4eac-a2ae-7bf0fe32621c"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "trained", " ", "on", " ", "all", " ", "columns", " ", "and", " ", "all", 
   " ", "lanthanides"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7918028329861164`*^9, 3.7918028452572784`*^9}, {
  3.7921061574183593`*^9, 3.7921061630518837`*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"53c7cded-93b8-4b5d-9005-5f08916523f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classAllmaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccs", "@", "allDataMACCsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.792148304709445*^9, 3.7921483261075983`*^9}, {
  3.792148419568971*^9, 3.792148430378355*^9}, {3.7953765553455133`*^9, 
  3.7953765738430624`*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"8cb17d1d-3461-4b2e-8167-1115623f5563"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["344", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 344, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Boolean"], "maccs65" -> 
           Association["Type" -> "Boolean"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Boolean"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Boolean"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Boolean"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Boolean"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Boolean"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Boolean"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                  "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                  "H2O Mole Fraction", "pH", "maccs53", "maccs54", "maccs62", 
                  "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                  "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                  "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                  "maccs103", "maccs104", "maccs105", "maccs108", "maccs111", 
                  "maccs115", "maccs116", "maccs118", "maccs120", "maccs121", 
                  "maccs122", "maccs128", "maccs129", "maccs131", "maccs133", 
                  "maccs134", "maccs137", "maccs138", "maccs141", "maccs145", 
                  "maccs147", "maccs148", "maccs149", "maccs151", "maccs153", 
                  "maccs155", "maccs156", "maccs158", "maccs160", "maccs162", 
                  "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 57]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55", "f56", "f57"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Version" -> {12.1, 0}, "ID" -> 2890808244938110393]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Mean" -> {0.0028792698877382916`, 0.036874072548009174`, 
              0.001336625227644646, 0.0056909533598154425`, 
              0.9532190789767923, 2.6075581395348837`}, 
             "StandardDeviation" -> {0.0016280347537027814`, 
              0.007329255987435024, 0.0009057928969227916, 
              0.002731584875602575, 0.006597571768985427, 
              1.6775019052056637`}, "Version" -> {12.1, 0}, "ID" -> 
             5899696106768861539, "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 1421983425515021190]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 8693536121458706544, "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 7278254295148636010, "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6], 
               "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f\
28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f\
54f55f56f57)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]], 
             "Spans" -> {
               Span[1, 6], 
               Span[7, 57]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 9160275731445607812]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 344, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJ9C/RfcP9qsgHTVo9smsGM3Tb9O5TfdVhP2iPxhbXW
MV7OFsh51Ldj8R4VMOOEvWP8BfEvrA/twdIX0qH0dHv3O4LlR2Q32p+atWnZ
Gs3n9jD1QMFC9zsv7Zev0cwGytmDtdc+tE/1jQy+NuUoVP6hPZhretceYu8T
KH0Aru9XE8iBt+3B2h3f2xeCLdwL5b+2h7h/F5yGqYPYdxFOQ+x7a28GdsAV
eyGwwAO4e+TABj+wh4TDM7j5MPtgNEwfzB6Y/2H2w+yBmVsLDrijcPNg+mD+
XwiOjmtwcUj8XIKHL8z/MHth7gAAr6TgYw==
                    "], "Method" -> "Naive", "VectorLength" -> 57, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJ9C/RfcP9qsgHTVo9smsGM3Tb9O5TfdVhP2iPxhbXW
MV7OFsh51Ldj8R4VMOOEvWP8BfEvrA/twdIX0qH0dHv3O4LlR2Q32p+atWnZ
Gs3n9jD1QMFC9zsv7Zev0cwGytmDtdc+tE/1jQy+NuUoVP6hPZhretceYu8T
KH0Aru9XE8iBt+3B2h3f2xeCLdwL5b+2h7h/F5yGqYPYdxFOQ+x7a28GdsAV
eyGwwAO4e+TABj+wh4TDM7j5MPtgNEwfzB6Y/2H2w+yBmVsLDrijcPNg+mD+
XwiOjmtwcUj8XIKHL8z/MHth7gAAr6TgYw==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLv/0Hgvf0aKP0XSnMygMAH+3efIXxmKD9W6/GMXOOb
9lun/Xlg9f6+fZpagtOyCavtMwz1zBd4HbY/4rhY8syP8/bOnWcdnObegauP
g9Lrld3u+829YB8hXT236s59+9Cb87xMv1235/vzXTnvxH17/b65908+uG+v
FTw51PLEPfueVX+WsydchesTO6MUuW3PffssqH33My5ycbdcsfctOS0ns++a
/frSjGNCkZfhNExdTZSPl0XrHTh9FOpOi0rj5+l/79rnPj7468A/hHumPPDd
1vnnvv3NLf9631bchZsPsw9Gw/RlofkfZj/MHpi5eafdF3Iq3ICbB9MH8//y
gO6amf334OITdB2yH1vdhYcvzP8we2HuAADazu0/
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 57, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 57]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 17]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
DvofU6a/zg==
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJ9C/RfcP9qsgHTVo9smsGM3Tb9O5TfdVhP2iPxhbXW
MV7OFsh51Ldj8R4VMOOEvWP8BfEvrA/twdIX0qH0dHv3O4LlR2Q32p+atWnZ
Gs3n9jD1QMFC9zsv7Zev0cwGytmDtdc+tE/1jQy+NuUoVP6hPZhretceYu8T
KH0Aru9XE8iBt+3B2h3f2xeCLdwL5b+2h7h/F5yGqYPYdxFOQ+x7a28GdsAV
eyGwwAO4e+TABj+wh4TDM7j5MPtgNEwfzB6Y/2H2w+yBmVsLDrijcPNg+mD+
XwiOjmtwcUj8XIKHL8z/MHth7gAAr6TgYw==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLv/0Hgvf0aKP0XSnMygMAH+3efIXxmKD9W6/GMXOOb
9lun/Xlg9f6+fZpagtOyCavtMwz1zBd4HbY/4rhY8syP8/bOnWcdnObegauP
g9Lrld3u+829YB8hXT236s59+9Cb87xMv1235/vzXTnvxH17/b65908+uG+v
FTw51PLEPfueVX+WsydchesTO6MUuW3PffssqH33My5ycbdcsfctOS0ns++a
/frSjGNCkZfhNExdTZSPl0XrHTh9FOpOi0rj5+l/79rnPj7468A/hHumPPDd
1vnnvv3NLf9631bchZsPsw9Gw/RlofkfZj/MHpi5eafdF3Iq3ICbB9MH8//y
gO6amf334OITdB2yH1vdhYcvzP8we2HuAADazu0/
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 17, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0295013, "MaxTrainingMemory" -> 527352, 
                  "DataMemory" -> 157072, "FunctionMemory" -> 34232, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 7.0489697`8.60070061382407}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 57, "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             6691904909924163924]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJ9C/RfcP9qsgHTVo9smsGM3Tb9O5TfdVhP2iPxhbXW
MV7OFsh51Ldj8R4VMOOEvWP8BfEvrA/twdIX0qH0dHv3O4LlR2Q32p+atWnZ
Gs3n9jD1QMFC9zsv7Zev0cwGytmDtdc+tE/1jQy+NuUoVP6hPZhretceYu8T
KH0Aru9XE8iBt+3B2h3f2xeCLdwL5b+2h7h/F5yGqYPYdxFOQ+x7a28GdsAV
eyGwwAO4e+TABj+wh4TDM7j5MPtgNEwfzB6Y/2H2w+yBmVsLDrijcPNg+mD+
XwiOjmtwcUj8XIKHL8z/MHth7gAAr6TgYw==
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLv/0Hgvf0aKP0XSnMygMAH+3efIXxmKD9W6/GMXOOb
9lun/Xlg9f6+fZpagtOyCavtMwz1zBd4HbY/4rhY8syP8/bOnWcdnObegauP
g9Lrld3u+829YB8hXT236s59+9Cb87xMv1235/vzXTnvxH17/b65908+uG+v
FTw51PLEPfueVX+WsydchesTO6MUuW3PffssqH33My5ycbdcsfctOS0ns++a
/frSjGNCkZfhNExdTZSPl0XrHTh9FOpOi0rj5+l/79rnPj7468A/hHumPPDd
1vnnvv3NLf9631bchZsPsw9Gw/RlofkfZj/MHpi5eafdF3Iq3ICbB9MH8//y
gO6amf334OITdB2yH1vdhYcvzP8we2HuAADazu0/
              "], "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Version" -> {12.1, 0}, "ID" -> 7086583162346593019]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5102660757665355600]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 7236843509634873231, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 7027502286466989725]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.21965317919075145`, True -> 0.7803468208092486]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1: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
KCdOsRC4S4sypJRJwBGgzc8g1GJTqcYRl2QGsM51q8uRZ9G6mqQYN0eEZbWb
IgK8tXh32+VgzqgaXPybvSkviQguap+mZ3Po2Nybu3LDnQFiGcnOdH0G2LUk
DYyHEuH6/p230lNmsXH+C0tzXTX6DcvutPpGxzvlBsqSzPzBl/KZZ9Gdjl+/
qymXpdagm8Tey6oGTLyETxT2JM5ier2+wG86Ax7YBOqeKSeBmmCvVmzfLB5b
kOv/4kWC0siXR0e6GOC+42Ep4ylzDobv45LeedCaOyIRfroWH5w/d0FqrBoX
HhoOetIYMPLn20ehrmoc1Oeb+tU7i/WT6auBwSSIOCa+0bOEAecOh/d1tTKg
K2rXxdTZWaTkdISvMn3+jdnIPpN4OjJiS/1PJsyix32+YqtGOloH3sqcTKzB
tKyHidd16KhDsdJf1anFnZqynlsCiRCn3XNvjnnulbmksZRM5rwRB+yXHteg
mRnfF98IOtYHnY01ecEAA4NjnSG+JAjPNJ6eH5hFCeMNvelnazDmXK1JeUgN
Hg5/b53MfI7eyDjBF0THwm2SZ48lMHk52q36u3wWU2RiOAoIs2hu8eYGRxAR
akSpYddwFu/YKYUJ+tOx/6nhd6cxBsxb93T1M+9V56aDo0ICHTWezR4wLmLq
Jcfyxu9+JBDI7fYIciDB9GEZPZ0/RPDAy+oBJdV4sP+pExszh8t9+/N7rzUd
q6k/i2nqdPxibUZ6uq0Os4flhZWY+zN9kqch1ZWOuhdPECeY8wx01oB4Tw3u
KhIJGvxeiwaVpEa+FXbCmMK5bxmFROhLU906XDeLM5s9l6/GzaKSp9qyxSg7
geB73IDBT4Ibi7/KWph47L51THW5mwGSDz6+pDP5X33qXNKnJDoeX2so158h
wmz9afK2m3SMe7HcJmzC5GGyb8gTw1rckpTYnTA4Dy5WAYkdAzVIq80z/UAj
guouA8szpQzwmN/JYTo3D9WU+fSnqXRcF11TKxhWi3SviZ/s0URg19Y2WjJj
wEc5g6nkSyS4a1l9vIbJy53aR7NITFyzLdvKApvmYYJSPReeXYPyXbL/1EqY
PdSQ7a5Y2iwaqfpO/Mfk4SVdo5fbrBngkOjpPmZKxx1aG6Ru7mEhCOoIPFaO
rUEHqSKVli8MuLx3SVtDrwbNywJdEpj6cDh2m209E89tO/dFeNYycUqkk9YK
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
vuKQR4LPH17Pa5ifpumYHUdxXvUqvKQv/s2Gow9/a7J0SPC8IfpcDnUtUylq
lEWdFeQIBTPMlapwuYvFU/T/h5M1X60p1FBJZ/lCvFeoRD8b7UVeh5uqpcxi
nvaej71k1Yxz97woO/EtcmbmyVg96i8soLXQMQl9+bx/u+c0GyS+nziwGuds
KVtcBS6Q0FLVsEAR9z0kvTXRAvcFrbidf05SqA//zqgQqWxw9aAurcbvBUUL
PmgjXw5wmq4PIBccH7bNrELOeitVxpQmYO7Ply2MUULdf/3etAT1fsJe9NYD
+VOUsOTb9HkKdcua3lO6z9DnWac3Xr+JOeCX36KK970mbf+YVeijOlu+waWX
SBjXk1CrRg7QLs4Eq6LeziYO0VtR51zr6e+cF/j59NoJMeRg3Vij9gacuwpl
O2REUJd9OXpr2tBHy0J3G9/HddVocEscfcZ5I7+hNYwNLVt/aiXh/YkZP15Y
jPnQN4j4koicOF8Sz0tHnujFKewdQ5+8kF7+6hVyw8RMU3goEu8hgr2l/837
Wefykw6i6M/Cdbw9mO9d5ktq9fCe2rNOf+ocrk97suPBrm3D8F5YqH6udwiW
vG/jQu0gcf+sUsHupkFifs2mk4ILh+Gn71qf+t9DILY0xcRSYRic745+zC8d
JAom5YPO9A0Se5eN/27/NUhMSeVYmGoMw9p3Dwzt1g9DZ0SUaSJ3CJQmnl/Z
ozYMSq/KOm4KcYm5hFaRI4WDxIVvu6uD5geJj+3Ni490DRKaGml72Bu5xLPL
T12KWwaJpvGIhPY9XOJRyEczKXkuMXa5xf8+OUj4CV1feG8dl+B5J+ijqMUl
NB4vzhBZwiUKg/lJxe4hqDj/7MZtgWHQ0qQeEBsdgsgTh+K2NQ8SIQpuxobr
uQT7oZHQDfYg8YRxj0dOHOs6c+U5fXiQ2Jjt7cBLDBLf16+aVVUahi562In0
zcPQe+cFz+lxrO/OH6vmTcOw3pWcPY7PN3zfJuE7OAQvwwd4qbLDoCHe7j1u
xiWeWjEuR3UMEu8vtDtWzg4SfCffXK8aHoKqnrSK0yLD8GvO+v6excOg36RY
zT83BINPdUavSeJ+yTFl1lNDICG3J1J7BZf4njl3aeVqLtEptSb/AR+XWFiY
XdgmMQwyY7tSLfD8ThEbGaozuG5Hyp46wWGo+j7S7jwwBJsDWCk1uE++9MJA
8aEhELyrLuj8bpCwPay384cal9gpuEJdW2gYvgyveaaG+ug5BmYY8XAJHY+l
ukc3DENzx4uhix8GiQ6pLRLJFC6h9jc98jb65N3bfW2HUN+Tt3V+pk0PEgMv
q1m3dgzDiqHjV+J2c4k0MxmpqiX43LPYxXHmXOL5D2OZY1g/3ejyPz+eYeg3
u/Tl7dQgEXtVQYy1jUvIHP6ZabZ1GGBNbd7aP0MwMnL2RBP6IDrOUJ+PF+tj
p7Lap4dgVlhK3wX9NvPplOTf7cOwwPSqdGT7IMF+7FDihfqvuJrhUMc/DDM2
CX87C/D7OAGdJdgn77rGFwSeq+3lubwo3IePyRqWRX08SjQ+beodJJol77Q2
r8L1/goELds4DEmarZXn8HNAb5vLatRNafCI/qn5IfBcA4qF6lwinkdCUPvf
EGT8uZH4/Qf6KeRjfvwq1MkgrKlAkEucDSgym58cgr3XlyWr4PnL/8RGyO7g
En5Gwm7+6GuFNKGrp/Gn37PT48YjgwQvvXQdq3qQkC7zd3FFv7gTJ1YMy3AJ
5TqNeV30B0VsecZt1WHIuC3vGI37Vf2KtDXAPrqGT6Y0HOQS3qn/1p9DfYM0
8sUPCGPufE4XzuG+VX5V/3ykuIRtc531SWUu0WqXt+/l6mGIULc/LL18GF4v
5gSPoa/X7vismqnEJfKLnrfHYJ+3XfLNc93AJb5qZwVPo68vyXN+5+/kEjc7
BBsOY1+GVzq7uqwbhntbUpJ/lAwS4YtPnU77PkisuHfG+N9yLhGwt95kodww
JLQU/HvZNwSN1eeWSmO+JlcemZQX5RJF6jYZt+oHiW2Vtepz+HsDAdcCT/R9
llxCfgDmo+ei3haFtcMwIjqSScfzi5uHml/5N0gcDRi4kjQ2BBGb5V12Y84m
cgJP2mOfF7QofBBCzsyaPmgcwBzUyZQ/kHk/SFzUIxfGaaAff4xEfMU8pO7u
57XfwiVeGBqWsVGn3SVvj7/C9VzPFW+8hM+LBjaxDuJ6z+//qpTG/j28V/ds
J/LD5u3U8vsqyBVj2Sta6sPw5P2RNBL5aGfqtfcf6sCqcCh5hX2pvDQgWof9
c77MI2M6NEjY+H+fnMdzQkb9hwbk2+MCsS5A/zzWMGyfQb3tvmXfrcZ6qQle
AvdRN++Yy1GtyKlkm7V5YZiD9n18w4Z/h+B+7P6w6/j+Aw/fO/HYBzcel8uf
8ftzRTds2pF3v5prRaNmBomFk8Nrf4kNg8JznlQn1iDxoetS0i/kcu/HyP38
yAXtRSz+8Z4hcJ961UTBfpn/2aXrIMslZqcMd5Qgfw4PChTFo57Bn6TXBdAG
CZ3mm43KmB9nHR2DYsyLWU6Sr50Jl7hz1+5gLe5f39BmpLdiGF4sv/q4bB+X
0FqtvPw59jFyRxzjIurJufr14ET5IPG3JfZkKPLB/XLrBoYi+ras8Ykv+rJv
lMdNtgKf/+uzIQR/0ofiA76iHx/rrw0KsOQSjQU7f0Yc5hIqk383m2B/dmqU
2U/yc4nevLm96sjnxK1c712NyFd1IZ6Nmlyie/GnKTv03f6Std7BWBfHoy/s
GvZjgVeXnA/2U1iWPFU0ivxLXiEuhBwL9yr+LXyES3h9T7q5FPX+cr9F6lPl
ILHbTmbbHPb7PfnH8i+eP/bY2RkGcuKy4tFVgjj/HtO7fS+jDq7WWQbdlGGI
KaqNUlXkEgP15rIuosNQGOZ4cD3mVeln92wT8nn37w9LF+B5ezUPVNvLcQn7
IpbYOfR5/lDHC330T1931SUD9OXaAbu4n3jedK0FamLSXILzt6q9E/dRux17
+yDWXatFaR3D/M6OkblrkYvSH5PGHuM86rHzUJXA8zvqcZwmkPdtz764PT7A
JVK2ZL+sHh+C78+cy2cwn6G8xyaSBLjEZaFY93z8vrjxSGQi6uUkfoFvBv39
U4M3InwZl1iVfZq/Bn0uW0/NlMK+XSs+bLECefvkskjZju5BYmV1c0mWIZeY
PyS9ho31r7XoGhxawyWSmlmV0chjzSPvCCu+YXgpaHXxC+Yp/NS1Rx+xT/M+
XXtWI69kT96eXLVoGJ4ue122qxXvGaqRNssxN6FNgUX/cVRip0dqHM7dFGF9
PhtJnFNlKYOxyLfG+25yUThXZHMPkOJSyIWHPvk+KsPwqDzd0rR4kJBUrRez
4AwSv2xzXsSI4Lw6EXU1EeeFslBHoMGyYfhh8X7OA/NwXO3KSnMjLlFH2jcP
4X3gLz+VYoLc7VEb3bpgMZf4Fz0ovRXzXXGysOwfcth7YmS4Gvum8prWsxfP
qzg1Uyo1MgRxDuNOd7HOoNFnA8FYz+eWHwlDmJvTOQl1BzHX7ygjVgp4Tzr1
rUTvJPLgfsVyyx5TLnH65MmcxdiXpQ8su9fj/H2klasp2D8EN+8s872B96e8
p0U332OeHjlHKxej31YnlTlMKw+DlFrigrU92N8l799UYl5vUIfHj6KOom82
cO0HBgmtkU9dwV9RZ3t9OgXva9bJ/7ivUa9cc1nOMqyv4OvuQ8ncQeIl61bW
zc5Bwoj3uvyBo1xi06sP27U+DxKfIjnvjuF5BbfeLfu+nUtsWCAf8R7naL2v
efY85n3b0nrxp1jHhtlUj2rUr+rtT/MY9LfP7cp3at/wuc3VfFcw39NxSVEW
yB83KT1fQez7iBPLKwP3vV2rUgKYg8DpbyGumLe1mhdnV+I8zhl9rX8Dfagn
7Wr9fSnOu4gHhneRy1lx5zavHRwk1oweJEqRV959w24n8P4neK6V7x3O+dRJ
vq3CqKP1k7qGH1dTQcmv4uOQdgbosX9TDBwyISro+mvh78lglV+kedcmB4RK
ZvesTkyBRYe33U/ISwZG5dF/fcdzQcfHWnwkNRvsV0/uj7RPAx67TljGnwsv
TH79XXgqFy68dvzaYZcFDbKLOs7eSAO97B2VMzWp8J24yrdseTp41n3uaFBM
h2aKR8SbhBRgbcn6dko4HTRKhb0fnc+G3Nz713uupcLPtnHVxc9zwNmx5Br9
dyr8Kzlgb6CYCpeD+1OzpHPB4G2u18MvGRCr8XGFqmIODG9UUQrZngufFHrE
tnAyQWddo9S3t1kw+iPygTs7DaLi106fvp0O1LG21hnbVGBKvrzI7csB3g2B
5heGU8E+8xGvxaJUmFxrv7xnLhviVBxTiTeZ0KcjHxEqlwFOAzVyueVpEPp8
6gbzVTq8zPKsPumfBtqahmc5VrngHfgvcc23FBgrdc6SPpQG5aE8ti9VssHm
ds77YyKZ8OFpiOpN9xR4NJ4u8uhOOqwYdL/SkpQFFw4PUf3Y2bClcr9H7edM
GHl4/eRvWgZY0MRvCwdmwgVGmWvI4SwQPK94YfxbMgyEF11TwPcfeyrZnFqT
A4MN/SXl2pnwZPDLrtQrGWCTxyu1428q1JwkrrHUUyBYK0o+RCITTE8JhPeb
pMNnecdfBny5IN2c9PqlbS7YD0rk++3PhXze5QVdF1Pg21Zjpt+xHHA97PLn
qlcqSKrEiNg6ZkPS9OVBMjALlF1/t9UvzQWbnUtvWjBTYY+I5eKfU6gjMGwO
m2dA15KP473iWXB/JHz1X4NsGN1wafrltlxYm/DMO29HNtTKWs03bEmF0TC/
Et+wFDCxNVvkLZMGRm94wzKu5IDHUapj97904AfxgXc6uTC9+FkSwyUHtvVQ
HEtFU0Gm1DTkUUQGtCzJvVvzLB0aS29edQ/IAkqGCU/hlTT4LrfRO+R2JrS8
CCy7vSsXsnW2RqbGZsCGw0vKvlalwD5aUuLa+RR4I9Fr8GwZ+jRFdsQyOBvY
rT2yX+YzwMjr5xWT7BxYmTz0g5mWDlpGit+C8jJhKPDYUenOTChKu+vFoaXC
XJX80m9O2XB53b9Czw7UTazj6cmTmcA7WHpL2ycFwj0prnd5UiCmtLrrj3QO
jJ1ROTIqlgpDIrPy/llZ8DHBP9gqIhNGCxcnWkpnwYoQeT+pw7lgsffI1Uzs
3z/3WsMu3VxQcXrLf9g5Ayo9VvGXhafDUzFzOf7DmUAtP35h990MyLJ4XLhu
fwbAv7wLvaXZsCLn4HKGUgaINg3lh3enwr0fjR9cErPB/9uJxVeP5gL/wk1H
d4pngOD7r0r+x7Mh+tuvoTNNKSB0MqHp7NpcKL+0NkRuWTZkVnRdOOaZBULv
YidfKWbAhYHFX464pcGidsnPhbopIOhbzp7WyIKzkxm67TMZENfVkfvqRgYY
DsTM39XPAO10Icfni3PBykLHugr7OmoutU5ycQok0s/nC2nlQkG2nvPavRlQ
v6ZJrj0xGR5mznlYZmbCa1gZU9yfBfobdlT8QJ58pZsrrd2cBufi3ztYu+ZA
+ynuxp796cCZ4/umgxwKOqR9v2M8HfoYausWSaWC2dlX9vvzsoETbbzi4e0M
ECmqv1hPTYM9r+YuxD3JAYP9bTXNozlgEe/u7RKSBZebNZTPP8iCn9HNn86j
3xrlhGds6Smgn27+9VZYNnycCJ8WkEuBd9W03XFEJsj/25TtdiQd7EVVTy+P
zoG52Nx6x55MuGNIUagpywDZZGLd/GQyLLokELUsJh1+vBVwVfiXBZwQCa+p
FWkgyUoMb3mTBQuLg8IUvybDyJQvX51xGmgEnMmuZGXDCaWKedtD6TCbxKNq
no58KZzyVwrOgvyuwoqEnlR4eLGjdNFEFqQ05xUOBqeDXIHoRR71DIhyHpsv
Ry5uZxVFrkZO81fv83P7kQUhXZM0ypNkeFTxzn7sYiq8fXfuZD7m+eKgsFau
ZArQa/9erplOAXWLxOrkyhxoeD6bvG4sB7wLjoS1LMwFDcnJu0Lvc+Cav+la
QF7/PnPZ+2VcOhwMXdV6xSQX0pPyGi/4pELXeL3+4c8pIM9zKOv26zQ4MZHw
U3EyG7ylhpg8Cjmwf4qIb03NAcGmJdNq2SlQ2mj7i3EgBaxX21pv3JUNMkv8
k6xb0sBzrXWA6+8cuMG5pV4plwVUZmz64885UGR3PCdcOxsE/aOsFDPwXKsC
c6k1OeDQMRzT2pgFib9DLLoX5MJFNz6DAqNs4D8/oaJTmQEJ35qND3zPgKu/
FC+yR7PgqbCVn0hVJixMOrHc71QqiM1Z/VDekQvjEwZ5kaj3Otu3mxj66SD5
d+/PHI0MmDmxTw9+pcDzWCK6KyUdghpX38q7mQYbInONtyumgL/eawmR1GQo
TXx3gGmG9ei67ZBdj7kVKGTPo38/Mj47fUY+K/mWrzS9lwEZ90bNbUvTQPb8
G515/jT4Ry54ptWTA+7y1NhjXinAX6Nm2x2WCan2jT6M4gwgT+57FHoM5+eD
ri3GVlmQk/H1nn1ROjxadvCbhEoWiB5eEZNfmQzKly7PXqalwJ2+CYWSB6mg
xbv+4ULHFKhVUVf30UgHO33Ht17O6cA+WLLNpzUZannVyXJmJgw8OdjfcjgH
3jzzWXFnSwoo2BYGVT1Kg5+3SKfsbalg41bO/PsyA6y7Drq1lOHcopesVKjG
OX3o0KEJhQxYf4mW9vpzOphY6cpKIGeUpnZvTupKBvO2BnrYqly48njP2cOG
WdDqUlHYJZUJx/pkP6W7Z0D6Iani8hvZ4CmbktPplQUvTwc9aTmQCjurm/om
unLAXI9TunxTBvB6V970Fc6FZeoB+qHFyXDiZuKnNWsywFX45Kf111PhQ9rT
t/tsUqH7nNvt+PEcSK+QvqN7Lw2Uqvq1a/9lguGy+TW9eL/RPD81G1qVAXLs
gtF6AbwXmO20G8vNhMAvCzY34fxmilBHbTZkwqJ+cly9LhU8Vc+PSO/PAXuX
CuH7OFeOha2XODSfA62JHFjOyICAT9WNUjXp8MzojH6+YC74BbduUsE5qK/2
zsXRMBcWjP2lHy1Jh1H9uCfdermwZtuyR2cYWVAI/Y2RyEFKssueS+45sG7V
TqdELvrK6DNPIpEMQ+Vnu5O8MsCkIjnT4S3OjznTUPWZHDDZp6rX6JcKifwp
Oduj8V4SvSBvXAxzeCt4Y+aPFFi/v1MrQz4VTFYuzmlAncuLoUW/OQUemlXu
bpPIhUvcy6lZT/F8Hv3jA4eygfv75sl2vBfY0KIfhUemw9CC1M7jSRnweefR
Y1SLHFgSrzer9y4VfpRe6XjSi5w9HvQsAOd2+yHDxc9UckHUtOTDz2epoKEy
W3J3PBuGFf82p27KhGu+A+JT9GQQjLj/Y/RBDmxqq6CZI++MVm3RWBqgST12
py0g+3o2WP22lFX6kgPNFVrLDchUOPYuK1y+OxO6D76N0ovPAWEljYzdmEtq
m0W19lwWaEk+NuNCDmifFfI7mEMHMVqhztoABvLgU+uF1XRobRXZE9NKA4aU
g/2VJjrU8b3zbZdjQDzPZY7oLjp8e5fAJ+pDg4KKHfFjzXRw/jPOqvpIB4jn
i++upUHsn9rtawtpcN3FX8WORgMv8adPq6vp8Oj84/CuGwyo56z1X25IhyV9
Nfc2jOB+Pz6b/+JhwPh6qYrRxXRYZvvww20XBnxc3+F7vZ0O3t5zO8Ua6TBv
HuilGsyAD1T/oFcmDEicTxM+nsUAeeNjOyeC8LPUCbpJCx0iE3Xz6XfoILfz
wRvFHwxYe0atjmNPh7dq668X4XkPZG06fTOXAXM9fg9tsujQ7TbkVvWLBnrf
lRc9y2RAdmZOxb4JGkhonmCsYtFhv4bIId4mGqgabw8UWs2ApyGhT3504/m3
xzEhnwExFzgU5xk6lFy/4eH+mgEUl60iH3fQIX3GWa/bkAH+yaL/3n+gw/vo
IOvGflnqKYFZFXleOlg5x5cxSBrI2T2u+XaBAZqT5lNWZXToaLp+8MEMDV4O
hlwj5mgQ+Nfv9OZwOlxdsHS7wSj2U7HmmtIqOgTWfhMWE2CAosG4fy2TDs11
MY5Tdgww5D2snTNIg9ejTV2rEmngsFXEP7WHDtzgy0Y7ohnwqD/17nLUuXzF
s/jVbXRIFMsWkFvHAM/oY65dsTQ4OiGq+dGRDtEG1LLXSbj+vvaexbfpsH21
Eq1HjA7nWoTzc3+gzq/WBYfEMEAj1CUn9AADhpQnHb5jv+wuKMl+KMc6W4RV
ebCPTsXf9fVM6RD64dSQxhTuH8kjEybGgPfCB2bhHwPY1dMPZSJp0BUlefbK
AzqsjE1kWDvRQW+yZouKGwPUxR/c0+CjQ9xvf94K3Hdd7Y/GHX8Y8Cm5t+jK
Pnz+fLLpA9zPscpGcF0fHUxS1VsF39PgmqTLhcBpBiRLWmgQHnRgvG4cPvCU
Bn4cJwluBA3OXKy1NUCf2qUtPRvOZEAst9nk4ns6LMqd7LBopMFX1aEzFq10
aD8j75NcTofihdvXGz2lQ1XOba8NyxhQoBCnE6RCB3Jj8zh/NvpK38aP3ilL
NUrLknmjwIB1aqHnrygzQGhFSGnZNfRHzKv15/G83b1tjGkh7O/vCvsLCXRY
HhAvs1kV/Z6QtqMfz9tncFaiuIIG8em7r72XYsCeYj5HjwEGLDK9qynuTYPy
hpL5wCI67JHvPnGznwb0xzKCgdF08O+aGW5PZwAPLyPsXzkDaNoDmwyi8D2T
R23nsC7rX9ct83zpkPt85+wF9Dvp/I6ayseAsi3dCeYGDDhdEfx6GX8lFO1R
znlRwoCjcr1C733ocPCFRuGZ03TY1Lpj9I8I+oAR+SuigAY7t68U4EUOWD4c
9D0ogP2tPtd8r5MGOxTlLl9ai1zx2HfiZzgDZu0zTjhX0yD5pXkB15gB99p1
RLSaGCCZFel5wIUOjuc/Hjfn0kDnkCz7zSI6pN7IW7DMgg6CE08mlNNpkPSg
9Mdh5I+KqXOmCxf1uOCXz+2Tpd7rPkv/Gk2DhimLN4zPuO7zxOpdeO7VK9RW
LfpNh5Mfo/f/6pGlLqIKlDzCvHqLcoXJMRrwtS58ZjbEgAraEXbAVjqM+Hkv
jmczYNdvo+qYTgb8TbBz48wxwODx9rCzSxggnpFyIqAH+yx9e/In9v34iE5Q
/YJKUPj3Pip0SJaadsQiie8S+mLVfOT5afSTqGeGoD4dyvav1OB/TAP/s7cE
Lh+hQ8/NysjWXDqIuO9RC6ijwZPD52+GxzGgqlo8MvcrA67xXgp8gb4gLX/I
u8Sgnh3WbqpDNGjq3L1nlocOt9q7G1UHZKkziYod3joM2DGx7WuWGQPCsl5q
uN5ngG0r/62PyOfcK14Ho7QZwHrUzFd9lwanZV4m6Hoh/xwFzspjDvVP5cnG
LcDc5snFrvpJA05EY/DdNuTFznQ+yyA6JGVcWb5Emg5nopc12pfSQbYjbfUp
Ng2+7Fa41XKADpXq+sF9yCObb8/C+pwYIJB+4qo19jO2chGNehF9ubf+yIsl
yNW0jpLxm3Swtf25Yx75+f2DzR/hl3SQVlMWj8miwZZ122z1HjPglYZW3SDm
74g0zfUzPx0+mG/MckRdfMIYqorI96Dmq0ejzjKgRGrgQF0oDW7MZv4cRv6H
7v4T/o+gQ2fA0uygLQw4tTu2QPEvzqHBIJfnyN8N29YfUU6mAXvv5qiahzSo
iFy68EEaHbauvx4sg5z0pPUU7b2MvBWUVu62pIOMyXFf92c0yDLQfuf/FnXe
VJbMsGSAudncu0r83qWqSKMGuZL9bVCHzKYBreXMgEoRDZzTC170o08735yM
TEqmw5if6mOrpXSYiF4tZkuphJHjFwvUsc8y62Ifnqcj12rfOSjhHOInwa3I
gQFXbGUdeVHvr+HLez7geajS59wV43HuFudOHy9lAP8LT7H/ct2r+rXxDPK/
WOnA14wVyIUqxbv9XAYszdtno4u+GyhUibbE+RO106ijk7cSDJ8GWqkivzsW
2yzbOk2HF5b/fh9sYUBSbZ5SySE63F6aNDbDpIGV0o8zgx10eGxX0/UI58+n
UN3E0jDMu4FcmT6et9Y3v+MbcnOZYZdDVAfmppOfPxr7J5thrNHQyAAtT1vz
ByoMMDrsNXv9HR08VEfb761hwBcW6/SWW7j/krwdaoV0+PlbaNNyTZzfQ18j
/v/3Jb+8lXERZcCNr3VbMl+jLu+t7FNYDGhavS4o24YBXt97X1p4471k+myp
D+Z2JU+ZlUYnHYROmGfGvcC5WGFdaoh6cr8KT8wJMqDmrfTK+F0M0G8nc9Nw
/5VJa8c3NjPgpE133/gIDUwuCNk4IV8er32Q4o3rtPAz/1giT8KVaQsouL8C
n0CZxn///x/xvbOu6C/mkfasYczDG+GS2JwhnJe73Ey0jJALT6T3LMD1croU
F2QOylKlWmrpGSU08B1JbgvC+aSZG1dB/0KHADN2xocSnK8+1xWLMe+3Mt6f
TcX5lxxuSaQdY8DkuweeJQ3Ih7cC9v/9/dBTIjGPuZhD+1e+CsJRdNhc5x63
NBb1+PM88PNCBrwUluqsZ6DfWrvcf75Cv0n+Mc4cwOeD/TbTcI5948lnJ+Pc
DHx4NeYO5tbwHS11ez72vXB98Tb0FyVi7HI8zkO/ItE5J5wnl0+Mh2/DHEbf
l3Hrxbl7YT6iRhL9+WrqQn5+KvLBYHrTTg6eq9dszOsj7ruJtvD4PRosbxNt
ELxHh7ZB1bDBrzRIXMX4pLOBDjvCM7TGcV6V+xQe24fzfOuHowOh6P9zhmMW
HXgvdDnbOKaNXDh2du8/z1w89+iBVCG8P2UVTF9vQp4YHSmxeoIcW9MQEmfI
UwlPk8feFM7SwIz+2lkQ7xXKs6VNf79hX59fN2b+oEOQTEeKS4MIdXN4kVb7
JBPqeecO0aVYMCOhyVr6hgWKHquehgUwwdV0587LBAvemV29qtEoQp05oOea
XsqCrN9bi0xMWZAZdkLley0TZo6KK4UFsuDItM29CEkWxORHZfJ+YMK1xKCD
yQNMeLh52xxXmwU1GTnBV+ksCD+jN/1UnAX2N6Icqh+wcF6nzLzczQJePoVd
pjVMuBDx4RLbiAU7FX5sghwW3HJ8M3Henwlict3KvwxY0BvQeUOyiAVn7auv
KRYwYXXPdIgwnmPIXpf3jRALDhcWHCz1ZYLVp202i5eyIEe9Tf4k7rMuZbfI
zBQT3tc/GjPuEKF2BHR3h8awwNdk1GuNJQtGHh97uBvXCbJ2WFpAMKGsMHkX
cyELPrIvlAoymJDNeF7LSGLCE3N7hdfFLEixWOlrUs4C8ZwIAZOHTGjb6Gd8
L4qFc7lM8iwfCz58WGD/uI8J92/4uE7i+eOS55+/l2aBVGuc2+kWESojqDM2
Khp/73H1a447CwKn/zreSGWBn9U37VSsN+WT+J6ycCZs7s0qyM1kwcMzDW+q
0lhw6Khmf7cqC75IqooKBTKhyXBvh8hXJhh4fc9/shn3Xx/2hoH/mJTMs78r
5oF9730dFH2JBd6zg8TOMrx67w3X/F7IhJMRZQYp6bj/n/R7F/6KUI+Q2j5x
VBZ0n8jf+HsxC2T/VAvZRaAeiqoKb9JZELXS8O6oCQt+ioY+NlrBguWCJbxB
xUxYEeyafziEBWIntFxMtrFAyK/UtJjLhBP3Pmek+7KAZS49cOYHE/qOb/1g
GsyE647fap8/Z8HsJoP05ctZUD7n3M35xYTkWtfPTgdYQIp0Xrj4ggVmoTck
DPH3NzR1mrPLcF0m3wFP7J/EZwOnT6noB9P8slTU4XtnotPZCSaMZNcu8rvN
ArUX/9buwbpvPBTLfOLHBK31d/hX3GWCR9JwjOJpFv677uzcHV0WzKf4H1Jt
FaFOlHuO3HRkwRpm76ebK1kQmaQ5GR/FBAVrdvIBPM8nBaXxcPSTYlyRyxTW
4e4eQzTgOjtKQxb7HWSB8jO+fU6PWTARdGnDgYvoJ2blBU4crnf5Bk8qlQn0
trkvp9CXf0vl+//uZUGrZKkuoG+dW89I3RZkQVHfhy2Ziizw5I5ISOH3ZMGJ
8/xfmKAuuJy7Rx39pUlLY3YywSekWUyDyYTMAv6QrmEmBO507klqF6Fe9OYn
duBzgYOjc0/Rv1mxfvxl2D/Nx3s0zsfj90Ljg3LHWGCw2D1PRZ4Fk/sOb/De
gzmVbF39APPcIVjzfT32L6BLLWA19kV76GqdD/pZuNqsdxH6RVHLtKE0iwXy
y7UPXXDDfhhP3j+NfWXseqZCC2fBLoPk54xWJshtTO1QwhwNelFv2rNEqKf6
1mRZhaLuF3OCRrBfvDGmj7+GsuBlmtpsLD5n6bezJ2NMhPpjr6Hjz2om8Hm/
fbtgUIQ6XH3gR78NC5zVRWlxR1mwXUcKxm+y4LqKpos+1mG88Pbee7iv7Lla
jcPImcBTrXruyJmzpqdvVT9jwruMlHhhMxYs/Xgn6OsGPPfnCHkTGRY0ZmtX
9FUyYY2imSxfLtZ/RTSyHM8n35ixbC/6OqFMxEfpHRM2jQ00yu5kQXRIdK8r
9mGRtrqFAvLthMbdBbao37W3EwU7n7BgfeuZOSsnzFVhjeiDt0y4OqfzWeIQ
C/JTlf220Jjg/fOt3030P+3gr/agISbsO9mzzdqCBVenIiRoVaiTT897Jub0
sM9uvaIZJoQMSm+aRz5yb+x035vBhP7FRrLU/SzoWiF6vLgXeaaWXh6SwoLO
47f3GJUyYequ0uzrDOwr/0XtG1fwuevF/Yw3TKh+MkLT7hWhlnNczKUnRKjO
dJGjnCERqo0uQ6YSfRH7RltZ6RY+n0IXTljEAp/WDBX38yxY+HkVJfclC4KU
NS+N/GFCaf3iXT4aLAjzfz9ui30q6SeDDH+KUN1N1LIkE5CT0XYq0phHduRG
NdGvItRbXiXlHPy+fYleIwt5bhw7HvN1H/J37p+j/30WnFp05EAS6ue9ONve
AM+pI/Npo5QWC+rF9FqykfOUXbmhl9BHbQuLVY3D0E+22/xpW1DH5NalrPfI
rTd9HYnonzaHk3ej6Ex4M5NL2YLntXt+eIExctzyl0RRK/JieNJIg478+p0+
3NaMPPjiLTN7A3k5eq/vGofDhGe3b7WuXo98Xtg5JoZz5WmP9G995Nm7lqsb
e7FvahYbT0hXoN4c72dtcUyYbKJxjPA5309+Q7rIW/251jebkW86lu0a4z0i
1AHj7r2/Udd1MSJ61jQWEGHG7oGoR3rRpsVimLuizJbwXn/sa4++1cGPTJhY
2PiF9xn6+ZVqrAfWdazbm34VfTpziHVaDeeiiEhEM4n5P/lEd0cxzp2u31uW
FO1ggW69lL9eLPrKY5/xasz1iZmr5Z9R16yZlCYuzuvy9luaDsMi1P25ISuv
4/5M22t5/TiPNBzlmvlwnnh6tEeucmYBf3+weDObCbu3B7B7HyHPal03Zumg
T6kqA4uRU+zKttnKaBY4eYdGR2GOrlsfvlX/iQmPK7M/tGqyoMdHMLsPc7L9
+Y1ACs6dPR2hRxmFLGBk7jhP4HrEK6ljfPj8oeWCfu3o27uUmYi36NtasTRl
e+S/lEXT0a0hTPj0q3/l9SdMWFVceeYi1m/MMj/nfQH76Htyi85D5Iryx72T
CfjT4y7fW3zuVO11Zz/sy/Gzb+pNMFfta6SO8ruwII2wP/IIfetr/OxlCZ5r
Z862vMrtLFA4uVI0CTm+OrflxIAy+n126xt2OxNO3zzoNXMc+QdvGeL9TDgs
5jPL58mCZxYidc2oe1vFB9V7Z3DeFRbsjsO8vNoAScuasO8fjsp8CkIuSPy6
06eCfZr0r1qFfKI1qDsl/WPCygUmJz/6MMGdLrjFAX9v+DS+ZRQ5J+3hOl09
IkJlfY+rPoH6e376KTVmj5zd+qzsMPqfP6D/4Wgbvre3wYh/ngk2dSu62ejP
9VplQ7k4lwIDy4I24hzqjNTeYIXnFY6oMlNYgPNX3a06Grl0+wX5pAL5JtZj
JsXnwIIz+2U3S6DObfWj23zRT1IFF3K/8CK3/XRO16BOtUdXKAVfw/O5vThR
/ZwJr+0b9pcgb4dnTveUo884GpaHLiNXXI+IutSiDkN/Yn1jcJ79kGgRHBrH
uSTNc1ge5+Rzg+/EA9S/gHP/dC/eA1VLR6n3jrDg5h5pt4azLNictUVYLJIF
qUIRJEwzISqCGX4a59u5ANvZcsxl6q/q3blpTOjwKZ9+Vc6EbfuPhHsgTyrl
FX4nNYtQvetZ89txXp12uLnAGf2RNbr99SEWEzb+k3I2Fu8krprbuOURU9BJ
raLbpHOI7ef2+wsNcAhXTaMLP75PwWuupVok7zSElWl4lKRwCAqfpKJbHYc4
bUXfs9CbQ1AHDVM7BToJ/6OGYl9mpuCx6Ysjvc1TcDG3Wc2RziEEbMcGlHqm
YLORo8eCdxwitLRkWi6BQxy9unNhQBWH2P9lTIA5wiF6PpZvqnrCIZZFb5F1
8eMQPPaGEmU1HMLbdn88cZtD/PJ3WLK7l0Pwq4V6HhLsJGZ2Vwd7z2O9AZVe
vq0c4oPJmNKl0Sk4ePSv0jLcP/yD9B2L+imQUe0QmnfjENO7x9umf3OI4/4s
gctYb6Dqy/zxEg5RqNY5M4z7ZsvtOHMqg0Pc5b9qpEWdgi9yH9h1rzlEwWuZ
zzfw+/2VFmLXhabh8vAv0/IxDqH+ufFjGWsKDAonDtuITIObhbp57xCHMKuP
q70ZzCEW0e+m60t2En6fchh/fDlEwJVvXyvx+8/Xd9/Ja5iC8jz+K0+ec4g1
Ga4vmdj/U9oHliz6wiGeT790H3/BIZhnBh7dfsshdnRUZlQlcohYUasM+bop
SLDPXEG7ziEuacD8l69TcDZqnlv7gEM80SnszcW64VlrlBlzCiiaFTZ/33MI
rziT45YTHOLTPkWDM385hP5G2TnV3ilwmDRNXIj1d5a+mDIo5RDJrkUBDz9x
iApy2Xcz7PPnv2Vjv15xiKdxSe8fLZiGPp3qMnUah7hf2ZhRVs0hlF6bnXkx
yCHm5HKXlhWiDqwylVQ8p3oh+f5UGIfIn+0zSM/B/dsn//jzT0PZRZul/vh5
l8lgUX4Phzj7VGpBQgGHaLp2ZH/NT/QHc8kRcfSXWm3pktNY9x7ZJYIc9JP9
m5WR57EvN7fBWf0kfP+P/5gY6n6gwHMrdKBv9koeJfqngGn0WFcE+3WCfdNr
Oepvc8Z+ahr7rUzzdD81NgWVE88aCp9yCBlTZ7stYp0EjyEzbrxzCpoY35s2
C6N/F+Y2u2Odpkt76RN/OMTDRLG0sj/oA++C2YWoN9usw3TnLw6xV0pUfD/6
94qaQbNlI9a1O8/2GpdDiN99kjCK66wOvndxw0MOkbgy+AOMo36un3vevESf
Par50C/USZxq39K+Jhr7vNytQhn9Nz97K9gB+6kj7JV+AvtpN99/nefzFBSP
bik3GEJfPFDYTUEfahdrTX3gYh43ulAscP+ZpTtiJGqmYORq378JXI8/Lzfi
Ri7q8EjYeAX2UUpGOmVfOPqXzZOo9oxD/OHd+SZ8cgoy5eaNf3ZyiAF/A912
/P2T/cdqxEc5RAu92UrgJ9bD+1dZd3YK9B2Uvyu34/vUQ6YXK6dgvtXFZzF+
z5v7aJ8yXyfxSN2jRQT3WeTZIrjnG4dI4GQu+s03DXMBPAdMMPfBuhHpTzG3
zU6yPUuXdBLb+D0kp9HXT1Q6t9KapkBM/uqb/oopsBIed/pA5RD3Vurf3/Z3
CpQrTpwxx/cVN5KaZfh+uW3vhZWowz2vuSzfDxyi5GbosXkmh4hewjpssHga
hKrne/P/cYjdm4LNzqCvJGr4Zm9KdBLn9l5RK0WO+SsoOdSh73Mu0c6tRL0q
iiaB79sUlJkmMq5g319tB9fvHVPwbvmCd3uwH2NCvI4XKdPQZCB2PAD54ypn
sNOpdQrGRyws1Gc4BF8Zv1w/+uZQnJNHeD+H2Df+PVQedT1bJlNw9Rb2K2xJ
hiDyrJLcF36Nv5M4r/Tgfh/6abEiPaqsiEMIr/m+hMjmEIPXGzR5p9GXX646
Pa3gEIG+X3MV0X+/eGGPAuat7fqK598/Ys5VaxN00ccSIcO5zjc5BDi9WPDk
EfKgs/xMKaWTuNxkKviwbQraYvVXc2s5xO86apzSJIfoOqV0fwy5IS365F8H
8i2NOnojHvn0ff3iyehiDvFx/8WBu6jb101LXuYil62uDWdKo08L5u9nOeB6
1OnY4stsrHsZW1KsjENU+XtvkEKuCDkWrVJFPgRWmV4qRn8v/XaHUo8cy429
39g3yyH6rJzkd2C+/lJ/nfIWnIYL8Q7duVj/5hURe+kRHCKDAG9L9Blv0qfE
7fHIgeGpxbOfpsB/VVlALtb5IvdSS1UXh+gEdbunmHOPl97rPXC9yMmSN8K4
fsz++jO/F6OfvivlbcDP09Gi0Q+xb/ZjOhzG4BQ4vVVfYoy+ED1rpxswPAUx
74e9rgVxiPdpujq3kNN+L0afb8c+OWmGf3do4BDDsWevUvE886EvxG5OcYjI
jx9MM7B/j5f++8LE+WhYcVfwv3NON1tavoxE/px28to/MgXVj+9X3Cexf7pi
NQRybWzLZG2U2DQ8fSLxagvm/9JiuHoJfRkiufi1BHJ118Wfyyr6puDJt2Ov
vGjof8Mz93WGUZ+L9hOf0FfuMq92FP7X10XNkposDuFiKmUq+gPnZ8THRzJS
nUT7Zxeh6n8436o/dGojb3lNXtS6oo80bvVvqGX893enDCer0e/mjVuXrUPe
X4n9UiCL+vk3mdX3YH0S93MiRcs5RKpQWMI0ciftSMLLCMyvdYpn0m/0QZEL
Mz4QOZm363DTqa4p2OPgJMKHOVBdzl82jevIQfminV4cwtNKr3QT+tNOSu3g
6yZcR8PSOA79vk9AbGC/wDRY04w6fFqm4Gfv67uR/hziR+loRTPO3aChse5N
yG+FntKeAsyNldzKr9uRZ08OqvjoY151H+21CsTzUqp6E2yQd0JBgvu52M8t
V5T1rHBeCVBYSruwPpmY2a43mHNLc9149n3kxiVByYX4/NGj81OlODeWbdw3
+QnP97TpzEg+zlWrU6uP1oRwiIOfDkg9xnnmW+v3VhLzdrJ4S6Qk8nZVeF61
Iuq9e/NmLx5PDkGuv2CrK/UfxyMujmA/VeJ41Y7h3Pc6W2smjPOF+eLtVWWc
sz8Pvhe3ikJ91JoD6pDHN2QSj1Dw/rFJOs2r5OMU6F3idziEPh0fkVF9FMch
4pfNv9nsirx8LON87csUdFupbMmfmIIkod0j2zkc4nWeqpU38vGltFjaNvTH
DYHMKx8whxK3Kve4Y86//dg4bIx6FG/87w8lc4idSxr20vG+Nl3dvn0Vzp/p
sr9/hdAfjHibE6+wn8qfGKcncI7c2Zts+AL9myRncTUW+xZPKblwpo1DxB19
OKqF76e4tFeROEd3Uw8kiOfhPK7z5JElOMQXH+swZVyv4VKw03fkddTK/e4V
WM/fGb2au8ifKI1NnR24Tm7YihIXvF9JCm3Tvor5/ut7WmcN8vbjnMWu/Tyd
hJ3qvuAazMlbNxfFKpFOQrFvg48N9u+d9cHzUV9xv2w9mEHdNq9ZNpuKOjiL
jGlT8af4AclpjmgnwXD6+noB3veuDbp2UbEv7qW9GSRyNL0u5847ExIEH2Q2
cGxIyBZbS6ddIuFFmEvYJy0SZKfMVwsuIGF3zPr0Ozco1NMW70skJEnYKHFb
ufw+CStqb77Y5ElC7bEfKdlFbKjw8DfXjmRDnfs6EbFkEjSOjzzsrmYDpYW8
+/YKCR3yC60rFpFgeeWE1dZXJCz2Lddqa2JD5X1TL7O3bDh4qcDuyVkS3pT9
2uSSQ8K598q/e7tx3c3lgbYNJNy/uzM51IoE9xeXzW3D2CBpW4m2Z0NAWPik
kQAJB+XNjTouU6inDqmIm7iQ0FzWO+iqgPU9mLqRfpVCVR+I1/3YwYa95Mmq
7mI2xLMOO7nhvjzmXWFVIfhZ+9dAlQOun71gba8VhbrL9Zjk4wo2eGr3OfnF
kHBj/nr17U8kONQXiCuOsqFB19Z49ggJr9WCF+vh84EMfyVDPhJ66n6rXbMg
4V/Ad7sttyhUhaD+7YHCWN/s6G89fP7iuV4dBXxuX3ypQX4kCSv5TKTNsL+b
drccMkM9ynetN38eywYb9qXvsXgO+bb0+oSHJKiXheWkeVKoVRvzLcfekDCq
GpcjcJFC7W8TPsdvSwKorfT4402hus99ujjhRKF+u/1qNOYyCU76Jg+9eEg4
+XqPlelJCnXRRu/lfm4UKuetScDrExSq7hqtxQIqJLhZl++ywX6+N1xX23eK
hPwrN2M3fmWD+rsHDSWFJPR16Z9fX8mGtNGdy79cwvecHOXUQtnwWM42+SfW
nWF31FVsEvu5u6NBr4aEZwG+sLqEDRbcRY9VcJ8B63Ph77GOzSOxNUui2KD/
vHFgNo4N7tu0P87eoVB/Dfnb1WWTEGx5SPoD+pBmzB8bak9CkG/fMm9xElRK
vkWx1Ujwq5jyq8L9LUyGFCS4bGgNsToghesrfx+1ODPBBjlDywY1Wwr16YkI
vp2of2Ds/V/kf/+96r03gZ+b2RC7xPiOF+pguG+ZgkU6CQd6w6Ze6pHwdNDc
g3uWQi08NldzL4mEd8xfsvscKNT9u0XXGAWS0LWbX+dsI+oywRdzsoAEo013
nmQcJqFN10gqMYCEGI+Liyp+s+HWTlaQwE4SXrrsWxQhRcKHjK63Cnls8PMM
OOE0zIZOW4Wzkc4UqqltvHUV4LkSC18VdLFhJizv/JwyCXJa++XajlOoy4M4
j7bi/oTSOyld1GHNIJHTc4xCDZL8+OnYFhLqCLcRtSsU6t2Ra780q0nQfaSe
pov+HxNPeOCbRcK4c7WevRIJIQOZvoUkGzLMjadt80jIDXfraGH+99+B74hL
pZKQddHxiNEx1DeoKUb2Aa5j5+RPpmIOAk6s3LIV9ZCzvvr3AoWaf0VnX9g5
CjX88aB8P57TRexUm+91zKna1XeMGvRB7dfyAHyO43rwixHq8ivK5JagBAk1
5248i9pLQsSZrNg6Fua8rmuD3kUS7nxesMkV87H4fM6POxkkpMxnFzDtKNRr
qQkHUw+SoBWw6qkevu/3LZ2SdYKEHTv1ZABz/jOp/qdcChvyFzMyT6Fen+p8
BldXseF+feayV9g3w8y5X2uekVBStiq7NJcEXt3bUUzMTXeNavjQBxKGKk/+
PG2DOUh1LIqgk6DML+X52ZVCbbMcq3uNOe3SLU65hbnpa41o8cBcX//asejR
bQp1Xe6iixd9SRi4KR1rgj56WXuteb08Cb8ehzm4uWMeZ+Qy1VvYIOvP59GP
Ph23UHTnWGM+o2/8dr9GoT7oKE6YLCJhjw6z9iP6wvXJFp9EzM2pMLb/FwYb
TuqUFvYjp6g8GyvN8tlQLde/4HM8Cf5b+yqECRIunA+BY8jV4b/jFdvs/6vP
6IwG6nNUV/OH3z828EfdEtDaSAJ7+arjgchJ6/ZRxg7M8ZvdvOpCyKs20uqR
HPpcZbDYOPgFCeGmi96/Qt2v72idX5/FBo2X/q5FyPsjtbJ/JtG/V4qz6bsy
2SAaFB+wEflIszq3Qgj1/dpxxH6dKgnCUQqMUuQM2TFpKXYPfbRYbZ8o5p3h
5KB8GeeBGY/Dv4E2nAebDs9ctyQhYOdn/b2Yx/WCzg3G6JcfJSOibci3greC
zgKYt7Xxhar1G0iI7tE9/jaBDfMLqafCzEgwF99UOd3ABuuoxoj4TSRsZS9I
lEBd00oOTBV9x77N5aesl8Y+nFx3MUYGfWYybBaYzgY3m+e/fmNe5nwOd6+V
JWHVnvvsVMzNo5Dgiv1GJPxYJfN+Az5/ZqthuRLm21h79bOCMTYsOnDOqQvn
FTfb0u1BDBscdjr5luPciI47Vpdcy4ZzV5cO861FXswlnKSdp1CH5tUMbiJ/
tc6vTNycwYYg9xeNjR4U6koZW45hGAkWUwrimTdImMjT1TXAuZoWGynZi/3e
wHiu3fmDDd9ee7VtXUqCV87yYX3sS8crmwQtR+T8yqBza5Er2rdogZuH2KC9
mgeyVqJ+1tUFP0pJKJwQk1sQgpxclOYduh3761zLe+0OCVV/NeJqtMn/UXDl
4VB2UdyukIoiFBEiuywVupS9LFmKQgopIUllKbQgsi9lF9lJpSyR7iRRIs3I
lllKsjVvehUtVN/5/ppnZu577zm/81vuPI9CjTv2JdY2M1H01TCqAvhW9njW
i3TI69SEX4r/4DW84Myh97NM5LdzZ1LuWRZ6TXt+JAjy42Lt4qFcyDvFjzbr
9QBf3Z2+bSZnWOije4D0V/CTlkXPLV2nOSjRBcyj8osw74N3woeeMVFGW9y1
SfCj5VXdf9YDHlm9HldqBOB+oUom6QAfzPI+7FbRZaHBaHFhKzgvbdByrBPu
C8TRR/cOwnx6anK8tKeY6IqBnXI/4Cf9XHLqRigH5ZDDc84k0JH1PK54/pqJ
/j7xv1/ABj483cByrmKhTMHZYRrMz7f/gtwQ+EXarUfCL4HX+mu/370FepPX
bxdWgXqVo833HodzdjdqyGqfZ6HI98SyXDvIB7StRuAGEy1sc9nqWAx5N/5R
dbID8v7BinQeLw7KHMeF5Ivgq62kTasW6Gn7DaWUBhro8ndeSAXgy5/2VXoh
k4la9thv8oCcUvm8sXdkDnLmY3HiaCsTlSD7XdEXOSh5NQuGD0F3cYlcUZWQ
p4+ei5vpp0Pean+3NYB5K5Z+/xEA88355ihSusBE/Y8dXLdYgU/7WubdgLyQ
5BJkrI9iofzKH6M0Lbif9R/ssgZ+bSnoPxYGeO+f3EHflM9ClSPqturgW//y
xP08MlnIZfylfA3koYg+b8V78NlT67NHdzFB73AR3gP1Lf0wbDrlC36lrYxj
oI+wufqPdMjhPfyOZoxbLKR300c1D+pLjsjTPezJQUmdvfxRCnLgk0X16iK4
H+lzW/2JAr4lNvFu7pAGHblcvhnzBHJOSm2hfCXkpMFX4bEkuDeJPZ1w+Qzz
DsGuVuosxPNYvwbBPeB5mJcFP9zvXn8KjVCD+m4mlGanwP2Gva5k3xWo494v
jYHDJ1ioNq943qaUhYw7K+9oHWahCc1rdbPeHMa3I1I9l1mzsMiQSodjIxOz
Kv3fCXczcc8n3Su1zSz8Z/V23s1JTMx38kb15QAO40yL0/JNASwcl3n/RtsT
FvYo5e0pjGbhzCt3BH82MbFiWWw1y5OF3cO+Nr6H9b9aTXwyE1k4vb5UsmAd
C3cd70uIc2PhaxvaUs+WsXCtYIAhFZ67JRyd9zuXhTMuBt/8DPsqOB5WEPRj
4f2ZNdJXa1jYZZXuQv4fJia0JGtV17AwfVKdcseZhVO23p00orGwzsZJ/0w5
Fj6ybDBbEOpVXsPLFBxmYqGQEi/9Yhae4ZwWH7Fi4QH7DWuu0Ji4mft1eJ8H
h/EyG/W63SEsvD0Xc7muZOFPxx6lZbCYGFHrt+aFcxjjqlWn7GG/xgHqkjmT
idtrRlyoj1g4sKbpwfIOJv6n81l16xYWNs83thv7wMR9r61nf5qy8PsfFloi
HSwsNaR3EwHOvQqHttUd4DBeSuJ9tjqficNLs6XDj3EYvxxo3bW1iIV3+46p
KJ/mMA4OXRWYcoWF16is3pZTzcJ1zBf73vax8GWP5eu/CLDw+AGnz7cUWfiZ
6/SI0yQTf+yX5ps5wWHstj/U42okC3uv5p9DgOuvSrX+rV4cxtXbda7KjDDx
/LE4TucpJv5ql8FIPgzzaflDPSDEwkv1SNE6i4WnQ7SujgRyGL/NSNtzKAFw
VQto1Ia5dVYtv+PXx8RaHp/yRaCPEy7BgU/NWPhFLE/HqA+HcQpNTYjzLAv/
i/V6qHGIw9jmUOvtm+2AV6Km/JXTLJy/7G/vOsBta0tLV1c/E5fNummYP2Pi
vE8Xk0I8gU/FPp+vAs/cmiaHC1qZuMDCb2qHP4fxwcHhII83LMwz/8RMuh76
/yAvVnCSw9hEcwUlqoGF/9KuiKcAn9qkK5lrr7JwOO+e2+nKLMwnGZXUSmdi
Z0nujCPnWNihVGqleRILH/VaJUkFHtx3MPz3bhsL77v9Z04nkIW785vzTGDf
OQ3lthKYy9FbTe2/HVhYU1lw8fcrwMFuIeqoGAsv+Iy0sM9xGEvqB99xzWNh
iusBLYV7LJxbgbcsAxxFs0o5m9w4jBvD77FMzVmYw2tXcGA31DPwZ3UY1JPz
3lk0HHjEv6Ft5469LFz998LulkEmvtcqriDgyMI1gWfuVwB/l95Ux/6Dvhwf
dcX4IBbWilEbD6lj4aoRvZt2UH9n3U9usg36WOk8GpHNxL4PyZz+wxzGtkG/
rnvFw7lrBYp1s6E+/tmkkBdM/HrzUJwc4JwbE6un/5mJpyRu6s8D76zXPqLQ
nFhY9/ixFQfcOYy5nw25qZ1iYcZVE88maRYuWKW4awrwuLKwJtcD9NWBm8ut
b4BPWCrUvnrPxDptP+36L4FeDF7Ls/aw8MQl5lFLfxYOvh4upwG6um7XU7gv
isO48If7bVWYl/uTxA/u0E/bz7Fjy/OYOHl8MNr5KxNnCHpYTUP9xl6ytxsr
Yd5ufIctznAYTxx1C3wK/RECI21P74N+k3YcUjnPYZwRWmaj4MdhLGETN9QA
PrGD5l3qdoTDODH59IrYI+BHu8wFfDhZeNvrxzlZsI66860KP8yDpyVKGHIJ
z7JOvux8zMTUwhKXhQYmXhpdqrqoy8LDukqMyDtMjKuq5leDf90o03y9/T4T
d851WlwlmNhqXMya9GFho/tVqmavWdhe0XIk4SL4g81r9gjwtXRFnNqmOXg+
3p/S+I+JD9yJqnyykYXJT28dLTRZeEzjb6fiWyaeQAor5eG5wlPsUhfQ96an
w5Z/QffWH89OIh6Ys4xXEmnCwhID04sb4NycXaxVjeCLR4LRC0WYo+U7+rxz
ERPTZDJ2iswysSXPafUNwDNDYcXuaczC1M12b0KMgPemR0kdWN8+m8fHCft/
lR/OGgT+VvOu5NttA/5Uv68SwXweibqrnT7PwufLtsUmfmRiEYZQ2K0UFh7R
njnupA66ecwTGXyIhdsVEvS7AL/P/WGXbgBf9O/GbZUrZeJe3mWvfR6ATtw9
6q8Fcxi/SeNyWAn+xc+YUExey8I4m6F57DiHsek37gvcwLexsut/h3hZeHmW
/JnFIBZOSDFJcJKFed3pytvcA3jLXWjZBM9v48sSOAV+dPWPk4g36NHNXczq
NuAu/voE1w44l+r7j58NOHwWz+tYfwfy5HT6o4tV//tjeWGiyf++2Z0hCzk2
vq7cWAr8VeDQJ79geL/CaEamGL4POk3qCG0G/Ks+qdjD+Y8ct3reA96cZPpM
9LtwGCfkGNsWerAwZ9jTqPSzHMYrXVd9V3/JxE/Pydxlwfo1jto6SaCTqBtv
UhXB1y3zN9a+W2RiI8Qq/3yNhZtyf1NUp5lYVv6L0uZ6JtwNRN4ab2Bh7tut
xhfaQf+1Oe76rvD8VKAgMcPENYIsBU3gX6ijrJgpZuKZ02FDuRVMrP5CTTMZ
cF1vxinSB/Wu8bFRC7wJPp4i1sLfwsTr1wXEKUPOcmmRFXwlTCwWeU7G25fD
uG3jL+5lNUzMrBlSOQR4J3GdXTSDfabHPRdFc1h485OxjdO1TJzSaKV+LJ2J
n7S8TX0LvDG++ehPpzvwSbcjoRjqqvU8G3EXdD2Tvs09EnjxU+WGuT835PRg
XsrZJ0zsGdZ+LBJ46ET98JgE/6robFwjps/Ce7x6ssZAx1eC7VLSQEekJGdx
PfDmVD0l6hnMbU5b5UI75OYH7yflacB7ynXvDC3wJaGsJ7ZaoHetxS1zIifg
PJPl6wpB1y+N/sT29jJx25e7rv3Qnx+bHGpoYuFd6gI73oBerfoOdKpA/k0+
HPz2CO4HOUnPbZKAD3/KHr5MT2Ph1cZpn0UMgNeh20Iru+D7tnONTv/XsUX+
zsoDLKzUEScQeouJ/+hFmdSGsvDt3YXyupATCb6897+LsrBtn9n2IsiJgHff
OdwAF9Q2xv3ElcPYI8HSyXETC0d8lJM+CToUqLyuzQf1fKVd3lv9jonPJQ63
COcw8ZrE5Me3wafEZ2MacoHPIfFzI/PlLPzY4snJ6+AL819kIvdCPuy7uYUZ
N8/EQ+HurBjIS9sdQoOpuUysL28vJwfnxtN6esZgnyXKk10PAO+frUkXFEGX
pl5dt75BzrX7v1o3A/e45fFhGs/AH6+I7RlLB38e9Crh8wW+HrNzqVOE+1vx
v+5n43CvKI9cYXwLzrOultTqBfy2R+09qibIwipHDuwohTn07VSuLYY5rVS5
unUI1r/ocO79aQj+QohcfC8Bn+/lrw0HXx5pVFSm/GXiuIXp9nPgb6vnDlw5
wAG4tfJkHLZn4eTkPlllS7jvtRaovzkK+Vv1NLkUcvs3y9d79AKHse67ee3T
wI8W5Hp6cD8LJ9a+rdgA/jRTtCOsLR9yp7vYZzvgsb9u9DoLcnf+WkdzkwoN
mViED3J5UJGiGdG20oiGTuCz+XPnaWjHR4W23r1U5DPedHBbKxXlCA9zvvhN
RTKBz8UvHaOhaevE/bV7aCiKb4NMwUYa6vTwy/rbTkX31Afm0rbQUGuP7PxI
BhVRp2fvOBylofv2da8l31HR+4rDoZHuNLQ3OPhGxHMq8rY2ClsKoqGfjZFR
R59S0WfRLO/QYBpyuCwSL2dHRVp5n6+tkaGhmv69SvcGoM4UVaEmYxqyqF/T
yr1AReK8xdYIPnd7RQ1Z50tFloZqJUkVVKSX9eOQ+hkqcpjyM3tfJESZou2c
Ee6hIkq5z3nJUSqaSFOoTD1FRe9E7n6oraWiGRsTHtNmKrp2tYKLYxUNpRd+
4NzRQEWPS5u+v4bPU4V7+jWsaWixf+eVqBYqMp6QGBuFPrgUsHS6KA3lzB5S
/XiFhhZ8QppX06moq1PwU0OKEMVFJWT+hSsVjf04VGR4lIpSDunoITbgObDT
M/crFXl9rfBvu0xDyy2+NCddoqGsrLpRJTMaqvN50+10nYqKpHdYXxaiIW5P
09rwYirqeWFguPoADf1+8uJr9XYaSv70TLT9CRWdDT3msML+/787zlTW8KEi
YSXFXokbVES2pkSsH6Oi5FN5O+sLhSh6ifLapWtoSCnvW0biVhqiMsvQ+2Qq
Ku6/Xr92Ew0hbrbd/8+rPpHlP6hIQ+v5zhbbBFDRE6WhW0XDVLT+uWeHY6YQ
xWj2uudmO5hTmPCg/DMqyg7UYTf60ZDiSkrtxxdU1H2tyk0C+qDEay5f9glw
T6mkSZvS0E2mTByzkIqMptoVDwKeM8/2dVhfpaIjf/c9X3wL66o3pF33o6IP
UVsSuZeAf0rlZiqwf5DqMvbuMioKEAy5kJotROErOljHl0BFEbaWFpRqKmrf
3HN3D9T3frnw4JGXVGQdFPQzDs5tDuYTjfGlIYEDmSp7ZqmohaPRJ06Phqov
b3iYCLwUKlg3r7GThibleGQDAD8Bnsqfz2Hez796DG8toqI1pelv1u6iobjK
DbJch2noR4zGism/VHQjyNriYiUV5a/SiD57EPh7sMzSL4WK/gwzIvYMURHP
p7pJ0UAqkrXdE0e/Q0XHdHdXbuamoejEwbjd0UIUulbAZAf0K3vqyIL0BSr6
EsmW3ZoFOIe3Uy8mQh+vOpOcWICjRFV+pTgNrZU1OxaiAbo7m1DgUw/9Wdpy
xHtTkWZ2DeqB76uLBTg/w75TP1XCmSFw/tRt051WVOR6sDWJDbqL2MlpFwN6
kW37LtMD/T+/eTz41VUa2ly7wUnzJhUNtY+1LwXQUFH5O4mNYYBH2OyaGi4a
Omn3WiMjFupXPLN0AXD6/Pzg00v5wP8bctWMEzSk96O1YP4LFT0YMh1pBF2J
1MZvEwUdq5+V0VKypqL9+LvVn4NUFKv+6dhLwGuZ/WBwxUUq+vXGzFb7MBVt
s3A+dugc8FSpNOnEERpat313sXQBFW3yawlI0qIhS//Ha3NOUxHju97Vu1CX
dgxtvRrwKvixzgOaOxWlq5RvKaFRUZ/fnqIfV4Qoti058Tcsaej4hewpfycq
kiBKGg6mCVE6b6s+ETWnocAnRjKC/6+/93AwB/wn9YrqdbULNGT+WsCrc4qK
TNOH48MB54WZJV1V0O+HbxY7zMHfdrQmXNjpQkWrGwkPf4KK0GfrsIllNKQZ
FK48DrwKuHV8oWGGipzIlU6DFCoK/VadzowVovTZbJztvyxEQR9Db7WCzsdO
7XsS/T/+V4R9OtLAt86/dt8SSUW7zqaMbnClIQ7H5KcSSTTUMyTFUAbcw4aX
UzReg+7OUWfWwf58ZoTAThsqalNw/zfsRUXfZKOts2C+6ZJ1fW8AN00N6b/z
wHfHstplF4G3IjqO608CTmqb74nJ6dCQR4/Y12nw1SAJWsB9Pho653h41COB
hvhPmRvKA19Ml3XVZYDfLj7d/K0MdEQRChW6CH5Q43XBIewkFTn/PPpyI/jG
hdKr/d1xQpRjg916toBz07HUZsvPVHS81GdZGvDC5e6bVx/Bj2srlybMIDeG
CzXjtduAf2HnhFSA91EcHt1pgjQUcV6x4NAeKuIWmbraAfrwD9UJzIY82Bi0
L3RpBfjiBVeLlV1UFP4vxD4N/DP3yfuX3eepyO/s2ciDVVRUF+T3WEWAhnL5
9p775E9Dn84l7B9gUhH7oLH1KNRzTMPajBfwtHGtGeZcTkOnnQ0Fi0eAp4ZW
TeKgH+r9MfEt+2iIZ4ZzJbGNhoYv77Qx2kFDutE09WPA01bDdf9iINeUzRwk
WuNpSOJHrEtjBA2pXyT1nkcJUdSiZ+v9lIFXv67szg0HPTFklesyhCjbI+3G
8r1oqCT3mYlsMugkdcFoN/hTYU49lY+HhupvfxvNAN86wta0iAK+7X22Eo36
U5H5liLtR4DrinHRPXcTaciph8MnFXi5qtvxhBP4+arL/roKoKNTgQ6/vYEP
y6+Ircx4BDkXfmr20TgVeWZWOl8WoaFH6kjt/7l1jUmiq5I0tG3vJtd/4PMt
O05+SJWioQc705pe3KOi1wHGNxeBr+ryo5RiwOtei8v423Iq8t+pKvgJnjtP
Ls8eB76Iel95Ggk47rr3PoX7LA3JbZWQugq6vGxl9f4y+JSPvXYiJ/hJdoPC
b89s0LWD5eQv4GFkxJewX8AvN5TtaA38U06S3HsWfOi4cwByhH6DLEWnKg9R
0W7Zr1IN4D/SBMFILhaiFEheebUslIquM8/oDsrTkE7oSv6rMYB79qjUPsiB
Wp6opL2Aw8HPeUfZCjR0r85zOhb0aPuMz29UmoZkr4Vl6YL/CI2Xqx28JES5
438kZsMVKup/Yuu8HfjYvv4G1znILyGv0F/zkI9Se+40/v/vTnpqTx16AXzo
2/BN9QXof9e6u+ikBA0VPKypTpyjInxu4mUgnHNYUb2/q4mKthte8POCe5J2
lGNZSifk4IN4j4fgZxObPSL+wX2D6jFiyAH+87binuRr4G0t3ylaNehC+vaT
ehL0fb/BLu9jmRDFUePxwHHQ6bLLhf1f5qmoF9cZt0M9LevKXnmDf9hX3nV6
CfwUfJBvVT0BvpC7o60zFHzrzDqnvYGQ033Pb7P6Yb/Xz80G84UoB5qT/hKQ
Z85r2ZJ2JUKU+wEPemthrn2anN8/KYFvPe+JzYZ7ynNtZ7XoaMidxM0Pizho
aFWQgMEKexoa/bDHje8uFXl0bj/8FdaZt4kNG8C96klJyhhvuhBlp9+c2Svw
s6rfliu9wM+ErjU9z4e6nnF1VVRDTvwy568ZukxF5SMTaW3qNODdffsIyIeQ
bY3pCPJ+69vg6XHw32UnVneeh/uAWI/mAAIePCtLWrtwhobkW9NEaYDj6Pdy
ycvgbw2jYvnaBnAvo+RySXrCPaN97/3M6yT6dubjowpJAh9vVV+5OMvGvNxZ
rJdsNp5p+pZbu4XAa0saf0avJ7B+rHOYfTmJGqp8D6w1JLBg0q4/ay6Q6FX0
37pCQQI7dtcfVvzCxlxC8kHVUgROPOjg0NpEov2RqXPLRQjsc2vuBNctEnEU
2786ZEfgFuN/66MKSFTdyNG06SyBz87HvYnOJ9G+8LlCgUgSRer80zKvJMGv
S9xeOxD4Z8rOL+/2EjhrU7uubyOJ1pwUFTBIIJGmPS+rMIZEN1epP1A8TWCl
+1WLkRwE/uU0EcOxlsBPgvnNTjPYuJPCqG1XJvC6j4NWwj4Efi9edWdfEonm
3DhMrWG/fP2p31JqBH7BWDqkOc3GQeltEZKqBPaj517PrCPR11ra3pHzBG6N
jVh59SSJssZTf2aeIvCQrKXfn+MEvsun0G4bSiIuwcf/kjcQeJlRr/KnYALH
WR9dOg/4+J2MSvl3jURG19GaLzNs7EaRaJJvJpEGfa3B4zE2Pv1OclNcMoms
ru3j4nzPxrmyRFLcGRId7GUcuFlBogI3mnE0i423fD9RHRxCIp13OlWfvrLx
tNGXNe3LCKwXzVq1FfA/kf0jgQvmJ7ewupMP5sXPfiW9Hvb9Ho1L764iMHf7
0TFynI2t1+rS9q4gsFhcvMViKYkET5SUBTWQiI3FvmkXkSgxNyvo7jkSKfC9
l9AB/Ar7fsmyASezg/K8T5lsvKF8rPQR4OG6aXMWG/B4bbjhvm0Wicb6Juz2
55KoJbiQMQj9x3blWJ8TIrDDsR+d/IoEfu3BtL0TSKJZ5/M73O+QSPWC7soH
JBsftr+0bpsxgavMzlx+e4NE5xIedocNsrH3n6MpvwH/gVVSn3xySLQ6w8rT
GfqTbS3rfWtL4B9fH9mJrIQ6mtp5KcCvx1/qU5LfsnHGjB2t24DAtb++Kpw4
QuCQJfH9EcAn1xVnTOwAz7ID/EaMHQQW1rk0rRxEogv+x7QETIDHst4xjHQS
uctlFqQpEfieTkGNkiWBnVydR0jQydndv82do0mUosLZ8TaeRH/3ak2fO0+i
M4yBmDdlwKfV0YZsqHdv0peSsDwS7uHKd6cPEliBbE8wTCXRc86ys3nnCBxz
cJPutZskMk69Vy8uR+AVBeqbagGPWDXbEDngb1gRx7G+w8CvLSZOGbsJfIa8
Ob0kQeDVCZ8eLNtO4MNDi9Nfof4mYsShH/q++zk76roNgQ9eyLwkcppEAYeN
I0qlCaw86JIUep9EqzLfh8kDTijSlWpnSuCnxUc3PoJ5Kuw90dxwkUQzYy66
7+ls3HguHGl6Edjk+dxZlEaikfyE4RYdAmdKS0Rk8RB4yeOhC3Ij8DUb2UMJ
gK+W/V0ei0swz4PTXrtg3opvRi3E4blD1oZ5ex6R6Jhma7TJXRId4Nqx4WE1
iSzua7yVAl8595JYdkGFwGVbFT++fwj6NVPY8icA9heTHigNJxEu6HV5D3qN
e3W6uWgr4C7DqLxyAnD/wHBwh33qhC+FPnaFuZz7HbwX6u03eSsStInAUTLc
LYOFMI8NxzPXwfpGu0SeU+A3jLtWv7ecIfD6T+Fn8oGHk+d7NzvD/hze2oN1
gPfH53UVraAD885ozQPAL+zyYG1qCOzLfk5ETrDxTa6VH7YB33QKzomsUv3/
/43NOy0KenH1Tb3UDPxZ9jT7TNFvNr46asATCrrdta1kzseRwIMGMSke4Fvp
PS3KhsCb7yZrxCvgVTDNFfX8f+71gP6bxSTiqSH7A0fZuAd1x3zZT+Dx0OT8
Pti32Gd45Rvg0VZJLCAaRaJCnm9Jd8E30wKTWyR4CayR0eBCMwffMnf+MR8G
vFPNdrL435cVXpVKR5Do+Ay/jxjMZ9/5RS1aCYkeBrgt0QLg9fCNCznv2PhF
5l9RF3i/tknsQm0siXLZOhoI+NEtUyrwEPKA433Jy//5PNMUM/IN8BZRtWoe
q4L9T2Y//gx86eRoWe4L/OkYftVjCnNbL7b4th98vJjS5O4NfBF5p9154AqJ
NtbcV82KA/2+Divgv0ci3bhtHJqwvu+CRFGgM4FLJDruuvzPQ4r2pyEFAr81
VEnG0P9k9KYqZz8C8zREHLkNuNmLmUR0ppAo2WwHr6Yv5NI9I1cz4GP2/hfi
X2Aup+I72rr/gW9w5I2+0iXwfbHN/L7Ah3+fsvd+B1xjIxYdMoBnccWaoQ+g
/v13zr9bC3hmrBi+twd0PElNWCmSTaL2W4HpKwCXF1K1KrszgW86r1Sbgdd/
eJ2VA8E31znffjm0C3LOxXrFVZiL9ndxZWHwX2sNz8iqb2xctfqGnx3wXvf8
1icFMGej2bbl1QcI7NERELMEuG4tPFFUXEuiU1o/XmwCX7pmP6wtGwxz3ZeQ
kQu5Unnn+jE18IvTfTF3FCCPNk39dXsJ+bQtgaNXDfwkOtfBZgl8KsKy43E1
1BmhqnWNAP57VPs3BEK/IkeeFqgD/w4mCh1LgLrXR37QcwVfMFVbSjAA/zvv
Vvbiox+J6q8rdu6EHKzxS76yFfTBWLoW13wI8j1o7Ykf4NsvGWF2fuATP2re
VX2HXFj2p+jpp49snPcm2mkKeNVGd8PV4MuO4sMjTMgttwDZLRaQCztUDQ88
5SPwxK6HK/X/5+XhZoadGPDqTF3mHcg9weSxe92w/1LfxRQuyOPd5ftLU3+w
cX6ylje/FoFnqS2dhvD9/HN7ujI3+Nwj/+l28IGLF4QFZQGfI3tNO09BjnCs
KdrxEPxx9OeKyVaoUzxIUXY33Auq+GI+b9gHecezJ1OOn8C3/IT30I6T6OVE
0H4lqEvtcVZCG/TfzRXPFwB+InvPf/NL8KGL2cYJtyFfW1X7rlvB+ac2mmka
EWy8ml/fvuE2zP9tCk8N+OFzJ5XRHsi9V/K5L2uAZxUeP2cWoL/C8b29t40I
/O7qrcI94gQOyvj9dAsXgU23jTSEgL+sP3biWh3w3Vhosu8a+KCDr3PfK7in
yO4w/RsP+rgRryzWC/elzpgXy19AHlIiRNeHwPuN++PDZU6A30pkefwAHVav
dkUTwFf3kk0xNcA/FQfne7ywb+niAb5P8Pp5m9hFhhXMsUpuXGaJjdO+VpMr
YE7yGx4HGv9lY9biJGoHvD5PKB42gM/Hnx7Zm/OARJ4STad3D7Oxdu+j4UjI
u4HIRUbZLza+skGVi1sY6toUZ7ID7jsndp58MQT+8q2AuYJnI4F3/X4j1g55
yBVfcfEc+Myg+36Jc/NsfF1km8PHRLj3IEPmyFEC31Z38OKA+4HdK5qMDPBt
3Yr42Azgg9C45/nDkH+zW59bJXuArk+altVBPaO2Ws8CYL3jt5d3dgA/Lpyd
Ii0Bd/SJZ7T8OSelWuFcuagVHdnPaf9tl2GgWPJq5Yc+Ogq/Llr3nUJHN5Md
RvSn6Wi/WKPXoUFOSu4ZC0ZJPB0VWxzwbPenI02bLlWn23Skbnlyx795OjJ3
tvr4oZ6OMlYtXExu5KSsVZ9RdXakI44nMSMfD8E55w7zh+xmIAuZ+57hyxgo
dP+iOnJkoNV2Jl+OltLR0uXbgtY2dNQn93tvsQcDBaQnvpaAOhI2rXnH/YKO
nka+l7bfSkciK4ZdXjbB+ab8Z6Ks6ShEUNCmv5+Ocg7fWqtYTUcp1r60dk8G
2uYc/O3bEQbKFZ4s5FFkoJ7GVKX8Yjqi7y79zvuUk5K1y9yEbklH429U3mJb
Bro1Wph8eS0DXTbZ/pLo4qRcijCOOA19aZ/YqCFoS0cHcNDn/VQ6YrS/q33b
QUeWG1T+DR2lo2qBqg0bW6FOrV2sWQkGop8sv3G3jI66goo8BQDnTyVJPmQ2
HVnpy92ON6SjrE1W3gIDnJTgc+Of7rkx0JZtQiefPuKkPHG4FSXnTkcqPt9v
HG+no5Kbzp2HfRjo3sSyP/cAr6prZyJPBjLQ4L5Jsu4fHfl8nC0YbOakfLle
cfOPHx1tcjfzTq2D/ZPtv7vc46TQjwsZ2/6io2NTiv2iI3TEdQ/vENJmIGXF
G/FC7jBvxsZPDW509F5GZ9OFXk7KfQr5kIR+1vVzRdRvZCDraH2p9jUMpCDm
VZL4kJNycet9gRQOBnq8PN2yEdbL11zeop9ORzz+Bs3nnnBSVM/+un/rNAMJ
yPebFuvQkdc9g7U7oa65YvriKuBRw2M+jTQGHRXYPrY9Bvi+rPpF2RhGRwez
Erx6NBioxF823LuHk9LdsfbaJhsGmtPxc00QZKDzLw9L8cP+CzMuyy9uZSDD
jvg5hwWYf0KTPg3qiXPPjvgA/Dh8uXjqJ/BnZ/ym4yoODORyUqAl7yAd8VOu
bbZ6Q0fXVSzE+3YyUOHawYXsb3T0K+mr0Zs3wNPXxjy+GXTkb/hd8IALA0mi
dM3O03Qk1+LHqwl8sfUIElAHvkg8ELspAnVt7wzsM9hLRwoB3S2xQQxkbKd+
fQD6O1VcW8vrTUfxP57pcJjSkSj3g316sgxURh6Qb+2low7fkC6qHQMFV6V1
f4I53jw1Vmd3gY5oQm9mDEBPtv+KNFgY+qi2bmPsBdxVpaenNzBQOjY0DNhG
R/fe5ChpQH9HusZWxkHfNxJcLp0EHNvrRyqLAD9p1O0Zxqaj5e0BZ2xOMpCm
k33EHPD6SczWpAODdPTCfH3o51ZOimCUh9cEvG8jONzsKTA3njHGWtCf7iE/
ORMhBgp3OlzJFUVHo1kT1XPyDKRXrKgofgP23dQ6FW8JPIwb62wC/Kj5dxPt
X9PR3eUP93w7RUdHXxr3Rr3gpOz54hhy6BUnRSWvpWf/Vzr6IljlyRdIR6/e
VaVcBrwIke3zY4t0tMs619S1hZOyft2aogjQzQ/apKUf9ENX776xmAI8br25
sj+Ljnwfv7rcA3xT3fn45GgXHQWae3ycMYU5Nt//zGyCz4sblg0KMFCFgUyL
BPDC6Ht5ZC74imznwfybUJ9n3N7zV+3oaGFYgevgjv/n2fFtlw4DeZrxf7Ay
oaPWDd+enQZdFsv/3Z6ziYFMlnIuCvkzkI1ui730SThv5hMOA9w3WB/kH7pF
R3VtYQsWWgx0ZH/q98g+TkrTD/4P9bB+Z/+DMRbg+Cwr1esGzGNqq6bMRjM6
+rB64+NQKwZa2IMeVIFeFTNV1jvkgy6HJOp8wSe3inl+zQac3Re5LTqPMpCO
p4H7ylzwFSXR4W+geznhi5uFacAvvtQbGlsY6DWtbtdOPwbi+nnqig/oOVdz
I/HxFAMNjC+s6QRecPf5nygB/dP4YiZ2NnBSOvz+iE5iTkr4+hnh1/BcVm+U
iHk3JyXoOOeW1eCX3LoCRSHqdKT0q+y9INQblb1r7VU473j0MeFsqPtYaNqP
3wYMVBRg0y0Hc+3++fd14DGYS+nzM5lX6Ci1p7Q8HfwsaF243Bz46S4pXxVT
AzpiCbJ/58E8p1+r9XaDDx9d00aeXKKj29ynHvs4M5CPv7jrAPj2aW6JRxPX
ob8c/kwBHgYiq5Llw+o5KfUN41R3KcD19zrjHPC1SMmWA99VoB7+j6sUq+go
U0z/qCzg/itjs350Jx3l387znYT9ks90Te4foyOXP2XG/TBXt7VHRstA14Oh
Psa8ygw0HpthdCoE9LC0WttxPfjZN+MTRaA/qyQRPl7gU2Cemu9pYwZSO/qx
SRVwop+WX8epQUe15+6kbgVeLZbHTV0EXzI3icU7YH7yF9/2vDzLQNlF9VKx
MZAnnJSQZW10FM0XWZnyAXyQy1/YCPo1qsialh6lo99lBeGzkLt6trmR9yLp
KNG+I3zFbzqS/53IbLoPc9fI0ZxFdLRqLbvpPPiu1EzTeQUzBkr5+5wzGPib
uHwILwedtz9u970M+hXatk/7KtS78Wjwiw6od1XH+qKDwQzUpPsg9SLko/vP
ZZ85YZ8/d76rWOtCfQsB7yWH6aj3ah3New5y5ti41L0SOmL/eXUtppGOBs56
VW54AOvGT54MfAT+7WcuEQTrD+nxb8+F9eGl8erl4G8FMw2sxyw6Mr28Z/Za
KuRwHO9VftDT2SQ/3jCoK5/wrDEBvStQRDM33uek7M5/MMihTUc/v9FSTKBe
566RUV0uBtrX8e4XB+jbdmTa+zf4i6fEUx7LPDoqcis74wjzj80rkdwLfh51
J168G/j8JMJP+TPg9z2s8usM+OjPpWVYHvx1buJedn8Q+PJ2y0OGmnQUsCFv
jeh3OrqU+9zGZwcDGeweD9M4xkCKOj6vCgthnlUriu4/paPQn7eWtr0CvOW0
C1OO0NFQWZR28DPI4du3Patg3wUzvYF60LmzhBj6CDp5mo/+/gXdfVnGCvlR
Tkc15yq6uyH/WdHJ1XwHGWhz99uiROBjOccx7xNODHSwJOyRPdwDloy/elkM
QT4FXfnS/Bnw/3BitRj01TparDfLhHsNb8aurzD3/uihsdrddHR+E29ANvBW
YrXTYVPw5bTTfw/Jgy5s3mzl1oR71vUzc2pae6AeI1JLqZKOKkYnrheBTv/J
lProTAC/r20dFIM8Cgl9udH7MR2Z0Cr/SMD9TlFgS8dWAu53ly8V7I2lo+dx
5p2ywH8Vu4pO49v/++d2zSXAz3Hnj98tkF+5jvnztAN0tPj74/geuP+UT2We
/wp+c2n9fpO0x5yUQs2T5wUPw/3CMPvk+zZOCv/yePKXPfhela7BtDUDnVJ1
nrU9zkD1xaerQnLoSL+wMeujFx39Efdcdxp86rGyiZEz3H/kuxuDL0DdV30o
sQ8g728VV/81Aj3b6OXne8A9g9JdrLecpCNliefPCh6x8aeO3prkzyRKN361
jliE36Fr6jncv5HIt5aWK7R6Dq3icZCne7Fxw1m2QulxNhYa9pbnn4LfCf/a
jtvUs7FgarX02Z/wu+XkJYHBtyTiPi2KNBdIVBJ+vkahgI0d/uW7/Ng0h3Ll
o5abT5PowYTIehueOTTX/TqNdY2Nd0UfejrGPYfcXpk9HWTB9+/Hv9cdYOP5
Ny26S/DqdDZje8skiQ5dsslhDJPoWMHqQ1H2bHxX4Wx1GazX6ja4wbwNv7dH
dt9TWTuHulvWR6bD+bV/r2geHiORlaadtawtG+tn94wHj8Dvvo/qK0Lek8j8
Sn/AE002zt3As+JfMxsfYS8LXYD9bUp6xNOhvnFRi9BL+mw8EKjgtFZ8Dv0K
C9RrhL47H3rmZ7rC+kIVH5G/JHq/+eWGLH82fhm+rT8+m40Ng99SG/+RaOjX
jIfpVjbeIuNRVRPHxlS518Jiy+ZQFGX1n4JRErEK9Vo272Xj4mbLLgmpOXR3
253jUy1srFZyazONaw65fEn8pvQcztmvUnET6nBprYnJymDj2Tj/R/sF55Dz
pay2hAESlb23SlcoZOP0pVgDl1n4ncLa3TEiN4dSixT+5cF8fDSvNzFj2Hio
3FZ3Zw0bBzW+d30D+BgILrhrycyh+8xNRwN3sfHkrY0ZBzPZWLOcoyqkjI1v
X77k23KfjU/WODetnyfRwr7FUaMgNj4kLnz68EX4Pfetpj1Nj43lOkQ5351m
41NHk0/X5rKxH43vc6wFG79WVyuSgv1tdOMjhrPY+Jlt7ZTcmjkkG6QmukNk
Dh19b66SbwbzzVqVvQP4tnTMZZUgSaKJet/zRbVsvNhiaSL1C3gl8mFCOhpw
2Z5tUwg4FEXm9dc+YOPwhWLOmRw23uduqOwCczsxP1W7+JiNv1T6cnw4w8Z7
rCYqzAdJpLmGc2offP/2+Niwljcb0+JoEs2qgPvwzunFdXNoKUm88h/UMTGi
ulrXg41bG+Z697ux8UbD7rgNgOfQM/3oB8Czz5n+kv1dbLyV370jJIKNEx2G
pdYD7g1kvuC+zfDqbPfYAM4Tu5j9l8k5h/QGms1DhOZQ8LrWnA8/SPSbR5Pf
tJ2N1xw68Gca8LiyOarGCupoVCkupMM8W/fYvBc2ZGMTV/3AAzMkqr4XFesh
PIfY/xzcZYdIVKxc4rF6Gxsfj+o11fxIIq/Wtzzcl9g4R017XTLwK6e13YD5
FOYYKbw1D+q5uNFCiX/9HGr+tT3gH+iHi7236C7UFcNZp5kMvAvbXGLSfBbm
1sbg6EgAHVc9uSYGvPg829uyUnIORXzsEVrQAv1yrvXf9gT4/XT9jzLQ00Bh
b54SzOnpPgGe14BPCqeInFciG5cYXDF/AnwYs2npawYejbrlHta+w8YG1DeS
x0zYOFiNKNADHhoUqOTEAJ52XTd/rIa+A3aI118F/WgXyPaqpbJx6cJP6eX5
gGf765gBJonSTCnC1cAXHZ1ddbbA333JSqGXob4O9MAqn38OPXhz3zUGzqP9
3feLCv6UOm9lwnuBjfn3Wd2fBL29siyXr8oDPifqGJyHefPuO7u/nW8OHbrn
3qYPOuNcs+WVkewcuiY/JFtQxcbXzsWJmnLModlw3WchYWyselpm40WJOSTC
JWKjDfo3VV38Jg+6X+S+HacEurC+tb7V2oqND3xRYq4GHSc857o1rwK+Jtq+
Tgbw25E1vLv2JNRl8XDFyFcStWesKPgJ751HS/VvM0j0PZPe0nSFjYfftNLC
YE7xz7c5j9NJJDMueDIXeHxfvYElgNm49weLtht8pcmBT+4J+EBTxek1huBn
TZmnTi+Af44eO70t8BAbb2If7skDXw08MZv3Hd6v49dINSwF3rG0V4+qgw/Z
Odo/BF3/FqEd+3qZjQ/2+91oAJ/19Du8d9yUjYmXvDfEYV9JSU8NrjkSRXrX
u2nB/LbsXd6dCutT5O8JSoP+iuYHe9LA7470PBjTBR/i+dh5M66ajb/Ke5PD
wKc2+WEfI8C7WsvJRh/8lTvf4OxZ4G/X2orGKvCl53pV0u7gv9i+V7sCcD0c
Qyz4V7Dxo6QEtyI4v1L9peo88Nu+K5LHFnjcQVo2ZTuwsVbg32OvQT8sJ/eT
ixvmkGEm5rYCfQkPuZkZgb9s8nHzK4fP5R+v3/yPIFGB94CDMuzDSiqNmFki
UcjIOpPJd+Dbnx/zRMK6dcdLwnNAD7U7iZ4vNmy83W3hbGEwG0sw4otKoR7y
qp6EFuTf5w2rOh7AvK1+lUSSwMem5fp/4kHPDnOzpc1b2Hha4n77Xph/uKi7
/GZPNi6kFx5MBb+YVaaSSr9J1Nqz4tNZeN7YhndWDvimW/9TMQ2x8TbOL7+c
X7Dxhspdq1rh85N2M18UlCDPKIVp46C7yScJX9bcYGN1czvxR8CPjPQBbolV
oBvT5u6xTsBL86jQ5j3AdzPdHs5xEo0Ium3VOsLGZ+sel+VsnENvz0rcyoxl
4xWi03GHndnYPNdjIRbqGp07eXQ3+NjLQrnp8t3Qx+Nsk5yXMP8/Hh6WkOcV
jfMVHaADXmLbnt+QQwPBWy42wLxjmhscLkOe/6K5PBWJZ2M3wcErXBqgv6+7
drZD/Vm8dOdHKyCHJQYtX6lB3U6FXUVGkAuiXLuXH2XjWINDs78UYe5uuVk/
wD++jTqJO4EerV7Z6K+FHEILH72dwKfdbJsuOAGPzgW/DFStg3uKZNczGuQJ
+4GVUAbwbJV05u5u4JG9r5ufLPj7s03vg71D2LgszVvbGO41uT/LmJOQ8063
+U7+hvlViB2gNN9l40rRq+REJBvbesnvK4H7Tnaz6h8P4P/ettHvHoC7QV5P
fBrg6dl94t8rdzZ+ry+3xQ185fGdpvVXACfNxJQ/3tDn+LSNWdfKObQn78St
b6Dr8eqJinuic2jF2ovVTPC1h6YGpqKAn/7B6V518GXtQed+Xqiv4A2N6z7w
buWxyCol8NvRgT+lqQ2Q030K18dvsbFIuZX5BcAjyMGPehXwcS0Y120FHDcL
Z5RLg+//WeOhU3UC8vCE6LkroEPfI1VtuXD/+Rn7d9s78GXBi2F3xEHHw3/z
GqcgP9qO63WqtwJejxPc98A5CiVoUhX8bPNEzaQ76HntyJv7XsBnr7d30pxA
VxuD1Mo+w3vDbk/pe6DrtxMqw7zgUyE3dt6+U8LGSYdT52xh/66sszuMQW+N
cUofm6HugKBnQQ664Cdi58THb0L+1384OQB+dVRl9fzFIjbOjIo7tAz6+ZXc
1bzRiY3Zt5tGz4EuKmvvPmxLYeNj7k8fdwHfB211pJZDjn7947WXz5iNBbZs
eDMHObLL2Xn/KOQB57RqbYcy5K/gj5y6zQRSfHdPYNaZxF/Y9lET0gR6c2kj
3xZbEk9TI3vKTpP46Y1dvQopJA5qV1EU0yKQmy3vzTdWBDpTlL/z+jICCb/m
/2vjR+J+oQ3qRrDPqJ7WW4Y9ievyhHyehROooPhK25V8Etc3vOe+m06gi5XV
r22jSfxrzfmkI8sJ9LxS0T87mkCZUY7qD5QJ9DO//d1AFoGkSgWeHrtAIO9f
P4QfJpE4MWmtbJYRgX5VD4W7xBJI9cpbsyABAqk/Eti3chuBNGO1Va5DHYnb
uAPcAkl8c2uS45p9JCYstrrNeZP4czBdtxee3yBYaGIRRKDrMQukP9SvLpN3
ao0ugdJWuh58lUegFSHBbjwuJG7Yb14aDP1kXfoYFQW47IsLYgxdILHkfNPQ
DT4CmVwX1jA/QOKS27eDte1I/K7adCo5nkBY41VkZyiBivmtTtSGk9hcYjun
6H4Suz1697P4GIE81A4sl/KB/v0ZNTbiBPwuTBYI9SBxMMVhj88JAtk/GdD1
NIY57IjRoOwgkN7bpvnGKAJ9P8rJjj1O4q9tgZyzBdCHPWd0VxqJr90QS4k4
SOLMiIJtH6Fv78253N7nSRw73lKeoEMgl2KXh3zFBFrbt6y25gaJjS5zHPT2
JXGfn8HnCVi/DK1oT4L9mvGtTTGmBGopXC8leZ1AQTQDpQFvAlmavZzIvkTi
jNwBqWIbAu3+StPmBF68VOLfbnSYxDN7rQZL9hLI582D1/EZBNrSwMfoSyOQ
UWyicAnMUftcoJXCVRKHHu+6HgB9US93/n0lR6C3uyVj0/YQ6D3nS/PeRBI/
i44+7+1JoMvaPTwNlwkUyPlHUdafxHdeyEodX0GgJ1ZSP+5BPdEPPb6wAHeB
fTYJJYB38qc36Z+CSGziwKudD/ttKlkszoO+VDLeLKW7Qf+Zz57FAB+Vv3mF
XOAg0Autmfxt2QSaKac7bwJexne5Rs0DDy36Vn2ThT4Ha1rTSjYS6OZ7vrve
MSQOGzhvd96CQOFBS8EmsTBPd+nIrlUE0vh9h0jIIZB1O08oRYhAuo/8fn0w
IdAdheOVHanAj27Vp+E7gd964ltoriSWiajrs/l/n42r4ru9SFxx9uJ07hYC
qSUeH66AvjxeBVswQV9NHJLaRcD3/dfMHCjwmhtcuxQeQqDFmgN5GcEkFr6y
mycM+Nx1k3208CKJV7ntavwBeHo2ry1nJZC4dOtC8BFVAq0xPRLoIEKgoQdF
MgzoWzdJY2wC+KN9YGBUMIDE5V+INwcB55SHurwTMBeNtz4qtWEEGpA+x6gG
XpHLHqQW+xCoN9n3jArwl8t7sljqBIn5ylbL7JMg0ISd4p4q0PEj77DtNicJ
1PNo7ZBcNomTiU6ORMBluUDFnYNnCZT7qq/nHNSnKppxQwr8RsA/nuRJJbFl
hrZhHOBbFv07qkOYQJQmj/LwMyQ+bMt5db82gV6uOCh2F/C4zYrmXB1JYrpi
IU8p6OVV1+tlawHHyncGFqHQzxKb62iSO4kf8LamCMLc037vNutIhHpKTNqD
zhPoQLihxzbg3/XIoNUZgNdoQYUQLQR0+/y+q9c1mEv3sGMO6Ndwv1KFEsx1
18ngsTGoixQxsioEnOg3TTgawkg8MD3bIw/nYeVS91VQ/2G5Un1D0MmTN417
Vq8lEEd9vslbqHNnr7DqQy4C5Z3ecO45+Ejf48O1m+JIrFUQGhUJviEcO2Ba
HAl+R3s7m3OUxPlK/a7pAQRy1NPdowI8Uc+tEXGA+mr1Eob2IOiTRRXrvkSg
4+rn/QMB5xtPr2j/BV2Llo8ff2pLIPFbKYcINxLP5138ccKOQMGuVkxZwCnj
iEWzxUEC0c479l4A3y1aWM7RCPo0zVHaukaGQD82/jP+Bz4UayzC2cMPn183
1Jf1ItCOvozOy6BH//uSdldhH/3Emyt64bxMxUnWUjyJuZ0s8AElAn21WvH+
PuAg4/ipQuYagU5Ynbxftgv4tJPueh3qpTcctOV2JHEH98JAEvAl4Jmk4A+Y
W8urX0eo4L+sGykzKvsI9C35rmYq4Kxs4vhPKphA29uDxfXAz2M0qYteW+Hc
a25cMsCrSKwkJAr69rE42ScP+wj6im47ak+gZ+mRd10zSLxh00MBWfBn7Zrq
mn9ZkFsRb4q8wRcWBo7/dZEHPfedYvSBb/HrDmxuhDm9f+XckAF6LVmpXXjw
OJw7PyixwYBAw3PvT/8Bv42UPOqHAH8hZFl9CXTa/Mv42jlNAi3VCdXOgF+X
P+l9fAR8t4masG9SjUBdSVrrU3JIvOWkppxgHuhz1F1QH/JrtYyzgYMUgWpn
pJlD8P39w/ynaOC/Qd5cv1feBn9/p1o3BPkT1fimoQN8Zw2npfAdwN+UlF1s
4iVQ3cd20x7Qxc+7h+TLwG/vlP8eT4ZzX/NMv14Lvp2r5Lz6CPCH493ctbPQ
18+ZTtzyv0+n7HY+D7qTyOlOqb4CuDXr8m3fDj7xpdJfCc7jfSdwtxX0WSa8
ztgGclEv287QEHiqtz5/0C6dxKfvv6Iq3ySx9Pp3oX2uBHoQ5vS0Eng9K+uT
txL8y0RNtDxjE4HijBRKfkCfWd0JE2WXSTyu+NBQG3zU+oyejzT4K5tLuZ4X
5rVuPm1FNeCSh5c/lAUcNZ41itjDPePQjqmL68CvKFyLrOPgr1k+/D++nyOx
k9xKt0DwuXfNF64WwDxFlZT2kPD5w4dLs6aAv9RdhYAX4P+KnUeYp6BOSXHf
OUvYd2dnkkEP8CTSrunoKQfwz/PBodNwD0h9kBbwEHyf7iv4bGg/8G67VGAO
+K4V865A7Wrw4fWr9NceAv6em40hk4Bfy2Wd3wLv/Lh9N3rCPA6WvdS5Cfm9
w9Xrzi/oX17YolysFHR0wsh5CnwkdOu6FKsImO9+PREGrBeWc1ZLAL+U5DpT
uCWTxKyNHT0RoH9Vb0qDLcx/INqyzQV4u9XqX4Qa+HaqdqbpR/DrUwsmZitD
SbyY6dI0Br4b1PUsthz2y9p/Ob0B8CMGzOuWQHebXkVujAPeIr+El1RnmH/G
tOlXuK8M9nY7FoAPjrwraxY5BnxX2bTYC3M5Vyie6Ao5WhE/96gJfMxrYOQz
D/ijy2MDvyTwa9uV857DmcDDCo51wqAT87rgnXtB71U1s9kqkDuMr2aqfyGP
/qq4Zz+A/SrlBcs0gHfxXJUsDbgfBtRfbL0E+s/As7a+cO8rtne9OgT+Ryt4
u+Ix+JDjELF8TTKJOQ6czgkCvBuPa4uuhNxtv3efcAYdRnw4nBdvDnz3/Zb7
Bvw6MfD4MK/C//fTjGcvZEHnIzKTI9BfptZF8eOgy3mSGKNtmUfB7zf2pxpN
4SfUu3d09OfRThk9bbbrFK5rDrROsJrCOr3tQXtFpzCPbOBPp83zqKZEjbrT
Yh71M1aUvlw2he9pf/rCf2oKI9YP5+rFSSyttMd/t+AUPlVf1punN4+yG65a
sE9PYd2QFT5fdKfwfY66NOLXJPa2PSKzuHseLVuzZH5JbR58+Hxhqc0Utg2e
vFOjPoXtTun0HPo3iT/yZ3IIoilsc+mGR8b6eXRI0C8yb98U5iMM9rZ5T2HB
BgXfZqcpXPvtXrOyzTzqvbBZgCoyhfPFwqxPwLrwlLjp7WpTeOjl/KOrcE78
cJaOP9888iE65NCaeaSsNuswzT+Piiru/ImAz3P4z/nb7JlHppmJR967T+FV
J74udzGdwqY3jcOylabwHuOWgAGjeXT/yIrs73pTWM+4fnnduSl8COne4fCa
wukBSlW3LOeR+x1Xs2cfJvEFjlraEny/4+2f1Ucc4fz7BbtSV0zhSZ1fFZfE
5tFk084hR6F5JL3UjBwd5tH4vm/p5fLzaGi3wYn+5VN4fe7mYAc4p4Q/frMR
vNbwdw9xLExiZSfSPRqe71/XSAuyn8JHChdcvsDzV4PEO6Jhrol6tD7lvfOI
8a33a3jIFK6a9dwwBXPaNeal77F/Hv25UNHFu3UeJWdJzjgqTmHfcL1EZZF5
dOO7TGQnYxLzvHuUIzE3iX+IV8nVhE/hfZIXN3DD+iMTXRffRkzhEznO9+o/
TuJJtf1TVO4pTP+s29lmOo9G0xbFrPymcLXNji2h0NcArZ1D6egUTr2m7JoI
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
rmYCqZbHxCE3Y+uXuKYQu61UetcjJj7wI3nN0UNMzIdOvdVRZeIzDUV+SiJT
6A3PQ2HeMiZW54tuOMg9hcxf6mtnXmJilvPdAo5YJu7lexyx9QYT/36T467E
N4WMDmMBI7jO3VjruWzlFBqdsSn6kcjE91SJfQuOTHxRuyIzUHgKWa/9fmvo
wyQqvFUl87p/EumICDicsGHiK5uFTVWvM3Gu+e/+jUZMrNrzb71c1yQyLwkW
ubKbibcMD7h4JjMxbXN1xzMTJtY3aZQXPsrEA9kHJTdYMWFOP7MleyMTj7Wg
6MC1U6jqQdQeAekp9DPH7XyTDhMnNagkR1cxcWK1l9wBB/DKM2vLHYyZOLZ0
JHTXl0mUsaX6SeFxJvY/t2fp4s9JpHXxQ6/Y7CQ6EhK3VVF0CnU6CuWfrWXi
wBNPD745ycRr1QJF6nSZ+MLHQQ5J2Sm00UDnZYA+nPsh1115zimkxGvZ/5d9
Ch0+6Oh1eR8TawmMpOj3TaLQYaPSbXBuA5NzM7yCU2jPa5EgMag7VMXK8OZD
wGsx7oDTKSbmRpeDVMSn0CbRkFR26Cvb2/kn62qYOFX2jXMz3E++6miQtnoK
OZpU/BbUYOKJmtQ7wpOTSM3Hf43/+CTyedn4QQDOe6GiUJqNOYl2ZUh8DpyY
RHwfvVdx/plE94MWZ0ZXTCH3q/uL5xehXnUd+XzAZ5OZ4fqAm0zMI/Suxxfe
99u5Mnl5CBMftSvaWvlpEtmpabMVi00hG+VVZssvMHEX67j9LujbmfG3j3sH
JpFSRp/DkR1MfN/9a+/Zp0wsyLiyKxfwHhFsPiowN4lup7WqCgN/1dhVHHqD
YX2JUjkJ6K9f7wZO7gomdt1uGqxcxMR9keod46VMHDAdOvNRbgr1fx/eufcu
9Lc/5tvlTOCtR7T2Py0mHh+q/zzYDPy/H+gXaMfE4pdbV/6FdYolViXeAnzc
mRf/3qdPotzQbwkzvyfRuUuju3y2MHF/H6UfuWwKjWckv4vmmUIv8g8wVwFu
1eanXdqgD/0FtF+77Zm4olxuXzBrEvVdZOdR+jqJlm2+58ICHMsOpZbQ0pn4
5ZWdiitXTSE+PXpo81kmDks+1UMAHvcSq5Q3bWViHa/3+819mfiVAq22SpuJ
LwtYjjGhDgf1DbaHgPe0VM/bDdDPLTeK45PgPJri/RESjdC/yLzvLDjHx2X9
80lmTPzE6tPqYf4ppJ1wRuv78CQyYzspncM2hTZwSugxnJj45uOU7Tdhf2Tf
mccOuvoRoet10pWJpyr/fMnwYWJ5q23GhD8T75dblh3iDbpOvXf/Oui8bqmA
69cdJmZyrRC0Br6NPOr9bB7ExIcSPiTulJhCHLlZ4nKA2+mwZw4icP5vy0ed
T1szccKWn6/yX8F+kkpjWmpMzNb7ht0E8DC8WcfzHfR7qVXlqsEz4BF/w71A
OPfuP67+A7COO+W0uxR4w58gWGQBfT+8d+KUP1zltsUwDgLOiiPZgc/nJ1HX
iOs3BeDNqOvwgeESJuZc7BHXhfreBSiKdID+PK6vyn9WzsTp687XLsK6sq9s
BsMB/6J9lkd4aZPo8GGXx/ehjjVSJyf3GAIv4jZdzYZzf/wiecwXdGOUZquv
AHrw/BMp5n6OiUVK7m1cCbrvvrHV8xrgHRog03ANeKNY1LRvz99J5JDw9DUn
8KOGabHa0At89piqMB/468FH2erpLUwcFXiwTBD8NO5ZAlvCr0k0H274+wP4
0G69HYLnliZRzLcPbpnAH8c/WhMy0C/+FXqRfYC/okzMo8F8JlY20NAyhHP/
5S55sS4H/OHPufCCOCZ+PClR99uNiU8l1XGFgz+oGr/UWGJMglsHpW1eN4Ue
SEdPel5k4jT3OM+Kl0x82CPMrUoFzvPC+Fgf3M/kuOu4axcTb3KbDpSPZOKH
bsZjDwBXPVXuBAvow9FhbqcG8KNEno23FaDuM7fnJFRjmJhrkkevXGYK8Vxd
OB3QPYn2nbz9NA3ypiwoMfkV8Ei3N5fvGPSh+jHOdD8N/uMTWJ0N101ptg0D
oA8DTzMxEdivX/FdiPTUJGr4uG4iFnzmp/bjR1fDmLj9WdtgHdQntZmZ7wr4
Pr/0a/g7+AEpwpH/9zITL1ReTbaD/q+TZZMKAf93Lj74Kg7qbNi8xcwb/OGJ
wAq/2Z5JxJixf3AC6vglI3+Czxnwf/XxYxzkxjuviP2bQR8+uvrhIrDO96N/
aPyeTLxxYGhT98gkChJie2lWwMRLWz/7q7oDr8clx+p/TKLgpsrjWbxTaJ9S
2Ik56GMj9fo8P/ifpGD58mXga4+f3xz1hP5XG858Wg08FV3/wtFzCOq7wSf8
E3KgV9bTQec75Nves7p1oC/hWxfUZ8Hf7UyfPuABP0uq4KHvXphE3G+FQ/rB
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
7g==
         "], CompressedData["
1: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
         "]}], "NeighborsNumber" -> 50, 
      "ClassPriors" -> {0.21965317919075145`, 0.7803468208092486}, 
      "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UDACSDAxMTGCEAiC2GASHUAEGRkhihixKIKqYCKogrAZ9LGF1mYAAAGWDxg=

       "], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 57.], 
         "Key" -> 
         "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Method" -> "NearestNeighbors", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "Scan", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[14913], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.5958932`7.226713423023247, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.5213557860343329, 0.07266884109626072],
          "Accuracy" -> Around[0.7781256159744978, 0.05935842370625901], 
         "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 100, 
         "ModelMemory" -> 30304, "ModelUtility" -> -0.06935971285664921, 
         "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
         155240, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.5213557860343329, 0.05138463032013362]}, 
         "AccuracyHistory" -> {
           Around[0.7781256159744978, 0.04197274392324006]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 344], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 255108373491440]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2879379229852592`, 0.12208732392420708`], "Accuracy" -> 
              Around[0.49514530173913657`, 0.038612936039650124`], 
              "EvaluationTime" -> 0.00001958532660884363, "TestSize" -> 334, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.9650056007916756, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 120248, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2879379229852592`, 0.08632877464372544]}, 
              "AccuracyHistory" -> {
                Around[0.49514530173913657`, 0.027303468915159033`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6404659465791386, 0.06593617194483836], "Accuracy" -> 
              Around[0.686591225356683, 0.03843407940693436], 
              "EvaluationTime" -> 8.804953977716198*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.26800368882847214`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 158776, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6404659465791386, 0.046623914307677386`]}, 
              "AccuracyHistory" -> {
                Around[0.686591225356683, 0.027176998177305522`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5397952957868533, 0.09489596684900603], "Accuracy" -> 
              Around[0.7941526744774872, 0.06996243070997928], 
              "EvaluationTime" -> 0.000011512003401801179`, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.11117275850513275`, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 414224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5397952957868533, 0.06710158166618597]}, 
              "AccuracyHistory" -> {
                Around[0.7941526744774872, 0.049470909183320304`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011512003401801179`, "MeanCrossEntropy" -> 
             Around[0.5397952957868533, 0.09489596684900603], "ModelMemory" -> 
             9560, "TrainingMemory" -> 414224, "TrainingTime" -> 
             0.12578970112721263`], "Index" -> 1], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7067774857470691, 0.00649220980637668], "Accuracy" -> 
              Around[0.378762063079301, 0.03951956519727703], 
              "EvaluationTime" -> 0.00006854143078948891, "TestSize" -> 300, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.3479986579398481, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 157504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7067774857470691, 0.004590685578974753]}, 
              "AccuracyHistory" -> {
                Around[0.378762063079301, 0.027944552540538462`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5751217172912502, 0.03200952036178032], "Accuracy" -> 
              Around[0.7781256159744978, 0.05935842370625901], 
              "EvaluationTime" -> 0.00007943282347242814, "TestSize" -> 100, 
              "ModelMemory" -> 97648, "ModelUtility" -> -0.15109895514330185`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 187576, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5751217172912502, 0.022634148910343734`]}, 
              "AccuracyHistory" -> {
                Around[0.7781256159744978, 0.04197274392324006]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5779734417457825, 0.04815984888096133], "Accuracy" -> 
              Around[0.7655812459060587, 0.0730753416178205], 
              "EvaluationTime" -> 0.0000726358309604742, "TestSize" -> 69, 
              "ModelMemory" -> 107376, "ModelUtility" -> -0.1615052745465433, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 396176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5779734417457825, 0.034054155724647116`]}, 
              "AccuracyHistory" -> {
                Around[0.7655812459060587, 0.051672069595484406`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000726358309604742, "MeanCrossEntropy" -> 
             Around[0.5779734417457825, 0.04815984888096133], "ModelMemory" -> 
             107376, "TrainingMemory" -> 396176, "TrainingTime" -> 
             0.08154013908779251], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8565935216256463, 0.060664586936034166`], "Accuracy" -> 
              Around[0.576019651806745, 0.03818750244439539], 
              "EvaluationTime" -> 0.000021357390436908772`, "TestSize" -> 334,
               "ModelMemory" -> 5968, "ModelUtility" -> -0.552454234537711, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 73344, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8565935216256463, 0.042896340800350596`]}, 
              "AccuracyHistory" -> {
                Around[0.576019651806745, 0.027002641935009834`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9059819131543204, 0.10046862641952849`], "Accuracy" -> 
              Around[0.6155759330014707, 0.04021743254304534], 
              "EvaluationTime" -> 0.000014470026281506956`, "TestSize" -> 294,
               "ModelMemory" -> 6096, "ModelUtility" -> -0.6163818957911337, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 121344, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9059819131543204, 0.07104204703774651]}, 
              "AccuracyHistory" -> {
                Around[0.6155759330014707, 0.0284380192730999]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9477847235145495, 0.23882610195132836`], "Accuracy" -> 
              Around[0.6798669601917732, 0.0799744565206574], 
              "EvaluationTime" -> 0.000028916845144476506`, "TestSize" -> 69, 
              "ModelMemory" -> 7056, "ModelUtility" -> -0.6887215113805357, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 370248, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9477847235145495, 0.16887555621413403`]}, 
              "AccuracyHistory" -> {
                Around[0.6798669601917732, 0.05655048052746555]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000028916845144476506`, "MeanCrossEntropy" -> 
             Around[0.9477847235145495, 0.23882610195132836`], "ModelMemory" -> 
             7056, "TrainingMemory" -> 370248, "TrainingTime" -> 
             0.08264658982888212], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6158937470339841, 0.05886670240763956], "Accuracy" -> 
              Around[0.7680343615190112, 0.03301694748022631], 
              "EvaluationTime" -> 0.000020780234216245422`, "TestSize" -> 334,
               "ModelMemory" -> 11360, "ModelUtility" -> -0.2274371239190791, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 63192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6158937470339841, 0.04162504445853239]}, 
              "AccuracyHistory" -> {
                Around[0.7680343615190112, 0.023346507457348113`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5213557860343329, 0.07266884109626072], "Accuracy" -> 
              Around[0.7781256159744978, 0.05935842370625901], 
              "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 100,
               "ModelMemory" -> 30304, "ModelUtility" -> -0.06935971285664921,
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              155240, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5213557860343329, 0.05138463032013362]}, 
              "AccuracyHistory" -> {
                Around[0.7781256159744978, 0.04197274392324006]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5358728414882366, 0.08133615086927086], "Accuracy" -> 
              Around[0.7655812459060587, 0.0730753416178205], 
              "EvaluationTime" -> 0.00003640415118129825, "TestSize" -> 69, 
              "ModelMemory" -> 134312, "ModelUtility" -> -0.09925762314839204,
               "TrainingSize" -> 275, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 1527136, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5358728414882366, 0.057513343835273525`]}, 
              "AccuracyHistory" -> {
                Around[0.7655812459060587, 0.051672069595484406`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003640415118129825, "MeanCrossEntropy" -> 
             Around[0.5358728414882366, 0.08133615086927086], "ModelMemory" -> 
             134312, "TrainingMemory" -> 1527136, "TrainingTime" -> 
             0.031268491130230815`], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5086785945085641`, 0.30855266296166295`], "Accuracy" -> 
              Around[0.6665147615944126, 0.039019594960816285`], 
              "EvaluationTime" -> 8.688574422264351*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -1.1445055015349073`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 158952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5086785945085641`, 0.21817968033335913`]}, 
              "AccuracyHistory" -> {
                Around[0.6665147615944126, 0.027591020195945632`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.688574422264351*^-6, "MeanCrossEntropy" -> 
             Around[1.5086785945085641`, 0.30855266296166295`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 158952, "TrainingTime" -> 
             0.17675958372575273`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2060156567032696`, 0.22282629477846386`], "Accuracy" -> 
              Around[0.6699367139512042, 0.03891970888312907], 
              "EvaluationTime" -> 7.549706850097808*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.9167902359760126, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 158816, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2060156567032696`, 0.15756198406452437`]}, 
              "AccuracyHistory" -> {
                Around[0.6699367139512042, 0.027520390073066874`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.549706850097808*^-6, "MeanCrossEntropy" -> 
             Around[1.2060156567032696`, 0.22282629477846386`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 158816, "TrainingTime" -> 
             0.17675958372575273`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6879351936294427, 0.0054690815980640226`], "Accuracy" -> 
              Around[0.5717264645691134, 0.040864742697604296`], 
              "EvaluationTime" -> 7.252192442542398*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3207101553623236, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 123640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6879351936294427, 0.0038672246848536302`]}, 
              "AccuracyHistory" -> {
                Around[0.5717264645691134, 0.028895736672919444`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6857571813234223, 0.013390153782988313`], "Accuracy" -> 
              Around[0.6798669601917732, 0.0799744565206574], 
              "EvaluationTime" -> 7.26358309604742*^-6, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.31984799446046364`, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 414288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6857571813234223, 0.009468268541081739]}, 
              "AccuracyHistory" -> {
                Around[0.6798669601917732, 0.05655048052746555]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.26358309604742*^-6, "MeanCrossEntropy" -> 
             Around[0.6857571813234223, 0.013390153782988313`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 414288, "TrainingTime" -> 
             0.062388841998088224`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.681639988710264, 0.006974684920903623], "Accuracy" -> 
              Around[0.5785169298784223, 0.040780387952447865`], 
              "EvaluationTime" -> 7.549706850097808*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3119727750872253, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 143312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.681639988710264, 0.004931847004210511]}, 
              "AccuracyHistory" -> {
                Around[0.5785169298784223, 0.028836088860594068`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6550128413360032, 0.017926418643874314`], "Accuracy" -> 
              Around[0.73700981733463, 0.07575369406143168], "EvaluationTime" -> 
              0.00001824529582310386, "TestSize" -> 69, "ModelMemory" -> 9560,
               "ModelUtility" -> -0.2755403148912976, "TrainingSize" -> 275, 
              "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              414304, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6550128413360032, 0.01267589218547248]}, 
              "AccuracyHistory" -> {
                Around[0.73700981733463, 0.05356595077076943]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001824529582310386, "MeanCrossEntropy" -> 
             Around[0.6550128413360032, 0.017926418643874314`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 414304, "TrainingTime" -> 
             0.05950984188052233], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NearestNeighbors", 
             "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 255104078524144]], "MaxTrainingSize" -> 344, 
      "PreprocessorEvaluationTime" -> 6.98779296875`2.*^-6, 
      "PreprocessorMemory" -> 140184, "InputDimension" -> 57, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.5264686513833823,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341280575708`17.33219102185116*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.19599999999999998`, 
          "ElapsedTimes" -> 0.24099060000000003`, "ExperimentCounts" -> 4], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.2799999999999999, 
          "ElapsedTimes" -> 0.2704024, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 275, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3951164, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 255116963426032]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0019379027218397245`}, "ID" -> 409251839101269641], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.022407397244415254`}, "ID" -> 326443491569516412], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0011667601746633296`}, "ID" -> 4617151243067130693],
          "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0035505386473264054`}, "ID" -> 3847058731637961396],
          "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.9709374012117552}, "ID" -> 1550769539092452072], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4566299349548747729], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5281953842742779835], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           864071114060536909], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8602141862850935053], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3684798737199186902], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7157965224975778712], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2277595385251386491], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4707492563336670910], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2635933900597327876], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8658238946160944311], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           673363359736198622], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           9209882074316023266], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4855128092717934927], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4294985942659470807], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           452597030328945653], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3877867313170298906], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7945915476612009301], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8125370216941183660], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2736225440220478175], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           579271578762495287], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8888998916573999194], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6565212055496162119], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5948617656265438893], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6789960729142072493], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           509453379887117175], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4400808152313314709], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1318813831327594086], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1813976550652439649], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4320659230534071098], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5808849769547630770], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7156102567382871523], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2736744705068517168], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           402909659175372110], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2911071451458438064], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6593728500736076952], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8254314243965326226], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5322721432344621758], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5940584945874276740], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7554583220496723327], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1750478181493871245], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5666386418475060813], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6981504076120540145], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7515647317354059466], "f49" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2009645930298535236], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2364273359704558720], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3653882301643030198], "f52" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7516360777700970497], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4237284226792779610], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3947848040399400696], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1868431661634126628], "f56" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4576044716669221074], "f57" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6251611776996571102]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.797392, 
      "MaxTrainingMemory" -> 2650200, "DataMemory" -> 3019552, 
      "FunctionMemory" -> 561728, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 8.4931958`8.681646103655655}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.792148434125085*^9, 3.792844634396385*^9, 3.7943046214557076`*^9, 
   3.7943048135520153`*^9, 3.794315071424486*^9, 3.7943500772492332`*^9, 
   3.794603791707799*^9, 3.79486495128209*^9, 3.795346696802096*^9, 
   3.7953763151745653`*^9, {3.7953765658334737`*^9, 3.795376577241976*^9}, 
   3.7959513133710947`*^9, 3.7977278586066184`*^9, 3.7977288849584236`*^9, 
   3.797767997338625*^9, 3.79777335831527*^9, 3.7977768863475943`*^9, 
   3.7977773766800213`*^9, 3.7977781453877234`*^9, 3.797778876435275*^9, 
   3.7977859913297563`*^9, 3.7977975432022696`*^9, 3.797805533315652*^9, 
   3.7985481428156095`*^9, 3.7985485285974274`*^9},
 CellLabel->
  "Out[133]=",ExpressionUUID->"9aaf8a0a-33ed-439f-80d2-5dc3150a2d84"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cmclassAllMaccs", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classAllmaccs", ",", 
     RowBox[{"mLmaccs", "@", "allDataMACCsTest"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921484401372275`*^9, 3.792148475276726*^9}, {
  3.795376570310504*^9, 3.795376594872878*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"15b1120a-61ee-4984-a994-08e017ad7998"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassAllMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921484773448987`*^9, 3.7921484838234296`*^9}, {
  3.7953765994346457`*^9, 3.795376599747847*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"ae9b84f3-7d66-4c3d-810b-451f349ded58"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.7790697674418605`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "Indeterminate"}], ",", 
       RowBox[{"True", "\[Rule]", "Indeterminate"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "1.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.49175176747839744`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.40455616653574233`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8758169934640523`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7921484846629705`*^9, 3.7928446346775665`*^9, 
  3.794304621610263*^9, 3.794304813859781*^9, 3.794315071658966*^9, 
  3.7943500775401783`*^9, 3.794603791943117*^9, 3.7948649516861167`*^9, 
  3.7953466969836116`*^9, 3.795376315581476*^9, 3.7953766003372355`*^9, 
  3.7959513136666117`*^9, 3.797727858844861*^9, 3.7977288897135067`*^9, 
  3.7977679977148457`*^9, 3.797773358674595*^9, 3.7977768866443996`*^9, 
  3.797777377148664*^9, 3.797778145857532*^9, 3.7977788767476997`*^9, 
  3.79778599180068*^9, 3.797797543715542*^9, 3.7978055337973633`*^9, 
  3.79854814340209*^9, 3.79854852884779*^9},
 CellLabel->
  "Out[135]//TableForm=",ExpressionUUID->"2eba8681-ef98-4f67-9240-\
ad575b87e735"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "trained", " ", "on", " ", "all", " ", "columns", " ", "and", " ", "only", 
   " ", "lanthanum", " ", "reactions"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7921916289796386`*^9, 3.792191636590398*^9}},
 CellLabel->
  "In[136]:=",ExpressionUUID->"072e0a9e-bcbc-4704-b02c-ac2c87ff6493"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classLaAllMaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccs", "@", "laDataMaccsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.792191639301463*^9, 3.792191679826892*^9}, {
  3.795376621341117*^9, 3.795376667645301*^9}, {3.795376901305683*^9, 
  3.7953769038339252`*^9}, {3.7953771624634914`*^9, 3.795377162819581*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"c6c26e28-0082-444d-a980-90fe5804676e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", "Boolean",
                     "Numerical", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", "Boolean",
                     "Numerical", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["114", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 114, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Numerical"], "maccs65" -> 
           Association["Type" -> "Numerical"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Numerical"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Numerical"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Numerical"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Numerical"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Numerical"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Numerical"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                  "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                  "H2O Mole Fraction", "pH", "maccs53", "maccs54", "maccs62", 
                  "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                  "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                  "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                  "maccs103", "maccs104", "maccs105", "maccs108", "maccs111", 
                  "maccs115", "maccs116", "maccs118", "maccs120", "maccs121", 
                  "maccs122", "maccs128", "maccs129", "maccs131", "maccs133", 
                  "maccs134", "maccs137", "maccs138", "maccs141", "maccs145", 
                  "maccs147", "maccs148", "maccs149", "maccs151", "maccs153", 
                  "maccs155", "maccs156", "maccs158", "maccs160", "maccs162", 
                  "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 57]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Boolean", "Boolean", "Numerical",
                   "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55", "f56", "f57"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f5f6f9f10f24f29f42f49f52f54)(\
f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36f3\
7f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f9f10f24f29f42f49f52f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 9106688290666784274]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6f9f10f24f29f42f49f52f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]], 
             "Mean" -> {0.0027412486734471114`, 0.036926612430216, 
              0.001293490473503618, 0.00551591410082522, 0.9535227343220076, 
              2.6491228070175437`, 0., 0., 1., 1., 1., 1., 1., 0.}, 
             "StandardDeviation" -> {0.0008229396922519346, 
              0.007504171839744834, 0.00039731195105714153`, 
              0.001842462714156329, 0.006381153257876798, 1.6542473570333343`,
               1., 1., 1., 1., 1., 1., 1., 1.}, "Version" -> {12.1, 0}, "ID" -> 
             8830355743985319605, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f9f10f24f29f42f49f52f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f\
32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 7878474324970464387]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f\
32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 7112570612641692207, "Output" -> 
             Association[
              "(f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f\
32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f\
32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 7726691373013061570, "Output" -> 
             Association[
              "(f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f\
32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 43]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6f9f10f24f29f42f49f52f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14], 
               "(f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31\
f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 43]], 
             "Spans" -> {
               Span[1, 14], 
               Span[15, 57]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f5f6f9f10f24f29f42f49f52f54)(\
f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36f3\
7f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 6415682609051684618]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6f9f10f24f29f42f49f52f54)(\
f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36f3\
7f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 114, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKFe9o+SZ06bmPV/VJnWfFrm6bfHO+Ud1y1MZx7tETs
8sY9cc6VvKJfDW0DQIynS20YKAQQc0/aa6wH2XzL3icdJLLN/nIkiPXUHiZ/
sJblu+Cd5/YF8iDWRnsgx71A/qF9HUjY/YI9iHew9glcHOK+p/ZgyvQIXJ/U
qWygVXeg/IP2YGulXtmHgsFRqDt22adDLIbToFDof/DOPgkcMJftf0ME4PZD
xB/bA8Xsmn6/gJsLswdGw/TB/AmzF2Y+zDywcZtPwM35BHb4Q6i+a3B3wfwD
MxdmDwD9j8Tf
                    "], "Method" -> "Naive", "VectorLength" -> 57, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKFe9o+SZ06bmPV/VJnWfFrm6bfHO+Ud1y1MZx7tETs
8sY9cc6VvKJfDW0DQIynS20YKAQQc0/aa6wH2XzL3icdJLLN/nIkiPXUHiZ/
sJblu+Cd5/YF8iDWRnsgx71A/qF9HUjY/YI9iHew9glcHOK+p/ZgyvQIXJ/U
qWygVXeg/IP2YGulXtmHgsFRqDt22adDLIbToFDof/DOPgkcMJftf0ME4PZD
xB/bA8Xsmn6/gJsLswdGw/TB/AmzF2Y+zDywcZtPwM35BHb4Q6i+a3B3wfwD
MxdmDwD9j8Tf
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOL/YPDevhxKf4DSzAwg8MHe8vc/MP8nVJwBKk4uHbpE
xYt//U17SUclC9uZ9+01me/dPyd1yf6KJr+B1ve7cHmVFovEmvu37VPmz/HR
jrxgrzQt9OLZ1/fh4rMmmkks2XYPLv5m6kP/I/vv2j+cd7jXJ+w6XJ9Q2j6B
2kv37Vemr8v9Z3XNfvHB6WZR52/Ym7qVnv9y87q9y/SvxvJLLtuvvpfhXu1+
F04fVjn9JKb3uH1jXsxnq9a79pktecu+/ELYX+Fg8EZC4759UbPoKcvqW3Bz
YfbAaJg+mD9h9sLMh5mnbrKj7KjjTbg5wlB3X1vDelOn+x7cXTD/wMyF2QMA
+8je8w==
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 57, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 57]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 13]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKFe9o+SZ06bmPV/VJnWfFrm6bfHO+Ud1y1MZx7tETs
8sY9cc6VvKJfDW0DQIynS20YKAQQc0/aa6wH2XzL3icdJLLN/nIkiPXUHiZ/
sJblu+Cd5/YF8iDWRnsgx71A/qF9HUjY/YI9iHew9glcHOK+p/ZgyvQIXJ/U
qWygVXeg/IP2YGulXtmHgsFRqDt22adDLIbToFDof/DOPgkcMJftf0ME4PZD
xB/bA8Xsmn6/gJsLswdGw/TB/AmzF2Y+zDywcZtPwM35BHb4Q6i+a3B3wfwD
MxdmDwD9j8Tf
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOL/YPDevhxKf4DSzAwg8MHe8vc/MP8nVJwBKk4uHbpE
xYt//U17SUclC9uZ9+01me/dPyd1yf6KJr+B1ve7cHmVFovEmvu37VPmz/HR
jrxgrzQt9OLZ1/fh4rMmmkks2XYPLv5m6kP/I/vv2j+cd7jXJ+w6XJ9Q2j6B
2kv37Vemr8v9Z3XNfvHB6WZR52/Ym7qVnv9y87q9y/SvxvJLLtuvvpfhXu1+
F04fVjn9JKb3uH1jXsxnq9a79pktecu+/ELYX+Fg8EZC4759UbPoKcvqW3Bz
YfbAaJg+mD9h9sLMh5mnbrKj7KjjTbg5wlB3X1vDelOn+x7cXTD/wMyF2QMA
+8je8w==
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 13, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0197424, "MaxTrainingMemory" -> 211784, 
                  "DataMemory" -> 53360, "FunctionMemory" -> 32696, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 9.0671223`8.710044438272735}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 57, "Output" -> 
             Association[
              "((f1f2f3f4f5f6f9f10f24f29f42f49f52f54)(\
f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36f3\
7f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             8132295594005813922]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6f9f10f24f29f42f49f52f54)(\
f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36f3\
7f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKFe9o+SZ06bmPV/VJnWfFrm6bfHO+Ud1y1MZx7tETs
8sY9cc6VvKJfDW0DQIynS20YKAQQc0/aa6wH2XzL3icdJLLN/nIkiPXUHiZ/
sJblu+Cd5/YF8iDWRnsgx71A/qF9HUjY/YI9iHew9glcHOK+p/ZgyvQIXJ/U
qWygVXeg/IP2YGulXtmHgsFRqDt22adDLIbToFDof/DOPgkcMJftf0ME4PZD
xB/bA8Xsmn6/gJsLswdGw/TB/AmzF2Y+zDywcZtPwM35BHb4Q6i+a3B3wfwD
MxdmDwD9j8Tf
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOL/YPDevhxKf4DSzAwg8MHe8vc/MP8nVJwBKk4uHbpE
xYt//U17SUclC9uZ9+01me/dPyd1yf6KJr+B1ve7cHmVFovEmvu37VPmz/HR
jrxgrzQt9OLZ1/fh4rMmmkks2XYPLv5m6kP/I/vv2j+cd7jXJ+w6XJ9Q2j6B
2kv37Vemr8v9Z3XNfvHB6WZR52/Ym7qVnv9y87q9y/SvxvJLLtuvvpfhXu1+
F04fVjn9JKb3uH1jXsxnq9a79pktecu+/ELYX+Fg8EZC4759UbPoKcvqW3Bz
YfbAaJg+mD9h9sLMh5mnbrKj7KjjTbg5wlB3X1vDelOn+x7cXTD/wMyF2QMA
+8je8w==
              "], "Output" -> 
             Association[
              "((f1f2f3f4f5f6f9f10f24f29f42f49f52f54)(\
f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36f3\
7f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Version" -> {12.1, 0}, "ID" -> 4873523930168382073]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 6995767557603505475]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 2734911975669049395, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 2109313300824996630]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.25862068965517243`, True -> 0.7413793103448276]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{0.7214610576629639, 0.5097882747650146, 
             0.17668753862380981`, 0.14247989654541016`, 
             0.23758994042873383`, -0.8342257738113403, -2.549966335296631, 
             4.576510906219482, 2.805175304412842, 
             0.3432217836380005, -0.6282683610916138, -0.24056100845336914`, \
-2.327699899673462, 9.401082992553711, 
             0.3464200496673584, -11.968358993530273`, 
             10.087943077087402`, -7.091392517089844, -9.186393737792969, \
-6.316587448120117, 9.444303512573242, 9.023697853088379, -0.8084466457366943,
              10.920552253723145`, 14.010289192199707`, 
             30.462116241455078`, -12.119884490966797`, 
             14.18260669708252, -5.312049865722656, 
             0.6958900094032288, -12.809287071228027`, 3.0935754776000977`, 
             11.869028091430664`, 8.197072982788086, 
             5.650193691253662, -7.728068828582764, -9.856184959411621, 
             9.42148208618164, 8.511183738708496, -0.430122047662735, 
             47.4310188293457, -14.651201248168945`, -2.827026128768921, \
-11.39688491821289, 2.6681621074676514`, 10.20643138885498, 
             1.4907230138778687`, -2.7246146202087402`, 4.270147323608398, 
             1.6799077987670898`, -9.69538688659668, 17.327835083007812`, 
             15.706826210021973`, 4.183755397796631, 
             0.8654782176017761, -3.051877498626709, -10.246150016784668`}}], 
           "Biases" -> RawArray["Real32",{-37.59033966064453}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 57, 
           "$InputDimensions" -> {57}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{57}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.4", "Unstable" -> False]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 57., "Type" -> "NumericalVector"], 
         "Key" -> 
         "((f1f2f3f4f5f6f9f10f24f29f42f49f52f54)(\
f7f8f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36f3\
7f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Method" -> "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.0001, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[14961], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.3284556`6.968021664261678, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.4611510916045709, 0.11734055786615197`], "Accuracy" -> 
         Around[0.8151923373995732, 0.12039887195229698`], "EvaluationTime" -> 
         0.000027432928020877956`, "TestSize" -> 23, "ModelMemory" -> 9560, 
         "ModelUtility" -> 0.031210015741635178`, "TrainingSize" -> 91, 
         "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 199032, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.4611510916045709, 0.08297230417536854]}, 
         "AccuracyHistory" -> {
           Around[0.8151923373995732, 0.08513485880468001]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.0001, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 114], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 49817526677234]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.574767982802556, 1.709906624911566], "Accuracy" -> 
              Around[0.7256461609758977, 0.06385255540247138], 
              "EvaluationTime" -> 0.0004021284551045426, "TestSize" -> 99, 
              "ModelMemory" -> 56336, "ModelUtility" -> -2.4709802890306385`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 174456, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.574767982802556, 1.2090865696707707`]}, 
              "AccuracyHistory" -> {
                Around[0.7256461609758977, 0.04515057492117723]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.3185168875723794`, 1.091101793806636], "Accuracy" -> 
              Around[0.8151923373995732, 0.12039887195229698`], 
              "EvaluationTime" -> 0.000547358874693116, "TestSize" -> 23, 
              "ModelMemory" -> 83056, "ModelUtility" -> -1.122860958481837, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 681896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3185168875723794`, 0.7715254773654784]}, 
              "AccuracyHistory" -> {
                Around[0.8151923373995732, 0.08513485880468001]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000547358874693116, "MeanCrossEntropy" -> 
             Around[1.3185168875723794`, 1.091101793806636], "ModelMemory" -> 
             83056, "TrainingMemory" -> 681896, "TrainingTime" -> 
             0.10725406799623624`], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6893882755552494, 0.00893547607493553], "Accuracy" -> 
              Around[0.7456461609758979, 0.062390960103567566`], 
              "EvaluationTime" -> 0.000020154164797665444`, "TestSize" -> 99, 
              "ModelMemory" -> 20720, "ModelUtility" -> -0.32382272519808253`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 69504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6893882755552494, 0.006318335725717068]}, 
              "AccuracyHistory" -> {
                Around[0.7456461609758979, 0.04411707097397197]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6624542485359456, 0.22037167605534685`], "Accuracy" -> 
              Around[0.6068590040662396, 0.1452576640715988], 
              "EvaluationTime" -> 0.0002743292802087796, "TestSize" -> 23, 
              "ModelMemory" -> 119656, "ModelUtility" -> -0.34581608996379, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 375560, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6624542485359456, 0.15582630652018087`]}, 
              "AccuracyHistory" -> {
                Around[0.6068590040662396, 0.10271267928434503`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002743292802087796, "MeanCrossEntropy" -> 
             Around[0.6624542485359456, 0.22037167605534685`], "ModelMemory" -> 
             119656, "TrainingMemory" -> 375560, "TrainingTime" -> 
             0.12217619536025187`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7194652922645491, 0.14188142075429688`], "Accuracy" -> 
              Around[0.7156461609758976, 0.06452447051945513], 
              "EvaluationTime" -> 0.000010101010101010101`, "TestSize" -> 99, 
              "ModelMemory" -> 5968, "ModelUtility" -> -0.4026168554448927, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 77480, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7194652922645491, 0.10032531473974508`]}, 
              "AccuracyHistory" -> {
                Around[0.7156461609758976, 0.0456256906567782]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0368498761885832`, 0.38214557748678923`], "Accuracy" -> 
              Around[0.6068590040662396, 0.1452576640715988], 
              "EvaluationTime" -> 0.000027432928020877956`, "TestSize" -> 23, 
              "ModelMemory" -> 6160, "ModelUtility" -> -0.8004907444223609, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 161824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0368498761885832`, 0.2702177292413579]}, 
              "AccuracyHistory" -> {
                Around[0.6068590040662396, 0.10271267928434503`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000027432928020877956`, "MeanCrossEntropy" -> 
             Around[1.0368498761885832`, 0.38214557748678923`], "ModelMemory" -> 
             6160, "TrainingMemory" -> 161824, "TrainingTime" -> 
             0.022295032041696316`], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6389719441564907, 0.02271579202730337], "Accuracy" -> 
              Around[0.7256461609758977, 0.06385255540247138], 
              "EvaluationTime" -> 0.0000637330650990094, "TestSize" -> 99, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.2523925676350899, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 160816, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6389719441564907, 0.016062490582529523`]}, 
              "AccuracyHistory" -> {
                Around[0.7256461609758977, 0.04515057492117723]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6241995747517823, 0.05299279902761671], "Accuracy" -> 
              Around[0.7735256707329065, 0.12804441491888538`], 
              "EvaluationTime" -> 0.0002743292802087796, "TestSize" -> 23, 
              "ModelMemory" -> 98096, "ModelUtility" -> -0.23875446060565209`,
               "TrainingSize" -> 91, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 222584, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6241995747517823, 0.037471567546483654`]}, 
              "AccuracyHistory" -> {
                Around[0.7735256707329065, 0.09054107408220778]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002743292802087796, "MeanCrossEntropy" -> 
             Around[0.6241995747517823, 0.05299279902761671], "ModelMemory" -> 
             98096, "TrainingMemory" -> 222584, "TrainingTime" -> 
             0.03391671431866783], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7656005412198684, 0.10666578109554326`], "Accuracy" -> 
              Around[0.5956461609758973, 0.0699035683531273], 
              "EvaluationTime" -> 0.000012716418300951175`, "TestSize" -> 99, 
              "ModelMemory" -> 13408, "ModelUtility" -> -0.453571428663714, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 74080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7656005412198684, 0.07542409713321847]}, 
              "AccuracyHistory" -> {
                Around[0.5956461609758973, 0.04942928721163366]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5212190607325015, 0.11694085632944856`], "Accuracy" -> 
              Around[0.8151923373995732, 0.12039887195229698`], 
              "EvaluationTime" -> 0.00005473588746931157, "TestSize" -> 23, 
              "ModelMemory" -> 50848, "ModelUtility" -> -0.0855010498323604, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 344656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5212190607325015, 0.08268967250831487]}, 
              "AccuracyHistory" -> {
                Around[0.8151923373995732, 0.08513485880468001]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005473588746931157, "MeanCrossEntropy" -> 
             Around[0.5212190607325015, 0.11694085632944856`], "ModelMemory" -> 
             50848, "TrainingMemory" -> 344656, "TrainingTime" -> 
             0.020661323139255432`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1455555514747677`, 0.2183367975570439], "Accuracy" -> 
              Around[0.6656461609758973, 0.06734017833186834], 
              "EvaluationTime" -> 6.37330650990094*^-6, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.8664818855582299, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 124512, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1455555514747677`, 0.15438743013514017`]}, 
              "AccuracyHistory" -> {
                Around[0.6656461609758973, 0.04761669674477551]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4853890217853301, 0.11364730109521061`], "Accuracy" -> 
              Around[0.8151923373995732, 0.12039887195229698`], 
              "EvaluationTime" -> 0.000017309007415369432`, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.016141192350290434`,
               "TrainingSize" -> 91, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 199208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4853890217853301, 0.08036077726797276]}, 
              "AccuracyHistory" -> {
                Around[0.8151923373995732, 0.08513485880468001]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017309007415369432`, "MeanCrossEntropy" -> 
             Around[0.4853890217853301, 0.11364730109521061`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 199208, "TrainingTime" -> 
             0.0851949344984484], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.4328040355643474`, 0.7236730561859268], "Accuracy" -> 
              Around[0.6656461609758973, 0.06734017833186834], 
              "EvaluationTime" -> 0.000010101010101010101`, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -1.967856846578191, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 124408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.4328040355643474`, 0.5117141253910622]}, 
              "AccuracyHistory" -> {
                Around[0.6656461609758973, 0.04761669674477551]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4611510916045709, 0.11734055786615197`], "Accuracy" -> 
              Around[0.8151923373995732, 0.12039887195229698`], 
              "EvaluationTime" -> 0.000027432928020877956`, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> 0.031210015741635178`, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 199032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4611510916045709, 0.08297230417536854]}, 
              "AccuracyHistory" -> {
                Around[0.8151923373995732, 0.08513485880468001]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000027432928020877956`, "MeanCrossEntropy" -> 
             Around[0.4611510916045709, 0.11734055786615197`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 199032, "TrainingTime" -> 
             0.0851949344984484], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 49813231709938]], "MaxTrainingSize" -> 114, 
      "PreprocessorEvaluationTime" -> 9.115181194907`1.*^-6, 
      "PreprocessorMemory" -> 139096, "InputDimension" -> 57, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.5716092520747583,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341298980064`17.332191022061583*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.2667972, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 91, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3907311, "ExperimentCounts" -> 7]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 49826116611826]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0030794407373791917`}, "ID" -> 4207867539065565879],
          "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.024592549322025894`}, "ID" -> 7912806483560731870], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.002016980152568147}, "ID" -> 5965761203752319867], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0038177750480312233`}, "ID" -> 8375076442043603798],
          "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.9664932547399955}, "ID" -> 5205097644896790818], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3}, "ID" -> 
           8854627039274792559], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7754319326773593989], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           207921897603130099], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6351408238769381299], "f10" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           344037314210118452], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6348694679514505666], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5252554518335886713], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5232607783926513996], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7303145252814796550], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           90808447787319741], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4503794452530117548], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2837405527786401704], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5636028782333709093], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1813727850741997469], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6709913498313238271], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5143675974651387584], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8726886491183455211], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6773162551935999198], "f24" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8757666475647580641], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1532675434602055945], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6119616733510316592], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6164073935886628217], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6406882757140105747], "f29" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9118073656617951559], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3471280781960335485], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2991007088969221471], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5991154010994051748], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2743158781995461983], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8871617069128402592], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5786645781650657112], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4449226368872108253], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4497375785093605930], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8697050170407933116], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2443537405650142890], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7115060319833467586], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9063755240371144440], "f42" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7161298486736233804], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1149423396418762070], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2479344111619379829], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3271438083699756007], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1605112137093190899], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8487197176029100879], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3425091239092551824], "f49" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2468318163169225798], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2050087499797751690], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3833063325018811940], "f52" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           506134768010460531], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3692097242707087664], "f54" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4732741083377867666], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3623758047278371766], "f56" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7432134570476923960], "f57" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3923686153078021548]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1777565, 
      "MaxTrainingMemory" -> 1156440, "DataMemory" -> 1000976, 
      "FunctionMemory" -> 396568, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 10.0964773`8.756744835070021}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.792191690121501*^9, 3.7928446361652746`*^9, 
  3.79430462171498*^9, 3.7943048157860727`*^9, 3.794315073103039*^9, 
  3.794350078840365*^9, 3.794603793262324*^9, 3.794864953201383*^9, 
  3.7953466971322136`*^9, 3.795376317081466*^9, 3.795376670982376*^9, 
  3.795376919260649*^9, 3.795377168326818*^9, 3.795951315190817*^9, 
  3.79772786014812*^9, 3.797728891201005*^9, 3.797767997814077*^9, 
  3.7977733587526665`*^9, 3.7977768867071276`*^9, 3.797777378757655*^9, 
  3.797778147155982*^9, 3.7977788889608645`*^9, 3.7977859931596503`*^9, 
  3.797797545116291*^9, 3.7978055350460234`*^9, 3.79854814490647*^9, 
  3.798548530192728*^9},
 CellLabel->
  "Out[137]=",ExpressionUUID->"732e7003-e1da-43d3-a39e-ddc1d933ffa6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cmclassLaAllMaccs", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classLaAllMaccs", ",", 
     RowBox[{"mLmaccs", "@", "laDataMaccsTest"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.792191696978462*^9, 3.792191719345213*^9}, {
  3.795376679289173*^9, 3.7953766980550394`*^9}, {3.7953771704631095`*^9, 
  3.7953771800634747`*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"71b835fc-02e2-46ec-a066-657853de1b51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassLaAllMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921917214753084`*^9, 3.792191725875949*^9}, {
  3.7953767021121593`*^9, 3.79537670445792*^9}, {3.7977288993129654`*^9, 
  3.7977288998642545`*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"c5080808-ce12-41ad-bce6-cde0dcbdb52a"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.8214285714285714`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.6363636363636364`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.9411764705882353`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.6243713415848885`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.6243713415848885`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.6363636363636364`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.9411764705882353`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.9411764705882353`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.6363636363636364`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.8181818181818181`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.786096256684492`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.7368421052631579`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8648648648648649`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7921917266046305`*^9, 3.7928446363839383`*^9, 3.79430462180873*^9, 
   3.794304816091254*^9, 3.7943150732748356`*^9, 3.794350079085885*^9, 
   3.7946037934716*^9, 3.7948649534200845`*^9, 3.7953466973247004`*^9, 
   3.795376317309857*^9, 3.7953767051669893`*^9, 3.795376922299566*^9, 
   3.795377186807452*^9, 3.7959513154945197`*^9, 3.797727860348608*^9, {
   3.7977288915173993`*^9, 3.7977289025579267`*^9}, 3.7977679978988895`*^9, 
   3.7977733588463955`*^9, 3.7977768867849917`*^9, 3.7977773790544653`*^9, 
   3.7977781473926506`*^9, 3.7977788891951857`*^9, 3.797785993393589*^9, 
   3.797797545333707*^9, 3.7978055352813935`*^9, 3.7985481451438413`*^9, 
   3.7985485304101458`*^9},
 CellLabel->
  "Out[139]//TableForm=",ExpressionUUID->"f550450f-bc5d-4b67-81fe-\
6abbb7693b56"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"only", " ", "erbium", " ", "reactions"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977288707911763`*^9, 3.797728873481537*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"b931f058-5a4e-43ef-91e4-9e2946d4e93f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SeedRandom", "[", "1841", "]"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"erDataMaccsTrain", ",", "erDataMaccsTest"}], "}"}], "=", 
   RowBox[{
    RowBox[{"trainTestSplit", "[", "0.8", "]"}], "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"allDataMACCs", ",", "erGroupQ"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794605113752078*^9, 3.7946051163631415`*^9}, {
   3.794605161940297*^9, 3.7946051657437077`*^9}, {3.794605206564088*^9, 
   3.794605254912093*^9}, 3.794605297402562*^9, {3.79537682024638*^9, 
   3.795376838651147*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"32260238-cfa3-4ab1-920a-9dac62939406"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "trained", " ", "on", " ", "all", " ", "columns", " ", "and", " ", "only", 
   " ", "erbium", " ", "rxns"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.794605092910086*^9, 3.794605102072039*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"c8ca546a-be6e-4997-90e4-ccde0cc52a36"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classErAllMaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccs", "@", "erDataMaccsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794605324722955*^9, 3.7946053860154347`*^9}, {
  3.7953768562451415`*^9, 3.795376875313139*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"f7c8dbfd-4e01-46f5-84b7-8f5fad474ce0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", "Boolean",
                     "Numerical", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Numerical",
                     "Boolean", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["110", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Boolean"], "maccs65" -> 
           Association["Type" -> "Numerical"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Numerical"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Numerical"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Numerical"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Numerical"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Numerical"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Numerical"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                  "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                  "H2O Mole Fraction", "pH", "maccs53", "maccs54", "maccs62", 
                  "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                  "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                  "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                  "maccs103", "maccs104", "maccs105", "maccs108", "maccs111", 
                  "maccs115", "maccs116", "maccs118", "maccs120", "maccs121", 
                  "maccs122", "maccs128", "maccs129", "maccs131", "maccs133", 
                  "maccs134", "maccs137", "maccs138", "maccs141", "maccs145", 
                  "maccs147", "maccs148", "maccs149", "maccs151", "maccs153", 
                  "maccs155", "maccs156", "maccs158", "maccs160", "maccs162", 
                  "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 57]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55", "f56", "f57"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 13]], 
             "Version" -> {12.1, 0}, "ID" -> 3843819132712164175]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 13]], 
             "Mean" -> {0.0027125744939508526`, 0.03661327540196216, 
              0.0013702662912860152`, 0.005885270631865775, 
              0.9534186131809349, 2.436363636363636, 0., 1., 1., 1., 1., 1., 
              0.}, "StandardDeviation" -> {0.0008922678396605211, 
              0.007732101328696449, 0.0011033857541175838`, 
              0.0028718051216307847`, 0.006045733366698505, 
              1.8267072847427503`, 1., 1., 1., 1., 1., 1., 1.}, 
             "Version" -> {12.1, 0}, "ID" -> 841287822409083141, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 13]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f3\
1f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 7898357694074848566]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f3\
1f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 8596124423182320670, "Output" -> 
             Association[
              "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f3\
1f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f3\
1f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 8693524375696191030, "Output" -> 
             Association[
              "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f3\
1f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 44]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 13], 
               "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f\
31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 44]], 
             "Spans" -> {
               Span[1, 13], 
               Span[14, 57]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 102437435096265169]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 110, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "Method" -> "Naive", "VectorLength" -> 57, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 57, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 57]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 14]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 14, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0146322, "MaxTrainingMemory" -> 205424, 
                  "DataMemory" -> 51312, "FunctionMemory" -> 33208, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 10.7008827`8.781994565357499}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 57, "Output" -> 
             Association[
              "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             7259735455847470961]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
              "], "Output" -> 
             Association[
              "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Version" -> {12.1, 0}, "ID" -> 2367778904976982516]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 6995767557603505475]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 2734911975669049395, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 2109313300824996630]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.3482142857142857, True -> 0.6517857142857143]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1: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
         "], CompressedData["
1:eJwN0ntPUwcAh+EaQQaZmSJzNx09HHp6oYF2LaWI1t8AC9KSVQJIxyC2Edxg
uhtSDaWUgBYHS0BQakLKwA4HGVEGrC4UqbNEDVIodcOBSkMHy5a0BMkIt8L4
4/0CT15C/UVGwQ4ajXZuO55/8uOgY0LMJo4JijhChH27gvVqClN1qit+tgwh
9DO5X9+XgjfPsh20i9Dq/GVOcJZCvbYhhp5NQtfBzHus5SFdFX6MvHUY/vZZ
yjPNwuDi6IUBCx0lXH/hliEemYsPDNkfETh19/N3jsTF469DenX6bT50Qfmf
at1sGKKfphmHKEz7fDHR/zJQlxS43vU3C02Koo29G7EQhwxlFkg54OtDCeJh
BKx8bL10MvFHY/odq4mE68ID24sFBlp3T52gR2XglWQtxLmTjX98cnugnIRi
boKZp1Hi9J4Z92mJCDb36wFqUzx+LqtYyjeSsKhHZ72DIqxMHvdJbxLoU7h8
wgkBJvaY21r6SfzpWFjdmycD7VVCXYmJgYe2BKvlogzGol3RXbUEjMP69i9T
GFA8uWd/bUaEnKvdAQt2JS6xunNrho+jxr3Gumxjw1MmWXftFGL/++KKZz1C
1NcrfLx1Ah9YnJe00RTCxYLmfRoSNdc6eP/VMTE+xwgofZePc6oPbdxABszl
l20GnRCcNkfSRJgMvjBXd1UWE+WxkqXvb7BxoMyT6dDKwE1fkal7SDh3W7NC
x0gUvWVv6axmgdNlriybj0Sv7c2jKbUkekc6nHX0ODhbb8u/ioqE95qhyjVJ
4fyWqrF5QIlxEzt3upiPO/ckA9flHNwwnfGOmCNwgKFf8vp4yP6t0lSqiUBk
xlwnTcmBx294MRhFwuEStcUOFWL5sKw6uZxE10W1+NGtDLDOxiTmSOKQFMyS
N1jYeFmbr9gQ8PBeTfHzqd4oVDQ9+0EScQgrN+f3Ga/GYmhMpNvMEqP0ZOpw
zranuefUSEsohSO04THHjxQ+8QvaNS0E7ldxt5qX09Dwu/0nTwkPTXFa/ZpC
iG/CTWFMJYGghsmjwVVszCvsqaPFDNiVREFykxKPN0+wGlc5cI/vcPRmM1Bi
O7k400lhQZXzduYqF0m/aryPzqfBsEkl9kVykNxq5z7ZlYKpYBcjlE3gbkKZ
tOeN7V83N+SJOhnGlgMOSvsiIXyq7d9fKQO930o+/4zC9bZU5neFTPwPYwKK
wQ==
         "]}], "NeighborsNumber" -> 5, 
      "ClassPriors" -> {0.3482142857142857, 0.6517857142857143}, 
      "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 
        2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 
        2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 
        2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 
        1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 
        1, 2, 2, 2}], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 57.], 
         "Key" -> 
         "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Method" -> "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 5, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "Scan", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15009], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.3451041`6.989495112442048, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.6630300629157142, 0.031251911055319014`], "Accuracy" -> 
         Around[0.6408746146367451, 0.06985175830050416], "EvaluationTime" -> 
         0.00001325184643993859, "TestSize" -> 95, "ModelMemory" -> 13408, 
         "ModelUtility" -> -0.2916307171884458, "TrainingSize" -> 15, 
         "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 74080, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.6630300629157142, 0.022098438232254908`]}, 
         "AccuracyHistory" -> {
           Around[0.6408746146367451, 0.0493926519720902]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 110], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 268736304721652]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[6.353706902127919, 1.3703720805094761`], "Accuracy" -> 
              Around[0.6304579479700784, 0.07025589306900139], 
              "EvaluationTime" -> 0.00041906017952999695`, "TestSize" -> 95, 
              "ModelMemory" -> 56336, "ModelUtility" -> -2.5844633295475195`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 174328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[6.353706902127919, 0.968999390876968]}, 
              "AccuracyHistory" -> {
                Around[0.6304579479700784, 0.04967841840740784]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.567307216315351, 0.5385846488192204], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.0005722388235428032, "TestSize" -> 22, 
              "ModelMemory" -> 83056, "ModelUtility" -> -1.209027179312316, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 663936, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.567307216315351, 0.380836857423046]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005722388235428032, "MeanCrossEntropy" -> 
             Around[1.567307216315351, 0.5385846488192204], "ModelMemory" -> 
             83056, "TrainingMemory" -> 663936, "TrainingTime" -> 
             0.06891065307598049], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 95, 
              "ModelMemory" -> 20720, "ModelUtility" -> -0.327046890898929, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 69512, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916370843501094, 0.0062588525193839105`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8970808755570837, 0.19787871003986512`], "Accuracy" -> 
              Around[0.5010418697881557, 0.15049692772910647`], 
              "EvaluationTime" -> 0.000361058288511037, "TestSize" -> 22, 
              "ModelMemory" -> 119560, "ModelUtility" -> -0.6277693526805633, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 370936, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8970808755570837, 0.13992137772163518`]}, 
              "AccuracyHistory" -> {
                Around[0.5010418697881557, 0.10641739814499294`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000361058288511037, "MeanCrossEntropy" -> 
             Around[0.8970808755570837, 0.19787871003986512`], "ModelMemory" -> 
             119560, "TrainingMemory" -> 370936, "TrainingTime" -> 
             0.10322503774428209`], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6630300629157142, 0.031251911055319014`], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
              "ModelMemory" -> 13408, "ModelUtility" -> -0.2916307171884458, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 74080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6630300629157142, 0.022098438232254908`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6909221944459606, 0.11500884084989826`], "Accuracy" -> 
              Around[0.6749549132664163, 0.14368460052805063`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 48800, "ModelUtility" -> -0.35621226191484856`,
               "TrainingSize" -> 88, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 330688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6909221944459606, 0.08132353126136747]}, 
              "AccuracyHistory" -> {
                Around[0.6749549132664163, 0.10160035538546477`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.6909221944459606, 0.11500884084989826`], "ModelMemory" -> 
             48800, "TrainingMemory" -> 330688, "TrainingTime" -> 
             0.03979692659812489], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9697429710695182, 0.16050384665976547`], "Accuracy" -> 
              Around[0.6096246146367451, 0.07096176357285101], 
              "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
              "ModelMemory" -> 5968, "ModelUtility" -> -0.6950231339323286, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 77480, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9697429710695182, 0.11349335837964596`]}, 
              "AccuracyHistory" -> {
                Around[0.6096246146367451, 0.05017754422731947]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.496035859354483, 0.4075001456002754], "Accuracy" -> 
              Around[0.4575636089185905, 0.14942705635897574`], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 6288, "ModelUtility" -> -1.1490452405651088`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 161096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.496035859354483, 0.2881461162884602]}, 
              "AccuracyHistory" -> {
                Around[0.4575636089185905, 0.10566088484417616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[1.496035859354483, 0.4075001456002754], "ModelMemory" -> 
             6288, "TrainingMemory" -> 161096, "TrainingTime" -> 
             0.02537710746431506], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6670585337741283, 0.0208804694467081], "Accuracy" -> 
              Around[0.6512912813034117, 0.06941271239287487], 
              "EvaluationTime" -> 0.000052756550908133885`, "TestSize" -> 95, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.2945659178563097, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 160704, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6670585337741283, 0.014764721540125814`]}, 
              "AccuracyHistory" -> {
                Around[0.6512912813034117, 0.04908219963355333]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6688049968452939, 0.04878338910086194], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 98480, "ModelUtility" -> -0.30542294003364323`,
               "TrainingSize" -> 88, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 221048, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6688049968452939, 0.03449506524248139]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.6688049968452939, 0.04878338910086194], "ModelMemory" -> 
             98480, "TrainingMemory" -> 221048, "TrainingTime" -> 
             0.03328275704168338], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[11.778099694062453`, 2.5281582707962307`], "Accuracy" -> 
              Around[0.5783746146367452, 0.07177176002370075], 
              "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 95, 
              "ModelMemory" -> 9560, "ModelUtility" -> -3.201457657018603, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 124656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[11.778099694062453`, 1.7876778571928706`]}, 
              "AccuracyHistory" -> {
                Around[0.5783746146367452, 0.05075029821045236]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010526315789473684`, "MeanCrossEntropy" -> 
             Around[11.778099694062453`, 2.5281582707962307`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 124656, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1111321051226817`, 0.1685284510522687], "Accuracy" -> 
              Around[0.526291281303412, 0.0724807042994671], "EvaluationTime" -> 
              8.361349839202961*^-6, "TestSize" -> 95, "ModelMemory" -> 9560, 
              "ModelUtility" -> -0.8284448860775371, "TrainingSize" -> 15, 
              "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              124408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.1111321051226817`, 0.11916761056192435`]}, 
              "AccuracyHistory" -> {
                Around[0.526291281303412, 0.051251597515330136`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6776255685612659, 0.19277198549132407`], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3593581479718052, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 194784, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6776255685612659, 0.13631037816371]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.6776255685612659, 0.19277198549132407`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 194784, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 268732009754356]], "MaxTrainingSize" -> 110, 
      "PreprocessorEvaluationTime" -> 6.493603515625`2.*^-6, 
      "PreprocessorMemory" -> 139592, "InputDimension" -> 57, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6463341980550162,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341315433108`17.33219102224969*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
          0.2688962, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.39765029999999996`, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 268744894656244]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0035287043272917724`}, "ID" -> 4207867539065565879],
          "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.03914674950054545}, "ID" -> 7912806483560731870], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0012942147020720321`}, "ID" -> 5965761203752319867],
          "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.010105931360086088`}, "ID" -> 8375076442043603798], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.9459244001100046}, "ID" -> 5205097644896790818], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7}, "ID" -> 
           8854627039274792559], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7754319326773593989], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           207921897603130099], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6351408238769381299], "f10" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           344037314210118452], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6348694679514505666], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5252554518335886713], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5232607783926513996], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7303145252814796550], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           90808447787319741], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4503794452530117548], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2837405527786401704], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5636028782333709093], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1813727850741997469], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6709913498313238271], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5143675974651387584], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8726886491183455211], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6773162551935999198], "f24" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8757666475647580641], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1532675434602055945], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6119616733510316592], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6164073935886628217], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6406882757140105747], "f29" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9118073656617951559], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3471280781960335485], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2991007088969221471], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5991154010994051748], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2743158781995461983], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8871617069128402592], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5786645781650657112], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4449226368872108253], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4497375785093605930], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8697050170407933116], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2443537405650142890], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7115060319833467586], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           9063755240371144440], "f42" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7161298486736233804], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1149423396418762070], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2479344111619379829], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3271438083699756007], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1605112137093190899], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8487197176029100879], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3425091239092551824], "f49" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2468318163169225798], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2050087499797751690], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3833063325018811940], "f52" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           506134768010460531], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3692097242707087664], "f54" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4732741083377867666], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3623758047278371766], "f56" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7432134570476923960], "f57" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3923686153078021548]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1843802, 
      "MaxTrainingMemory" -> 1135144, "DataMemory" -> 965888, 
      "FunctionMemory" -> 444424, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 11.73599`8.822094689938952}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7946053897190094`*^9, 3.794885080309185*^9, 
  3.7953466975740333`*^9, 3.795376319038273*^9, 3.795376877726683*^9, 
  3.7959513171941576`*^9, 3.7977278615671635`*^9, 3.797728932579491*^9, 
  3.79776799810295*^9, 3.797773359018242*^9, 3.79777688685814*^9, 
  3.797777380663493*^9, 3.7977781486437554`*^9, 3.797778890685565*^9, 
  3.797785994771308*^9, 3.7977975466842737`*^9, 3.7978055365938835`*^9, 
  3.7985481465535297`*^9, 3.79854853183772*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"44ca7c0c-b46c-447a-b650-de3ec671c731"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cmclassErAllMaccs", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classErAllMaccs", ",", 
    RowBox[{"mLmaccs", "@", "erDataMaccsTest"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7946053941814556`*^9, 3.794605415392438*^9}, {
  3.795376937874891*^9, 3.795376959643694*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"7a13c6cf-3ccb-42d1-b77f-9b8df5682066"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   TemplateBox[{"0.74", "0.09"}, "Around"], 
                   Around[0.7407407407407407, 0.0859436075726404]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
              "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
              "Sodium Oxalate Mole Fraction" -> 
              Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
              Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
              Association["Type" -> "Numerical"], "pH" -> 
              Association["Type" -> "Numerical"], "maccs53" -> 
              Association["Type" -> "Boolean"], "maccs54" -> 
              Association["Type" -> "Boolean"], "maccs62" -> 
              Association["Type" -> "Boolean"], "maccs65" -> 
              Association["Type" -> "Numerical"], "maccs74" -> 
              Association["Type" -> "Boolean"], "maccs79" -> 
              Association["Type" -> "Boolean"], "maccs80" -> 
              Association["Type" -> "Boolean"], "maccs82" -> 
              Association["Type" -> "Boolean"], "maccs83" -> 
              Association["Type" -> "Boolean"], "maccs84" -> 
              Association["Type" -> "Boolean"], "maccs85" -> 
              Association["Type" -> "Boolean"], "maccs86" -> 
              Association["Type" -> "Boolean"], "maccs90" -> 
              Association["Type" -> "Boolean"], "maccs91" -> 
              Association["Type" -> "Boolean"], "maccs93" -> 
              Association["Type" -> "Boolean"], "maccs96" -> 
              Association["Type" -> "Boolean"], "maccs98" -> 
              Association["Type" -> "Boolean"], "maccs100" -> 
              Association["Type" -> "Numerical"], "maccs103" -> 
              Association["Type" -> "Boolean"], "maccs104" -> 
              Association["Type" -> "Boolean"], "maccs105" -> 
              Association["Type" -> "Boolean"], "maccs108" -> 
              Association["Type" -> "Boolean"], "maccs111" -> 
              Association["Type" -> "Numerical"], "maccs115" -> 
              Association["Type" -> "Boolean"], "maccs116" -> 
              Association["Type" -> "Boolean"], "maccs118" -> 
              Association["Type" -> "Boolean"], "maccs120" -> 
              Association["Type" -> "Boolean"], "maccs121" -> 
              Association["Type" -> "Boolean"], "maccs122" -> 
              Association["Type" -> "Boolean"], "maccs128" -> 
              Association["Type" -> "Boolean"], "maccs129" -> 
              Association["Type" -> "Boolean"], "maccs131" -> 
              Association["Type" -> "Boolean"], "maccs133" -> 
              Association["Type" -> "Boolean"], "maccs134" -> 
              Association["Type" -> "Boolean"], "maccs137" -> 
              Association["Type" -> "Boolean"], "maccs138" -> 
              Association["Type" -> "Numerical"], "maccs141" -> 
              Association["Type" -> "Boolean"], "maccs145" -> 
              Association["Type" -> "Boolean"], "maccs147" -> 
              Association["Type" -> "Boolean"], "maccs148" -> 
              Association["Type" -> "Boolean"], "maccs149" -> 
              Association["Type" -> "Boolean"], "maccs151" -> 
              Association["Type" -> "Boolean"], "maccs153" -> 
              Association["Type" -> "Numerical"], "maccs155" -> 
              Association["Type" -> "Boolean"], "maccs156" -> 
              Association["Type" -> "Boolean"], "maccs158" -> 
              Association["Type" -> "Numerical"], "maccs160" -> 
              Association["Type" -> "Boolean"], "maccs162" -> 
              Association["Type" -> "Numerical"], "maccs163" -> 
              Association["Type" -> "Boolean"], "maccs165" -> 
              Association["Type" -> "Boolean"], "maccs166" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f43" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f53" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f55" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                    "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                    "H2O Mole Fraction", "pH", "maccs53", "maccs54", 
                    "maccs62", "maccs65", "maccs74", "maccs79", "maccs80", 
                    "maccs82", "maccs83", "maccs84", "maccs85", "maccs86", 
                    "maccs90", "maccs91", "maccs93", "maccs96", "maccs98", 
                    "maccs100", "maccs103", "maccs104", "maccs105", 
                    "maccs108", "maccs111", "maccs115", "maccs116", 
                    "maccs118", "maccs120", "maccs121", "maccs122", 
                    "maccs128", "maccs129", "maccs131", "maccs133", 
                    "maccs134", "maccs137", "maccs138", "maccs141", 
                    "maccs145", "maccs147", "maccs148", "maccs149", 
                    "maccs151", "maccs153", "maccs155", "maccs156", 
                    "maccs158", "maccs160", "maccs162", "maccs163", 
                    "maccs165", "maccs166"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 57]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Numerical",
                     "Boolean", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", 
                    "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", 
                    "f34", "f35", "f36", "f37", "f38", "f39", "f40", "f41", 
                    "f42", "f43", "f44", "f45", "f46", "f47", "f48", "f49", 
                    "f50", "f51", "f52", "f53", "f54", "f55", "f56", "f57"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f42" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f54" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f24" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f29" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f42" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f49" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f52" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f54" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                 "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 13]], 
                "Version" -> {12.1, 0}, "ID" -> 3843819132712164175]], 
              MachineLearning`MLProcessor["NumericalVectorStandardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 13]], 
                "Mean" -> {0.0027125744939508526`, 0.03661327540196216, 
                 0.0013702662912860152`, 0.005885270631865775, 
                 0.9534186131809349, 2.436363636363636, 0., 1., 1., 1., 1., 
                 1., 0.}, 
                "StandardDeviation" -> {0.0008922678396605211, 
                 0.007732101328696449, 0.0011033857541175838`, 
                 0.0028718051216307847`, 0.006045733366698505, 
                 1.8267072847427503`, 1., 1., 1., 1., 1., 1., 1.}, 
                "Version" -> {12.1, 0}, "ID" -> 841287822409083141, "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 13]]]], 
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f20" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f21" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f22" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f23" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f25" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f26" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f27" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f28" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f30" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f31" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f32" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f33" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f34" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f35" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f36" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f37" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f38" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f39" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f40" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f41" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f43" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f44" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f45" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f46" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f47" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f48" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f50" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f51" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f53" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f55" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f56" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f57" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f3\
0f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 7898357694074848566]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f3\
0f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 8596124423182320670, "Output" -> 
                Association[
                 "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f3\
0f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f3\
0f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 8693524375696191030, "Output" -> 
                Association[
                 "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f3\
0f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 44]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 13], 
                  "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f\
30f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 44]], 
                "Spans" -> {
                  Span[1, 13], 
                  Span[14, 57]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0},
                 "ID" -> 102437435096265169]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                    "], "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 110, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "Method" -> "Naive", "VectorLength" -> 57, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 57, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 57]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 14]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                   Association["Matrix" -> CompressedData["
1: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
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 14, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0146322, "MaxTrainingMemory" -> 
                    205424, "DataMemory" -> 51312, "FunctionMemory" -> 33208, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 5, 15, 12, 22, 10.7008827`8.781994565357499}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 57, "Output" -> 
                Association[
                 "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
                "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                7259735455847470961]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
                "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                 "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
                 "], "Output" -> 
                Association[
                 "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
                "Version" -> {12.1, 0}, "ID" -> 2367778904976982516]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 6995767557603505475]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 0}, "ID" -> 2734911975669049395, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 2109313300824996630]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          False -> 0.3482142857142857, True -> 0.6517857142857143]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction[
          "BruteForce", {CompressedData["
1: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
            "], CompressedData["
1:eJwN0ntPUwcAh+EaQQaZmSJzNx09HHp6oYF2LaWI1t8AC9KSVQJIxyC2Edxg
uhtSDaWUgBYHS0BQakLKwA4HGVEGrC4UqbNEDVIodcOBSkMHy5a0BMkIt8L4
4/0CT15C/UVGwQ4ajXZuO55/8uOgY0LMJo4JijhChH27gvVqClN1qit+tgwh
9DO5X9+XgjfPsh20i9Dq/GVOcJZCvbYhhp5NQtfBzHus5SFdFX6MvHUY/vZZ
yjPNwuDi6IUBCx0lXH/hliEemYsPDNkfETh19/N3jsTF469DenX6bT50Qfmf
at1sGKKfphmHKEz7fDHR/zJQlxS43vU3C02Koo29G7EQhwxlFkg54OtDCeJh
BKx8bL10MvFHY/odq4mE68ID24sFBlp3T52gR2XglWQtxLmTjX98cnugnIRi
boKZp1Hi9J4Z92mJCDb36wFqUzx+LqtYyjeSsKhHZ72DIqxMHvdJbxLoU7h8
wgkBJvaY21r6SfzpWFjdmycD7VVCXYmJgYe2BKvlogzGol3RXbUEjMP69i9T
GFA8uWd/bUaEnKvdAQt2JS6xunNrho+jxr3Gumxjw1MmWXftFGL/++KKZz1C
1NcrfLx1Ah9YnJe00RTCxYLmfRoSNdc6eP/VMTE+xwgofZePc6oPbdxABszl
l20GnRCcNkfSRJgMvjBXd1UWE+WxkqXvb7BxoMyT6dDKwE1fkal7SDh3W7NC
x0gUvWVv6axmgdNlriybj0Sv7c2jKbUkekc6nHX0ODhbb8u/ioqE95qhyjVJ
4fyWqrF5QIlxEzt3upiPO/ckA9flHNwwnfGOmCNwgKFf8vp4yP6t0lSqiUBk
xlwnTcmBx294MRhFwuEStcUOFWL5sKw6uZxE10W1+NGtDLDOxiTmSOKQFMyS
N1jYeFmbr9gQ8PBeTfHzqd4oVDQ9+0EScQgrN+f3Ga/GYmhMpNvMEqP0ZOpw
zranuefUSEsohSO04THHjxQ+8QvaNS0E7ldxt5qX09Dwu/0nTwkPTXFa/ZpC
iG/CTWFMJYGghsmjwVVszCvsqaPFDNiVREFykxKPN0+wGlc5cI/vcPRmM1Bi
O7k400lhQZXzduYqF0m/aryPzqfBsEkl9kVykNxq5z7ZlYKpYBcjlE3gbkKZ
tOeN7V83N+SJOhnGlgMOSvsiIXyq7d9fKQO930o+/4zC9bZU5neFTPwPYwKK
wQ==
            "]}], "NeighborsNumber" -> 5, 
         "ClassPriors" -> {0.3482142857142857, 0.6517857142857143}, 
         "TrainingOutput" -> 
         RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 
           1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 
           1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 
           1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 
           1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 
           1, 2, 2, 2, 1, 1, 2, 2, 2}], "DistributionSmoothing" -> 0.5, 
         "Processor" -> MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 57.], "Key" -> 
            "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))", "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Method" -> "NearestNeighbors", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "NeighborsNumber" -> 
           Association["Value" -> 5, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "NearestMethod" -> 
           Association["Value" -> "Scan", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[15009], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.3451041`6.989495112442048, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.6630300629157142, 0.031251911055319014`], "Accuracy" -> 
            Around[0.6408746146367451, 0.06985175830050416], "EvaluationTime" -> 
            0.00001325184643993859, "TestSize" -> 95, "ModelMemory" -> 13408, 
            "ModelUtility" -> -0.2916307171884458, "TrainingSize" -> 15, 
            "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 74080,
             "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.6630300629157142, 0.022098438232254908`]}, 
            "AccuracyHistory" -> {
              Around[0.6408746146367451, 0.0493926519720902]}, 
            "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "FinalTrainingSize" -> 110], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 268736304721652]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[6.353706902127919, 1.3703720805094761`], "Accuracy" -> 
                 Around[0.6304579479700784, 0.07025589306900139], 
                 "EvaluationTime" -> 0.00041906017952999695`, "TestSize" -> 
                 95, "ModelMemory" -> 56336, 
                 "ModelUtility" -> -2.5844633295475195`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 174328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[6.353706902127919, 0.968999390876968]}, 
                 "AccuracyHistory" -> {
                   Around[0.6304579479700784, 0.04967841840740784]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.567307216315351, 0.5385846488192204], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.0005722388235428032, "TestSize" -> 22, 
                 "ModelMemory" -> 83056, "ModelUtility" -> -1.209027179312316,
                  "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971,
                  "TrainingMemory" -> 663936, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.567307216315351, 0.380836857423046]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0005722388235428032, "MeanCrossEntropy" -> 
                Around[1.567307216315351, 0.5385846488192204], "ModelMemory" -> 
                83056, "TrainingMemory" -> 663936, "TrainingTime" -> 
                0.06891065307598049], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 
                 95, "ModelMemory" -> 20720, 
                 "ModelUtility" -> -0.327046890898929, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 69512, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6916370843501094, 0.0062588525193839105`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8970808755570837, 0.19787871003986512`], "Accuracy" -> 
                 Around[0.5010418697881557, 0.15049692772910647`], 
                 "EvaluationTime" -> 0.000361058288511037, "TestSize" -> 22, 
                 "ModelMemory" -> 119560, 
                 "ModelUtility" -> -0.6277693526805633, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 370936, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8970808755570837, 0.13992137772163518`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5010418697881557, 0.10641739814499294`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000361058288511037, "MeanCrossEntropy" -> 
                Around[0.8970808755570837, 0.19787871003986512`], 
                "ModelMemory" -> 119560, "TrainingMemory" -> 370936, 
                "TrainingTime" -> 0.10322503774428209`], "Index" -> 2], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6630300629157142, 0.031251911055319014`], 
                 "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95,
                  "ModelMemory" -> 13408, 
                 "ModelUtility" -> -0.2916307171884458, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
                 74080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6630300629157142, 0.022098438232254908`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6909221944459606, 0.11500884084989826`], "Accuracy" -> 
                 Around[0.6749549132664163, 0.14368460052805063`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 48800, 
                 "ModelUtility" -> -0.35621226191484856`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 330688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6909221944459606, 0.08132353126136747]}, 
                 "AccuracyHistory" -> {
                   Around[0.6749549132664163, 0.10160035538546477`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.6909221944459606, 0.11500884084989826`], 
                "ModelMemory" -> 48800, "TrainingMemory" -> 330688, 
                "TrainingTime" -> 0.03979692659812489], "Index" -> 3], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9697429710695182, 0.16050384665976547`], "Accuracy" -> 
                 Around[0.6096246146367451, 0.07096176357285101], 
                 "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95,
                  "ModelMemory" -> 5968, 
                 "ModelUtility" -> -0.6950231339323286, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 77480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9697429710695182, 0.11349335837964596`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6096246146367451, 0.05017754422731947]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.496035859354483, 0.4075001456002754], "Accuracy" -> 
                 Around[0.4575636089185905, 0.14942705635897574`], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 6288, 
                 "ModelUtility" -> -1.1490452405651088`, "TrainingSize" -> 88,
                  "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 161096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.496035859354483, 0.2881461162884602]}, 
                 "AccuracyHistory" -> {
                   Around[0.4575636089185905, 0.10566088484417616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[1.496035859354483, 0.4075001456002754], "ModelMemory" -> 
                6288, "TrainingMemory" -> 161096, "TrainingTime" -> 
                0.02537710746431506], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6670585337741283, 0.0208804694467081], "Accuracy" -> 
                 Around[0.6512912813034117, 0.06941271239287487], 
                 "EvaluationTime" -> 0.000052756550908133885`, "TestSize" -> 
                 95, "ModelMemory" -> 97544, 
                 "ModelUtility" -> -0.2945659178563097, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 160704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6670585337741283, 0.014764721540125814`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6512912813034117, 0.04908219963355333]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6688049968452939, 0.04878338910086194], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 98480, 
                 "ModelUtility" -> -0.30542294003364323`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.015848931924611134`, 
                 "TrainingMemory" -> 221048, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6688049968452939, 0.03449506524248139]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.6688049968452939, 0.04878338910086194], 
                "ModelMemory" -> 98480, "TrainingMemory" -> 221048, 
                "TrainingTime" -> 0.03328275704168338], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[11.778099694062453`, 2.5281582707962307`], "Accuracy" -> 
                 Around[0.5783746146367452, 0.07177176002370075], 
                 "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 
                 95, "ModelMemory" -> 9560, 
                 "ModelUtility" -> -3.201457657018603, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 124656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[11.778099694062453`, 1.7876778571928706`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5783746146367452, 0.05075029821045236]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000010526315789473684`, 
                "MeanCrossEntropy" -> 
                Around[11.778099694062453`, 2.5281582707962307`], 
                "ModelMemory" -> 9560, "TrainingMemory" -> 124656, 
                "TrainingTime" -> 0.06640783086353597], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1111321051226817`, 0.1685284510522687], "Accuracy" -> 
                 Around[0.526291281303412, 0.0724807042994671], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9560, "ModelUtility" -> -0.8284448860775371,
                  "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379,
                  "TrainingMemory" -> 124408, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1111321051226817`, 0.11916761056192435`]}, 
                 "AccuracyHistory" -> {
                   Around[0.526291281303412, 0.051251597515330136`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6776255685612659, 0.19277198549132407`], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 9560, 
                 "ModelUtility" -> -0.3593581479718052, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 194784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6776255685612659, 0.13631037816371]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.6776255685612659, 0.19277198549132407`], 
                "ModelMemory" -> 9560, "TrainingMemory" -> 194784, 
                "TrainingTime" -> 0.07541456536256848], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 268732009754356]], "MaxTrainingSize" -> 110, 
         "PreprocessorEvaluationTime" -> 6.493603515625`2.*^-6, 
         "PreprocessorMemory" -> 139592, "InputDimension" -> 57, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6463341980550162, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.7985341315433108`17.33219102224969*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
             0.2688962, "ExperimentCounts" -> 7], 
            Association[
            "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.39765029999999996`, "ExperimentCounts" -> 6]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association["ID" -> 268744894656244]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0035287043272917724`}, "ID" -> 
              4207867539065565879], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.03914674950054545}, "ID" -> 7912806483560731870],
             "f3" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0012942147020720321`}, "ID" -> 
              5965761203752319867], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.010105931360086088`}, "ID" -> 
              8375076442043603798], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.9459244001100046}, "ID" -> 5205097644896790818], 
            "f6" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7}, "ID" -> 
              8854627039274792559], "f7" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7754319326773593989], "f8" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              207921897603130099], "f9" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6351408238769381299], "f10" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              344037314210118452], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6348694679514505666], "f12" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5252554518335886713], "f13" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5232607783926513996], "f14" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7303145252814796550], "f15" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              90808447787319741], "f16" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              4503794452530117548], "f17" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2837405527786401704], "f18" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5636028782333709093], "f19" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1813727850741997469], "f20" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6709913498313238271], "f21" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5143675974651387584], "f22" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8726886491183455211], "f23" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6773162551935999198], "f24" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8757666475647580641], "f25" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1532675434602055945], "f26" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              6119616733510316592], "f27" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6164073935886628217], "f28" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6406882757140105747], "f29" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              9118073656617951559], "f30" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3471280781960335485], "f31" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2991007088969221471], "f32" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5991154010994051748], "f33" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2743158781995461983], "f34" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8871617069128402592], "f35" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5786645781650657112], "f36" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4449226368872108253], "f37" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4497375785093605930], "f38" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8697050170407933116], "f39" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2443537405650142890], "f40" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7115060319833467586], "f41" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              9063755240371144440], "f42" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7161298486736233804], "f43" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1149423396418762070], "f44" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2479344111619379829], "f45" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              3271438083699756007], "f46" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1605112137093190899], "f47" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8487197176029100879], "f48" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              3425091239092551824], "f49" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2468318163169225798], "f50" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2050087499797751690], "f51" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3833063325018811940], "f52" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              506134768010460531], "f53" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3692097242707087664], "f54" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4732741083377867666], "f55" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3623758047278371766], "f56" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7432134570476923960], "f57" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3923686153078021548]], 
           Association[
           "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1,
             "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1843802, 
         "MaxTrainingMemory" -> 1135144, "DataMemory" -> 965888, 
         "FunctionMemory" -> 444424, "LanguageVersion" -> {12.1, 0}, "Date" -> 
         DateObject[{2020, 5, 15, 12, 22, 11.73599`8.822094689938952}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        0.002742856482203961, 0.04588309511862027, 0.0009611854860558385, 
         0.002892876469155599, 0.9475199864439645, 3, 1, 0, 0, 0, 0, 0, 1, 1, 
         0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.001704141656958028, 0.042986587756607714`, 0.0006617173076112417, 
         0.007508424018214351, 0.9471391292606087, 1, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 
         1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0}, {
        0.0029969934830547133`, 0.04648420572299379, 0.0012032082868960632`, 
         0.007947779832756888, 0.9413678126742985, 7, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.0017991688438474653`, 0.042234668216929894`, 0.0012396762978101733`,
          0.005272002492468928, 0.9494544841489435, 4, 0, 1, 0, 0, 0, 1, 0, 1,
          0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
          1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.0026385439030547145`, 0.03928567616061125, 0.0015339186522904415`, 
         0.0032832551341424993`, 0.9532586061499009, 2, 0, 1, 0, 0, 0, 1, 0, 
         1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
         1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0}, {
        0.003342335102635483, 0.038610750755278464`, 0.0009466068802355844, 
         0.005608200903576244, 0.9514921063582742, 4, 1, 0, 0, 0, 0, 0, 1, 1, 
         0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.003589084030695279, 0.03055061511171091, 0.0013276852201036533`, 
         0.007041650700829742, 0.9574909649366604, 3, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 
         1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0}, {
        0.004427859532784215, 0.030073404010708817`, 0.0016545651035664928`, 
         0.01247309377642404, 0.9513710775765165, 7, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.003288565482747599, 0.04277673731826657, 0.0015896659134678015`, 
         0.004604378811730589, 0.9477406524737875, 1, 0, 0, 0, 0, 0, 1, 0, 0, 
         0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 
         0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0}, {
        0.0011433323150822812`, 0.020316178784995746`, 0.0004364105851348042, 
         0.009131485154821137, 0.9689725931599662, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
         0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.0037364831666406523`, 0.03632346329620389, 0.0012127492611802182`, 
         0.006774198539696626, 0.9519531057362786, 2, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.0029008260676477785`, 0.03851255106298201, 0.0014764831848957725`, 
         0.004398478895920877, 0.9527116607885535, 4, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.0028066891892804414`, 0.03358180869653973, 0.0011677812659528723`, 
         0.010004129208828412`, 0.9524395916393986, 1, 0, 1, 0, 0, 0, 1, 0, 1,
          0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
          1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.001966681418466253, 0.03815070688582993, 0.00135628743053894, 
         0.006574887303437697, 0.951951436961727, 3, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}, {
        0.004303180533678753, 0.028332127356610472`, 0.0015233245320398388`, 
         0.012150430016555898`, 0.9536909375611151, 5, 0, 1, 0, 0, 0, 1, 0, 1,
          0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
          1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.002911181172847666, 0.04568342332300607, 0.0010104925859168226`, 
         0.008546152612740096, 0.9418487503054894, 3, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, {
        0.003138588459463973, 0.0345609614783663, 0.0013504447668227042`, 
         0.004579180523311962, 0.956370824772035, 2, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}, {
        0.0024905932968404655`, 0.03422110860031605, 0.0012405352886126005`, 
         0.007303765804535912, 0.954743997009695, 0, 1, 1, 0, 0, 0, 1, 1, 1, 
         1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 
         1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1}, {
        0.0023002230310254566`, 0.03363619531515473, 0.0014859778613716137`, 
         0.0062277031207299905`, 0.9563499006717183, 5, 0, 1, 0, 0, 0, 1, 0, 
         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 
         0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}, {
        0.0022412788106185447`, 0.038527075287995594`, 0.0009639411445887004, 
         0.007954918295070725, 0.9503127864617265, 4, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 
         1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0}, {
        0.001692408765460826, 0.03988338623422155, 0.001314266585169407, 
         0.0037923726488239776`, 0.9533175657663242, 5, 1, 1, 0, 0, 0, 1, 1, 
         1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 
         1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1}, {
        0.0020353269139815515`, 0.03879651007982007, 0.0013077895804229547`, 
         0.007323925300228177, 0.9505364481255472, 3, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 
         1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0}, {
        0.0035084939828442835`, 0.0361164594942982, 0.0017133181898631848`, 
         0.007373585714129375, 0.951288142618865, 1, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 
         1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0}, {
        0.0017907520590454687`, 0.04682634239857451, 0.001345469098892494, 
         0.004027970177337451, 0.9460094662661501, 3, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 
         1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0}, {
        0.0020128002552121486`, 0.04344079013606219, 0.0008934267124638364, 
         0.005550283390360934, 0.948102699505901, 3, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 
         1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0}, {
        0.002583840189365972, 0.03215037516277405, 0.0012642691352116287`, 
         0.006736589429320739, 0.9572649260833276, 5, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 
         1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0}, {
        0.002499488450998751, 0.0383435558254779, 0.00103690567741659, 
         0.0038851098823570324`, 0.9542349401637497, 6, 1, 0, 0, 0, 0, 0, 1, 
         1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
         0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}}, 
      "Output" -> {
       True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, False, False, False, False, False, False, 
        False, False, False, False, False}], 
    "Predictions" -> {
     True, True, True, True, True, True, True, True, False, True, True, True, 
      True, False, True, True, True, False, False, True, True, True, True, 
      False, False, False, False}, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmViYGCQBmIQLbXu6i7bzW/3n1Gd4LpC4sH+U9Pmyplu/bF/7eJz
zRP2nNuPLo/OnziBa2nafO4D38JfLfasWEBQPbr5Nx5K/Auc/nD/xQrFhtSu
1xjyhNxDqnmE3IuuH51PyH+EwgfdPGsOwYM1yy/uFzsqb2N5+BtB+wFK+AB/

     "], "CountMatrix" -> {{6, 5, 0}, {2, 14, 0}}, 
    "IndicesMatrix" -> {{{18, 19, 24, 25, 26, 27}, {17, 20, 21, 22, 
       23}, {}}, {{9, 14}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 
       16}, {}}}, "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {27}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0013432962962962964`, "SingleEvaluationTime" -> 
    0.0068561999999999998`2., "Version" -> {12.1, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7946054160587225`*^9, 3.7948850895073166`*^9, 
  3.7953466976977015`*^9, 3.7953763194002666`*^9, 3.7953769603119087`*^9, 
  3.7959513177018237`*^9, 3.79772786183665*^9, 3.7977289329023485`*^9, 
  3.7977679981956224`*^9, 3.7977733591432323`*^9, 3.7977768869050026`*^9, 
  3.7977773809446783`*^9, 3.7977781489573355`*^9, 3.797778890966708*^9, 
  3.7977859950681133`*^9, 3.797797547054047*^9, 3.7978055368990707`*^9, 
  3.7985481469198112`*^9, 3.798548532096053*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"42be013c-5ef3-4b2b-8907-114800c5e7fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassErAllMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7946054168816786`*^9, 3.794605423008206*^9}, {
  3.795376963054575*^9, 3.7953769661313534`*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"cbf03a51-90a6-4bc0-9b60-76bc21e24998"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.7407407407407407`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.5454545454545454`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.875`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.4524322889411796`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.4524322889411796`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.5454545454545454`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.875`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.875`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.5454545454545454`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.8749999999999998`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.6704545454545454`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.631578947368421`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8`"}]}], "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.794605423304203*^9, 3.7948851011457376`*^9, 
  3.7953466977754946`*^9, 3.795376319449136*^9, 3.7953769666529574`*^9, 
  3.7959513178016396`*^9, 3.797727861899146*^9, 3.797728932986964*^9, 
  3.7977679982644734`*^9, 3.7977733592213063`*^9, 3.797776886920656*^9, 
  3.797777381038369*^9, 3.7977781490198545`*^9, 3.7977788910604687`*^9, 
  3.79778599514622*^9, 3.797797547160761*^9, 3.7978055369898243`*^9, 
  3.798548146976659*^9, 3.798548532151904*^9},
 CellLabel->
  "Out[146]//TableForm=",ExpressionUUID->"3768c8f4-1db2-44bb-94b3-\
a72f599ed34a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
    "trained", " ", "on", " ", "only", " ", "high", " ", "KS", " ", "columns",
      " ", "and", " ", "maccs"}], " ", "-", " ", 
    RowBox[{"Ln", " ", "mole", " ", "frac"}]}], ",", " ", 
   RowBox[{"sodium", " ", "oxalate", " ", "mole", " ", "frac"}], ",", " ", 
   RowBox[{"amine", " ", "mole", " ", "frac"}], ",", " ", 
   RowBox[{
    RowBox[{"maccs", " ", "keys"}], " ", "-", " ", 
    RowBox[{"all", " ", "lanthanides"}]}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7921912583511114`*^9, 3.792191283408211*^9}, {
  3.7921917968087482`*^9, 3.7921917993401165`*^9}},
 CellLabel->
  "In[147]:=",ExpressionUUID->"737feaea-b393-4fae-be68-81e9d7c00df0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classRedMaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccsRed", "@", "allDataMACCsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921913025837164`*^9, 3.7921913355845118`*^9}, {
  3.795376977645603*^9, 3.795376993993864*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"aa3187cf-80e2-423c-ab6e-53f4cb3d0775"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "54", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean"}, 
                    10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "54", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean"}, 
                    10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["344", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 344, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Boolean"], "maccs65" -> 
           Association["Type" -> "Boolean"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Boolean"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Boolean"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Boolean"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Boolean"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Boolean"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Boolean"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                  "Amine Mole Fraction", "maccs53", "maccs54", "maccs62", 
                  "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                  "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                  "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                  "maccs103", "maccs104", "maccs105", "maccs108", "maccs111", 
                  "maccs115", "maccs116", "maccs118", "maccs120", "maccs121", 
                  "maccs122", "maccs128", "maccs129", "maccs131", "maccs133", 
                  "maccs134", "maccs137", "maccs138", "maccs141", "maccs145", 
                  "maccs147", "maccs148", "maccs149", "maccs151", "maccs153", 
                  "maccs155", "maccs156", "maccs158", "maccs160", "maccs162", 
                  "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 54]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3)(\
f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31\
f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3]], 
             "Version" -> {12.1, 0}, "ID" -> 1475203784826948804]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3]], 
             "Mean" -> {0.0028792698877382916`, 0.001336625227644646, 
              0.0056909533598154425`}, 
             "StandardDeviation" -> {0.0016280347537027814`, 
              0.0009057928969227916, 0.002731584875602575}, 
             "Version" -> {12.1, 0}, "ID" -> 1046355524748084770, "Output" -> 
             Association[
              "(f1f2f3)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f2\
6f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f5\
2f53f54)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 8262342624967321394]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f2\
6f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f5\
2f53f54)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 2818703715271965273, "Output" -> 
             Association[
              "(f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f2\
6f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f5\
2f53f54)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f2\
6f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f5\
2f53f54)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 9183864647464971385, "Output" -> 
             Association[
              "(f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f2\
6f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f5\
2f53f54)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3], 
               "(f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f\
26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f\
52f53f54)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]], 
             "Spans" -> {
               Span[1, 3], 
               Span[4, 54]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3)(\
f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31\
f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwY4CBD/aj9NCgAaICQcs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 6932755697353963122]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3)(\
f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31\
f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwY4CBD/aj9NCgAaICQcs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 344, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+J9C/RfcP9qsmkGM3bb9O9QftdhPWmPCpB81HfC3jH+
gvgX1of2X1hrgcx0KD3d3v2OYPkR2Y32p2ZtWrZG87k9TD1QsND9zkv75Ws0
s4Fy9mDttQ/tU30jg69NOQqVf2gP5pretZcAG/gESh+A6/vVBHLQbXuwdsf3
9oVgC/dC+a/tIe7dBadh6iD2XYTTEPve2puBHXDFXggs8ADuHjmwwQ/sIf5+
BjcfZh+MhumD2QPzP8x+mD0wc2vBAXcUbh5MH8z/C8HBfg0uDomHS/Dwhfkf
Zi/MHQBOtdTH
                    "], "Method" -> "Naive", "VectorLength" -> 54, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+J9C/RfcP9qsmkGM3bb9O9QftdhPWmPCpB81HfC3jH+
gvgX1of2X1hrgcx0KD3d3v2OYPkR2Y32p2ZtWrZG87k9TD1QsND9zkv75Ws0
s4Fy9mDttQ/tU30jg69NOQqVf2gP5pretZcAG/gESh+A6/vVBHLQbXuwdsf3
9oVgC/dC+a/tIe7dBadh6iD2XYTTEPve2puBHXDFXggs8ADuHjmwwQ/sIf5+
BjcfZh+MhumD2QPzP8x+mD0wc2vBAXcUbh5MH8z/C8HBfg0uDomHS/Dwhfkf
Zi/MHQBOtdTH
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Lv/0Hgvf1fKM3JAAIf7GO1Hs/INb5pv3XanwdW7+/b
p6klOC2bsNo+w1DPfIHXYfsjjoslz/w4b+/cedbBae4duPo4KL1e2e2+39wL
9hHS1XOr7ty3D705z8v023V7vj/flfNO3LfX75t7/+SD+/ZawZNDLU/cs+9Z
9Wc5e8JVuD6xM0qR2/bct8+C2nc/4yIXd8sVe9+S03Iy+67Zry/NOCYUeRlO
w9TVRPl4WbTegdNHoe60qDR+nv73rn3u44O/DvxDuGfKA99tnX/u29/c8q/3
bcVduPkw+2A0TF8Wmv9h9sPsgZmbd9p9IafCDbh5MH0w/y8P6K6Z2X8PLj5B
1yH7sdVdePjC/A+zF+YOABmJ3io=
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 54, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 54]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 15]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
hOIuf9GPMXkY9urZJ41gOjxL07oTLpYKN4q37KP5J+J+j8mn7I1i0ImVY3Qu
MBflXsXTKA4MmHx8scJ9Ozb4dUzSNNIvAoXT81wL1vPw+Gwnv+zbXqjl1BZv
Fl0AcntnNKn7huJOZb+1A841YMrMkjo/2AiU1NqI+A7E/id0KZZIHWhN0bq4
QpaFrXTFRDuXcNhokh/87XEctD5l2kzsaIBu/cSZS5eyUauk/slAbw5MfBVy
PGM7E09VJ4iqu/BgmY+JxKNzRfDx6OuKmK4YcJmwcUIu8kChsm5JWX4QXsgt
UVOuvIFa0/eOVfzhyLGYtMyDLrmo4dRibZfEwkjFVYbdYskwY+9eDbGPIVia
a1ul3vMQtomemAz0KtAdt/jaI78qeER8ZEF8tEfIR6rER4PER0eIj7KIj94S
H0UQHx0jPnIjPjpKfGRLfGRNfOTY42U+9xYX5dY1Bsqt5WGAvWznw+lWMI16
kLqPyoGMsLj0r5osrAheUT/VPg6X0+9dYI3GwiF0d94xJQi022KiTx9Lgz7/
LwPh92ggkqoo1lpyGV26mWaLKjJR/amKStTVYrySpFKoX/nn91ZM+G81oxrK
BDyCtQIewRIBj2CRgEfwsuh/PMIdAh6hxNf/8QgaBTyC/QIewVcBj8BRwCPk
CHgEqwQ8Qq6AR9go4BHOXpmasM8/BW4U6XzOv1GFhV0zq2tsK+BmjY3SsqU8
nP8u6cIsNS68AUkd2jUGSqfb9hXezoGVpho/bCxKMbNUUTalMwfr349mMLRu
4XkDqTfffuRAdPCFS9TlVmgQNzyTdzwbGgxFrxYk0vDcV9E5O1e54d3JG3r4
s+ugvjVQqquxBLOMmHPkE5gY3DdtBl+iDGodvmsbm6XByfXqJ5fJl+LdnLJU
RUUmaMNF3NFUjBWV4pLlCn9y03Rlzy6LQOD5/7heFsIA/snW5hnPxGCnxA5T
s9858HOUdzivjglueh+fyrmWwuO58wxzjhejcX3Zxf9W5eMLB+a9kDU8WNxi
M/D4MRMnBgS3uEjVohMu7Fc+wEWx6LqUXX/871CuiHoD8XD6QHr/pzg+itvQ
MtJ2lgF/vHPud4lomDxNlhrbkwce2k/uOEoGAiVSLEb30Gw0e31TqZuRicwr
h4b270lFi4cyzf5xTDQ4nThpBssXi6wo/IPqPNhcJ/Z8SlcebFwYViWyrhHG
x7ubyI3EYFhj3e6id3yU6ttaJX2cg2e/7gGF7y1QdsL2uGZZJKg9f6vwstQV
v40uLrFm8DFroeSaV5I8HI5dZEG1rMe/utIU0pWSkK4MiK4oQrq6QHTFJbry
JbrKILraRHSVQXTFJ7qKjTPv+ybGwil3qG75zDzgDlrFxtkmQFDh1TYWjQeB
70Wu15ryQWpdroyEIh1SiizjxU25wDHatrKmLBPZQVcbR+LZqCMSvHZoHwt6
2rg/HlAfQINKV8Qy/UT4vew4g+0cjwoiHbFXzDNxMWYOdZ4J/efce0Jzpcnc
ZDK3SGjuJjL3I5nbROZ+JXMVyVwtMveFt9LhQ54cmBPdkOs5nAoZ2Nwkfb0a
2vMSTOY2hcHiRKpVlGEBShq833PCkAuNuz5v2qLfjAqs194+w3++K12C1FbZ
oYWz+8td0+Ngzq/U19ZFwfBlYkcaVaUEw+hzm82LrqKx5iwRna350GEh0frJ
IBQDr7i4RUhXoVHmrjLpDA7K1CZGieilIGVU18lqXxWwYn3svBfm4EZx2wPZ
MqWQusPZotaVjcPr1Au5JXXQ5Vp7et5oLBq/+m6bvyEGTG17x16ywmDnNLnb
8e10MK/vKLY4WgCTug9su5JTgcuSz9oc2JOP9Y6GO39tLMdYruqxrqzH2OPm
q7ZkOB6izFyGlA+lg+Mqy5Rk/2tAefPAypJ6GGcW/Nyt0xKPoyOrjqwJygHP
Gx5JZzpLwZ1Of/rnJEZ1Vsfdo9MeoLvaci2psnQUjZjtsXwLE3VCdZJP/86F
yyZ08TNjefD33uCQe8OZ3Bvbyb0RTO6NcnJvqJJ7I+zvveEmuDfcyb3hfUdw
b1SRe0M6WXBvjDkJ7o2N5N5IA/1pkcMeqGc0aa1HChtDzs78Yro/C0rn923r
Z7Bgba/E5jEeH12Sv66brlAPpf3l8w/6+MPVcwYuv6JqMGHLDsmVTpngeM28
vOWcE7pB5k123hLssXUvE+8+BWd+fcqywAq4MW1NVPFgEbSx2zxOyvzR6zz+
ze31yRCnaKin4VmLZXpHWfK0TPiU+CWjMIwOw5P+M3SbzMZarbt/IFYDGeIK
qM3hweflndkZN0MhbfcVWv/7KrhuO0HnnWYRdrN/fBvcGY2vp+ybOP42E/z7
LHhuffUwen7B5WstPFx01CXr0xwG3iH5XCuUzzShfD5K8tmb5PNKks/lJJ8T
ST5z/+bzFUE+7xbK5+skn+UJj9wJjwoIjzyEePSK8Gg64dEKIR7xCY/OER6J
RQp4pEt4xCc82kZ49K+5nmSuApn7UoiDqmRuBplbRuY6krlGhIP7yVwvMreG
zOX/w0cJxEefVwp85EZ8NI346DPxkSvxkSnxkRLx0TXiIwrx0Vbio5PER3+5
sIZwYbHQvUEhXDAmXJhCuED6L5gRLqgSLlAJF/IIF7QJF5oJF1Z+FHDhb/+1
Jv13hlD/NSb9t53037Ok/yYJ9d+7pP9+2yzovwGk//aQ/ptB+m8K6b8N/+C+
MuH+eML9i4T7k4S4f1KI++MnCLgvTrgfRLjvdkzAfUvC/WeEC9KEC2mECy8J
FxQIF6YSLtQRLswhXNDkCrhwmHDh3U8BFwYIF5QYAi5YEi5EEy74/CMnDUhO
BpKczCc5uYrkZOTfnHQX5OR1kpO6JCdPqghy8gvpZftJL5MjOWkU9GSqdk0J
2k0/oh7gywXD6S2RC1wyweBX76Ki+nwoT6htmjipAQYGTT0Z79m4eb19l6b2
I1hUXjkpx4QDex6MJDFPpWCcTvC4LT5sTHKS6VeaHwhOx2hfCkQyoCnZaNwi
iUr4rkFRmuVUCC8nvwqZ8IYLfv/Iq7/3JI/klSPJKz+SVxuF8iqW5FUdyauA
GW3/y6s9JK8+k7y6SvLqr4/Uhe4rZeKjWKH7akTwjgS1xEfriY98iY+0iY9Y
xEfbiI8KiI/qyX21oOKOuWkHCyylRtfMkeHDRk4Y7e7qdNxaxjzfzI7FlQ4L
BpSjE9Gg69NY8MZUtK680mdqWgCsxIth1u85uDvKedD0bR5IU1Rskr4H4wz/
O/q1tTmYfuU+/ceZPPzYfKBDAhCH5iZhHIULppZHZOwv58NXpyQPvJyNxQf6
Pnrcq8MZI06WbVY0tD9lknH5uTmoXZN8SinhAv+Y3qSidT5oeTxNbHliPRyO
O+xzabgCleWejGRtz4Y4PhT3jXCAJjKuc+f9NKStWK+Q15+PRmvPKnh9eIJW
9kbmX6rTgeFLoyrm0KCU7FmR7FmV7HnJ37wqEezZkuxZlORVMdmzAdnzaVHB
ng+SPVeTPcuTPfeQPc8geXUv9nV3VVMVSt+WfLphJBsoyaLuMRFxeM1hVoz+
XQ5033JXkf3QAP6RN35coBaAyasrN3XTObCsdcsZSZFCrH3/XOHnYQ6KJM93
M/RGWOZuE/DmVALIbhg0OTYYB/xx5fe/GwTj2uxR0dWsFMwulnr2cF4Akv+L
ikLvk4rkfZJSJnif1CXvky/J+ySfvE86kvfJVvI+GUDeJ5PI+yTpg9BI3ieV
Bf8Xzgj1XwpV0H9lhfpvCum/qqT/BpD+e43032LSf4+mCfqvK+m/KqT/OpP+
m0z6r/A9+ZlwMIxwMJbckwFdAg7KEw5Svgs4eIdw8CzhoCbhoCPh4GLCwWWE
g/GEg4sJ9z0J95lC/VdJqP/KEe5rEO7nE+43CPVfmRAB9y0I91MJ94sJ9/8P
ZnkcNQ==
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+J9C/RfcP9qsmkGM3bb9O9QftdhPWmPCpB81HfC3jH+
gvgX1of2X1hrgcx0KD3d3v2OYPkR2Y32p2ZtWrZG87k9TD1QsND9zkv75Ws0
s4Fy9mDttQ/tU30jg69NOQqVf2gP5pretZcAG/gESh+A6/vVBHLQbXuwdsf3
9oVgC/dC+a/tIe7dBadh6iD2XYTTEPve2puBHXDFXggs8ADuHjmwwQ/sIf5+
BjcfZh+MhumD2QPzP8x+mD0wc2vBAXcUbh5MH8z/C8HBfg0uDomHS/Dwhfkf
Zi/MHQBOtdTH
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Lv/0Hgvf1fKM3JAAIf7GO1Hs/INb5pv3XanwdW7+/b
p6klOC2bsNo+w1DPfIHXYfsjjoslz/w4b+/cedbBae4duPo4KL1e2e2+39wL
9hHS1XOr7ty3D705z8v023V7vj/flfNO3LfX75t7/+SD+/ZawZNDLU/cs+9Z
9Wc5e8JVuD6xM0qR2/bct8+C2nc/4yIXd8sVe9+S03Iy+67Zry/NOCYUeRlO
w9TVRPl4WbTegdNHoe60qDR+nv73rn3u44O/DvxDuGfKA99tnX/u29/c8q/3
bcVduPkw+2A0TF8Wmv9h9sPsgZmbd9p9IafCDbh5MH0w/y8P6K6Z2X8PLj5B
1yH7sdVdePjC/A+zF+YOABmJ3io=
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 15, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.042381, "MaxTrainingMemory" -> 501320, 
                  "DataMemory" -> 148816, "FunctionMemory" -> 33208, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 12.4794103`8.848769020180901}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 54, "Output" -> 
             Association[
              "((f1f2f3)(\
f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31\
f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             9117150835858592090]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3)(\
f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31\
f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+J9C/RfcP9qsmkGM3bb9O9QftdhPWmPCpB81HfC3jH+
gvgX1of2X1hrgcx0KD3d3v2OYPkR2Y32p2ZtWrZG87k9TD1QsND9zkv75Ws0
s4Fy9mDttQ/tU30jg69NOQqVf2gP5pretZcAG/gESh+A6/vVBHLQbXuwdsf3
9oVgC/dC+a/tIe7dBadh6iD2XYTTEPve2puBHXDFXggs8ADuHjmwwQ/sIf5+
BjcfZh+MhumD2QPzP8x+mD0wc2vBAXcUbh5MH8z/C8HBfg0uDomHS/Dwhfkf
Zi/MHQBOtdTH
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Lv/0Hgvf1fKM3JAAIf7GO1Hs/INb5pv3XanwdW7+/b
p6klOC2bsNo+w1DPfIHXYfsjjoslz/w4b+/cedbBae4duPo4KL1e2e2+39wL
9hHS1XOr7ty3D705z8v023V7vj/flfNO3LfX75t7/+SD+/ZawZNDLU/cs+9Z
9Wc5e8JVuD6xM0qR2/bct8+C2nc/4yIXd8sVe9+S03Iy+67Zry/NOCYUeRlO
w9TVRPl4WbTegdNHoe60qDR+nv73rn3u44O/DvxDuGfKA99tnX/u29/c8q/3
bcVduPkw+2A0TF8Wmv9h9sPsgZmbd9p9IafCDbh5MH0w/y8P6K6Z2X8PLj5B
1yH7sdVdePjC/A+zF+YOABmJ3io=
              "], "Output" -> 
             Association[
              "((f1f2f3)(\
f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31\
f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Version" -> {12.1, 0}, "ID" -> 62821522633873347]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 4810381614322949647]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 6947629787570823286, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 4322005061681527337]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.21965317919075145`, True -> 0.7803468208092486]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1: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
jWyPOAHvT9tvnfX2YaFr5SIdnjJLeMa3+4/CNAstX5Ewyp9dxPwx/Hy9D1jo
i5MSa1MOC4nV4a76Xhb60y8imvlvEXc+Y9d5vH0Jr63iZg51sFBeuIykYwwL
VZ3N0hYvYqGrFgKfAkNYSPuy4smOCRaKnJ3xCb3AQgN5MmoXVy3hAuLNmb8c
S1i9pOnPt2B4vj3fYTKehRyzG5hPRljoxh1jsW6dJXxW8KyWZB8LSV/I4xMT
XcL9+1tkUgE3+5pdXqL3WIjro/gBwz1L2K/NaZf2JxZSuhEhMTvGQvqvvSM5
OllI9GF4YHcBC025srTffod1hNq1Z7iXcMRgLbtgKwvh5oPN1k9ZaPe+0j89
F+G7isKpuEAWah5IcFz8s4hr5N0e+PxgoXd+ezjddwBOayreddRAXY/2nB5P
ZaFj734pmEJ9R+kn9u2xYqEu2aMBbgZLmDskRvybF+C571IS530W6n2Y5mg9
yEIPtnRz5FJYSMit+NQhwyWcFdyyufTvIg5bYy7jAHj87P3SaPGNhfZ9LlTs
hv5na7CnWsD532RIeo2dZaGwN2kma+D3s4MtIjxVLKT4PL/xpDULveysDAgS
WsL2Mba/djWwUM8rJfGPL1mI5M/jM4ljoYrr69zKoK8TSgkUGTjv9Bf2f9E3
Wahy/WDIviYWWte40WftEAtJRJ9peQX1rk14LVsJvPhUe8L8O/TzoGrqA0/o
003aVd/+MyzEENlftuUqCzUI/8Bn4fz+ZSElV98BH4vah6ZPsdB2G0Wuaqg/
YOBliOL/+VX47ko89FO7RY5UB9yNO9cUWyosYfeA0/2/gKf+T7UOJW1Zwlpr
pq4JQz3RUcI+ttCHOq8dxROFUG/o2gMvU1goxcVqHVVrCb9ZdX+xdmER45NG
fF5wvrv+9QejJJawqlW/k7D+EuYzvFMiB/3m6587w6m5hC2uLr/5msVCP+yH
Xt8EvVnPHWvgA/zkN6izs6WzkM8R+TpnwGnA6ijvWvg9sDm+cMd/LHTyYoRK
E+hRU9pQ3/IE9Ptujxc/rGues6Ou6/ci9lWwa8sFnAN+SVde/7WIr9of9Bpl
stCema4myWQWak38YFML++6WSMzxh30cuxznJz+w0OgHJ/qmYhZSfx0WLAx8
lSv/+9UK9EifoB+QA73Lp3pGnQH+TrgsswT8WOgCd3mzLuDEtWF1KlHGQuUx
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
FPBPNdP60wjwfnRifC7mFRO5lD02piUwEa+gj8i+Wib6aScseiCVjRu0t3lT
qphIvq7ON/k+E2mrjaZ65jFR2T7TnSFZTFS12/pW8WM2pkvw5kYXsfGpCT/d
nR1MFM17aiw+lYn8ollPyilMRBC6IRf3jIky/aurGR/ZOPnn7p934bp+vS8S
jY5MNPg2tju5m4m8eVn2eQ/ZOJgyctLPk4nOOJkHVxLZ+KZM1NCLF2xcljw4
Q7vERKvv2DFsoF7Bt3q1O4bYOPTCwcKdVWz8/clwkv5tJqJxPhB1DmKidjn2
TFwpE1XPiK/RH2Fjg/Ks1W+6mEjvfOdz7ddMNC/C4dzqwESvCgxulJ1iohG6
iV/mdSYatep5ohfLRPZOf+oECtnYvPRJz+P3bCz0ezKP9ZKJIhReV52E/uN+
c36i20Hd+x9R+zyYKJTfylcDcODQGeA6BvUrqrkuWUA/SlY1j+xz2Fh8A+8L
0WY2lnYsTYhJZqI03VLZ+rdMtH0k9kl5HBNts3RVc4pnItWXNRz58PfFvDu0
8EQmelYd+EwwgY0rlB2Np88ykRV5VDKazMbRZYIeXv4wn+oBbsEeNua8K1zV
946JgiziE0dgbjOpX0VuEZmoJD5irQcZ5jBVV3Qcrrtv1b69iMFENzYpeLU9
YqLwKfuOJwVsLOXkW7oZ5qWdm/Ho71M2drxKr9aMAvz+ltpdglf/OzttfKCv
i4KXi9ZgNvbMNdF8RGFj3NJVXOXKRKnK5i17nzDRrP18fEIZGzPztqS73GWi
nOWS2oZsJsoIvOIcmctEzz+U/XlYwsb5f9TVGEZM9ONP3exiBRP5ak2YJd9i
ou6L24QZMBeRlvPr5JuZKApH2bkA7jsK+7POwXyv+sTUns1l4yMGEj8MzzAR
w0n9z5shJuIoDxs8X8zGL/xQniVcz9JY2HbmCBMVNHz9WQ98fF4j6L0tiY0H
9Tnc+52ZaOD0KtqqTibqeTHU4AqvXq3nz5XA/fXuLjBMDJgoO0CZrAb93L6k
VZIDeE0MyRt0wxx23Y5ReAlz2xH1YUU6honYvrNJOgw2nr2P1g3DHMqWtojP
AV+Uo3N23W9j47zj0r96HwAPgo5HajWxcZF4LN+Wejb+lvgn/RTcJ/Hk9774
Siba33tJLBN0UiR/0CoaeGp964NROPTLdTD6sSjgFCpZxmfwmYlCZJV0mPFs
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
3cdAsv98/Y6BT1kb1gaGgV6FpxdO7gN90i9/NAgemUQGwzzzpaBLwxAGtzLc
/34OL+fchJ+mk/GLicBv2+yTXXXwfOq54L/P4AOj3T1692GOfS57x72Ah0QR
at8X8J3NivK+89BrvoZuandB1+GJSn31kMfhrn0HQ6BHOwvPFHaeYqE7veXr
+nezUHSfVKTCNhbS3JP94FANE+sGbmcxrFlIQP38L21veP7X+7MRPA+TPuub
dpCF3jNKj6SbM7HRHZpTjSYTv5AodtIyZiHT8MSzWdtZCDsHC7yHdc7bul1Y
Yc9CVm6/3r5VZ+J3Y2ltyhQmdm/dP62pBd97E3ZjqQULBb6iPftUwcS7fLP3
dtQy8QHX3ZKPTzJxdmxCElcKE5uM7ixMgTmeiVry4iAmbm4ZqDeLYmLXGTWh
Y2+Y+OCk+8hRDRbyq3hv4GXJQkOMi758e1go2+p43uQxJh5rkki85sxCD8bW
dl/ZzEINjunMQD0WGjVr6+n0YCGTt2fdBRxYqG9l5e298L1rN9fk16cx8ST/
m50iW5g4ZmTbya2HWahuOD6zSYeF/MmGH8fXA14zNofkvODcvu+KJdKZ2Jha
MGqpDvt7VEba3mZipXvX3EoTmVivlStM/C4TbwysZVzfykJPjkZoLsL5ub5d
chM2YKEQ1ZqQ12eZWD354+opwDfFqd3ctZiJXw5LpHYdYuIeJee3vRtZKCjm
/dXvp5mYrzHX0hNwEwmvNXHdycR3Woo8bx+H9xJ4jm3ewkLTneLTIWos1PEx
5pOHFhO/qrbcUOfKBH1q6p43YqHXilfci/azUM3mtSH5sC9bYhPfak0Wyvvl
1CEXzcQ6Ui1Flzcy8f6mH7JlG1jow8Kfwk5vJl7S8lNaHnBxnH7mTVnDxMqt
Ugkqdkx8W6jkKceHiUviT3asPcPEXJIBu/4dgHOlKZZbwnmvmar8XQS89n/2
bTvoz8R18doJ2qAHAxebB0fhXJc+vW2eheeXEo0fnYd9dm8ttJ4GvaU+/Slh
DPo8dsf21iXYr/n2O8WTXky872ig7JwjC13vULd5qc9C+nPu3A7Ak0JRq3z+
PhZai0XvXIHzOBWvTDUCfiX5V7bFrWPirKdK0euBx7GycNQEvN2ZEiU6YJ2m
r88mn4N+61a6dQS6sVB/aKT21dMsZOFVti0R9nduTftGAO4VN7j3CjwDPKdu
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
AdTKGHY=
         "], CompressedData["
1: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
3nHktESbAjvNSGvaZAr/B2LfpKM=
         "]}], "NeighborsNumber" -> 50, 
      "ClassPriors" -> {0.21965317919075145`, 0.7803468208092486}, 
      "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UDACSDAxMTGCEAiC2GASHUAEGRkhihixKIKqYCKogrAZ9LGF1mYAAAGWDxg=

       "], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 54.], 
         "Key" -> 
         "((f1f2f3)(\
f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31\
f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Method" -> "NearestNeighbors", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "Scan", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15089], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.4461875`7.101062392798639, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.5328621319548392, 0.08037113521454478],
          "Accuracy" -> Around[0.7655812459060587, 0.0730753416178205], 
         "EvaluationTime" -> 0.000028916845144476506`, "TestSize" -> 69, 
         "ModelMemory" -> 127712, "ModelUtility" -> -0.09343535525105828, 
         "TrainingSize" -> 275, "TrainingTime" -> 0.03981071705534971, 
         "TrainingMemory" -> 1443880, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.5328621319548392, 0.05683097472186554]}, 
         "AccuracyHistory" -> {
           Around[0.7655812459060587, 0.051672069595484406`]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 344], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 255284467150582]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4741650245926825`, 0.13668029620310063`], "Accuracy" -> 
              Around[0.5218540946607977, 0.03864975122795742], 
              "EvaluationTime" -> 8.942406107790598*^-6, "TestSize" -> 334, 
              "ModelMemory" -> 9560, "ModelUtility" -> -1.0996459220170185`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 116856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4741650245926825`, 0.09664756429979837]}, 
              "AccuracyHistory" -> {
                Around[0.5218540946607977, 0.027329501184461782`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.613325164994907, 0.06517371439240754], "Accuracy" -> 
              Around[0.7345304196559017, 0.036640704672896304`], 
              "EvaluationTime" -> 8.10539015024777*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.22535045051788116`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 153976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.613325164994907, 0.04608477540198666]}, 
              "AccuracyHistory" -> {
                Around[0.7345304196559017, 0.025908890741658596`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5319937631920132, 0.08509047685190942], "Accuracy" -> 
              Around[0.7512955316203443, 0.07446572877537133], 
              "EvaluationTime" -> 0.000014492753623188407`, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.09354535988258927, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 394504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5319937631920132, 0.06016805319638209]}, 
              "AccuracyHistory" -> {
                Around[0.7512955316203443, 0.05265522178306329]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014492753623188407`, "MeanCrossEntropy" -> 
             Around[0.5319937631920132, 0.08509047685190942], "ModelMemory" -> 
             9560, "TrainingMemory" -> 394504, "TrainingTime" -> 
             0.11873774487396296`], "Index" -> 1], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7051603291234624, 0.007489724936311384], "Accuracy" -> 
              Around[0.3819845276408597, 0.04847565814817907], 
              "EvaluationTime" -> 0.00007126427896022372, "TestSize" -> 200, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.3459930631224333, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 157200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7051603291234624, 0.005296035291687762]}, 
              "AccuracyHistory" -> {
                Around[0.3819845276408597, 0.03427746659905834]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5836183312757856, 0.0290163187111483], "Accuracy" -> 
              Around[0.7781256159744978, 0.05935842370625901], 
              "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 100, 
              "ModelMemory" -> 97648, "ModelUtility" -> -0.1645875851170968, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 185928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5836183312757856, 0.020517635725723064`]}, 
              "AccuracyHistory" -> {
                Around[0.7781256159744978, 0.04197274392324006]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5880846098709658, 0.04621011780168137], "Accuracy" -> 
              Around[0.7655812459060587, 0.0730753416178205], 
              "EvaluationTime" -> 0.0000726358309604742, "TestSize" -> 69, 
              "ModelMemory" -> 107376, 
              "ModelUtility" -> -0.17791223946587242`, "TrainingSize" -> 275, 
              "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
              387928, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5880846098709658, 0.03267548765699809]}, 
              "AccuracyHistory" -> {
                Around[0.7655812459060587, 0.051672069595484406`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000726358309604742, "MeanCrossEntropy" -> 
             Around[0.5880846098709658, 0.04621011780168137], "ModelMemory" -> 
             107376, "TrainingMemory" -> 387928, "TrainingTime" -> 
             0.071232132780415], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9805608725445049, 0.058850537907290966`], "Accuracy" -> 
              Around[0.49211809755436825`, 0.03867118017897479], 
              "EvaluationTime" -> 0.000017482278201269933`, "TestSize" -> 334,
               "ModelMemory" -> 5968, "ModelUtility" -> -0.6854811859292359, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 72832, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9805608725445049, 0.04161361443072141]}, 
              "AccuracyHistory" -> {
                Around[0.49211809755436825`, 0.02734465374103988]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.939469167516579, 0.12235295945684406`], "Accuracy" -> 
              Around[0.6505171723486378, 0.04777077868833743], 
              "EvaluationTime" -> 0.00001790077753714996, "TestSize" -> 200, 
              "ModelMemory" -> 6032, "ModelUtility" -> -0.6564533027092845, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              113656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.939469167516579, 0.08651660733017714]}, 
              "AccuracyHistory" -> {
                Around[0.6505171723486378, 0.0337790415530852]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.3099211136917532`, 0.258118745768297], "Accuracy" -> 
              Around[0.5655812459060591, 0.08456198907055813], 
              "EvaluationTime" -> 0.00002296946655740743, "TestSize" -> 69, 
              "ModelMemory" -> 6928, "ModelUtility" -> -1.00179997659121, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 359504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3099211136917532`, 0.18251751548412928`]}, 
              "AccuracyHistory" -> {
                Around[0.5655812459060591, 0.05979435590241437]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002296946655740743, "MeanCrossEntropy" -> 
             Around[1.3099211136917532`, 0.258118745768297], "ModelMemory" -> 
             6928, "TrainingMemory" -> 359504, "TrainingTime" -> 
             0.10730652334548019`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6692555211898913, 0.05684899767275668], "Accuracy" -> 
              Around[0.7560366526938808, 0.033559431070779994`], 
              "EvaluationTime" -> 0.000012910715743450939`, "TestSize" -> 334,
               "ModelMemory" -> 11104, 
              "ModelUtility" -> -0.30843764112661487`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
              62536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6692555211898913, 0.04019831175806451]}, 
              "AccuracyHistory" -> {
                Around[0.7560366526938808, 0.023730101282911052`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5355375057314671, 0.07967816061675886], "Accuracy" -> 
              Around[0.7781256159744978, 0.05935842370625901], 
              "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 100,
               "ModelMemory" -> 29280, "ModelUtility" -> -0.09802304116879079,
               "TrainingSize" -> 50, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 151976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5355375057314671, 0.05634096768458109]}, 
              "AccuracyHistory" -> {
                Around[0.7781256159744978, 0.04197274392324006]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5328621319548392, 0.08037113521454478], "Accuracy" -> 
              Around[0.7655812459060587, 0.0730753416178205], 
              "EvaluationTime" -> 0.000028916845144476506`, "TestSize" -> 69, 
              "ModelMemory" -> 127712, "ModelUtility" -> -0.09343535525105828,
               "TrainingSize" -> 275, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 1443880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5328621319548392, 0.05683097472186554]}, 
              "AccuracyHistory" -> {
                Around[0.7655812459060587, 0.051672069595484406`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000028916845144476506`, "MeanCrossEntropy" -> 
             Around[0.5328621319548392, 0.08037113521454478], "ModelMemory" -> 
             127712, "TrainingMemory" -> 1443880, "TrainingTime" -> 
             0.05610916132494848], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[11.997169331978078`, 1.5741267375718373`], "Accuracy" -> 
              Around[0.5098769892181251, 0.038646193390692044`], 
              "EvaluationTime" -> 9.639562317151964*^-6, "TestSize" -> 334, 
              "ModelMemory" -> 9560, "ModelUtility" -> -3.203754556835981, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 116792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[11.997169331978078`, 1.113075690584103]}, 
              "AccuracyHistory" -> {
                Around[0.5098769892181251, 0.027326985413605075`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.639562317151964*^-6, "MeanCrossEntropy" -> 
             Around[11.997169331978078`, 1.5741267375718373`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 116792, "TrainingTime" -> 
             0.14040512811147604`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.682120675378791, 0.013487212427655429`], "Accuracy" -> 
              Around[0.6370098173346304, 0.08225833310400128], 
              "EvaluationTime" -> 9.144309340292652*^-6, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.31457859460132886`, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 394504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.682120675378791, 0.009536899366898631]}, 
              "AccuracyHistory" -> {
                Around[0.6370098173346304, 0.058165425146941174`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.144309340292652*^-6, "MeanCrossEntropy" -> 
             Around[0.682120675378791, 0.013487212427655429`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 394504, "TrainingTime" -> 
             0.04491154083511767], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1265442962935008`, 0.21234538146748683`], "Accuracy" -> 
              Around[0.7139284564363565, 0.03747537495024671], 
              "EvaluationTime" -> 9.129969357138233*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.8493407136931451, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 154024, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1265442962935008`, 0.15015085918930415`]}, 
              "AccuracyHistory" -> {
                Around[0.7139284564363565, 0.026499091754827925`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6240379668784048, 0.15984369670904863`], "Accuracy" -> 
              Around[0.7512955316203443, 0.07446572877537133], 
              "EvaluationTime" -> 7.26358309604742*^-6, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.2715963228698738, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 394504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6240379668784048, 0.1130265618728941]}, 
              "AccuracyHistory" -> {
                Around[0.7512955316203443, 0.05265522178306329]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.26358309604742*^-6, "MeanCrossEntropy" -> 
             Around[0.6240379668784048, 0.15984369670904863`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 394504, "TrainingTime" -> 
             0.09431674328087712], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6897599146505107, 0.004146219368479048], "Accuracy" -> 
              Around[0.5215543945102672, 0.038660173869239166`], 
              "EvaluationTime" -> 7.547425451360935*^-6, "TestSize" -> 334, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.32297039756510526`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              81576, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6897599146505107, 0.0029318198317385396`]}, 
              "AccuracyHistory" -> {
                Around[0.5215543945102672, 0.027336871104789977`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6879349031383454, 0.005469079672088956], "Accuracy" -> 
              Around[0.5649559544777669, 0.04093936695502814], 
              "EvaluationTime" -> 7.549706850097808*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3207082637661184, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 120888, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6879349031383454, 0.0038672233229836]}, 
              "AccuracyHistory" -> {
                Around[0.5649559544777669, 0.028948503991384853`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6857565278580361, 0.01339014225950096], "Accuracy" -> 
              Around[0.6512955316203446, 0.08157566191091703], 
              "EvaluationTime" -> 7.26358309604742*^-6, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3198455721686615, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 394328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6857565278580361, 0.009468260392745688]}, 
              "AccuracyHistory" -> {
                Around[0.6512955316203446, 0.05768270371699058]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.26358309604742*^-6, "MeanCrossEntropy" -> 
             Around[0.6857565278580361, 0.01339014225950096], "ModelMemory" -> 
             9560, "TrainingMemory" -> 394328, "TrainingTime" -> 
             0.029825573025695384`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6814373722964034, 0.00698412830646475], "Accuracy" -> 
              Around[0.5818405139109802, 0.040745250303971685`], 
              "EvaluationTime" -> 8.24927067756624*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3116773866155276, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 139272, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6814373722964034, 0.004938524486178143]}, 
              "AccuracyHistory" -> {
                Around[0.5818405139109802, 0.028811242791081614`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6540880117609496, 0.017631045200819574`], "Accuracy" -> 
              Around[0.7227241030489159, 0.07694438094025212], 
              "EvaluationTime" -> 9.144309340292652*^-6, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.2740437817760719, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 394512, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6540880117609496, 0.012467031620906054`]}, 
              "AccuracyHistory" -> {
                Around[0.7227241030489159, 0.05440789353705321]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.144309340292652*^-6, "MeanCrossEntropy" -> 
             Around[0.6540880117609496, 0.017631045200819574`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 394512, "TrainingTime" -> 
             0.08264658982888212], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NearestNeighbors", 
             "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 255280172183286]], "MaxTrainingSize" -> 344, 
      "PreprocessorEvaluationTime" -> 6.87509765625`1.*^-6, 
      "PreprocessorMemory" -> 133872, "InputDimension" -> 54, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.5264686513833823,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341333706926`17.33219102245862*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.19599999999999995`, 
          "ElapsedTimes" -> 0.2209277, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
          0.3108029, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 275, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3960869, "ExperimentCounts" -> 8]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 255293057085174]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0028566784761985806`}, "ID" -> 2012584263858510782],
          "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0007638712833515243}, "ID" -> 3376903169154920857], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.003972802099710257}, "ID" -> 3632703242769103962], 
         "f4" -> Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5262322885661414175], "f5" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7660976489072239443], "f6" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4566832416539401062], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8338104754641274096], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2945656690161529218], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7617659849524083650], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5281668420414443169], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6926375020612186133], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5392483375794572286], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7120091213843630473], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8619585507662541519], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9105796261914093594], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           899827560702592809], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3870006701733139245], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1587211882312701522], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8500508467439598906], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6529395527920164728], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5594058468387165367], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           121873097537852042], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4363421939847408023], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7277650560330608628], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5559428397080903884], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3746300322585503557], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5185689835166260732], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1520147187882846562], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5171348138519162512], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5365491493702861146], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4953839477725511960], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1184336812187244241], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6366431276301057814], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4662677754688249815], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3088759861542182173], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5356826843408994456], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5116708661740824909], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7843396448171850169], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2430879233882408397], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7495908642176828693], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1982581308267403901], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8974423257124887945], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3505297353013867649], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7373011726787336034], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4153002076961310192], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5336452060301203330], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1570435780688220038], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5393775021814329159], "f49" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           543436883610484367], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2115013139552251115], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1563510315444767571], "f52" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2451431682501431556], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2537535842117429829], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5750661702979419203]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.5647702, 
      "MaxTrainingMemory" -> 2502048, "DataMemory" -> 2846176, 
      "FunctionMemory" -> 547928, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 13.8006991`8.892476040652728}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7921913387971*^9, 3.7928446382094374`*^9, 
  3.7943046219214277`*^9, 3.794304818156088*^9, 3.794315074907525*^9, 
  3.7943500806744967`*^9, 3.7946037952126303`*^9, 3.7948649553103037`*^9, 
  3.7953466979360657`*^9, 3.795376321384963*^9, 3.795376996811366*^9, 
  3.7959513198386354`*^9, 3.7977278636880703`*^9, 3.797728935023168*^9, 
  3.797767998400565*^9, 3.7977733593307977`*^9, 3.79777688695187*^9, 
  3.797777382897307*^9, 3.797778150600713*^9, 3.797778893062209*^9, 
  3.7977859970072722`*^9, 3.7977975488305182`*^9, 3.7978055386254487`*^9, 
  3.798548148950001*^9, 3.7985485338969507`*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"366388a0-75c4-40cb-a04e-357733391e5b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cmclassRedMaccs", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classRedMaccs", ",", 
     RowBox[{"mLmaccsRed", "@", "allDataMACCsTest"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921913486280656`*^9, 3.7921913692429523`*^9}, {
  3.795377004226512*^9, 3.7953770228008537`*^9}},
 CellLabel->
  "In[149]:=",ExpressionUUID->"26cff43c-6254-4eb9-a5a7-b82e036cb083"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassRedMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921913710990114`*^9, 3.7921913758568277`*^9}, {
  3.795377025946478*^9, 3.7953770274564114`*^9}},
 CellLabel->
  "In[150]:=",ExpressionUUID->"3d0a52f1-abcc-473f-a8d7-19019e437011"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.7790697674418605`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "Indeterminate"}], ",", 
       RowBox[{"True", "\[Rule]", "Indeterminate"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "1.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.5498821681068342`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.37941869599371564`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8758169934640523`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7921913763681626`*^9, 3.7928446385062747`*^9, 3.794304622102944*^9, 
   3.7943048184692087`*^9, 3.7943150751366463`*^9, 3.7943500809657984`*^9, {
   3.7943512279164085`*^9, 3.7943512296104746`*^9}, 3.7946037954327774`*^9, 
   3.794864955560207*^9, 3.7953466980866613`*^9, 3.795376321664214*^9, 
   3.7953770279710655`*^9, 3.795951320254039*^9, 3.7977278638885236`*^9, 
   3.797728935292652*^9, 3.797767998566122*^9, 3.797773359516152*^9, 
   3.7977768870627394`*^9, 3.7977773832097373`*^9, 3.7977781508316555`*^9, 
   3.797778893312153*^9, 3.7977859973196993`*^9, 3.79779754907905*^9, 
   3.7978055388887777`*^9, 3.798548149195675*^9, 3.7985485341443176`*^9},
 CellLabel->
  "Out[150]//TableForm=",ExpressionUUID->"f6ba9c66-29aa-4260-ace6-\
3360d0730a88"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
    "trained", " ", "on", " ", "only", " ", "high", " ", "KS", " ", "columns",
      " ", "and", " ", "maccs"}], " ", "-", " ", 
    RowBox[{"Ln", " ", "mole", " ", "frac"}]}], ",", " ", 
   RowBox[{"sodium", " ", "oxalate", " ", "mole", " ", "frac"}], ",", " ", 
   RowBox[{"amine", " ", "mole", " ", "frac"}], ",", " ", 
   RowBox[{
    RowBox[{"maccs", " ", "keys"}], " ", "-", " ", 
    RowBox[{"lanthanum", " ", "only"}]}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.79219177169954*^9, 3.7921917946977005`*^9}},
 CellLabel->
  "In[151]:=",ExpressionUUID->"8919fb48-6108-4fc2-8aa6-3c48c1f03086"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classLaRedMaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccsRed", "@", "laDataMaccsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.79219180263173*^9, 3.7921918443925333`*^9}, {
  3.795377080578397*^9, 3.7953771221951714`*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"d397c963-f07d-4993-9814-16f7b1480742"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "54", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Boolean", 
                    "Boolean", "Numerical", "Numerical", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Numerical",
                     "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"},
                     10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "54", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Boolean", 
                    "Boolean", "Numerical", "Numerical", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Numerical",
                     "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"},
                     10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["114", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 114, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Numerical"], "maccs65" -> 
           Association["Type" -> "Numerical"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Numerical"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Numerical"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Numerical"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Numerical"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Numerical"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Numerical"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                  "Amine Mole Fraction", "maccs53", "maccs54", "maccs62", 
                  "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                  "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                  "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                  "maccs103", "maccs104", "maccs105", "maccs108", "maccs111", 
                  "maccs115", "maccs116", "maccs118", "maccs120", "maccs121", 
                  "maccs122", "maccs128", "maccs129", "maccs131", "maccs133", 
                  "maccs134", "maccs137", "maccs138", "maccs141", "maccs145", 
                  "maccs147", "maccs148", "maccs149", "maccs151", "maccs153", 
                  "maccs155", "maccs156", "maccs158", "maccs160", "maccs162", 
                  "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 54]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Boolean", "Boolean", 
                  "Numerical", "Numerical", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Numerical", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f6f7f21f26f39f46f49f51)(\
f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f34f\
35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f6f7f21f26f39f46f49f51)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]], 
             "Version" -> {12.1, 0}, "ID" -> 1674725140597275850]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f6f7f21f26f39f46f49f51)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]], 
             "Mean" -> {0.0027412486734471114`, 0.001293490473503618, 
              0.00551591410082522, 0., 0., 1., 1., 1., 1., 1., 0.}, 
             "StandardDeviation" -> {0.0008229396922519346, 
              0.00039731195105714153`, 0.001842462714156329, 1., 1., 1., 1., 
              1., 1., 1., 1.}, "Version" -> {12.1, 0}, "ID" -> 
             3213127222813918346, "Output" -> 
             Association[
              "(f1f2f3f6f7f21f26f39f46f49f51)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29\
f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 5151886744259499180]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29\
f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 5374446651154784890, "Output" -> 
             Association[
              "(f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29\
f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29\
f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 6461579978648322703, "Output" -> 
             Association[
              "(f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29\
f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 43]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f6f7f21f26f39f46f49f51)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11], 
               "(f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f2\
9f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 43]], 
             "Spans" -> {
               Span[1, 11], 
               Span[12, 54]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f6f7f21f26f39f46f49f51)(\
f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f34f\
35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwY4CBD/aj9NCgAaICQcs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 5899757815432856785]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f6f7f21f26f39f46f49f51)(\
f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f34f\
35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwY4CBD/aj9NCgAaICQcs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 114, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KFe9o+SZ06btP0m+Od8o6rNoZzj5aIXd64h4FCADHn
pL3GepANt+x90kEi2+wvR4JYT+1h8gdrWb4L3nluXyAPYm20B3LcC+Qf2teB
hN0v2IN4B2ufwMUD4pwreZ8+tQdTpkfg+qROZQOtugPlH7QHWyv1yj4UDI5C
3bHLPh1iMZwG+br/wTv7JKvulzrLLtv/hgjA7YeIP7YHitk1/X4BNxdmD4yG
6YP5E2YvzHyYeWDjNp+Am/MJ7PCHUH3X4O6C+QdmLsweACliuuY=
                    "], "Method" -> "Naive", "VectorLength" -> 54, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KFe9o+SZ06btP0m+Od8o6rNoZzj5aIXd64h4FCADHn
pL3GepANt+x90kEi2+wvR4JYT+1h8gdrWb4L3nluXyAPYm20B3LcC+Qf2teB
hN0v2IN4B2ufwMUD4pwreZ8+tQdTpkfg+qROZQOtugPlH7QHWyv1yj4UDI5C
3bHLPh1iMZwG+br/wTv7JKvulzrLLtv/hgjA7YeIP7YHitk1/X4BNxdmD4yG
6YP5E2YvzHyYeWDjNp+Am/MJ7PCHUH3X4O6C+QdmLsweACliuuY=
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+L/YPDe/gOUZmYAgQ/2DBTSoUtUvPjX37SXdFSysJ15
316T+d79c1KX7K9o8htofb8Ll1dpsUisuX/bPmX+HB/tyAv2StNCL559fR8u
PmuimcSSbffg4m+mPvQ/sv+u/cN5h3t9wq7D9Qml7ROovXTffmX6utx/Vtfs
Fx+cbhZ1/oa9qVvp+S83r9u7TP9qLL/ksv3qexnu1e534fRhldNPYnqP2zfm
xXy2ar1rn9mSt+zLL4T9FQ4GbyQ07tsXNYuesqy+BTcXZg+MhumD+RNmL8x8
mHnqJjvKjjrehJsjDHX3tTWsN3W678HdBfMPzFyYPQAgXMrR
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 54, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 54]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 12]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
8C2S8O074duQCD9/J3zLIHz7J7iuFV0=
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KFe9o+SZ06btP0m+Od8o6rNoZzj5aIXd64h4FCADHn
pL3GepANt+x90kEi2+wvR4JYT+1h8gdrWb4L3nluXyAPYm20B3LcC+Qf2teB
hN0v2IN4B2ufwMUD4pwreZ8+tQdTpkfg+qROZQOtugPlH7QHWyv1yj4UDI5C
3bHLPh1iMZwG+br/wTv7JKvulzrLLtv/hgjA7YeIP7YHitk1/X4BNxdmD4yG
6YP5E2YvzHyYeWDjNp+Am/MJ7PCHUH3X4O6C+QdmLsweACliuuY=
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+L/YPDe/gOUZmYAgQ/2DBTSoUtUvPjX37SXdFSysJ15
316T+d79c1KX7K9o8htofb8Ll1dpsUisuX/bPmX+HB/tyAv2StNCL559fR8u
PmuimcSSbffg4m+mPvQ/sv+u/cN5h3t9wq7D9Qml7ROovXTffmX6utx/Vtfs
Fx+cbhZ1/oa9qVvp+S83r9u7TP9qLL/ksv3qexnu1e534fRhldNPYnqP2zfm
xXy2ar1rn9mSt+zLL4T9FQ4GbyQ07tsXNYuesqy+BTcXZg+MhumD+RNmL8x8
mHnqJjvKjjrehJsjDHX3tTWsN3W678HdBfMPzFyYPQAgXMrR
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 12, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0165648, "MaxTrainingMemory" -> 205440, 
                  "DataMemory" -> 51312, "FunctionMemory" -> 31672, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 14.3397964`8.909117936128895}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 54, "Output" -> 
             Association[
              "((f1f2f3f6f7f21f26f39f46f49f51)(\
f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f34f\
35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             1355298013188883356]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f6f7f21f26f39f46f49f51)(\
f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f34f\
35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KFe9o+SZ06btP0m+Od8o6rNoZzj5aIXd64h4FCADHn
pL3GepANt+x90kEi2+wvR4JYT+1h8gdrWb4L3nluXyAPYm20B3LcC+Qf2teB
hN0v2IN4B2ufwMUD4pwreZ8+tQdTpkfg+qROZQOtugPlH7QHWyv1yj4UDI5C
3bHLPh1iMZwG+br/wTv7JKvulzrLLtv/hgjA7YeIP7YHitk1/X4BNxdmD4yG
6YP5E2YvzHyYeWDjNp+Am/MJ7PCHUH3X4O6C+QdmLsweACliuuY=
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+L/YPDe/gOUZmYAgQ/2DBTSoUtUvPjX37SXdFSysJ15
316T+d79c1KX7K9o8htofb8Ll1dpsUisuX/bPmX+HB/tyAv2StNCL559fR8u
PmuimcSSbffg4m+mPvQ/sv+u/cN5h3t9wq7D9Qml7ROovXTffmX6utx/Vtfs
Fx+cbhZ1/oa9qVvp+S83r9u7TP9qLL/ksv3qexnu1e534fRhldNPYnqP2zfm
xXy2ar1rn9mSt+zLL4T9FQ4GbyQ07tsXNYuesqy+BTcXZg+MhumD+RNmL8x8
mHnqJjvKjjrehJsjDHX3tTWsN3W678HdBfMPzFyYPQAgXMrR
              "], "Output" -> 
             Association[
              "((f1f2f3f6f7f21f26f39f46f49f51)(\
f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f34f\
35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Version" -> {12.1, 0}, "ID" -> 6823426001601101189]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5664398564532298490]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 2797529017361396161, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 384226982582893393]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.25862068965517243`, True -> 0.7413793103448276]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1: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
5IYpfFqq8f79ym+oS//uFeXIBMEbsoLnewi/55KFzDYy4V2Lk3H1kym8uqYv
slqLCdyuHXrUA0wQcNmn1XOdCecPzos6t07hNoqAgkoEE8zXVQekdUyhoemH
aKH6KXT0EUuzsGQC9ZVjDMfnKaR9d301zMqEINfZG7KDU1g11B2rkMSEaf60
X32UKSy5v0sqg4h7R0rToPDDKdwkYkp1VmZCjLw3s9GIWNclfq/ZjAnHZ+c5
cwj84poXXNYSdVqJ4VMRO8QEu5mSlzQC/0MXllxiiLw/e2ZYRVxlQneFklD4
nSmUFkwz4N3CBJPvjrxTr4h6hXN7vE9lgscFVpHDwkzoeR2vnmfChHtcFx7N
RzMhs9LgMo89E5wK4+4+IOx3HuasnHk7hTqhqWuXiH1r1npc5bRiwkSuv90X
cyYk+b247/N+CtlTthYpEvyS1nF8piXIBKvTB2JzGVN49PxQyXNXJvBVyCsG
Dk9habo1v/LQFJ5QOPDXmXiuNFF4vNWYCQPf33c6E/WJWTrzh6OFqP+5Swfd
KqdQoQy57X9O4cEt9if5CJzftDRsGs2Zws7b6zAykAmvVHX/fCTwceOVupNE
8DSOr/hJAhHX709v8uwbp9C0P3WrEcGP+yYbPfcS34ctgnd/W8+Ei+Iq6ZwZ
TNg/rWHa+XUKu4XviKsLMKFpq9m0fd8UGq9qbP8/f7llnbvE303heoX6U+YE
Tlc6nlTpEPiHR6Z3W41M4Z8071Al4jwFyqxZjCL2C3xwQTn2aCuY6k27rpA5
yS8zD8ka8rQCu74D7e5YC8hf8cnZFNACRx6M0T4rtUCwoGCNFHsrmFDZFa1s
WqBze+zMpG0LHNcdfcxT1gIZgvvfnDrQCo9Wh73aNVtg1mmvEdurFnC5GvUt
TLQViiOsqyRXW4B5bvfZI/otoFDszF33swXUOsdnZXRbYRuvfXYZ4Ud5XuX2
+GALWBXvfu67pRVoWtOtlxxaoSMpW3WdSgvc1athc2drhQesdfk7EltgMEOy
rlKtFbyzEj+qK7VCw9vD/4mGtsLaU52ddz2IfFR8ODKGWgAvxGe8M28BtyKj
M1Y/OMkd3KzvNQn/da9z01uIfBd8hc7En26Fy/tKz33iaIWi408+fDdvhe+C
+Tbs2q0g1mutzqnfCmwfozPyc1vg69OM65spLVBttpK5vZ6TzNj2n5zOOBH/
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
sJFsf8vSouI0EPKzUtgYf/EejYC+HdOgWmB6S1BgGvyUa0o3aLNRzyYpo7s4
3+8f3G43DNnI449u2EH1aYgUDGt3xjxP3N+RRUjHv79SjL14go30TYN6t2F9
vw1nyeeeZqOgraKhUbi+Y7lZNuoa0zA5n2LIFcNGJxonNR22TgOf2g/9Tjx/
da725R5jNir0KS1LcWCja7ERLvzH2UjnL7mXpj8NXv1Toh5hbOT/y/vc9Sg2
YlgN7n2G9XjTuV1CBvNSYnjE30RwGlQSjFnT2H+iD1iGLTvZyKCa9lL9+DRE
0B8bqFlPw63Z7pfyKmyUT+bLTcN5inOCN9Xi+OJvvMZlLrHRzlCNQ4sebHTj
yLS3PebDb8XlstjaaYD3Z7m/G7HRzU+zj9SK2GhqPxVCVrNRqxaz4BVe95//
4CIR130q+PTNo5Fs9PGryY5pfC6ib4dKxlqw0YLGdd+H+PnpG4nZtnZsNDi8
otAlwUYdyg11v6+xUQyLeDfDdhp/D+k86sZ+PJM1lbnm6DTck2Jq/wjA/ms1
yDiFdZYWzniR7sZGVMP8X1Encf0t6eJGGFfxBRefeqlpOLPNyMH25DLcz51x
/au5DNzBK64COn2oqb+kdOpTLwpP9j8Q8qcXtSQNSZ+wWIbO9uie3v5e5G30
8o+lzjLwPb1xXPZXLxL80DP5o6IXmQtkrGTW9qL3J1/OmRj1ocz1YO3a2Yu8
fj8es+XrQxt8y98fLutFz6IvjROXe5FKZs2g3uE+1D5od257Xy9ac1i/SVph
GVbs/K2aNiyD1Nn97rE4/q/R4uJEreX//z8WeZX5MgjE71IiY9zmzzQuJIv2
oc13q4NtNvUhJ/Hz81azvejwCZFfAxhPksfmpsyiXlRQHPWs9lsvuvByx+ZI
0z4UnjX1iA/Hd2oU7FEQ6UPKVgn/vcTxPG0LVMwV+tDY3nBn6kAv+qotnty2
sw99p0Z8T//ei+pcz36ZWOlFdsfDws3/j8PbgiKPcWuBzFKm9TL8PmAt3mzc
h+L0902n7u5D9gFhCSQc56ZCnuMcrjPmVUCxZwHG5Xydcg3Xw87ouipv0oeo
upUqr/F4YlR4dNOmZTjPcjj5cFcfmued2bNeuQ9p590cFv/ai9avLk3MRr1o
U+4NoxWc1ynu4qKJ+jJsW7fHXq2qF72NdJBqw/UOfXS1eireh5L/xp1+T+hF
W6LiJV6QepGqnsjytM0yyEcIrh/B+65I+ez596YXmWgbn45s7kUNj/O/D9J6
kYfCpwNGkn1Ic8sX3/LPvWj0+nSSn2AfCrx95+Iwbx8yI/dpWq9ahiSWwUvz
+V607mhtGHlvHzokLubRuqMPxX492HKHvw8Zi51dG6nZh3Zfbz5weqIXGdy1
WbfvHa4/LTnJDeMTj7id90m3D4V5mFC0se7JQjxkCqcX5Z3Ujdu2rQ+dIr7h
NJsuwyt2XNhnzHdPpSlTCvoQoMIN5zb2oXSlLYOSWO/FTpEI2//6kHpX2+8j
rzD+Jl81I/z8p5Xku1qjZbASvXjRGeuwdC723Sz2wbdH8/fODWFfNLQ8P7MV
6zs9XkvEfsmvP8f1Ec/tqs0Kclt6UT1XBPeu3l50me/bA+WXvSjrffKje029
SN2/OLcR62Bnub7jCdab1LtyqEZ1GVheJzNX43q0fncbHGT3oum1HQolmAeb
LMMhS7y//MjnRDOsw+BBpdP7Mc+fY3x2H63sRT+qS9SuH12G0C/E3xeFetAn
lsR7wRYug/2rS/cLB9CRbJsKeR+xGw2dzLGfaaejNw8FC9p30dFWrQonYgId
3ZJYEGLX0dFRssgf6TouA0rUyfThODoKXxFZf5HCZeD55lJFl2APatC7nb6i
Q0f7opL2iIx3I8le0bENg93INPEnd8gPOnrQJnRj9yY66vp5RnLsEB2J1qc4
mdbS0SFSa8gQi46EOYxB/f9VdOXhUHVhfNCCihappESlTSGtSq+ytKmQJUq2
0kaUFKmUpY1SIiVLkmRfQracyTZDtppR7pi5ozFjpDFmskSU73x/3efce+77
/rb3pOe5Sp9ES90W3zr1h4Pk3yXMXTWNRDJmKQv+NnDQsQTWuSWvSbRzh5LV
wc8kOvYzS+9sMwfl/Ls3WN1Dom8vZWeJf3OQrsn9GOFjEpnbdL2bM0gi63+1
6xzZFOPTn5pf/TpCIt7bkaTUWBLNSXlDrumhGPvpe0/rFJMIig7eKezmICWV
u3t4IhI9XP7Twr+Jg7Zub768doCDYrm3J/7/Pk8kmz3pZxvFuPGc6szgdBJ9
Fa/9u5xOMTYstWuXLSXRAa0pa5c3kMhv0HuI2kaiASUvnZ08ivEZT839U8JI
FDpaYDRYTKIPxieDlzVSjKUhO1a1xZOIwTgwh2ZColWntj4ErNeHxuCpA5uw
Tu02y4/3k4juo6XZ10QxPl481XN6L4mylM49+IX7aKW/j9zFwPXrZb9m4Xpt
pWUJHrkkylsnrVbsohgPl22q2FKPeQYvHHkWQ6JuZzlos8U44jt9u4xJpBQj
b2L4m0Q3exyOzoojkdptsUtCK35ue2JMGePdxxrVccJ1wjWLtDfKkkjWemf/
qn8kejR3vUIZ5rc86eycn5jP6rIHzynhJKqP4xS6YL6DWiU2HfkYd5jslHMS
7GcAeXWNA4m2VnHW+uN+qrPPnIgXcVDyOu/0mXhtl6XsjVgkOnjN6ehnNxK1
uZ0VTFMn0UnrhuscZxIFxEwbGMN+XyDqfe4hzONmw1sLMQc9eFy46TeFi+Jv
9WzY855Ehbrv54lwXgsmNB6a4PxIr85tyuBQjOf2ZPAjcR5rnK54prRQjGtn
8e0B59dhVsnvyTkkOl/2h/XlB8U4fmKY6ojnoKI4sZT0I9HwaSXfLXhOHm14
dotWS6J/PdPOzVMk0TyLxsKz+L15oaJRq0lcpEaPnrYxlEQOLJ9TqzRJ1KVo
PCdJkYv4tfddVbDeJtER3NrlJIp9ElyVgfv23MjXtckiQNS2Wt88lwCanotz
iC8BjTHF1I+RBBhtkrV9cZ0FN5Z9PqRcQcDFWGX1pM9y1Pv9EzeTnQi4EfBl
32VrFox39LH0RQRw2oMnqS5jQc0oW2CbQcCHbx7vDT0J0PvZ8eq3PQHPvnKe
MWezIC1o0U21ejnqjdjEsYhAAg7sbDM4854Ac+t49V+WBLR0Og1n2rNgdbrP
h1FzAuSePrYLNCKgU/b67VVAwHjY9XsJUgJm/o3k1bizYCTjq3mNFQFiF/oJ
nbMsOC60fdv1kwC17NYU7To5qhV18rSTLDnqlZgk1fE2ArJmakuNPhOgUZhc
ABcwvpTyO2FVBHyDLr3wGwT4ZW48+A7r8PXdVvqNNjnqxq96q911WCBIbltn
up0Fr2NMpJcPsWDbnB12BNZtmsHqRjtjFkwovqg9cRXrlTrXqugaC2xCdm/Y
MosFLdvZU3UW4ufPeqa9mM4CF9k1zuDMAp+fPyc9GsK62ZIti2rkqD2666eO
1xKQqLXocZ8DC7aEyMvur5ajzu5euzB1Mgs+JtJnT8O8Z//jbFrCJiDJXXbe
u8sEMIzMTBM65aiBm+0tMuIIqNDwsblnyYJTqcxf2j4EbAwtWLPXiAV1+x7O
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
Y8TIz6F6Xe5LMdJEX9lPSyTwSHUnZVGyGHnHKPyoqBYjdvfIYo1kCTTmxmnf
8JEAzW2Vd/E/MVp1oXSmx2sJRO9YXCLEvGwYPEFjixi9bm6foY+vOoo1bsuf
S+CdSzZ1qlw/iiqd2f5Itx8l7ty3dh32xWeGwp0DOCdHzx1+frlbjPSMF0/T
YIjR0Ry9JJpEjHyRbVk09ll8/HZrE85FgY/xsB6++mqtUtCW6UdssYyRGNdx
cK7ZcQDr5T5d01EJ+7Xevuz0DOxL/K/P2c5K/ejx9m2P7uE8BHwXBXUZ9KO8
VbOa/8aJEciu8lBLFaNa8yaZSTifa8btBN4Yr3mnXhIP8194+/T8KuzfwrRl
+/rx+xuYVcp7PRmQOPHlz5IqBepzg6MJX2MY4BVZuUndkAFZq5u+LLjFAGfm
J2UnMwYsStLmtSYzYE9/r+0qHybkjQxH7aljwOqHi3h7mhhwXTQrLlOTCfM5
6rT+E0zI/f3Bo/cyA6ytp/w0YjBg38ywtHM1DDD3V2ZGr2DCkTZnk3R3Brzj
LA67HcSAz98uj3qcZUKp30j6hlwGPJmXFVnkjPtlmV5wV2GCS7zOQ/PzTKj8
pW2dc5EJsyz9507ZxISx3fWVHh4MCHjeOU97gAHRryXHWjcyIGbyTwX5M0x4
UvmxvMGDCQ8gVa3zGQMUja3rLasVqJSW2fYpG5gwRf7UL2E05nFn4uqHgwyg
+OusPKDFhPrD0dvftTGg6M8WS41TTPCqeHZFs4cByveW60nqGTBL7+CNmKVM
CLnB8W+rU6DS9JrYdnJMCNs4L1b8CeuR/9xb6zITYve5R6QDE5Yuujpio82E
8Kww7lyuAvUGJ1WNasgEYRzPZEEgE/58SJAdblOgqjC1VQX4foBqCffsFCaU
hbzUCPFlwiHppkIqxv+3LOtw4gsG8Fv2l31lKlAnlidMOTjOAPaXS1dOz2BC
fFJtZmQzA357XpnU6ciE10vErEIzJgiOrsk6juuzZZ4Ur2YpUNXWxrKG6Awg
5xWGJnIYsPTKR5V3mN/K3N07vskzwSidvJuzmQmuXWXKz/F1wwzDixZRDDgz
KHfkCV2Bmrz8zkZKPgNStscExJUwQHJd3fRYHAPQoqWP40fxulxBeAjnotXX
gnHrMNZZjqOIvBlQeLhKVWqPc7KtlxKN8YVqa94e3oPzcHThzanDWP/aPRNO
/QyIkN/d1/6OAZvNqRbpdxmQ8PDhgtdY39pt5yebmzNhziOPKfVGTKheyjiQ
6cOA5/vMNvzVYML5En+tu38Y8HCRmfPi8wwQ74nZsfkAAxoOnlg/dYwBBqYy
O53smKBcolS5FOdVWY412/AjAzTqXm8x8GfCb5fN9w1O4/7Lx/Z+x7qY7S8Y
XobzOGlzwqpm/N7MIYnEATHATe1rrTvO2XcL9gUFPEff7INVNNf+jyv5/ins
9+T0Vpc0C4yjwLTqwB4GrI2+a5i3gwlR+Tqb4/D8CHK/fz+F9aSxS/PRJwVq
8XXDzdJdbBi7WnNWJocNDxtmp5Vbs0HztTRRVMqG6d7CzbnxbDiScZ61ZhkH
WisbfJuFMlS981Pmp/uyQZ5W+3oJV4a6tGbw4fc+NjhMPrwr8IsM9WIu6cYy
YcOkt3Zn24+y4cszG9Qpx4FpY8db29ZxYPnZLdlND9nQqFxlFLKGDYWxoTfl
2tngmmAzN0+DDXrE2hvTWtjgqVvfkuDOhmbBgzomnQ0rzG8o1tez4bylZLZt
BBte5oTufSFmQ8D+L9/9atig7OlKm1TJBuPjv0IMe9jQYp3yo6lbhnoW2c9N
/y1DVbA8EGJ6hA3u+4kq2zNsmLlgRVXzRTa0helpSSVsuBav5hAjkaEyn8bE
HZZhQ77a3YFtT9hQFWCwBszZ4CVxNYsfZ4PYLepqwAoOqCmef19hyIGaebX+
3wg2VFQgrxPGbMj+elQcTshQpysMBB75zobxOdHfoobZ0FVsF8cMYkN74kPb
5bpsWFBrYyrRYcPklq7kpFdsSG9WyLn2iQ2b2TVfz27mAN3TWL69R4Zq27rI
M9mHDdsDzTrverAhjP+TOnmMDS4Guxpm/GBDR7imcYkuB9DBWXvyF7BhzXGn
k259MtSVgwucVJgy1Pmkzse589mw/Be07Ixmw/6dFW2f7dnwr35IZBbIhqu3
KEtUMf5/b+6UZ/9jQ3l50jboYENTyrfDjs/YoHWsete9C1ifD6vsZ+qz4XK4
NPEV9kVktNgkcCUb1pl8S9bzYkP4a9afwHI28KP4kvlYX+nM/qzI9RzY2e/S
Zc+RoR5N67ZMycV1APrOfJOhtoYuMRu1ZEPDoMnqgS0csGCukK7F+dhQdFXV
cjvOy/Lgzz9/seGE9qUlim/ZsNHa+7lohA2zD+o9Yb5kw4uAe1SE8RgNBlu2
rsb6LSgeiZjJgVO6F/iv37NBf9Ga4CcY95zOuejTLTYwjB2f5GBdZdtuG4Zi
Xbn/Njx8qcOB0Fhb9KZFhipuPtmV3y9D3Xdk74+lWJ+GcNfR7wwZ6iL9sjHV
5Rwo0Zry/gRe9wxoquNDjaqR0EJvwXmLn5ivunMyB+bN37TMejUHSt/sqz50
jg0TrMH1HRociBd8qF+AcxVj2SmjX8SGmIMVppdd2eB7SfVQ6FYOuLy6J7+F
zYbc/TY6/xroyGDB/RdK22jonOMbE7dYGoosltlsso2Odjj4u43co6GGfb92
LGTR0ZMNgguq+P4cUnLAxpSORhcbVsXn0tDLZsXy/v00tMbteNpYOg3d3aBz
jKJJR29yBvZmralH6WLHE2qbaOjf5nNNXeMqxmHSrRG7vtPQ4zD+4yPH6OjQ
psbs9Go6Uk7u+XtKnY7md8RqfThdj/6mn/jbtKIeWfcPPnstoCGVmQ1DL1/Q
0aep5b1HJ9OR3YGlHzlJNKS2Yfbnmn6Mk8oc2zCHjtQ/JnRcwn0nG40alB2i
o3n1cbT8/fXI9Kf9/DfhNOQxe9g5QZ+GdM7qFzctrkcX+9Mk5tl09MyIf35R
dD0KcHlkHtBBQ7JUgyXb6HTUYi/31UmFjk6rg+rfZzSkPStNZiqNjlSHmhaV
s2jISnaU1rObjrZK09IXOWNcAX5lFpn1aLuny5bHRTTU+jtrzvq19ejSz0Va
/Vo01LMppawriIZcjzb3LpOlI9JomyRgLQ2VecbPbI2noU9BcvkqTvXoo1+0
L+URDb16K0J3hlWMCyKFF8w86Cg8peTWo18qxn4yZ2K3a9HRtvXKI2fy6Mi5
RtUlI6AelZ/Y983hSj3amNwrn7qDjq75DtbadtORRWeATZolHVWF6WTe5NDQ
vqqpAUWhNHRT+7Payyd05M9awR7H95HerNi72I/2pxW5PQvpqDWVofX/d8DL
1j+fw8P+KpcuTLnmTUPT8wacYwtp6EIeaFOdaCj3jZpZ1AgdLd11btYh53rU
7OMxMhBGR8Vsi9+bb9PRqbZ67xtBdPRvYUNvUHA9WjwU1bnkAB3dNfq15/kN
OlKb/WpNnZiO8v7N91reQkMFQ3OWPjeioZ/ukfpdi+go1j8/2PNZPSq6E+GR
nlSPDJa82hncTEOzvt43TvWvR/TxjmMcKg1NsO+ffV9IR2VPLM9YZNWjLr26
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
cESUYfoCz5t60IjVU5ybJ80f/2yUEPAfce8afQ==
         "], CompressedData["
1:eJwNknlMkwcAR9sUJ7UkolMZIClgv/brYQc95LCwH/RSJjVB6RikRitMEliB
CquTCNi4LGyoVAExzAwIFpGioibuSoHhgh1kutE66SgwZSJHOBe5yhh/vP/f
S16YPi8li0qhUIwbzLhbA78Oj0SCz8WqxHeV8MRoz0oJDo7bssY8M1z0u9IC
Yw9zkK6tTjqSIkXOmeneoShA8tXUYnaMBO6sy9L2j2SoCa6zXBtn4dp3MZqc
QhkuUA6ptp8WoNWbTb03yMIZB8ckpBPQ02dkDWUqlGz1iq6uy7Glx6YW1pLY
HnKXFhjBQfTFnzjxyZEwmQpeC/LiEBBy9WMhgwPXUMqwqU0CXw8lKvWNGIX+
CwyGbh+OPjlVP7koAu393S9NLh6Yy0k2MoCEvyyMd2OUxJ2hcPsuKfBv8vrj
h/mA88/KvBc2DvqZwoNFnQoEldO4IR9yoB+e7Sz9LRJ+2uShx/NxMAsSByhe
PjSvszKCbsvBq6rk1jq4MMz0tb6ws2HXei/NLkTAktQikPRJ8Pmbur5igxJm
+omXZQ4Cuxo3TfTFxEH80JP5zj4CC8XBo2vuvZjLSEn2t0iw1Pms+cScAk/L
lkKfL0tg7Mk2VozJcWe52WZtV6DU13mdOcFFlC3VGsoHamhndVSDGrkmn2ly
lI/8vUWauXk1nl3Yc9dyUoml3lcR1HAFzq0Urx4rJxBdN0XbSshAc9jupb3a
D421P/2wH4HL2wzTrUIlKEy7UStSorBkaZaeIAHR7ZxYDWDD6zOyYPeyYC7I
G5F+SYKRMzJY5eKjUu/3JLvkIKzxv/7i62Th57rE3QJSiQp9w1RgGgvhA9bw
llwCKuNy/kkeH8LawU9iuzhgN5VWn5+T49POVKdLLsOhBzfXZWsCkN8PE6r2
ja6mmgSvSIxO5/j1+t+jMd3rQthTNmTfunkdO8QI6t3UeOuPyA2/8Zzz8VLk
Elyba43AgK58W3eHCDfMK8+1mWzUfLP5rUNPgnJTdzs0VIwfPF/c398mx3/3
K7pdWglWDiTx63eK8dnm+S0PYkmoYixUR5AMO4Rc+z+nSLQsKvtPL8oQe4m+
06OLR9foAdMHDSrMm9qOG3SJaHbvqXp0joeJ+ZJjPU1AprWa2dEFDKltxhWz
GFcoSUffdkRBKy3lO+rEiB9jpPuwFPhxNWfMN5gNPa/obxEjAerJyfrhRwQM
vIZBYQZn4y/De2YJG+kFmkbmX0r8D5y4jVg=
         "]}], "NeighborsNumber" -> 10, 
      "ClassPriors" -> {0.25862068965517243`, 0.7413793103448276}, 
      "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 
        1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 
        2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 
        1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 
        2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 
        2, 2, 2, 2, 2, 2, 2, 1}], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 54.], 
         "Key" -> 
         "((f1f2f3f6f7f21f26f39f46f49f51)(\
f4f5f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f34f\
35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Method" -> "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 10, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "Scan", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15137], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.27928`6.897584829302095, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.5145491277917588, 0.12057417791128272`], "Accuracy" -> 
         Around[0.7735256707329065, 0.12804441491888538`], "EvaluationTime" -> 
         0.00005473588746931157, "TestSize" -> 23, "ModelMemory" -> 48800, 
         "ModelUtility" -> -0.07452670402239636, "TrainingSize" -> 91, 
         "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 336464, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.5145491277917588, 0.08525881883706124]}, 
         "AccuracyHistory" -> {
           Around[0.7735256707329065, 0.09054107408220778]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 114], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 49993620336375]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.42809043201965, 1.3568813764047911`], "Accuracy" -> 
              Around[0.6756461609758974, 0.06684639970392924], 
              "EvaluationTime" -> 0.00031942198587559385`, "TestSize" -> 99, 
              "ModelMemory" -> 54160, "ModelUtility" -> -2.24064059949779, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 167856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.42809043201965, 0.9594600225215639]}, 
              "AccuracyHistory" -> {
                Around[0.6756461609758974, 0.04726754252855478]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.201757409849089, 1.7130462964497302`], "Accuracy" -> 
              Around[0.8151923373995732, 0.12039887195229698`], 
              "EvaluationTime" -> 0.000547358874693116, "TestSize" -> 23, 
              "ModelMemory" -> 80224, "ModelUtility" -> -1.627079626229048, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 649056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.201757409849089, 1.211306652706105]}, 
              "AccuracyHistory" -> {
                Around[0.8151923373995732, 0.08513485880468001]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000547358874693116, "MeanCrossEntropy" -> 
             Around[2.201757409849089, 1.7130462964497302`], "ModelMemory" -> 
             80224, "TrainingMemory" -> 649056, "TrainingTime" -> 
             0.08225420894860483], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6893882755552494, 0.00893547607493553], "Accuracy" -> 
              Around[0.7456461609758979, 0.062390960103567566`], 
              "EvaluationTime" -> 0.000020154164797665444`, "TestSize" -> 99, 
              "ModelMemory" -> 20720, "ModelUtility" -> -0.3238217839334766, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 68856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6893882755552494, 0.006318335725717068]}, 
              "AccuracyHistory" -> {
                Around[0.7456461609758979, 0.04411707097397197]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7187852451326974, 0.29464110483315153`], "Accuracy" -> 
              Around[0.7318590040662397, 0.13418458989243845`], 
              "EvaluationTime" -> 0.0002743292802087796, "TestSize" -> 23, 
              "ModelMemory" -> 119720, 
              "ModelUtility" -> -0.44180966489232854`, "TrainingSize" -> 91, 
              "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
              373000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7187852451326974, 0.2083427232438179]}, 
              "AccuracyHistory" -> {
                Around[0.7318590040662397, 0.0948828334436791]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002743292802087796, "MeanCrossEntropy" -> 
             Around[0.7187852451326974, 0.29464110483315153`], "ModelMemory" -> 
             119720, "TrainingMemory" -> 373000, "TrainingTime" -> 
             0.10640235068317921`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8186015962687267, 0.1141491946552209], "Accuracy" -> 
              Around[0.5656461609758974, 0.07054987074170593], 
              "EvaluationTime" -> 0.000016009022146071847`, "TestSize" -> 99, 
              "ModelMemory" -> 5968, "ModelUtility" -> -0.520529291829649, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 76968, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8186015962687267, 0.0807156696076899]}, 
              "AccuracyHistory" -> {
                Around[0.5656461609758974, 0.04988629201329467]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2683986955796172`, 0.42130614866567784`], "Accuracy" -> 
              Around[0.5235256707329063, 0.14736311020820378`], 
              "EvaluationTime" -> 0.00002179074928814226, "TestSize" -> 23, 
              "ModelMemory" -> 6288, "ModelUtility" -> -0.9952530890236158, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 162464, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2683986955796172`, 0.2979084346770885]}, 
              "AccuracyHistory" -> {
                Around[0.5235256707329063, 0.10420145452496143`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002179074928814226, "MeanCrossEntropy" -> 
             Around[1.2683986955796172`, 0.42130614866567784`], "ModelMemory" -> 
             6288, "TrainingMemory" -> 162464, "TrainingTime" -> 
             0.030689272737888032`], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6430387117298424, 0.017148768831394438`], "Accuracy" -> 
              Around[0.7356461609758977, 0.06314182739702201], 
              "EvaluationTime" -> 0.000050624973093663836`, "TestSize" -> 99, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.25697053685095284`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 160336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6430387117298424, 0.012126010729679513`]}, 
              "AccuracyHistory" -> {
                Around[0.7356461609758977, 0.04464801432894479]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6037873230513927, 0.06125874899491494], "Accuracy" -> 
              Around[0.8151923373995732, 0.12039887195229698`], 
              "EvaluationTime" -> 0.0001730900741536943, "TestSize" -> 23, 
              "ModelMemory" -> 97968, "ModelUtility" -> -0.2087567297559989, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 219080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6037873230513927, 0.04331647682130895]}, 
              "AccuracyHistory" -> {
                Around[0.8151923373995732, 0.08513485880468001]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0001730900741536943, "MeanCrossEntropy" -> 
             Around[0.6037873230513927, 0.06125874899491494], "ModelMemory" -> 
             97968, "TrainingMemory" -> 219080, "TrainingTime" -> 
             0.03859492231525635], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7867770745569359, 0.10879178421665142`], "Accuracy" -> 
              Around[0.5856461609758973, 0.07014818125148152], 
              "EvaluationTime" -> 0.000012716418300951175`, "TestSize" -> 99, 
              "ModelMemory" -> 13152, "ModelUtility" -> -0.4806509318258957, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 73424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7867770745569359, 0.07692740835697782]}, 
              "AccuracyHistory" -> {
                Around[0.5856461609758973, 0.049602254650825614`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5145491277917588, 0.12057417791128272`], "Accuracy" -> 
              Around[0.7735256707329065, 0.12804441491888538`], 
              "EvaluationTime" -> 0.00005473588746931157, "TestSize" -> 23, 
              "ModelMemory" -> 48800, "ModelUtility" -> -0.07452670402239636, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 336464, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5145491277917588, 0.08525881883706124]}, 
              "AccuracyHistory" -> {
                Around[0.7735256707329065, 0.09054107408220778]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005473588746931157, "MeanCrossEntropy" -> 
             Around[0.5145491277917588, 0.12057417791128272`], "ModelMemory" -> 
             48800, "TrainingMemory" -> 336464, "TrainingTime" -> 
             0.014067214212129527`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1814485080682833`, 0.2255827759456583], "Accuracy" -> 
              Around[0.6556461609758972, 0.06780087080678379], 
              "EvaluationTime" -> 8.02351752246749*^-6, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.8973984993221931, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 121296, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1814485080682833`, 0.15951111059006057`]}, 
              "AccuracyHistory" -> {
                Around[0.6556461609758972, 0.04794245551782984]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5737250351968863, 0.13909764369945338`], "Accuracy" -> 
              Around[0.7318590040662397, 0.13418458989243845`], 
              "EvaluationTime" -> 0.000027432928020877956`, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.18492622921176904`, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 191992, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5737250351968863, 0.09835688710695373]}, 
              "AccuracyHistory" -> {
                Around[0.7318590040662397, 0.0948828334436791]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000027432928020877956`, "MeanCrossEntropy" -> 
             Around[0.5737250351968863, 0.13909764369945338`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 191992, "TrainingTime" -> 
             0.08875812123519282], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6866206553115456, 0.010785952782475256`], "Accuracy" -> 
              Around[0.5156461609758974, 0.07105333618925443], 
              "EvaluationTime" -> 6.37330650990094*^-6, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.320344376696197, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 110632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6866206553115456, 0.007626820354046163]}, 
              "AccuracyHistory" -> {
                Around[0.5156461609758974, 0.050242295845349325`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6741342672231285, 0.04005589839632163], "Accuracy" -> 
              Around[0.6068590040662396, 0.1452576640715988], 
              "EvaluationTime" -> 0.000017309007415369432`, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3106684987679902, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 177720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6741342672231285, 0.028323797382558375`]}, 
              "AccuracyHistory" -> {
                Around[0.6068590040662396, 0.10271267928434503`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017309007415369432`, "MeanCrossEntropy" -> 
             Around[0.6741342672231285, 0.04005589839632163], "ModelMemory" -> 
             9560, "TrainingMemory" -> 177720, "TrainingTime" -> 
             0.04269861354033401], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.569794072656337, 0.7494059207147824], "Accuracy" -> 
              Around[0.6656461609758973, 0.06734017833186834], 
              "EvaluationTime" -> 6.37330650990094*^-6, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -2.006817234371149, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 121248, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.569794072656337, 0.5299100083987708]}, 
              "AccuracyHistory" -> {
                Around[0.6656461609758973, 0.04761669674477551]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6135277355371244, 0.1862639031289561], "Accuracy" -> 
              Around[0.6485256707329063, 0.14268045610528018`], 
              "EvaluationTime" -> 0.000027432928020877956`, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.26359804514334395`, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 192120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6135277355371244, 0.13170846899275904`]}, 
              "AccuracyHistory" -> {
                Around[0.6485256707329063, 0.10089031805483314`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000027432928020877956`, "MeanCrossEntropy" -> 
             Around[0.6135277355371244, 0.1862639031289561], "ModelMemory" -> 
             9560, "TrainingMemory" -> 192120, "TrainingTime" -> 
             0.07700699404478246], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6886572756645939, 0.03877449874186247], "Accuracy" -> 
              Around[0.5156461609758974, 0.07105333618925443], 
              "EvaluationTime" -> 6.37330650990094*^-6, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3313672785765803, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 114888, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6886572756645939, 0.027417710997480207`]}, 
              "AccuracyHistory" -> {
                Around[0.5156461609758974, 0.050242295845349325`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6332791598997028, 0.06717083711770772], "Accuracy" -> 
              Around[0.6485256707329063, 0.14268045610528018`], 
              "EvaluationTime" -> 0.00002179074928814226, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.25732871933196755`, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 191928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6332791598997028, 0.047496954423908166`]}, 
              "AccuracyHistory" -> {
                Around[0.6485256707329063, 0.10089031805483314`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002179074928814226, "MeanCrossEntropy" -> 
             Around[0.6332791598997028, 0.06717083711770772], "ModelMemory" -> 
             9560, "TrainingMemory" -> 191928, "TrainingTime" -> 
             0.06533684059278747], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.7125876929816313`, 0.34716388279481936`], "Accuracy" -> 
              Around[0.6656461609758973, 0.06734017833186834], 
              "EvaluationTime" -> 8.02351752246749*^-6, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -1.2709286839241962`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 121200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.7125876929816313`, 0.24548193570726853`]}, 
              "AccuracyHistory" -> {
                Around[0.6656461609758973, 0.04761669674477551]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5912125613789737, 0.14820975792341895`], "Accuracy" -> 
              Around[0.7318590040662397, 0.13418458989243845`], 
              "EvaluationTime" -> 0.000027432928020877956`, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.216522384377972, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 192096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5912125613789737, 0.10480012486566617`]}, 
              "AccuracyHistory" -> {
                Around[0.7318590040662397, 0.0948828334436791]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000027432928020877956`, "MeanCrossEntropy" -> 
             Around[0.5912125613789737, 0.14820975792341895`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 192096, "TrainingTime" -> 
             0.07700699404478246], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 2], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 49989325369079]], "MaxTrainingSize" -> 114, 
      "PreprocessorEvaluationTime" -> 6.62373046875`2.*^-6, 
      "PreprocessorMemory" -> 135064, "InputDimension" -> 54, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.5716092520747583,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341351660248`17.33219102266388*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.41779109999999997`, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 91, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.41739070000000006`, "ExperimentCounts" -> 10]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 50002210270967]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.001809017750322741}, "ID" -> 6256679568790717639], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.001182792734492438}, "ID" -> 8623262771504601198], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0023772112452924775`}, "ID" -> 4132395819933524331],
          "f4" -> Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8694373178801165222], "f5" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1348181103987964274], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           157490378243617503], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           939946895530328469], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3064004026125996483], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3244472751827614723], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4014005089167240292], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5121660210812111602], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           602190665354312585], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3055185702463609468], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4331092451225371894], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8191647698190687149], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           781964795002888220], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2349168932479337304], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1960837545649623925], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1323267666578452685], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6779280008378695119], "f21" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1969594944934312336], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2977944126117531131], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3985678876464854766], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2578321024215090129], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3425254761356122489], "f26" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7811009041265027328], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4194784050166590729], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8324053286448681379], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5181124187995197879], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7479067730402397421], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6269264012809592687], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7985513232360243956], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5780036626520184047], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4927984913134027952], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7633465753380053928], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           160926652115476589], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6990045640335236538], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           792678255158960396], "f39" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5175019930512448058], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6851581244213028850], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7941891567130392840], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8290799922777044604], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6126937606205041094], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1011306702553622053], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3989655886193754391], "f46" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1898151043668025283], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2372459096780605183], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3691459307182685632], "f49" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2052040592424282294], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7901387738829578202], "f51" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4035938522416658676], "f52" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           722415401874741699], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8380850542968955904], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5683465083391742978]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.2928085, 
      "MaxTrainingMemory" -> 1156712, "DataMemory" -> 943520, 
      "FunctionMemory" -> 451032, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 15.5121111`8.943245854809156}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.792191846499442*^9, 3.792844639959023*^9, 
  3.7943046222056675`*^9, 3.7943048200714755`*^9, 3.7943150763001113`*^9, 
  3.7943500822482653`*^9, 3.7946037967171884`*^9, 3.794864956982993*^9, 
  3.7953466981853976`*^9, 3.795376323149245*^9, 3.795377125915197*^9, 
  3.7959513218240814`*^9, 3.797727865022519*^9, 3.797728937043875*^9, 
  3.797767998665862*^9, 3.79777335961761*^9, 3.7977768871096168`*^9, 
  3.797777384740624*^9, 3.7977781524799633`*^9, 3.797778894828932*^9, 
  3.797785998619481*^9, 3.7977975504770813`*^9, 3.797805540140399*^9, 
  3.7985481506705327`*^9, 3.798548535615181*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"3b66dad6-7278-4d6d-baa6-b03c791871f9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cmclassLaRedMaccs", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classLaRedMaccs", ",", 
     RowBox[{"mLmaccsRed", "@", "laDataMaccsTest"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.792191850399232*^9, 3.7921918724289966`*^9}, {
  3.795377129170494*^9, 3.795377146427401*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"6516a2e2-053e-43b9-88ad-a3b33ff16794"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassLaRedMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921918739401054`*^9, 3.792191879384604*^9}, {
  3.795377149016474*^9, 3.795377151624468*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"d99be2d8-18e2-413a-99a4-0a21bb173ac2"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.6785714285714286`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.18181818181818182`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.3447914135838056`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.3447914135838056`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.18181818181818182`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "1.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.18181818181818182`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.8502673796791443`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.6898395721925132`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.3076923076923077`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.7906976744186046`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7921918796908593`*^9, 3.792844640224587*^9, 
  3.7943046223646984`*^9, 3.794304820367299*^9, 3.794315076537656*^9, 
  3.7943500825181103`*^9, 3.7946037969207115`*^9, 3.794864957217354*^9, 
  3.795346698313057*^9, 3.7953763234195223`*^9, 3.795377152142086*^9, 
  3.7959513222745113`*^9, 3.797727865238629*^9, 3.797728937313406*^9, 
  3.797767998805481*^9, 3.7977733597110605`*^9, 3.797776887187405*^9, 
  3.797777385053048*^9, 3.797778152714285*^9, 3.797778895047594*^9, 
  3.7977859988381796`*^9, 3.797797550704474*^9, 3.797805540374771*^9, 
  3.798548150886469*^9, 3.798548535821067*^9},
 CellLabel->
  "Out[154]//TableForm=",ExpressionUUID->"20a348aa-562b-40f4-ba6b-\
cc662a9ee96f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"high", " ", "KS", " ", "columns", " ", "and", " ", "maccs"}], ",",
    " ", 
   RowBox[{"erbium", " ", "only"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.794605485449507*^9, 3.794605496975893*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"db300ac4-9914-443c-8a6b-c7aeaaa56535"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classErRedMaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccsRed", "@", "erDataMaccsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794605324722955*^9, 3.7946053860154347`*^9}, {
  3.7946055068510284`*^9, 3.7946055160843897`*^9}, {3.795377222395277*^9, 
  3.7953772342396116`*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"cbbcd5ca-1e13-442d-b8f6-b762a5e2aa43"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "54", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Numerical",
                     "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"},
                     10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "54", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Numerical",
                     "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"},
                     10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["110", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Boolean"], "maccs65" -> 
           Association["Type" -> "Numerical"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Numerical"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Numerical"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Numerical"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Numerical"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Numerical"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Numerical"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                  "Amine Mole Fraction", "maccs53", "maccs54", "maccs62", 
                  "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                  "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                  "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                  "maccs103", "maccs104", "maccs105", "maccs108", "maccs111", 
                  "maccs115", "maccs116", "maccs118", "maccs120", "maccs121", 
                  "maccs122", "maccs128", "maccs129", "maccs131", "maccs133", 
                  "maccs134", "maccs137", "maccs138", "maccs141", "maccs145", 
                  "maccs147", "maccs148", "maccs149", "maccs151", "maccs153", 
                  "maccs155", "maccs156", "maccs158", "maccs160", "maccs162", 
                  "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 54]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Numerical", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f7f21f26f39f46f49f51)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 10]], 
             "Version" -> {12.1, 0}, "ID" -> 598726591772678950]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f7f21f26f39f46f49f51)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 10]], 
             "Mean" -> {0.0027125744939508526`, 0.0013702662912860152`, 
              0.005885270631865775, 0., 1., 1., 1., 1., 1., 0.}, 
             "StandardDeviation" -> {0.0008922678396605211, 
              0.0011033857541175838`, 0.0028718051216307847`, 1., 1., 1., 1., 
              1., 1., 1.}, "Version" -> {12.1, 0}, "ID" -> 
             2174270531042231955, "Output" -> 
             Association[
              "(f1f2f3f7f21f26f39f46f49f51)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 10]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f\
29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 1720799032895652197]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f\
29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 744360885530013712, "Output" -> 
             Association[
              "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f\
29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f\
29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 1546217017787175859, "Output" -> 
             Association[
              "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f\
29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 44]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f7f21f26f39f46f49f51)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 10], 
               "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28\
f29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 44]], 
             "Spans" -> {
               Span[1, 10], 
               Span[11, 54]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwY4CBD/aj9NCgAaICQcs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 4673658180627613975]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwY4CBD/aj9NCgAaICQcs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 110, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KLruKxJRev2Ox6sahbb1fHHgh9xIaBTFACNvCgffvW
/IjfbU/t5wk90XScN8neDWSN63Io/dweps4RrOAdVN0me2MweGz/VvravsS3
q+3BysXv2s8Eg5v2YG7sE6j8brg+iLnX4XxUc5vsP01R8Of8tAVq3lk4DTJF
+hpM3SWoubfh9sP4y1kqvSYsf4LhXhgNUwfzJ8xemPkw8yDih+DmwPxzf8M3
3uz7F+DugvkHZi7MHgCXWrh3
                    "], "Method" -> "Naive", "VectorLength" -> 54, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KLruKxJRev2Ox6sahbb1fHHgh9xIaBTFACNvCgffvW
/IjfbU/t5wk90XScN8neDWSN63Io/dweps4RrOAdVN0me2MweGz/VvravsS3
q+3BysXv2s8Eg5v2YG7sE6j8brg+iLnX4XxUc5vsP01R8Of8tAVq3lk4DTJF
+hpM3SWoubfh9sP4y1kqvSYsf4LhXhgNUwfzJ8xemPkw8yDih+DmwPxzf8M3
3uz7F+DugvkHZi7MHgCXWrh3
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Jb/0HgvT0TAwh8sP8B5TNA+aTSUUdP+U38dtX+weyf
N1ey37N3WFs+Q1TqoH1NZ8rxzpWn7EXLjq8413AHri5rymTGAMGz9tbVjzbv
nnfB3ivj9puaqPv2GVBxMY46KZF79+HiIY377hefvGdfOr/7zuHPl+H6YOIw
PszcvCobQVWfHfaKt+LjlnVdtA8t2nWZ+9ItOH3gxGbGz1+PQ+27a9/x+FhJ
4l6E/TC+yb2eJZvn3sNwL4yGqYP5E2Yvqvln7b9Et68JnHANbg7M3V9WvD9y
x+gO3F0wcZi5MHsAtgzTaQ==
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 54, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 54]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 12]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KLruKxJRev2Ox6sahbb1fHHgh9xIaBTFACNvCgffvW
/IjfbU/t5wk90XScN8neDWSN63Io/dweps4RrOAdVN0me2MweGz/VvravsS3
q+3BysXv2s8Eg5v2YG7sE6j8brg+iLnX4XxUc5vsP01R8Of8tAVq3lk4DTJF
+hpM3SWoubfh9sP4y1kqvSYsf4LhXhgNUwfzJ8xemPkw8yDih+DmwPxzf8M3
3uz7F+DugvkHZi7MHgCXWrh3
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Jb/0HgvT0TAwh8sP8B5TNA+aTSUUdP+U38dtX+weyf
N1ey37N3WFs+Q1TqoH1NZ8rxzpWn7EXLjq8413AHri5rymTGAMGz9tbVjzbv
nnfB3ivj9puaqPv2GVBxMY46KZF79+HiIY377hefvGdfOr/7zuHPl+H6YOIw
PszcvCobQVWfHfaKt+LjlnVdtA8t2nWZ+9ItOH3gxGbGz1+PQ+27a9/x+FhJ
4l6E/TC+yb2eJZvn3sNwL4yGqYP5E2Yvqvln7b9Et68JnHANbg7M3V9WvD9y
x+gO3F0wcZi5MHsAtgzTaQ==
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 12, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.015311, "MaxTrainingMemory" -> 199320, 
                  "DataMemory" -> 49264, "FunctionMemory" -> 31672, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 16.0404793`8.95779228666433}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 54, "Output" -> 
             Association[
              "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             9026751771197600512]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KLruKxJRev2Ox6sahbb1fHHgh9xIaBTFACNvCgffvW
/IjfbU/t5wk90XScN8neDWSN63Io/dweps4RrOAdVN0me2MweGz/VvravsS3
q+3BysXv2s8Eg5v2YG7sE6j8brg+iLnX4XxUc5vsP01R8Of8tAVq3lk4DTJF
+hpM3SWoubfh9sP4y1kqvSYsf4LhXhgNUwfzJ8xemPkw8yDih+DmwPxzf8M3
3uz7F+DugvkHZi7MHgCXWrh3
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Jb/0HgvT0TAwh8sP8B5TNA+aTSUUdP+U38dtX+weyf
N1ey37N3WFs+Q1TqoH1NZ8rxzpWn7EXLjq8413AHri5rymTGAMGz9tbVjzbv
nnfB3ivj9puaqPv2GVBxMY46KZF79+HiIY377hefvGdfOr/7zuHPl+H6YOIw
PszcvCobQVWfHfaKt+LjlnVdtA8t2nWZ+9ItOH3gxGbGz1+PQ+27a9/x+FhJ
4l6E/TC+yb2eJZvn3sNwL4yGqYP5E2Yvqvln7b9Et68JnHANbg7M3V9WvD9y
x+gO3F0wcZi5MHsAtgzTaQ==
              "], "Output" -> 
             Association[
              "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
             "Version" -> {12.1, 0}, "ID" -> 7266584152592633244]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5664398564532298490]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 2797529017361396161, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 384226982582893393]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.3482142857142857, True -> 0.6517857142857143]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1: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
/vavPN8ODhs7cVqSbdDEJbBCr9IOuv/N9BwltMORtLAh+YR2eFvv3RJs0Q4f
NeKuLhq1QXcJ42RGfjvQV2lvJPC3A3874zUTTMfK+lXFX8LbYeBS4MGCnDbo
48bjkl+2g6wDtbx2QyvcPpSXX5hGRgrf7BlUosnoi+aNx8wtZPSm7M2rT95k
VPpGYs/j4DYw6M1LSjmRUWjYj8bXH8jo9446Ly1sQ+iE3RQV/zbQft5gCbEl
Izux6xez+bbh/XUdhplmLO7+RvXfRmQUVsnkSLAgo11hjvDsFDIaulN/+TnV
NnCFoulEnm2AGuc6/ztkFCtmQlmrJ6N0XYJPxiMyMnl1ayfTk4xcfs0SEl3I
yFnrS9677S24Zt0SEFRKRmRWznNUXNvgu0i+ccmDjGIueaY5hGP4R3IjfwaR
kfusbE4S7TbcVp6oiqoio/M690ks9mQ0bisVRB4mo8Rs9YJ65m1oucXNc6sG
ezbbO/2EQEZMemQ5pngyKnMXUyrEeDG78UPo1VOsjsN8vf+Ob4N4U95t+3wy
WisxyKzXIiPt3NOF9oiMOtRYL7cUYvUpumu15pFR4+Qbu7kGrG57nXhdbF/k
B4rdYB8WZ7Iof3CejE6RuCgKr8jogbvQ+vMT20B34ud/l/7bgtQjv8eku8mI
e7c23/b0NphcHAiMLCKj710i5dTvyWibNTP01CQZJcmbZaJPZGSu1mr7pISM
Nr+n9Jw3xuKynq+RF9iGW2wNQY8myKh/WU94fwEZtQuc+TJyj4ycnvTZ9slu
g5bSr2UBd4xX3vIVK6wfbhxnh9Klt+HjCav/HuiTUZeo8Oa+K9sgV3X/d4kb
GR2hSaSdbMTy1BaI+exhfUipf1Nyaxsi+x5u82Rj/OU6F2Zc2wYdovxbIQcy
EuIwlaq/sA33OZevpalieZl+pfG3kdGB3dfkSgx/g1dj8QFMLyc+R2SOntqG
JcfzmQMaZDQ6jzM7j/Hb9Abvb3gL408+lr2mk4zOZrgVe5zdBgeX9QVPTCdX
Jc6+u4Ppt6XB6yojpssnm8L3D2JxsgnXWV0x/rWjHw42P8d0/aL2QRCmC73x
+Tx1TM/6zsk/YjDe+CebRDySyaj7Jo27L9Y3ipnE5aVpMrrb+WTwtyYZPWyo
KF3PIqMbQ8En5bE4P/dri/ZifXrMg04rNZHRvyd2Ke4mGN9nGBUOj5KR5kn5
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
vj8RIkTtFJ6exbqa7L8ooYnn53+Qf5zX
         "], CompressedData["
1:eJwBfQOC/CFib1JlAQAAAG4AAABTiV4CvQQqQBugbjxKBjRAyl7dxNXkJUAA
mbq/hgZLQEcwAgyDQkRAfJHbwak2NkBd2itCT54lQDcL0kY1syJA5K6FVTHo
L0AZympnnyg0QFa9Dc/3KCZANoI9zO3AH0BODOOjVf82QEbCLNTFuB5AEGlf
CFniMkBDkfvc51wwQJ6YU52cmydAllB+RaJJJED1Cvd3dsYlQAJFFW6thCZA
8iy2vjFxMUAymBSLCYcoQMZ0KOFMByJArLo3USTgJEAqWrhaTEAhQBQ9OSnL
pCVAQBDx9th/UUAMrpMl6FAmQIjGZ0btuiFAgZFrjU53WUA2cfsbsxI2QLha
zu7B2TZAxY0Z4aSeIUC++cSiZDE2QLKEYKy8LCBADJfQMBrCM0CA6QK+A8Qe
QCGw28kxy0pAjes2b5+MIkBCtuvBO/RKQC0QknpdriBAGlEeI6+VJEDstFPY
5oo2QBZ0webrillAVHeqEjT0RkDsra2y244mQHzjocXdyTNAy8x9jM0tNEBc
SaaA9/YeQDeaONO/CiRA6as/4E+jIUBABYdvBmIlQKfLHerqBDBAst8eMS0n
JECBrlkghD40QAhu3E1U9kpAAE5Z6pOjH0BdAMzCwsQlQJ5nOyGg4kpAhC8c
yTQ0IkAyYdvdFqYiQNyk5RnogCdASp3kyH89JEAoSU4DegYjQL1Vx4fJaDZA
tjSJotj8IUA2+PevflUiQGaqJJdwellA8yfAV2oJMEDenLBxBkYpQOieZezV
XCBA/HIgfHVXMEAqpwlVgGsiQG7vcbjozCVANvzNIqjTIkBGDrDLna9mQOrR
pUpsNyJASbKZCVmPUUCziFDf1iU2QHPEZqJh2CFAqNeNie0dMEBoIcokUvQj
QIiWcwZTLTRAsop/8hAcNEDAOnhm1nY2QLOuZlbXlFlAxn393wVnI0B+97lg
Em0kQM32QY/X3h1AeDMs2UPiSkBclEljiG8wQEU83Z3NLDRAWs79b3/tHkAM
mz1KTEcmQLLmPfVjuCFAnd3V+TlyWUBTwGOVVbcnQLQAVoC4FB9Absv6DZ/v
JUD1Yvq93e0lQCifAF2nDUdA4xsnmFo1JkBc/98QCTBEQIbUegRlNh5ASsqa
nW8AIEAOrcDNTiNLQHpLL8lBdyJA7SfJ9RMwS0A2GEUq6aIlQMUZ/qHDRCVA
/BN/Nw==
         "]}], "NeighborsNumber" -> 10, 
      "ClassPriors" -> {0.3482142857142857, 0.6517857142857143}, 
      "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 
        2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 
        2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 
        2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 
        1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 
        1, 2, 2, 2}], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 54.], 
         "Key" -> 
         "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Method" -> "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 10, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "Scan", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15185], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.320145`6.95689171693129, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.6626766443256089, 0.03383436383726468],
          "Accuracy" -> Around[0.6408746146367451, 0.06985175830050416], 
         "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 95, 
         "ModelMemory" -> 13152, "ModelUtility" -> -0.291873100325861, 
         "TrainingSize" -> 15, "TrainingTime" -> 0.005011872336272719, 
         "TrainingMemory" -> 73192, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.6626766443256089, 0.023924508106462752`]}, 
         "AccuracyHistory" -> {
           Around[0.6408746146367451, 0.0493926519720902]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 110], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 268890923544313]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[8.733617508404674, 1.834580193281145], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00041906017952999695`, "TestSize" -> 95, 
              "ModelMemory" -> 54160, "ModelUtility" -> -2.901524583343593, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 167856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.733617508404674, 1.2972440952996245`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.59278727451132, 0.7515996261115611], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.0005722388235428032, "TestSize" -> 22, 
              "ModelMemory" -> 80224, "ModelUtility" -> -1.2488670293202468`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 631776, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.59278727451132, 0.5314611923607585]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005722388235428032, "MeanCrossEntropy" -> 
             Around[1.59278727451132, 0.7515996261115611], "ModelMemory" -> 
             80224, "TrainingMemory" -> 631776, "TrainingTime" -> 
             0.06891065307598049], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 95, 
              "ModelMemory" -> 20720, "ModelUtility" -> -0.32704571769640356`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 68920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916370843501094, 0.0062588525193839105`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9370010292105885, 0.18501508678382425`], "Accuracy" -> 
              Around[0.5010418697881557, 0.15049692772910647`], 
              "EvaluationTime" -> 0.00018095780479704407`, "TestSize" -> 22, 
              "ModelMemory" -> 119632, "ModelUtility" -> -0.6668667250182965, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 369008, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9370010292105885, 0.1308254224866597]}, 
              "AccuracyHistory" -> {
                Around[0.5010418697881557, 0.10641739814499294`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00018095780479704407`, "MeanCrossEntropy" -> 
             Around[0.9370010292105885, 0.18501508678382425`], "ModelMemory" -> 
             119632, "TrainingMemory" -> 369008, "TrainingTime" -> 
             0.10322503774428209`], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6626766443256089, 0.03383436383726468], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 95, 
              "ModelMemory" -> 13152, "ModelUtility" -> -0.291873100325861, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 73192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6626766443256089, 0.023924508106462752`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7063664388101804, 0.06296337175740596], "Accuracy" -> 
              Around[0.4575636089185905, 0.14942705635897574`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 46752, "ModelUtility" -> -0.3632386356702696, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 322496, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7063664388101804, 0.044521827136031304`]}, 
              "AccuracyHistory" -> {
                Around[0.4575636089185905, 0.10566088484417616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.7063664388101804, 0.06296337175740596], "ModelMemory" -> 
             46752, "TrainingMemory" -> 322496, "TrainingTime" -> 
             0.03979692659812489], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0486534522931519`, 0.15176246537011534`], "Accuracy" -> 
              Around[0.5783746146367452, 0.07177176002370075], 
              "EvaluationTime" -> 0.000026440909805363992`, "TestSize" -> 95, 
              "ModelMemory" -> 6032, "ModelUtility" -> -0.7692201380342515, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              78240, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0486534522931519`, 0.10731226839279714`]}, 
              "AccuracyHistory" -> {
                Around[0.5783746146367452, 0.05075029821045236]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2517818374506435`, 0.36175269056068227`], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.0000361058288511037, "TestSize" -> 22, 
              "ModelMemory" -> 6288, "ModelUtility" -> -0.9739374450313539, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 155576, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2517818374506435`, 0.2557977806079372]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000361058288511037, "MeanCrossEntropy" -> 
             Around[1.2517818374506435`, 0.36175269056068227`], "ModelMemory" -> 
             6288, "TrainingMemory" -> 155576, "TrainingTime" -> 
             0.03194788546465767], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6696485521719033, 0.0298914915679836], "Accuracy" -> 
              Around[0.6304579479700784, 0.07025589306900139], 
              "EvaluationTime" -> 0.00006641656257686242, "TestSize" -> 95, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.30108693680696874`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 160392, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6696485521719033, 0.02113647638750171]}, 
              "AccuracyHistory" -> {
                Around[0.6304579479700784, 0.04967841840740784]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6843941483753104, 0.036458638343442366`], "Accuracy" -> 
              Around[0.6749549132664163, 0.14368460052805063`], 
              "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 99632, "ModelUtility" -> -0.32457863223067274`,
               "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 222416, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6843941483753104, 0.02578015040547597]}, 
              "AccuracyHistory" -> {
                Around[0.6749549132664163, 0.10160035538546477`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
             Around[0.6843941483753104, 0.036458638343442366`], "ModelMemory" -> 
             99632, "TrainingMemory" -> 222416, "TrainingTime" -> 
             0.0377968173892688], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[23.04397201642813, 4.37510677889845], "Accuracy" -> 
              Around[0.495041281303412, 0.07252971252412922], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9560, "ModelUtility" -> -3.867853590144093, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 121336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[23.04397201642813, 3.093667671774327]}, 
              "AccuracyHistory" -> {
                Around[0.495041281303412, 0.051286251563322637`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
             Around[23.04397201642813, 4.37510677889845], "ModelMemory" -> 
             9560, "TrainingMemory" -> 121336, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.747394415792337, 0.9285127778373037], "Accuracy" -> 
              Around[0.495041281303412, 0.07252971252412922], 
              "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 95, 
              "ModelMemory" -> 9560, "ModelUtility" -> -2.2891477269571556`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 121016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.747394415792337, 0.6565576816271157]}, 
              "AccuracyHistory" -> {
                Around[0.495041281303412, 0.051286251563322637`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010526315789473684`, "MeanCrossEntropy" -> 
             Around[4.747394415792337, 0.9285127778373037], "ModelMemory" -> 
             9560, "TrainingMemory" -> 121016, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1188790359749927`, 0.16539635396403737`], "Accuracy" -> 
              Around[0.5158746146367453, 0.0725282187804213], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.8346441129060785, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 121152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1188790359749927`, 0.11695288347150133`]}, 
              "AccuracyHistory" -> {
                Around[0.5158746146367453, 0.051285195327017405`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7047533671417608, 0.12489152776996404`], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3781023813070198, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 187768, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7047533671417608, 0.08831164619888958]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.7047533671417608, 0.12489152776996404`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 187768, "TrainingTime" -> 
             0.08360250581623441], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 268886628577017]], "MaxTrainingSize" -> 110, 
      "PreprocessorEvaluationTime" -> 9.888427734375`4.*^-6, 
      "PreprocessorMemory" -> 134520, "InputDimension" -> 54, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6463341980550162,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341368889806`17.332191022860872*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
          0.2732735, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3768221, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 268899513478905]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0032984954199975994`}, "ID" -> 6256679568790717639],
          "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.001598650623136407}, "ID" -> 8623262771504601198], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.004961638509898581}, "ID" -> 4132395819933524331], 
         "f4" -> Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8694373178801165222], "f5" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1348181103987964274], "f6" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           157490378243617503], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           939946895530328469], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3064004026125996483], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3244472751827614723], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4014005089167240292], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5121660210812111602], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           602190665354312585], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3055185702463609468], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4331092451225371894], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8191647698190687149], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           781964795002888220], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2349168932479337304], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1960837545649623925], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1323267666578452685], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6779280008378695119], "f21" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1969594944934312336], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2977944126117531131], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3985678876464854766], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2578321024215090129], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3425254761356122489], "f26" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7811009041265027328], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4194784050166590729], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8324053286448681379], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5181124187995197879], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7479067730402397421], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6269264012809592687], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7985513232360243956], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5780036626520184047], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4927984913134027952], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7633465753380053928], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           160926652115476589], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6990045640335236538], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           792678255158960396], "f39" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5175019930512448058], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6851581244213028850], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7941891567130392840], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8290799922777044604], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6126937606205041094], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1011306702553622053], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3989655886193754391], "f46" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1898151043668025283], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2372459096780605183], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3691459307182685632], "f49" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2052040592424282294], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7901387738829578202], "f51" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4035938522416658676], "f52" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           722415401874741699], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8380850542968955904], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5683465083391742978]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1537544, 
      "MaxTrainingMemory" -> 1082112, "DataMemory" -> 910448, 
      "FunctionMemory" -> 433192, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 17.0456239`8.984187844594373}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7946053897190094`*^9, 3.7946055197781982`*^9, 
  3.7948851114246407`*^9, 3.795346698435728*^9, 3.795376324974365*^9, 
  3.795377237777155*^9, 3.795951323891632*^9, 3.797727866410363*^9, 
  3.7977289388171997`*^9, 3.7977679989291515`*^9, 3.7977733598047876`*^9, 
  3.797776887232289*^9, 3.7977773865058317`*^9, 3.797778153997263*^9, 
  3.7977788965074925`*^9, 3.7977860000779886`*^9, 3.7977975519356575`*^9, 
  3.797805541574563*^9, 3.79854815239697*^9, 3.798548537143365*^9},
 CellLabel->
  "Out[156]=",ExpressionUUID->"ffa26624-7e5a-4edb-87b2-10f954df2432"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cmclassErRedMaccs", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classErRedMaccs", ",", 
    RowBox[{"mLmaccsRed", "@", "erDataMaccsTest"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7946053941814556`*^9, 3.794605415392438*^9}, {
  3.7946055222967615`*^9, 3.794605535498582*^9}, {3.7953772396222553`*^9, 
  3.795377254307966*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"98b9e5ba-a26a-4f4f-bc78-b99ab953943d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   TemplateBox[{"0.52", "0.10"}, "Around"], 
                   Around[0.5185185185185185, 0.09799078929868867]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
              "Sodium Oxalate Mole Fraction" -> 
              Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
              Association["Type" -> "Numerical"], "maccs53" -> 
              Association["Type" -> "Boolean"], "maccs54" -> 
              Association["Type" -> "Boolean"], "maccs62" -> 
              Association["Type" -> "Boolean"], "maccs65" -> 
              Association["Type" -> "Numerical"], "maccs74" -> 
              Association["Type" -> "Boolean"], "maccs79" -> 
              Association["Type" -> "Boolean"], "maccs80" -> 
              Association["Type" -> "Boolean"], "maccs82" -> 
              Association["Type" -> "Boolean"], "maccs83" -> 
              Association["Type" -> "Boolean"], "maccs84" -> 
              Association["Type" -> "Boolean"], "maccs85" -> 
              Association["Type" -> "Boolean"], "maccs86" -> 
              Association["Type" -> "Boolean"], "maccs90" -> 
              Association["Type" -> "Boolean"], "maccs91" -> 
              Association["Type" -> "Boolean"], "maccs93" -> 
              Association["Type" -> "Boolean"], "maccs96" -> 
              Association["Type" -> "Boolean"], "maccs98" -> 
              Association["Type" -> "Boolean"], "maccs100" -> 
              Association["Type" -> "Numerical"], "maccs103" -> 
              Association["Type" -> "Boolean"], "maccs104" -> 
              Association["Type" -> "Boolean"], "maccs105" -> 
              Association["Type" -> "Boolean"], "maccs108" -> 
              Association["Type" -> "Boolean"], "maccs111" -> 
              Association["Type" -> "Numerical"], "maccs115" -> 
              Association["Type" -> "Boolean"], "maccs116" -> 
              Association["Type" -> "Boolean"], "maccs118" -> 
              Association["Type" -> "Boolean"], "maccs120" -> 
              Association["Type" -> "Boolean"], "maccs121" -> 
              Association["Type" -> "Boolean"], "maccs122" -> 
              Association["Type" -> "Boolean"], "maccs128" -> 
              Association["Type" -> "Boolean"], "maccs129" -> 
              Association["Type" -> "Boolean"], "maccs131" -> 
              Association["Type" -> "Boolean"], "maccs133" -> 
              Association["Type" -> "Boolean"], "maccs134" -> 
              Association["Type" -> "Boolean"], "maccs137" -> 
              Association["Type" -> "Boolean"], "maccs138" -> 
              Association["Type" -> "Numerical"], "maccs141" -> 
              Association["Type" -> "Boolean"], "maccs145" -> 
              Association["Type" -> "Boolean"], "maccs147" -> 
              Association["Type" -> "Boolean"], "maccs148" -> 
              Association["Type" -> "Boolean"], "maccs149" -> 
              Association["Type" -> "Boolean"], "maccs151" -> 
              Association["Type" -> "Boolean"], "maccs153" -> 
              Association["Type" -> "Numerical"], "maccs155" -> 
              Association["Type" -> "Boolean"], "maccs156" -> 
              Association["Type" -> "Boolean"], "maccs158" -> 
              Association["Type" -> "Numerical"], "maccs160" -> 
              Association["Type" -> "Boolean"], "maccs162" -> 
              Association["Type" -> "Numerical"], "maccs163" -> 
              Association["Type" -> "Boolean"], "maccs165" -> 
              Association["Type" -> "Boolean"], "maccs166" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f47" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                    "Amine Mole Fraction", "maccs53", "maccs54", "maccs62", 
                    "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                    "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                    "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                    "maccs103", "maccs104", "maccs105", "maccs108", 
                    "maccs111", "maccs115", "maccs116", "maccs118", 
                    "maccs120", "maccs121", "maccs122", "maccs128", 
                    "maccs129", "maccs131", "maccs133", "maccs134", 
                    "maccs137", "maccs138", "maccs141", "maccs145", 
                    "maccs147", "maccs148", "maccs149", "maccs151", 
                    "maccs153", "maccs155", "maccs156", "maccs158", 
                    "maccs160", "maccs162", "maccs163", "maccs165", 
                    "maccs166"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 54]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Numerical",
                     "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"},
                    "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", 
                    "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", 
                    "f34", "f35", "f36", "f37", "f38", "f39", "f40", "f41", 
                    "f42", "f43", "f44", "f45", "f46", "f47", "f48", "f49", 
                    "f50", "f51", "f52", "f53", "f54"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f46" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f51" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f21" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f26" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f39" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f46" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f49" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f51" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                 "Output" -> 
                Association[
                 "(f1f2f3f7f21f26f39f46f49f51)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 10]], 
                "Version" -> {12.1, 0}, "ID" -> 598726591772678950]], 
              MachineLearning`MLProcessor["NumericalVectorStandardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f7f21f26f39f46f49f51)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 10]], 
                "Mean" -> {0.0027125744939508526`, 0.0013702662912860152`, 
                 0.005885270631865775, 0., 1., 1., 1., 1., 1., 0.}, 
                "StandardDeviation" -> {0.0008922678396605211, 
                 0.0011033857541175838`, 0.0028718051216307847`, 1., 1., 1., 
                 1., 1., 1., 1.}, "Version" -> {12.1, 0}, "ID" -> 
                2174270531042231955, "Output" -> 
                Association[
                 "(f1f2f3f7f21f26f39f46f49f51)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 10]]]], 
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f4" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f20" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f22" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f23" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f24" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f25" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f27" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f28" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f29" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f30" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f31" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f32" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f33" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f34" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f35" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f36" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f37" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f38" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f40" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f41" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f42" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f43" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f44" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f45" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f47" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f48" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f50" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f52" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f53" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f54" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f\
28f29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 1720799032895652197]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f\
28f29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 744360885530013712, "Output" -> 
                Association[
                 
                 "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f\
28f29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f\
28f29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 1546217017787175859, "Output" -> 
                Association[
                 "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f\
28f29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 44]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f7f21f26f39f46f49f51)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 10], 
                  "(f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27\
f28f29f30f31f32f33f34f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 44]], 
                "Spans" -> {
                  Span[1, 10], 
                  Span[11, 54]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwY4CBD/aj9NCgAaICQcs=
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0},
                 "ID" -> 4673658180627613975]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwY4CBD/aj9NCgAaICQcs=
                    "], "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 110, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KLruKxJRev2Ox6sahbb1fHHgh9xIaBTFACNvCgffvW
/IjfbU/t5wk90XScN8neDWSN63Io/dweps4RrOAdVN0me2MweGz/VvravsS3
q+3BysXv2s8Eg5v2YG7sE6j8brg+iLnX4XxUc5vsP01R8Of8tAVq3lk4DTJF
+hpM3SWoubfh9sP4y1kqvSYsf4LhXhgNUwfzJ8xemPkw8yDih+DmwPxzf8M3
3uz7F+DugvkHZi7MHgCXWrh3
                    "], "Method" -> "Naive", "VectorLength" -> 54, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KLruKxJRev2Ox6sahbb1fHHgh9xIaBTFACNvCgffvW
/IjfbU/t5wk90XScN8neDWSN63Io/dweps4RrOAdVN0me2MweGz/VvravsS3
q+3BysXv2s8Eg5v2YG7sE6j8brg+iLnX4XxUc5vsP01R8Of8tAVq3lk4DTJF
+hpM3SWoubfh9sP4y1kqvSYsf4LhXhgNUwfzJ8xemPkw8yDih+DmwPxzf8M3
3uz7F+DugvkHZi7MHgCXWrh3
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Jb/0HgvT0TAwh8sP8B5TNA+aTSUUdP+U38dtX+weyf
N1ey37N3WFs+Q1TqoH1NZ8rxzpWn7EXLjq8413AHri5rymTGAMGz9tbVjzbv
nnfB3ivj9puaqPv2GVBxMY46KZF79+HiIY377hefvGdfOr/7zuHPl+H6YOIw
PszcvCobQVWfHfaKt+LjlnVdtA8t2nWZ+9ItOH3gxGbGz1+PQ+27a9/x+FhJ
4l6E/TC+yb2eJZvn3sNwL4yGqYP5E2Yvqvln7b9Et68JnHANbg7M3V9WvD9y
x+gO3F0wcZi5MHsAtgzTaQ==
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 54, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 54]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 12]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                   Association["Matrix" -> CompressedData["
1:eJztlnk01fv3xo+IiLqKEpKpW6EbIhq3KFI0F6W6kgYZSlHmJENEZJ4qFRnK
kHk8+3BkijpIRUhUV0iTohTfu+7Z97fWz1qt37+/P76ftT7/Pmuv/X6e137k
LE5sPzyJwWAs+/sX/vt/9fKZ9tbrCeDkUuA4EF2EiX5SowydKBj6UubB+yEF
twhar4tZUIMnZ43cV7OsB6tUt8nKF4rBbZzvpVkmB1ekLs8sce2AK4ycSyem
NuL2tdcdquzK8E/3QF250SeoUZFye0DSAcd2eYisa06DYROVII5kKtiEpnQq
r6zGN33l0ol7mmHrtzORlYKNcE+2JiF/Ggt+nAt5KXDWAXaE6zak/KiG+R5z
1FwV89Gt6tnFqVYlmHFeyr5dwAGm909qNqg9D9Ns0q232SJuS5rnq3X3HqhO
vi7bZVKM3g6O3jYDTGyPmBMWeuQxrIBej1fZlVAXY+nObKrDs6tZrfnsNgg5
b9mx6BkL1Sf5OSzhvQGD008W5d8PQcZ/v/9+/48/vfWNSae/5mOszew275lZ
uKNNR31zEAcni7j/3qdwE0+krlozPyIV+Plf1czZdhkN7n0L4letwmcSG4wl
LLNBWdfE1+d5NSiEDHeEzGiFU8KoXyTzAHtdB69K9rPR4fkUk4XGJSjveWHx
2UnlsFf2+YIfo2EwKGds3x5Rh388qrGpDmrGyi55ubhLdSATF9Be0sSGldp5
oyeTb+Km8jZD9k8OOi8zW7ah7S5cs1tdYieYCSFbdNdIyByAjnM7046Lh6Pw
LQ2RAYVb0JcgZO/y/SoU6m3ofu5WBF2qzdP9a6+C0xTjAkZjMRZ7e4+PmJ9D
Cf1UP9P57RB4akqO6OsnEF29pCI19hoKyr/uUuLphW39tmI6TWW48nZuRJ7R
I1D9kzHTSf4uiDW3hr3JLcVKr+VzWj4nwKoMZuLLNQlgsGiraaVhCTa1fQ9U
ZXMg2oz36RvBa5j6ZND8t4tZUNyu0yBtUABdDdfnVXkFI7vyXsurQxmACo8W
LtAKgcUqbPb+6ipwLu3uc1uUiDiQtaUzlo2Wmm+NAuyasa97PorOeAQqhT3f
LDbWgPD+yVmKsRmY6WCfqePZiFZ+B38u7smGq/Z6RjU990A3wumF77VQmPi+
2+l9+eh97el9eX/xvqr0vor0vg70vn30vs7XtcxmzeZgKyNuE8+0HAyRiM4Y
nM2E1Sv3MAJcWSj8MmjqD9ObeNH9segy0xQ0y4z6qlCQhp4GP3Q/OSXBRsm3
3wXl/HHhuSJL/vfxeLKwz7p80UXctzxli9zWBHzn/yl/mzITN8q5KtuOh0J0
srjwYZ3HeLgq6/r6s6m4psGuwnFpDMY6Z6paJF8Bx6O6B0/Ih4PXSISEW6wX
nOT5LCOwzwy+/uT97jCDic9VbiuKPkwClY0PBZ6K3YGkT3ZW5g9zkV/pW594
IwdFtbW2PnDMxsT3j9vSx+7A6LZn/QKy+bDIfFRzENNBJWL1TImoPNDd5Obe
97EeM/e5zo5bxMR9WiI1b0Py4NiRhYPCvA9APzLHJfFDKrhy9wOPufuBcO5+
cA13PyDC3Q/4cvcDBtz9gDd3P/gbdz+Q4vHPfoBR9M9+4Bh3PxBqV+Bj1B4O
oDY3cG9APbimL767NqYEo/ndmxSNfSFn1VCEYwMH+8DFwF28AgWUW8QvncvF
wXDFIz6NdTBfZENfjvc90FArtjHyqsK030cfr7SuQbFZV/iPxXhD71zzbqH6
QnTbkd2d+KQCF3gGHonagsje/pP/d8NySNRvOn7GsAkaAv8IsrKvRjtPvo6x
kAQEP6F5oqwH2OBpcG1APwl1+L7kr3tihSrp7ZzInkwcuSzj7XK6BR2PmCTy
u97HgvujF5PVyyG34cC7K1J+sFFxalfBITa0qRszOa/rYF9w/zWDyXW420bv
g+O8Clhry7LtWVmMgfkJ/uxWf9QYSv778Ddj79ePr9mz8zHIX2q67Ug2TFte
aOm26wHsE6qJVY69ATeHZ60Nqk7H3TnNc1/9VoWdMoYM7x0l2H9qY+UHp0rM
kqw8YTuegqVpnJgtGuVwC/9aUvSJibdqns/Syq1BfSvXq0vn38EfhukzhQ49
wwHy53ryZwz503KCP2PIn2fIn3Hkz83kzzHy5zPypy758/g55t6ZrbloErXx
0NhdDlh8+Nxu4MOCsx3j4KpRAmN/zZbqsfMHi9F8yWPpt2HBXyNDpy1zIHKd
aub8GSEoW/3xgM2BXZBWyHtU/3glbM0NCep54QRjUvyfJXfWYD/Nr/OLfGnS
/JdpfiuaP5Tm92Zw5+cb487fTfMb0PxOxIc24kMg8YH8j9OID5eJDybEBxfi
gxHxYR/xwZT4oEt8iCtba9galwUDare23z+RDm2DBWkMnpuY2tTrXSn/EIQt
Mnla3UMgRKXVrUrnCei/X9+0vL4dZcU+t/db3UQR+TCNAXYpyphH2tX3sHDP
dVbyFGYmvHw9dEEl7Q4ucws74ZAUj+KSY0OJGpXwTnrd2OPoDCjQXK4vFZeB
GZe/vCycykLnKj7BHaW1qF1xRG4ui4N5F0b2i8e2oXbZMovdjAZQbN4mF93O
ghXfHhlF57Lg6Z5vQz5xLTD8pIW56FI5KEW+2S2UUwUZhl7VC1dcgYbng3wa
So1YOjtq0wH7KIiLYYs4lbFRw+OqbkpMDRZIWJanqZXjGU/eJQJFKZAw1fBF
rEwaeh38eUPFMAVWSrPzFPZG4L/6KqSfNkG/nvTjSV+T9Asn6LuR/hnSB9I3
13S2Pi7qCbOGW52DH5Zg1lhFmbBYCiruXubx6k09iLY7n7l8tA13KwdHZUQ8
wCEd3uCjgTfQienHo3QhDwO0eDv9WiPhZu/BHwVmQSjrEi9mXmuN8huK7twe
KsCCfoswHqUMnHQogT2ewAFDv7ylbXJMGIi80eH69/1Udd2/MtcuHIWW/jHe
JJMCz6rHvnUcT0epLL1wZys2qBwtm+HdUwfSSh6+tcZJcLg1vtPUpQYt/3xb
98i1DpaGzun0nVSB/R+/pTLqOXBJb9rO8NJEjH73wP1SYQ4wPur80R28CTXf
t/MevJYGVbNGYhafygPFwm3qzid8kDNFcn2X70EYv5/MCH9eAG5HPa2kO+Oh
V3t+aohIJboQ/1uI/1cm8F+U+O9H/NedwH8J4n8V8b+X63+wIf731KqOts7I
Q/O2FbZrM9kgmv/bKgPNcjB/fdWx6TAHGA3qG3RvZqCLadKUijEWRgqEsfrr
M+HFwrLTJ86WYYLkSO67OeYYmHHK9C/BEjTuKByW985B/71GQZs97qOL64z6
d5/ZOHTrpT1veQVM/hlzMfa1PYjMzTSf4VILYl9EGV8cHkB3qKbe4K5yDNKa
qTq85A74qMTvmKRZiglPZ93FtzdwT1JYffG5FlTqMpmqJZqDvlJvw4d3Zv0P
H54QH4In8EGI+BBAfNhBfKD9gBPxgYf4wCI+bCc+/MvndRP4fPQX/cGB+BZI
fLNg/G8+txPfNIhvb0lfbwI/j5O+LulHkL416d8mfeHxT//oCxE/X5H+WtJX
I38OkD8DyJ9R5E8W+VOd/FlO/nxcwPWnqiDXn1/Jnw7kzzby5wrqt2rUb8Wp
39ZRv9Whfrue+i2H+q0X9dsk6rdM6rcfqN9WUb/9v/g8bwKf1xGfpYnP4sTn
ucTnQ8TnfuKzBfFH7Bf8mf4L/pwm/hwn/sQRf3qdufyZSfyhfgvUbyFkQn5l
KL+JlF9jyu8xyq8Z5beN8nuM8nuE8rs7KFRr9q1qGO+qsPhyKR9Co92G8yTi
UMO9rrrWthEFi32eru9D4A8W2L86OQ61e7PWDIfGoLz+D+nIgUrQSQ0O1DjC
xO87pAWedlbiwFYFr6diyahpdDjUxqLpX/5gy4R+voLyxUf5cqF80fx4kfIl
S/kK486PG7j9E0MpX+oXx/ezfJnQ3dPywcyEg0IdD489D86AH5itsKvnKurc
EBhLP5UAQ5Ip8R3+d1BunpEFn8lteLY2RjxxqAKtPXKVkjxrMVf6tM/uvGhg
T9t8ZapyJXTe/729NaUeJa+rw5AxE98fOr85gKcKFrOidRzmlOLC8+YCPJdK
8Jb10Yi7g2XQHcajlz8vGrUT39sciHCEgIYXjczJrSjLp5DVsCgPi5sX7orX
YEOT1jEJy/fN0GyTn63+phxH6D4uofuYNeE+ptB9jKb7qEr3MZvuoxfdRxbd
Rye6jxwp7n30pP5mOqG/uVF/0+7l9jdz6m8yE/pbVxW3v5VQf9PJ5vY3MWlu
f1MnPgwSHxKID7HEB/P3XD5oEx9KiQ/adL/eEh8+Eh/OEB+eEh++EN/UJvDT
nvi2ivjmQ3zbSXyLJL5ZET/HiZ+PiG9WxLf/AHrB/qo=
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KLruKxJRev2Ox6sahbb1fHHgh9xIaBTFACNvCgffvW
/IjfbU/t5wk90XScN8neDWSN63Io/dweps4RrOAdVN0me2MweGz/VvravsS3
q+3BysXv2s8Eg5v2YG7sE6j8brg+iLnX4XxUc5vsP01R8Of8tAVq3lk4DTJF
+hpM3SWoubfh9sP4y1kqvSYsf4LhXhgNUwfzJ8xemPkw8yDih+DmwPxzf8M3
3uz7F+DugvkHZi7MHgCXWrh3
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Jb/0HgvT0TAwh8sP8B5TNA+aTSUUdP+U38dtX+weyf
N1ey37N3WFs+Q1TqoH1NZ8rxzpWn7EXLjq8413AHri5rymTGAMGz9tbVjzbv
nnfB3ivj9puaqPv2GVBxMY46KZF79+HiIY377hefvGdfOr/7zuHPl+H6YOIw
PszcvCobQVWfHfaKt+LjlnVdtA8t2nWZ+9ItOH3gxGbGz1+PQ+27a9/x+FhJ
4l6E/TC+yb2eJZvn3sNwL4yGqYP5E2Yvqvln7b9Et68JnHANbg7M3V9WvD9y
x+gO3F0wcZi5MHsAtgzTaQ==
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 12, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.015311, "MaxTrainingMemory" -> 199320,
                     "DataMemory" -> 49264, "FunctionMemory" -> 31672, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 5, 15, 12, 22, 16.0404793`8.95779228666433}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 54, "Output" -> 
                Association[
                 "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
                "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                9026751771197600512]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
                "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+KLruKxJRev2Ox6sahbb1fHHgh9xIaBTFACNvCgffvW
/IjfbU/t5wk90XScN8neDWSN63Io/dweps4RrOAdVN0me2MweGz/VvravsS3
q+3BysXv2s8Eg5v2YG7sE6j8brg+iLnX4XxUc5vsP01R8Of8tAVq3lk4DTJF
+hpM3SWoubfh9sP4y1kqvSYsf4LhXhgNUwfzJ8xemPkw8yDih+DmwPxzf8M3
3uz7F+DugvkHZi7MHgCXWrh3
                 "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwA+Jb/0HgvT0TAwh8sP8B5TNA+aTSUUdP+U38dtX+weyf
N1ey37N3WFs+Q1TqoH1NZ8rxzpWn7EXLjq8413AHri5rymTGAMGz9tbVjzbv
nnfB3ivj9puaqPv2GVBxMY46KZF79+HiIY377hefvGdfOr/7zuHPl+H6YOIw
PszcvCobQVWfHfaKt+LjlnVdtA8t2nWZ+9ItOH3gxGbGz1+PQ+27a9/x+FhJ
4l6E/TC+yb2eJZvn3sNwL4yGqYP5E2Yvqvln7b9Et68JnHANbg7M3V9WvD9y
x+gO3F0wcZi5MHsAtgzTaQ==
                 "], "Output" -> 
                Association[
                 "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 54.]], 
                "Version" -> {12.1, 0}, "ID" -> 7266584152592633244]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 5664398564532298490]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 0}, "ID" -> 2797529017361396161, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 384226982582893393]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          False -> 0.3482142857142857, True -> 0.6517857142857143]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction[
          "BruteForce", {CompressedData["
1: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
/vavPN8ODhs7cVqSbdDEJbBCr9IOuv/N9BwltMORtLAh+YR2eFvv3RJs0Q4f
NeKuLhq1QXcJ42RGfjvQV2lvJPC3A3874zUTTMfK+lXFX8LbYeBS4MGCnDbo
48bjkl+2g6wDtbx2QyvcPpSXX5hGRgrf7BlUosnoi+aNx8wtZPSm7M2rT95k
VPpGYs/j4DYw6M1LSjmRUWjYj8bXH8jo9446Ly1sQ+iE3RQV/zbQft5gCbEl
Izux6xez+bbh/XUdhplmLO7+RvXfRmQUVsnkSLAgo11hjvDsFDIaulN/+TnV
NnCFoulEnm2AGuc6/ztkFCtmQlmrJ6N0XYJPxiMyMnl1ayfTk4xcfs0SEl3I
yFnrS9677S24Zt0SEFRKRmRWznNUXNvgu0i+ccmDjGIueaY5hGP4R3IjfwaR
kfusbE4S7TbcVp6oiqoio/M690ks9mQ0bisVRB4mo8Rs9YJ65m1oucXNc6sG
ezbbO/2EQEZMemQ5pngyKnMXUyrEeDG78UPo1VOsjsN8vf+Ob4N4U95t+3wy
WisxyKzXIiPt3NOF9oiMOtRYL7cUYvUpumu15pFR4+Qbu7kGrG57nXhdbF/k
B4rdYB8WZ7Iof3CejE6RuCgKr8jogbvQ+vMT20B34ud/l/7bgtQjv8eku8mI
e7c23/b0NphcHAiMLCKj710i5dTvyWibNTP01CQZJcmbZaJPZGSu1mr7pISM
Nr+n9Jw3xuKynq+RF9iGW2wNQY8myKh/WU94fwEZtQuc+TJyj4ycnvTZ9slu
g5bSr2UBd4xX3vIVK6wfbhxnh9Klt+HjCav/HuiTUZeo8Oa+K9sgV3X/d4kb
GR2hSaSdbMTy1BaI+exhfUipf1Nyaxsi+x5u82Rj/OU6F2Zc2wYdovxbIQcy
EuIwlaq/sA33OZevpalieZl+pfG3kdGB3dfkSgx/g1dj8QFMLyc+R2SOntqG
JcfzmQMaZDQ6jzM7j/Hb9Abvb3gL408+lr2mk4zOZrgVe5zdBgeX9QVPTCdX
Jc6+u4Ppt6XB6yojpssnm8L3D2JxsgnXWV0x/rWjHw42P8d0/aL2QRCmC73x
+Tx1TM/6zsk/YjDe+CebRDySyaj7Jo27L9Y3ipnE5aVpMrrb+WTwtyYZPWyo
KF3PIqMbQ8En5bE4P/dri/ZifXrMg04rNZHRvyd2Ke4mGN9nGBUOj5KR5kn5
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
vj8RIkTtFJ6exbqa7L8ooYnn53+Qf5zX
            "], CompressedData["
1:eJwBfQOC/CFib1JlAQAAAG4AAABTiV4CvQQqQBugbjxKBjRAyl7dxNXkJUAA
mbq/hgZLQEcwAgyDQkRAfJHbwak2NkBd2itCT54lQDcL0kY1syJA5K6FVTHo
L0AZympnnyg0QFa9Dc/3KCZANoI9zO3AH0BODOOjVf82QEbCLNTFuB5AEGlf
CFniMkBDkfvc51wwQJ6YU52cmydAllB+RaJJJED1Cvd3dsYlQAJFFW6thCZA
8iy2vjFxMUAymBSLCYcoQMZ0KOFMByJArLo3USTgJEAqWrhaTEAhQBQ9OSnL
pCVAQBDx9th/UUAMrpMl6FAmQIjGZ0btuiFAgZFrjU53WUA2cfsbsxI2QLha
zu7B2TZAxY0Z4aSeIUC++cSiZDE2QLKEYKy8LCBADJfQMBrCM0CA6QK+A8Qe
QCGw28kxy0pAjes2b5+MIkBCtuvBO/RKQC0QknpdriBAGlEeI6+VJEDstFPY
5oo2QBZ0webrillAVHeqEjT0RkDsra2y244mQHzjocXdyTNAy8x9jM0tNEBc
SaaA9/YeQDeaONO/CiRA6as/4E+jIUBABYdvBmIlQKfLHerqBDBAst8eMS0n
JECBrlkghD40QAhu3E1U9kpAAE5Z6pOjH0BdAMzCwsQlQJ5nOyGg4kpAhC8c
yTQ0IkAyYdvdFqYiQNyk5RnogCdASp3kyH89JEAoSU4DegYjQL1Vx4fJaDZA
tjSJotj8IUA2+PevflUiQGaqJJdwellA8yfAV2oJMEDenLBxBkYpQOieZezV
XCBA/HIgfHVXMEAqpwlVgGsiQG7vcbjozCVANvzNIqjTIkBGDrDLna9mQOrR
pUpsNyJASbKZCVmPUUCziFDf1iU2QHPEZqJh2CFAqNeNie0dMEBoIcokUvQj
QIiWcwZTLTRAsop/8hAcNEDAOnhm1nY2QLOuZlbXlFlAxn393wVnI0B+97lg
Em0kQM32QY/X3h1AeDMs2UPiSkBclEljiG8wQEU83Z3NLDRAWs79b3/tHkAM
mz1KTEcmQLLmPfVjuCFAnd3V+TlyWUBTwGOVVbcnQLQAVoC4FB9Absv6DZ/v
JUD1Yvq93e0lQCifAF2nDUdA4xsnmFo1JkBc/98QCTBEQIbUegRlNh5ASsqa
nW8AIEAOrcDNTiNLQHpLL8lBdyJA7SfJ9RMwS0A2GEUq6aIlQMUZ/qHDRCVA
/BN/Nw==
            "]}], "NeighborsNumber" -> 10, 
         "ClassPriors" -> {0.3482142857142857, 0.6517857142857143}, 
         "TrainingOutput" -> 
         RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 
           1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 
           1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 
           1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 
           1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 
           1, 2, 2, 2, 1, 1, 2, 2, 2}], "DistributionSmoothing" -> 0.5, 
         "Processor" -> MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 54.], "Key" -> 
            "((f1f2f3f7f21f26f39f46f49f51)(\
f4f5f6f8f9f10f11f12f13f14f15f16f17f18f19f20f22f23f24f25f27f28f29f30f31f32f33f3\
4f35f36f37f38f40f41f42f43f44f45f47f48f50f52f53f54))", "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Method" -> "NearestNeighbors", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "NeighborsNumber" -> 
           Association["Value" -> 10, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "NearestMethod" -> 
           Association["Value" -> "Scan", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[15185], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.320145`6.95689171693129, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.6626766443256089, 0.03383436383726468], "Accuracy" -> 
            Around[0.6408746146367451, 0.06985175830050416], "EvaluationTime" -> 
            0.000010526315789473684`, "TestSize" -> 95, "ModelMemory" -> 
            13152, "ModelUtility" -> -0.291873100325861, "TrainingSize" -> 15,
             "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
            73192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.6626766443256089, 0.023924508106462752`]}, 
            "AccuracyHistory" -> {
              Around[0.6408746146367451, 0.0493926519720902]}, 
            "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "FinalTrainingSize" -> 110], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 268890923544313]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[8.733617508404674, 1.834580193281145], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00041906017952999695`, "TestSize" -> 
                 95, "ModelMemory" -> 54160, 
                 "ModelUtility" -> -2.901524583343593, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 167856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[8.733617508404674, 1.2972440952996245`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.59278727451132, 0.7515996261115611], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.0005722388235428032, "TestSize" -> 22, 
                 "ModelMemory" -> 80224, 
                 "ModelUtility" -> -1.2488670293202468`, "TrainingSize" -> 88,
                  "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 631776, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.59278727451132, 0.5314611923607585]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0005722388235428032, "MeanCrossEntropy" -> 
                Around[1.59278727451132, 0.7515996261115611], "ModelMemory" -> 
                80224, "TrainingMemory" -> 631776, "TrainingTime" -> 
                0.06891065307598049], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 
                 95, "ModelMemory" -> 20720, 
                 "ModelUtility" -> -0.32704571769640356`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.015848931924611134`, 
                 "TrainingMemory" -> 68920, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6916370843501094, 0.0062588525193839105`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9370010292105885, 0.18501508678382425`], "Accuracy" -> 
                 Around[0.5010418697881557, 0.15049692772910647`], 
                 "EvaluationTime" -> 0.00018095780479704407`, "TestSize" -> 
                 22, "ModelMemory" -> 119632, 
                 "ModelUtility" -> -0.6668667250182965, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 369008, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9370010292105885, 0.1308254224866597]}, 
                 "AccuracyHistory" -> {
                   Around[0.5010418697881557, 0.10641739814499294`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00018095780479704407`, 
                "MeanCrossEntropy" -> 
                Around[0.9370010292105885, 0.18501508678382425`], 
                "ModelMemory" -> 119632, "TrainingMemory" -> 369008, 
                "TrainingTime" -> 0.10322503774428209`], "Index" -> 2], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6626766443256089, 0.03383436383726468], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 
                 95, "ModelMemory" -> 13152, 
                 "ModelUtility" -> -0.291873100325861, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
                 73192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6626766443256089, 0.023924508106462752`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7063664388101804, 0.06296337175740596], "Accuracy" -> 
                 Around[0.4575636089185905, 0.14942705635897574`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 46752, 
                 "ModelUtility" -> -0.3632386356702696, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 322496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7063664388101804, 0.044521827136031304`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4575636089185905, 0.10566088484417616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.7063664388101804, 0.06296337175740596], 
                "ModelMemory" -> 46752, "TrainingMemory" -> 322496, 
                "TrainingTime" -> 0.03979692659812489], "Index" -> 3], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.0486534522931519`, 0.15176246537011534`], 
                 "Accuracy" -> 
                 Around[0.5783746146367452, 0.07177176002370075], 
                 "EvaluationTime" -> 0.000026440909805363992`, "TestSize" -> 
                 95, "ModelMemory" -> 6032, 
                 "ModelUtility" -> -0.7692201380342515, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 78240, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0486534522931519`, 0.10731226839279714`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5783746146367452, 0.05075029821045236]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.2517818374506435`, 0.36175269056068227`], 
                 "Accuracy" -> Around[0.5445201306577209, 0.1504707520532654],
                  "EvaluationTime" -> 0.0000361058288511037, "TestSize" -> 22,
                  "ModelMemory" -> 6288, 
                 "ModelUtility" -> -0.9739374450313539, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 155576, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2517818374506435`, 0.2557977806079372]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000361058288511037, "MeanCrossEntropy" -> 
                Around[1.2517818374506435`, 0.36175269056068227`], 
                "ModelMemory" -> 6288, "TrainingMemory" -> 155576, 
                "TrainingTime" -> 0.03194788546465767], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6696485521719033, 0.0298914915679836], "Accuracy" -> 
                 Around[0.6304579479700784, 0.07025589306900139], 
                 "EvaluationTime" -> 0.00006641656257686242, "TestSize" -> 95,
                  "ModelMemory" -> 97544, 
                 "ModelUtility" -> -0.30108693680696874`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.015848931924611134`, 
                 "TrainingMemory" -> 160392, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6696485521719033, 0.02113647638750171]}, 
                 "AccuracyHistory" -> {
                   Around[0.6304579479700784, 0.04967841840740784]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6843941483753104, 0.036458638343442366`], 
                 "Accuracy" -> 
                 Around[0.6749549132664163, 0.14368460052805063`], 
                 "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
                 "ModelMemory" -> 99632, 
                 "ModelUtility" -> -0.32457863223067274`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 222416, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6843941483753104, 0.02578015040547597]}, 
                 "AccuracyHistory" -> {
                   Around[0.6749549132664163, 0.10160035538546477`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
                Around[0.6843941483753104, 0.036458638343442366`], 
                "ModelMemory" -> 99632, "TrainingMemory" -> 222416, 
                "TrainingTime" -> 0.0377968173892688], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[23.04397201642813, 4.37510677889845], "Accuracy" -> 
                 Around[0.495041281303412, 0.07252971252412922], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9560, "ModelUtility" -> -3.867853590144093, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
                 "TrainingMemory" -> 121336, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[23.04397201642813, 3.093667671774327]}, 
                 "AccuracyHistory" -> {
                   Around[0.495041281303412, 0.051286251563322637`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
                Around[23.04397201642813, 4.37510677889845], "ModelMemory" -> 
                9560, "TrainingMemory" -> 121336, "TrainingTime" -> 
                0.06640783086353597], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.747394415792337, 0.9285127778373037], "Accuracy" -> 
                 Around[0.495041281303412, 0.07252971252412922], 
                 "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 
                 95, "ModelMemory" -> 9560, 
                 "ModelUtility" -> -2.2891477269571556`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 121016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.747394415792337, 0.6565576816271157]}, 
                 "AccuracyHistory" -> {
                   Around[0.495041281303412, 0.051286251563322637`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000010526315789473684`, 
                "MeanCrossEntropy" -> 
                Around[4.747394415792337, 0.9285127778373037], "ModelMemory" -> 
                9560, "TrainingMemory" -> 121016, "TrainingTime" -> 
                0.06640783086353597], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1188790359749927`, 0.16539635396403737`], 
                 "Accuracy" -> Around[0.5158746146367453, 0.0725282187804213],
                  "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95,
                  "ModelMemory" -> 9560, 
                 "ModelUtility" -> -0.8346441129060785, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 121152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1188790359749927`, 0.11695288347150133`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5158746146367453, 0.051285195327017405`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7047533671417608, 0.12489152776996404`], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 9560, 
                 "ModelUtility" -> -0.3781023813070198, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 187768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7047533671417608, 0.08831164619888958]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.7047533671417608, 0.12489152776996404`], 
                "ModelMemory" -> 9560, "TrainingMemory" -> 187768, 
                "TrainingTime" -> 0.08360250581623441], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 268886628577017]], "MaxTrainingSize" -> 110, 
         "PreprocessorEvaluationTime" -> 9.888427734375`4.*^-6, 
         "PreprocessorMemory" -> 134520, "InputDimension" -> 54, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6463341980550162, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.7985341368889806`17.332191022860872*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
             0.2732735, "ExperimentCounts" -> 8], 
            Association[
            "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.3768221, "ExperimentCounts" -> 6]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association["ID" -> 268899513478905]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0032984954199975994`}, "ID" -> 
              6256679568790717639], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.001598650623136407}, "ID" -> 
              8623262771504601198], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.004961638509898581}, "ID" -> 
              4132395819933524331], "f4" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8694373178801165222], "f5" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              1348181103987964274], "f6" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              157490378243617503], "f7" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              939946895530328469], "f8" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3064004026125996483], "f9" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              3244472751827614723], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4014005089167240292], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5121660210812111602], "f12" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              602190665354312585], "f13" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              3055185702463609468], "f14" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4331092451225371894], "f15" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8191647698190687149], "f16" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              781964795002888220], "f17" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2349168932479337304], "f18" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1960837545649623925], "f19" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1323267666578452685], "f20" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              6779280008378695119], "f21" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              1969594944934312336], "f22" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2977944126117531131], "f23" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              3985678876464854766], "f24" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2578321024215090129], "f25" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3425254761356122489], "f26" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7811009041265027328], "f27" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4194784050166590729], "f28" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8324053286448681379], "f29" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5181124187995197879], "f30" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7479067730402397421], "f31" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              6269264012809592687], "f32" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7985513232360243956], "f33" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5780036626520184047], "f34" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              4927984913134027952], "f35" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7633465753380053928], "f36" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              160926652115476589], "f37" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6990045640335236538], "f38" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              792678255158960396], "f39" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5175019930512448058], "f40" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6851581244213028850], "f41" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7941891567130392840], "f42" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8290799922777044604], "f43" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6126937606205041094], "f44" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1011306702553622053], "f45" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              3989655886193754391], "f46" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              1898151043668025283], "f47" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2372459096780605183], "f48" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              3691459307182685632], "f49" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2052040592424282294], "f50" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7901387738829578202], "f51" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4035938522416658676], "f52" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              722415401874741699], "f53" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8380850542968955904], "f54" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5683465083391742978]], 
           Association[
           "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1,
             "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1537544, 
         "MaxTrainingMemory" -> 1082112, "DataMemory" -> 910448, 
         "FunctionMemory" -> 433192, "LanguageVersion" -> {12.1, 0}, "Date" -> 
         DateObject[{2020, 5, 15, 12, 22, 17.0456239`8.984187844594373}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        0.002742856482203961, 0.0009611854860558385, 0.002892876469155599, 1, 
         0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 
         0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 
         0, 0, 0, 0}, {
        0.001704141656958028, 0.0006617173076112417, 0.007508424018214351, 0, 
         1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 
         0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 
         0, 1, 1, 0}, {
        0.0029969934830547133`, 0.0012032082868960632`, 0.007947779832756888, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.0017991688438474653`, 0.0012396762978101733`, 0.005272002492468928, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.0026385439030547145`, 0.0015339186522904415`, 
         0.0032832551341424993`, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 
         0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 
         1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0}, {
        0.003342335102635483, 0.0009466068802355844, 0.005608200903576244, 1, 
         0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 
         0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 
         0, 0, 0, 0}, {
        0.003589084030695279, 0.0013276852201036533`, 0.007041650700829742, 0,
          1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,
          0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0,
          0, 1, 1, 0}, {
        0.004427859532784215, 0.0016545651035664928`, 0.01247309377642404, 0, 
         1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 
         0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 
         0, 0, 0, 0}, {
        0.003288565482747599, 0.0015896659134678015`, 0.004604378811730589, 0,
          0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0,
          0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0,
          0, 1, 1, 0}, {
        0.0011433323150822812`, 0.0004364105851348042, 0.009131485154821137, 
         0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.0037364831666406523`, 0.0012127492611802182`, 0.006774198539696626, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.0029008260676477785`, 0.0014764831848957725`, 0.004398478895920877, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.0028066891892804414`, 0.0011677812659528723`, 0.010004129208828412`,
          0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1,
          0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1,
          0, 0, 0, 0, 0}, {
        0.001966681418466253, 0.00135628743053894, 0.006574887303437697, 0, 1,
          0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1,
          1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
          0, 0, 0}, {
        0.004303180533678753, 0.0015233245320398388`, 0.012150430016555898`, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.002911181172847666, 0.0010104925859168226`, 0.008546152612740096, 0,
          1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0,
          0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0,
          0, 0, 0, 0}, {
        0.003138588459463973, 0.0013504447668227042`, 0.004579180523311962, 0,
          1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1,
          1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1,
          0, 0, 0, 0}, {
        0.0024905932968404655`, 0.0012405352886126005`, 0.007303765804535912, 
         1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 
         0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 
         0, 0, 0, 1, 1}, {
        0.0023002230310254566`, 0.0014859778613716137`, 
         0.0062277031207299905`, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
         1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}, {
        0.0022412788106185447`, 0.0009639411445887004, 0.007954918295070725, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 
         1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 
         1, 0, 1, 1, 0}, {
        0.001692408765460826, 0.001314266585169407, 0.0037923726488239776`, 1,
          1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0,
          0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,
          0, 0, 1, 1}, {
        0.0020353269139815515`, 0.0013077895804229547`, 0.007323925300228177, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 
         0, 0, 1, 1, 0}, {
        0.0035084939828442835`, 0.0017133181898631848`, 0.007373585714129375, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 
         1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 
         1, 0, 1, 1, 0}, {
        0.0017907520590454687`, 0.001345469098892494, 0.004027970177337451, 0,
          1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,
          0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0,
          0, 1, 1, 0}, {
        0.0020128002552121486`, 0.0008934267124638364, 0.005550283390360934, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 
         0, 0, 1, 1, 0}, {
        0.002583840189365972, 0.0012642691352116287`, 0.006736589429320739, 0,
          1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,
          0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0,
          0, 1, 1, 0}, {
        0.002499488450998751, 0.00103690567741659, 0.0038851098823570324`, 1, 
         0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 
         0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 
         0, 0, 0, 0}}, 
      "Output" -> {
       True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, False, False, False, False, False, False, 
        False, False, False, False, False}], 
    "Predictions" -> {
     True, True, True, True, True, False, False, True, True, False, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, False, True, True}, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmViYGCQBmIQLaaVZtmz9Nl+8WYGvg07nu7fmOh15WXL2/27aq1T
Rc0f7L9x1Hu6idHP/SI8NufCNp3dvy3+7Q47lc/7l7h+nzKN8zoGn3npxt1c
/x7sb27bOsU/4c1+m+JFk+Ym3Ni/kXHlnZcpn/afdrLPedrGeGBjqVepd/S+
/ej2o+snZD+6PLr70e1D14+uHt09hPxLKPwIqUf3LyH3AABQy+yB
     "], "CountMatrix" -> {{1, 10, 0}, {3, 13, 0}}, 
    "IndicesMatrix" -> {{{25}, {17, 18, 19, 20, 21, 22, 23, 24, 26, 
       27}, {}}, {{6, 7, 10}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 
       16}, {}}}, "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {27}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00039165555555555553`, "SingleEvaluationTime" -> 
    0.0091350000000000008`2., "Version" -> {12.1, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7946054160587225`*^9, 3.7946055385697737`*^9, 
  3.7948851256834764`*^9, 3.7953466985534134`*^9, 3.795376325304484*^9, 
  3.7953772553581576`*^9, 3.795951324306675*^9, 3.797727866664218*^9, 
  3.7977289391179886`*^9, 3.797767999023897*^9, 3.7977733598829308`*^9, 
  3.7977768873080835`*^9, 3.797777386771393*^9, 3.7977781542784495`*^9, 
  3.797778896797717*^9, 3.7977860004331827`*^9, 3.79779755230866*^9, 
  3.7978055419465666`*^9, 3.7985481527537565`*^9, 3.7985485373805184`*^9},
 CellLabel->
  "Out[157]=",ExpressionUUID->"fb34105f-ac67-40b4-b4fe-9d5a73f5cb2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassErRedMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7946054168816786`*^9, 3.794605423008206*^9}, {
  3.7946055409672737`*^9, 3.794605541313364*^9}, {3.7953772577128625`*^9, 
  3.795377261110776*^9}},
 CellLabel->
  "In[158]:=",ExpressionUUID->"50b90bfc-5ec4-4bd2-96e6-36a8a93cc877"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.5185185185185185`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.09090909090909091`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8125`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", 
        RowBox[{"-", "0.13359760536066043`"}]}], ",", 
       RowBox[{"True", "\[Rule]", 
        RowBox[{"-", "0.13359760536066043`"}]}]}], "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.09090909090909091`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8125`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.8125`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.09090909090909091`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.721590909090909`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.5625`"}]}], "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.13333333333333333`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.6666666666666666`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.794605423304203*^9, 3.794605542431409*^9, 
  3.7948851344602647`*^9, 3.7953466986162453`*^9, 3.795376325354349*^9, 
  3.795377261912635*^9, 3.79595132441938*^9, 3.797727866726703*^9, 
  3.797728939202567*^9, 3.797767999093713*^9, 3.7977733598985157`*^9, 
  3.797776887359984*^9, 3.797777386865138*^9, 3.7977781543584824`*^9, 
  3.797778896885479*^9, 3.79778600054253*^9, 3.7977975523984203`*^9, 
  3.7978055420363283`*^9, 3.798548152821574*^9, 3.79854853742839*^9},
 CellLabel->
  "Out[158]//TableForm=",ExpressionUUID->"de2ccbae-39f8-43d5-acca-\
f157b434b483"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "trained", " ", "on", " ", "high", " ", "KS", " ", "columns", " ", "and", 
    " ", "pH", " ", "and", " ", "maccs"}], " ", "-", " ", 
   RowBox[{"all", " ", "lanthanides"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7921913941242733`*^9, 3.7921913956197653`*^9}, {
  3.7921919889571857`*^9, 3.7921919979257746`*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"edd21b4e-00a8-41e5-b272-70834dc4c9ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classRedpHMaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccsRedpH", "@", "allDataMACCsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.792192011940566*^9, 3.7921920451925573`*^9}, {
  3.7953773889690037`*^9, 3.795377414563548*^9}},
 CellLabel->
  "In[160]:=",ExpressionUUID->"42be112c-c8c5-4518-ba17-2e16234acb5a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "55", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "55", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["344", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 344, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Boolean"], "maccs65" -> 
           Association["Type" -> "Boolean"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Boolean"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Boolean"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Boolean"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Boolean"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Boolean"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Boolean"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                  "Amine Mole Fraction", "pH", "maccs53", "maccs54", 
                  "maccs62", "maccs65", "maccs74", "maccs79", "maccs80", 
                  "maccs82", "maccs83", "maccs84", "maccs85", "maccs86", 
                  "maccs90", "maccs91", "maccs93", "maccs96", "maccs98", 
                  "maccs100", "maccs103", "maccs104", "maccs105", "maccs108", 
                  "maccs111", "maccs115", "maccs116", "maccs118", "maccs120", 
                  "maccs121", "maccs122", "maccs128", "maccs129", "maccs131", 
                  "maccs133", "maccs134", "maccs137", "maccs138", "maccs141", 
                  "maccs145", "maccs147", "maccs148", "maccs149", "maccs151", 
                  "maccs153", "maccs155", "maccs156", "maccs158", "maccs160", 
                  "maccs162", "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 55]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4)(\
f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f3\
2f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4]], 
             "Version" -> {12.1, 0}, "ID" -> 796065208436189035]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4]], 
             "Mean" -> {0.0028792698877382916`, 0.001336625227644646, 
              0.0056909533598154425`, 2.6075581395348837`}, 
             "StandardDeviation" -> {0.0016280347537027814`, 
              0.0009057928969227916, 0.002731584875602575, 
              1.6775019052056637`}, "Version" -> {12.1, 0}, "ID" -> 
             6572798000559403923, "Output" -> 
             Association[
              "(f1f2f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f5" -> Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f\
27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f\
53f54f55)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 884639858361412541]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f\
27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f\
53f54f55)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 6363154606514754279, "Output" -> 
             Association[
              "(f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f\
27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f\
53f54f55)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f\
27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f\
53f54f55)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 3447030043167960801, "Output" -> 
             Association[
              "(f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f\
27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f\
53f54f55)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4], 
               "(f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26\
f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52\
f53f54f55)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]], 
             "Spans" -> {
               Span[1, 4], 
               Span[5, 55]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4)(\
f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f3\
2f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwZ4CBD/aj9NCiAbRTQvs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 1934252317621638643]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4)(\
f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f3\
2f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwZ4CBD/aj9NCiAbRTQvs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 344, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+J9C/RfcP9qsmkGM3bb9O9QftdhPWkPkHjUt2PxHhUw
44S9Y/wF8S+sD+2/sNYCmelQerq9+x3B8iOyG+1Pzdq0bI3mc3uYeqBgofud
l/bL12hmA+XswdprH9qn+kYGX5tyFCr/0B7MNb1rLwE28AmUPgDX96sJ5LDb
9mDtju/tC8EW7oXyX9tD3L0LTsPUQey7CKch9r21NwM74Iq9EFjgAdw9cmCD
H9hD/P8Mbj7MPhgN0wezB+Z/mP0we2Dm1oID7ijcPJg+mP8XgoP/GlwcEh+X
4OEL8z/MXpg7AC1u2gA=
                    "], "Method" -> "Naive", "VectorLength" -> 55, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+J9C/RfcP9qsmkGM3bb9O9QftdhPWkPkHjUt2PxHhUw
44S9Y/wF8S+sD+2/sNYCmelQerq9+x3B8iOyG+1Pzdq0bI3mc3uYeqBgofud
l/bL12hmA+XswdprH9qn+kYGX5tyFCr/0B7MNb1rLwE28AmUPgDX96sJ5LDb
9mDtju/tC8EW7oXyX9tD3L0LTsPUQey7CKch9r21NwM74Iq9EFjgAdw9cmCD
H9hD/P8Mbj7MPhgN0wezB+Z/mP0we2Dm1oID7ijcPJg+mP8XgoP/GlwcEh+X
4OEL8z/MXpg7AC1u2gA=
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Lv/0Hgvf1fKM3JAAIf7JmhdKzW4xm5xjftt07788Dq
/X37NLUEp2UTVttnGOqZL/A6bH/EcbHkmR/n7Z07zzo4zb0DVx8Hpdcru933
m3vBPkK6em7Vnfv2oTfneZl+u27P9+e7ct6J+/b6fXPvn3xw314reHKo5Yl7
9j2r/ixnT7gK1yd2Rily25779llQ++5nXOTibrli71tyWk5m3zX79aUZx4Qi
L8NpmLqaKB8vi9Y7cPoo1J0WlcbP0//etc99fPDXgX8I90x54Lut8899+5tb
/vW+rbgLNx9mH4yG6ctC8z/Mfpg9MHPzTrsv5FS4ATcPpg/m/+UB3TUz++/B
xSfoOmQ/troLD1+Y/2H2wtwBAJBC310=
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 55, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 55]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 16]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
J8PqASiQKj1bfs82jFi96bpwfxS801hUnlXtAdM0vjWfZoWhuPQUgU4fI+yu
7uhqzYrB4Y3T2izbw0GRUen7XicCJ8nIr98Uk4ebn9nPORyYjR4j+Ve6ZtWA
5Dub7bGvk0A/3PbYpZhS0P/uu/7emwaYqd4Lo9ObsNP6XYq4eTqKBQ+UhDzi
oWGsJpPhGz2mP9naWxfT4PJbo6u567hwaabJ/KSKJPBhuyyJXD2m04wWu9kd
bFxY+sbPPLIRtaepqg3frYJV784rSGc+RIGzG2JxqROocL2iEmIrMaf6687+
D9kot+nI4Mu3XLja0rJORbMFRBS3VsR9ysP4q59drdJzYPnz4fbjufHgqtqm
lqgSjVfeNFR9uBCN29MH//h19AG6p1S+a7iQh7nxwybFAVno/HhGavNlDmo+
2a38RrYQ0pSGbA7tqEHhgrlz1axu4nIh1yPL7fJgqt7K7k0Tw3DDwX+ja/ur
YbRVf5/oUDM8d55TqZzPweKry85KtNVBl2KiiNYcFrpsL4oSEzyIK8eyTJN4
ETjd8jme2xMDJn4zbuX8O/a/2lUtPDGQAffrTSwWd2Zit9ZdUe9V+fg9I3vy
kds1wNuQ/dVcvRBGw7duD4EocOr7cuDfjBqYxzjvctyXgedm32vZN+yOrtsi
uXayiIZec2z+FMtGX+sEdftDHDwj/Mu62zsUXKMezl20twh2DT8vqywJxcH+
t6nJziwwfLd55tbNDVg+f1HNoTQemo3TnwjpT5P050z6UyP9JZP+XEh/n0h/
GqS/yaQ/H9JfJulvP+lPi/S3ivTHK1RwHgkpx4wMUe2ktTV4ZlJa8M5fxlDO
mVGdcpgLn/p+GHpJsFGxyPbN6YFonHVv9FNsSRTkCu/0ix1yh63D/pOn5iVD
zdudM05WhYNUy43uvTM9MN5XTFPENQj8W+qMn7PT0FL5wah1Xhn2L59ypUcp
Hw+JhPfHFFSiLZ9/8EXlP/7BNT7/gPgH7Nv/8Q8n8fmHyXz+wU0+/8CLzz+w
5PMPem3+4x/2B/7HP2zk8w9O8/mHXnz+wSY+/0DBnNXnaJEIJlIpZ8yO8XCi
044Kf98yKGo21kneUINprgYVsfLlIPSd9bffCBNZC8MsJBmZcHTExOLTr2Js
s/QLWbAgC1eJ9606bReKqqVOkZbmmTC6KOhAXXAoeJ+3T7BmnsB4ix9W14sz
YLmE22urtnO48cPnV6x1LjAyynXMnF0PEixmu5NgCUY6eA6fCs3H9BGhnrdd
JcBocH3rF50M37/GqjdbFKO31WC8UHcebE8LcjZyKsHwb+rmJss5mH3t1p1p
cgEgwlWXbeNmw+Hl3HMDGpmgkq+xOGpABjpjxRo+RDHg9HvH1nMGBagamgAG
t0rQtdFE4fCFIlRmh+YMD+Xg9qmeyttUx/b937NfObn5uPq0T52mSB3WFUrr
ma8ox9Elr+XPvI8DFzszz90yD6C3QXHzgEcTyjCWnPh7PwuGBkaet0nEgE71
qX9ajrrhgafq9zb2Z8PfejmMOw+CIavQNfOalheqH7srEhmbBqqqOwxszieh
fkJeEkbnY5ROQV1duDe+4xiLCi0d+x6vD5lVi+WA/OgzK83+ZsjLLLdB/VSM
sCh9sf1GM4aGzynK38zFkxrLo6+3tcD03oqElntFoFK08DkmNOFKpYhLOapO
GGDe4cU5wEFOtJrPvtX1gOkXrolbNcDv/RPi5y+4Pm7/XGj/ptP+FdL++dD+
edL++dD+9dP+/aL966D9M6X9i6H920/7d/OMh8PWyWxUvhmx5CIrG3SXTbUr
kYyDgqE3108E1YBggcJ594NNsHU2ezeXywS9XezVBa5lYBxzXfVyWRZKh8Ut
vunGwVrdp8udL5fCvJQP2xjrU6BApn3zDJV0lK6pDxDb+hCUX2X2K8hdwdf9
irw5mkmQ03VBS+lS2P+Zv5/m59P8STR/G80/SvONaL4kza+m+ZNofjHNF6f5
nTS/ieazaP6Io/2MPi8uREb7icyRH/MR071D3+0qofzqvX8TjobDHAnHk7Yq
eTjd8UZLpxwXvHy1/fdrPEa1Bax/blu2ompA3DLDaXYYpFXy0raPgTrd8x+J
JCbCQ7Ek3XOvc9BDrkt/5dpiHAt1DPlfQQibqow0AotQu6A0TJ0ZCtJrKsL3
iPNw5+QDB79kcFEgc6Zfg1widgrFSvN28kBQf3j+8S8ZqJs/uPbLyyIQ+HVO
bNNuDr5zurKlX7IehCXLdp5tfoBf9hW0fb+UBnZFG1XV3/vCNEaI2MoF0eD1
clJTxvMcsM/1LlVLY8PdOybbipeyQWXiV6sbF5iwU4B3TtyYhQdb8dWOh804
vczx2Wa7ONCbMnt44WAyiHpUTFdJcYFe46sc9hUztGT9bHgzOxa1RRvX1Vpk
gvBBg47F/SWgepxxx+wRAzve8RhbhmLQReFGhvTPoyD8d7PaQVYK5o9WdyiM
6b3tpp5i4dMHqJ1Ykzd9Yg4epvyzhPKPAOUfRco/Ryj/xFP+EaT8U/I7/yTx
888dyj88yj+TKf9Mo/zTT/mnb1z+qZYOWm3LcEeNE0l5gYljeeBdgU6yVToM
WEzN2ZPJhj91/M3msJrQrWSV4J9P6uGUdBmuvGSDvJBzCt6e1RjAlPTZ/D0V
8hwLZ+ya74Nn1Z6o4odb2Fpv8XT54zTI3OIkD4MXIOarksSOrEL4Z4tstVAX
B//6tXpN7LIaDM+THeX6JoC4xsuS1V51WLZQ5+rZp2nAUbdV+OWaA3+zz2hq
jbLxjtiODB33ajjdJiInZFsNTt61sl2v3KH4lENC8ksemDIOldcqMrFYqrr3
Rl8SvpreJqq/NguyjQ62No71RmPPlSdCklrg15Q/fq1yQSgaijB5vSIXPpP/
LyX/v0f+n03+H0H+P+Ub3/+Dyf+1yf8fkP+nk/8vIv8/8tv/y/n+LxrH939j
8v+t5P9y4/g3gfhXQvxLJ/5NHsc/PeJfO/FvA/FPg/g3TPzjmfP5V0z8a1rM
558j8W81zT/7//B3/PyScfx9TPNNaf5mmp+0mD/f0ow/P5bmK4vz5/+g+eqk
P13S3xTSnyHpT5j050n6Mxunv6mkP03SXxfpr5P0N9LO1x+b9DdI+tMg/V0Z
l39+8yf9d/7x4fNnBvGniPjjSfyJI/6oE38+EH8i+P0fpz3g88ed+HOX+ONM
/Pnd/19S/zen/p9J/d+B+r8R9f/L1P9DqP+/of6fSf3/EfV/Rer/q6n/B1D/
D6f+H0D9f3z++IvyxxzKH3Lj8sdnyh9x4/KHBOWPp5Q/LlD+ODQuf+RQ/viD
8sdn4s8D4k818YdH/JlF/BEm/vgQfzSIP6uIPz7En53j+HOT+FNM/NEk/hwh
/vzun+Lj+uc68t9T5L9s8t/hnXz/ZZL/umTy/fc++W85+e908t9yKb7/Lq3h
+28v+e9F8l/z/T3r/LKLUfHnNw8lv3KoWtJqbiOZBjcc9d8EvGeCKs/wtulg
A7T4Nsvm27JR3vfkpG3sOmBlH+HWBnNgf1CB7IETiXjsDu+uT2whGvTLTV05
LwR/eD1/s4bHgU4jI/UQqVTYumuyImgVQaft6zLtNsTk5ERxw6Fy/ET+JznO
/9LG+d8nyr8e5H865H8R5H9M8r/vHL7/aZP/uTTy/a+c8q8B+Z8W+Z8N6e8T
6c9pnP4EfPn6W036ezFOf/dJf+Wkv3n8+xuuJf0FUv7zHKe/1aQ/UzGdvsa3
bNgl9WLunilNoH1iX41DRgqumaciiKeiMPx6U9yG3ofoGnHqBysxAQ0GasV8
3uaCq9TRTd0XufjKJa8k2CsbLK3/ijnvFYcbvaP/6VBNxfj0kNms8wn4+tPB
YmnrbKybfnT+kWfluEd0+bD5+1KsKR/KeBXMxGnfFtVzmRlYd61QpNO1Htkv
fYyt9Ma4LhpgrjWqBoKrHkSp15aDy9r8DWZvzTFKOcrUubR+rFeU6/Y1VqDB
40Vmpu4ZIJS693OlHwsyk+Nuv3Xwwu13r70ze1WGFY7+jho/mbiOJ2Jp6/oI
3UpvyvByHkL2kfcvFt0IRHt6f1HK33T/hLTf7x/Af39hev9hev9r9P6r6P0b
6P2vkP8xKX9vJv9TpvfPpPdfT++vKP9yA6eRhz+fCP94MyUTOoOWRclWxeCb
KUcLN3pwgXv4/TtWfyO06UwyEWvMh0hTidiy+xyoe3nToe5+EV757u5sr8lF
7dSwM6FmxdDmY88x/pkGd3cc9tD/nII8BYMbKX0xIPXt+6x2X2c4iT23lvVE
w7Ir7tdq5wbAJbr/DvL3D13o/ptJ918Buv+K0v03k+6/DLr/BtD9t5Puv538
3w/z6P7bT/ffW3T/jaD7b1Me//5bTv0/k/q/wLj+P0j9fzP1/9FIfv+Xmsrv
/2rU/7Op/wtT/+dR//el/m9B/X+U+v9+6v+qxF8t4m8vl89fe+Jv0y0+fztP
8fmrS/xVJf5OHJd/a4i/rvJ8/nYSf32Iv1nE38XEX3nKH9cpfwhT/kDKHznj
8kcG5Q9lyh9VlD/WU/6Qo/zxkfLPPgt+/lCl/PGN8kfHAD9//A8ElmsM
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+J9C/RfcP9qsmkGM3bb9O9QftdhPWkPkHjUt2PxHhUw
44S9Y/wF8S+sD+2/sNYCmelQerq9+x3B8iOyG+1Pzdq0bI3mc3uYeqBgofud
l/bL12hmA+XswdprH9qn+kYGX5tyFCr/0B7MNb1rLwE28AmUPgDX96sJ5LDb
9mDtju/tC8EW7oXyX9tD3L0LTsPUQey7CKch9r21NwM74Iq9EFjgAdw9cmCD
H9hD/P8Mbj7MPhgN0wezB+Z/mP0we2Dm1oID7ijcPJg+mP8XgoP/GlwcEh+X
4OEL8z/MXpg7AC1u2gA=
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Lv/0Hgvf1fKM3JAAIf7JmhdKzW4xm5xjftt07788Dq
/X37NLUEp2UTVttnGOqZL/A6bH/EcbHkmR/n7Z07zzo4zb0DVx8Hpdcru933
m3vBPkK6em7Vnfv2oTfneZl+u27P9+e7ct6J+/b6fXPvn3xw314reHKo5Yl7
9j2r/ixnT7gK1yd2Rily25779llQ++5nXOTibrli71tyWk5m3zX79aUZx4Qi
L8NpmLqaKB8vi9Y7cPoo1J0WlcbP0//etc99fPDXgX8I90x54Lut8899+5tb
/vW+rbgLNx9mH4yG6ctC8z/Mfpg9MHPzTrsv5FS4ATcPpg/m/+UB3TUz++/B
xSfoOmQ/troLD1+Y/2H2wtwBAJBC310=
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 16, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0160122, "MaxTrainingMemory" -> 509512, 
                  "DataMemory" -> 151568, "FunctionMemory" -> 33720, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 17.728589`9.00124911472118}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 55, "Output" -> 
             Association[
              "((f1f2f3f4)(\
f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f3\
2f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             7819802544194242134]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4)(\
f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f3\
2f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+J9C/RfcP9qsmkGM3bb9O9QftdhPWkPkHjUt2PxHhUw
44S9Y/wF8S+sD+2/sNYCmelQerq9+x3B8iOyG+1Pzdq0bI3mc3uYeqBgofud
l/bL12hmA+XswdprH9qn+kYGX5tyFCr/0B7MNb1rLwE28AmUPgDX96sJ5LDb
9mDtju/tC8EW7oXyX9tD3L0LTsPUQey7CKch9r21NwM74Iq9EFjgAdw9cmCD
H9hD/P8Mbj7MPhgN0wezB+Z/mP0we2Dm1oID7ijcPJg+mP8XgoP/GlwcEh+X
4OEL8z/MXpg7AC1u2gA=
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Lv/0Hgvf1fKM3JAAIf7JmhdKzW4xm5xjftt07788Dq
/X37NLUEp2UTVttnGOqZL/A6bH/EcbHkmR/n7Z07zzo4zb0DVx8Hpdcru933
m3vBPkK6em7Vnfv2oTfneZl+u27P9+e7ct6J+/b6fXPvn3xw314reHKo5Yl7
9j2r/ixnT7gK1yd2Rily25779llQ++5nXOTibrli71tyWk5m3zX79aUZx4Qi
L8NpmLqaKB8vi9Y7cPoo1J0WlcbP0//etc99fPDXgX8I90x54Lut8899+5tb
/vW+rbgLNx9mH4yG6ctC8z/Mfpg9MHPzTrsv5FS4ATcPpg/m/+UB3TUz++/B
xSfoOmQ/troLD1+Y/2H2wtwBAJBC310=
              "], "Output" -> 
             Association[
              "((f1f2f3f4)(\
f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f3\
2f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Version" -> {12.1, 0}, "ID" -> 4088396393602031038]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1350503073591101908]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 7863003797395140278, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1763473602792678032]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.21965317919075145`, True -> 0.7803468208092486]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray[
             "Real32",{{-0.15864165127277374`, -0.11437493562698364`, \
-0.12631236016750336`, 0.21753911674022675`, 0.06369496136903763, 
             0.08931128680706024, -0.1736070215702057, -0.025799645110964775`,
              0.24197107553482056`, 0.1133875772356987, 
             0.052538514137268066`, -0.09213098138570786, 0.0717276781797409, 
             0.05288226529955864, 0.0627632886171341, 0.056721966713666916`, 
             0.24747544527053833`, 0.07215289026498795, 0.30295902490615845`, 
             0.024774648249149323`, 
             0.11929048597812653`, -0.05540701001882553, \
-0.012517045252025127`, 0.09753616154193878, -0.0972280204296112, 
             0.006946128327399492, 0.05936756730079651, 
             0.07097192853689194, -0.038694899529218674`, 
             0.1441570669412613, -0.0298248752951622, 
             0.14369992911815643`, -0.057712819427251816`, \
-0.3308805525302887, 0.19360306859016418`, 
             0.061369504779577255`, -0.05685346946120262, \
-0.19027210772037506`, 0.20182937383651733`, -0.03546243533492088, 
             0.017763858661055565`, -0.17505067586898804`, 
             0.21858641505241394`, -0.03974829614162445, 
             0.089503712952137, -0.013509338721632957`, 
             0.1196611300110817, -0.06024685874581337, -0.06237778440117836, 
             0.11450569331645966`, -0.14957693219184875`, \
-0.16949482262134552`, 0.11338521540164948`, 
             0.15488292276859283`, -0.009755448438227177}}], "Biases" -> 
           RawArray["Real32",{-1.4882904291152954`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 55, 
           "$InputDimensions" -> {55}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{55}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.4", "Unstable" -> False]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 55., "Type" -> "NumericalVector"], 
         "Key" -> 
         "((f1f2f3f4)(\
f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f3\
2f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Method" -> "LogisticRegression", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 1., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15265], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.4189069`7.073662507371742, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.5132779443497854, 0.0806976878720084], 
         "Accuracy" -> Around[0.7655812459060587, 0.0730753416178205], 
         "EvaluationTime" -> 9.144309340292652*^-6, "TestSize" -> 69, 
         "ModelMemory" -> 9560, "ModelUtility" -> -0.0572037474731224, 
         "TrainingSize" -> 275, "TrainingTime" -> 0.05011872336272722, 
         "TrainingMemory" -> 400928, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.5132779443497854, 0.05706188232037255]}, 
         "AccuracyHistory" -> {
           Around[0.7655812459060587, 0.051672069595484406`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 344], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 255439085973243]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.3021054954892712`, 0.1237482678096777], "Accuracy" -> 
              Around[0.49802298153357727`, 0.038607217291195726`], 
              "EvaluationTime" -> 8.761894649196846*^-6, "TestSize" -> 334, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.9759933073649796, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 116968, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3021054954892712`, 0.08750323932831204]}, 
              "AccuracyHistory" -> {
                Around[0.49802298153357727`, 0.02729942514934703]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6275179039400873, 0.0650544460847963], "Accuracy" -> 
              Around[0.7034681420532536, 0.037868007032296556`], 
              "EvaluationTime" -> 6.994023549947847*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.247720508442682, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 154072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6275179039400873, 0.0460004399728941]}, 
              "AccuracyHistory" -> {
                Around[0.7034681420532536, 0.026776724562556763`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5132779443497854, 0.0806976878720084], "Accuracy" -> 
              Around[0.7655812459060587, 0.0730753416178205], 
              "EvaluationTime" -> 9.144309340292652*^-6, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.0572037474731224, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 400928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5132779443497854, 0.05706188232037255]}, 
              "AccuracyHistory" -> {
                Around[0.7655812459060587, 0.051672069595484406`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.144309340292652*^-6, "MeanCrossEntropy" -> 
             Around[0.5132779443497854, 0.0806976878720084], "ModelMemory" -> 
             9560, "TrainingMemory" -> 400928, "TrainingTime" -> 
             0.10250468373454305`], "Index" -> 1], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6788155670320009, 0.007506963314566045], "Accuracy" -> 
              Around[0.6543950518830325, 0.047740978020011204`], 
              "EvaluationTime" -> 0.00007126427896022372, "TestSize" -> 200, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.30800579034016184`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 157232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6788155670320009, 0.005308224665848292]}, 
              "AccuracyHistory" -> {
                Around[0.6543950518830325, 0.03375796929842784]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5969727855197536, 0.03549785717447527], "Accuracy" -> 
              Around[0.7781256159744978, 0.05935842370625901], 
              "EvaluationTime" -> 0.00007943282347242814, "TestSize" -> 100, 
              "ModelMemory" -> 97648, "ModelUtility" -> -0.1891410029957583, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 186112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5969727855197536, 0.025100775525662998`]}, 
              "AccuracyHistory" -> {
                Around[0.7781256159744978, 0.04197274392324006]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5770224063955831, 0.046134890996929426`], "Accuracy" -> 
              Around[0.7655812459060587, 0.0730753416178205], 
              "EvaluationTime" -> 0.0000726358309604742, "TestSize" -> 69, 
              "ModelMemory" -> 107440, 
              "ModelUtility" -> -0.15919455906262625`, "TrainingSize" -> 275, 
              "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
              392704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5770224063955831, 0.032622294273230996`]}, 
              "AccuracyHistory" -> {
                Around[0.7655812459060587, 0.051672069595484406`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000726358309604742, "MeanCrossEntropy" -> 
             Around[0.5770224063955831, 0.046134890996929426`], "ModelMemory" -> 
             107440, "TrainingMemory" -> 392704, "TrainingTime" -> 
             0.08264658982888212], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8165645037675867, 0.05907672974630593], "Accuracy" -> 
              Around[0.6076318350972252, 0.037889647633531934`], 
              "EvaluationTime" -> 0.00001845822964039253, "TestSize" -> 334, 
              "ModelMemory" -> 5968, "ModelUtility" -> -0.5048974139511231, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              72832, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8165645037675867, 0.04177355621393795]}, 
              "AccuracyHistory" -> {
                Around[0.6076318350972252, 0.02679202677843925]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8754875055413558, 0.10201693192662002`], "Accuracy" -> 
              Around[0.6432574796035289, 0.039590696451502594`], 
              "EvaluationTime" -> 0.000016459458908925705`, "TestSize" -> 294,
               "ModelMemory" -> 6096, "ModelUtility" -> -0.583244270025772, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 121184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8754875055413558, 0.07213686436115942]}, 
              "AccuracyHistory" -> {
                Around[0.6432574796035289, 0.027994849932755667`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.173056191859965, 0.2897097861374507], "Accuracy" -> 
              Around[0.6798669601917732, 0.0799744565206574], 
              "EvaluationTime" -> 0.00001824529582310386, "TestSize" -> 69, 
              "ModelMemory" -> 7184, "ModelUtility" -> -0.9010065145733415, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 363592, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.173056191859965, 0.2048557543538958]}, 
              "AccuracyHistory" -> {
                Around[0.6798669601917732, 0.05655048052746555]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001824529582310386, "MeanCrossEntropy" -> 
             Around[1.173056191859965, 0.2897097861374507], "ModelMemory" -> 
             7184, "TrainingMemory" -> 363592, "TrainingTime" -> 
             0.10936324099823737`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6714842803287256, 0.05733555686777019], "Accuracy" -> 
              Around[0.752918044058818, 0.03370176754573033], 
              "EvaluationTime" -> 0.000017482278201269933`, "TestSize" -> 334,
               "ModelMemory" -> 11104, 
              "ModelUtility" -> -0.31185049213509675`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              62424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6714842803287256, 0.040542361064307225`]}, 
              "AccuracyHistory" -> {
                Around[0.752918044058818, 0.023830748369558622`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5203389848941692, 0.07448935093190115], "Accuracy" -> 
              Around[0.7781256159744978, 0.05935842370625901], 
              "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
              "ModelMemory" -> 29280, "ModelUtility" -> -0.06814040700901747, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 152096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5203389848941692, 0.05267192517013177]}, 
              "AccuracyHistory" -> {
                Around[0.7781256159744978, 0.04197274392324006]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5221737710279544, 0.08123160131916368], "Accuracy" -> 
              Around[0.7655812459060587, 0.0730753416178205], 
              "EvaluationTime" -> 0.00003640415118129825, "TestSize" -> 69, 
              "ModelMemory" -> 129912, "ModelUtility" -> -0.07409357927069216,
               "TrainingSize" -> 275, "TrainingTime" -> 0.012589254117941668`,
               "TrainingMemory" -> 1471568, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5221737710279544, 0.05743941613942274]}, 
              "AccuracyHistory" -> {
                Around[0.7655812459060587, 0.051672069595484406`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003640415118129825, "MeanCrossEntropy" -> 
             Around[0.5221737710279544, 0.08123160131916368], "ModelMemory" -> 
             129912, "TrainingMemory" -> 1471568, "TrainingTime" -> 
             0.023691294771140754`], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.330568610299255, 0.5626208630189388], "Accuracy" -> 
              Around[0.6692661680186003, 0.038980468385050725`], 
              "EvaluationTime" -> 7.549706850097808*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -1.5864464841054526`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 154024, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.330568610299255, 0.3978330274777192]}, 
              "AccuracyHistory" -> {
                Around[0.6692661680186003, 0.027563353528897196`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.549706850097808*^-6, "MeanCrossEntropy" -> 
             Around[2.330568610299255, 0.5626208630189388], "ModelMemory" -> 
             9560, "TrainingMemory" -> 154024, "TrainingTime" -> 
             0.17675958372575273`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0361466055758217`, 0.1756248059193569], "Accuracy" -> 
              Around[0.6732942548235398, 0.03882663418583027], 
              "EvaluationTime" -> 9.685652657288192*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.762028038660944, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 154040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0361466055758217`, 0.12418549121014856`]}, 
              "AccuracyHistory" -> {
                Around[0.6732942548235398, 0.027454576323450004`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.685652657288192*^-6, "MeanCrossEntropy" -> 
             Around[1.0361466055758217`, 0.1756248059193569], "ModelMemory" -> 
             9560, "TrainingMemory" -> 154040, "TrainingTime" -> 
             0.17675958372575273`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6876725782994813, 0.005249988323233882], "Accuracy" -> 
              Around[0.5247520485129833, 0.03865761818502652], 
              "EvaluationTime" -> 9.639562317151964*^-6, "TestSize" -> 334, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3202649791368428, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              83808, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6876725782994813, 0.00371230234450887]}, 
              "AccuracyHistory" -> {
                Around[0.5247520485129833, 0.027335063963152648`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6879347603897993, 0.005469078701944071], "Accuracy" -> 
              Around[0.5751921712134442, 0.04081343722260635], 
              "EvaluationTime" -> 0.000011084780312225055`, "TestSize" -> 294,
               "ModelMemory" -> 9560, "ModelUtility" -> -0.32070918296305906`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 120936, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6879347603897993, 0.0038672226369875734`]}, 
              "AccuracyHistory" -> {
                Around[0.5751921712134442, 0.0288594582236364]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6857560162603653, 0.01339013356554239], "Accuracy" -> 
              Around[0.6512955316203446, 0.08157566191091703], 
              "EvaluationTime" -> 7.26358309604742*^-6, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3198459496278443, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 401168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6857560162603653, 0.009468254245188627]}, 
              "AccuracyHistory" -> {
                Around[0.6512955316203446, 0.05768270371699058]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.26358309604742*^-6, "MeanCrossEntropy" -> 
             Around[0.6857560162603653, 0.01339013356554239], "ModelMemory" -> 
             9560, "TrainingMemory" -> 401168, "TrainingTime" -> 
             0.029825573025695384`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.681281058347769, 0.0069774539182010376`], "Accuracy" -> 
              Around[0.5851739712823982, 0.04070657475868426], 
              "EvaluationTime" -> 7.549706850097808*^-6, "TestSize" -> 294, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3114476081377805, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 139336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.681281058347769, 0.004933804980976599]}, 
              "AccuracyHistory" -> {
                Around[0.5851739712823982, 0.028783895050742785`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6534958076104089, 0.017500849058163907`], "Accuracy" -> 
              Around[0.7227241030489159, 0.07694438094025212], 
              "EvaluationTime" -> 7.26358309604742*^-6, "TestSize" -> 69, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.27310433001900847`, 
              "TrainingSize" -> 275, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 400928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6534958076104089, 0.012374969045549902`]}, 
              "AccuracyHistory" -> {
                Around[0.7227241030489159, 0.05440789353705321]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.26358309604742*^-6, "MeanCrossEntropy" -> 
             Around[0.6534958076104089, 0.017500849058163907`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 400928, "TrainingTime" -> 
             0.05950984188052233], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NearestNeighbors", 
             "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 255434791005947]], "MaxTrainingSize" -> 344, 
      "PreprocessorEvaluationTime" -> 6.817138671875`2.*^-6, 
      "PreprocessorMemory" -> 138696, "InputDimension" -> 55, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.5264686513833823,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341385892755`17.332191023055273*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.19599999999999995`, 
          "ElapsedTimes" -> 0.18848139999999997`, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.2658041, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 275, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.37000260000000007`, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 255447675907835]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0022172692920120734`}, "ID" -> 6458471603628608519],
          "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0012222913876237273`}, "ID" -> 1669411963928747566],
          "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.004757974387828547}, "ID" -> 571007978085106219], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3301225644397969766], "f5" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1627286388716470066], "f6" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           863265051554049311], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           792782157604528341], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4188631324846250243], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4573995174858448067], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3174181404421711140], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5872748097837050802], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           486075215780787657], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1201643126642362428], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1510189973632122294], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1282498020676883565], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4015727984881221468], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3795575780526924440], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8864474725238387765], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4827167690728175245], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5502878804869111055], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           432747620848192464], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1887552209389442363], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4192872400477247022], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8744225814318152849], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1422589428440738745], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4356011208032598848], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           265629100345320905], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8370485031529138787], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6046319283041149943], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5457070424414127917], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1655314129011637935], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2918830754898895796], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4163558495538993839], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2309933404652446704], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6070770438133557608], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4117227122333106477], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4749246210643629690], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3784991886627000012], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5645735733551865850], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6821071064402682034], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3075335947645711176], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5047880791107632188], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5675721095993277446], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2789004891177384037], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6412845040144605655], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5885846823797964547], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5382600120912776767], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3547173587179042432], "f49" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8164102712227082230], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2591334218504539546], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3225176862192601908], "f52" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7357538158515357571], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4535368377511714368], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5287537313484787266], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7158237000719490470]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.4989956, 
      "MaxTrainingMemory" -> 2552792, "DataMemory" -> 2906720, 
      "FunctionMemory" -> 402448, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 19.0129981`9.031625542136158}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7921920488876305`*^9, 3.7928446424740524`*^9, 
  3.794304622466403*^9, 3.7943048229488506`*^9, 3.794315078076743*^9, 
  3.794350084225629*^9, 3.794603798605481*^9, 3.7948649590886836`*^9, 
  3.7953466987498894`*^9, 3.795376327480667*^9, 3.795377417828821*^9, 
  3.7959513267251234`*^9, 3.7977278682838025`*^9, 3.797728941656096*^9, 
  3.7977679992104015`*^9, 3.7977733599766235`*^9, 3.79777688743375*^9, 
  3.797777388724059*^9, 3.7977781559389315`*^9, 3.7977788989454813`*^9, 
  3.7977860036261525`*^9, 3.797797554430435*^9, 3.7978055438863783`*^9, 
  3.7985481549147043`*^9, 3.798548539103756*^9},
 CellLabel->
  "Out[160]=",ExpressionUUID->"d489e2af-c8b5-4272-9bd1-4a2283f2034a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cmclassRedpHMaccs", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classRedpHMaccs", ",", 
     RowBox[{"mLmaccsRedpH", "@", "allDataMACCsTest"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921920496347427`*^9, 3.7921920680614777`*^9}, {
  3.795377420629332*^9, 3.7953774341950707`*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"679008c4-2b15-41c5-8a83-de35952cd1f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassRedpHMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921920699866414`*^9, 3.7921920744312143`*^9}, {
  3.7953774372658577`*^9, 3.7953774391617904`*^9}},
 CellLabel->
  "In[162]:=",ExpressionUUID->"b95a00ec-d28a-4907-9073-f65b1c81ffdf"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.7790697674418605`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.05263157894736842`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.9850746268656716`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.10379403480387761`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.10379403480387761`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.05263157894736842`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.9850746268656716`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.9850746268656716`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.05263157894736842`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.5993715632364494`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.5993715632364494`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.09523809523809523`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8741721854304636`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.792192074706396*^9, 3.7928446427096233`*^9, 
  3.794304622621987*^9, 3.7943048232889385`*^9, 3.7943150783069468`*^9, 
  3.794350084495327*^9, 3.794603798827414*^9, 3.794864959338625*^9, 
  3.795346698880541*^9, 3.795376327761913*^9, 3.7953774396494856`*^9, 
  3.7959513270129595`*^9, 3.7977278684999466`*^9, 3.7977289419412622`*^9, 
  3.7977679993500276`*^9, 3.7977733601328754`*^9, 3.797776887543486*^9, 
  3.797777389036484*^9, 3.7977781561732545`*^9, 3.797778899187872*^9, 
  3.7977860038917203`*^9, 3.7977975548134103`*^9, 3.7978055441656313`*^9, 
  3.7985481551540723`*^9, 3.798548539346781*^9},
 CellLabel->
  "Out[162]//TableForm=",ExpressionUUID->"50da026b-4b4f-421d-9793-\
e80799d20c5d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "trained", " ", "on", " ", "high", " ", "KS", " ", "columns", " ", "and", 
    " ", "pH", " ", "and", " ", "maccs"}], " ", "-", " ", 
   RowBox[{"lanthanum", " ", "only"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7921920931247544`*^9, 3.7921921025818725`*^9}},
 CellLabel->
  "In[163]:=",ExpressionUUID->"1879d912-ad55-4f40-b569-6cc3f3f1d007"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classLaRedpHMaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccsRedpH", "@", "laDataMaccsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921921056171227`*^9, 3.7921921481694827`*^9}, {
  3.795377446510145*^9, 3.795377462126397*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"e53f9bdb-3405-4695-9a67-e72cb78bd629"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "55", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Boolean", "Boolean", "Numerical", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Numerical", "Boolean",
                     "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "55", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Boolean", "Boolean", "Numerical", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Numerical", "Boolean",
                     "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["114", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 114, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Numerical"], "maccs65" -> 
           Association["Type" -> "Numerical"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Numerical"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Numerical"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Numerical"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Numerical"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Numerical"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Numerical"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                  "Amine Mole Fraction", "pH", "maccs53", "maccs54", 
                  "maccs62", "maccs65", "maccs74", "maccs79", "maccs80", 
                  "maccs82", "maccs83", "maccs84", "maccs85", "maccs86", 
                  "maccs90", "maccs91", "maccs93", "maccs96", "maccs98", 
                  "maccs100", "maccs103", "maccs104", "maccs105", "maccs108", 
                  "maccs111", "maccs115", "maccs116", "maccs118", "maccs120", 
                  "maccs121", "maccs122", "maccs128", "maccs129", "maccs131", 
                  "maccs133", "maccs134", "maccs137", "maccs138", "maccs141", 
                  "maccs145", "maccs147", "maccs148", "maccs149", "maccs151", 
                  "maccs153", "maccs155", "maccs156", "maccs158", "maccs160", 
                  "maccs162", "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 55]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Boolean", "Boolean", "Numerical", "Numerical", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f7f8f22f27f40f47f50f52)(\
f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f35\
f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f7f8f22f27f40f47f50f52)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 12]], 
             "Version" -> {12.1, 0}, "ID" -> 86754267509005245]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f7f8f22f27f40f47f50f52)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 12]], 
             "Mean" -> {0.0027412486734471114`, 0.001293490473503618, 
              0.00551591410082522, 2.6491228070175437`, 0., 0., 1., 1., 1., 
              1., 1., 0.}, 
             "StandardDeviation" -> {0.0008229396922519346, 
              0.00039731195105714153`, 0.001842462714156329, 
              1.6542473570333343`, 1., 1., 1., 1., 1., 1., 1., 1.}, 
             "Version" -> {12.1, 0}, "ID" -> 2898652024007351005, "Output" -> 
             Association[
              "(f1f2f3f4f7f8f22f27f40f47f50f52)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 12]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f5" -> Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f3\
0f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 2854658222146724897]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f3\
0f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 6699439370305955586, "Output" -> 
             Association[
              "(f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f3\
0f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f3\
0f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 43]], 
             "Version" -> {12.1, 0}, "ID" -> 2112276535128727166, "Output" -> 
             Association[
              "(f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f3\
0f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 43]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f7f8f22f27f40f47f50f52)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 12], 
               "(f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f\
30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 43]], 
             "Spans" -> {
               Span[1, 12], 
               Span[13, 55]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f7f8f22f27f40f47f50f52)(\
f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f35\
f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwZ4CBD/aj9NCiAbRTQvs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 4212541820543279766]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f7f8f22f27f40f47f50f52)(\
f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f35\
f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwZ4CBD/aj9NCiAbRTQvs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 114, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KFe9o+SZ06btP0m+Od8o6rNoZzj5aIXd64JyDOuZL3
6VIbBgoBxLyT9hrrQTbdsvdJB4lss78cCWI9tYfJH6xl+S5457l9gTyItdEe
yHEvkH9oXwcSdr9gD+IdrH0CF4e476k9mDI9AtcndSobaNUdKP+gPdhaqVf2
oWBwFOqOXfbpEIvhNMj3/Q/e2SdZdb/UWXbZ/jdEAG4/RPyxPVDMrun3C7i5
MHtgNEwfzJ8we2Hmw8wDG7f5BNycT2CHP4TquwZ3F8w/MHNh9gAA3NO+JA==

                    "], "Method" -> "Naive", "VectorLength" -> 55, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KFe9o+SZ06btP0m+Od8o6rNoZzj5aIXd64JyDOuZL3
6VIbBgoBxLyT9hrrQTbdsvdJB4lss78cCWI9tYfJH6xl+S5457l9gTyItdEe
yHEvkH9oXwcSdr9gD+IdrH0CF4e476k9mDI9AtcndSobaNUdKP+gPdhaqVf2
oWBwFOqOXfbpEIvhNMj3/Q/e2SdZdb/UWXbZ/jdEAG4/RPyxPVDMrun3C7i5
MHtgNEwfzJ8we2Hmw8wDG7f5BNycT2CHP4TquwZ3F8w/MHNh9gAA3NO+JA==

                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+L/YPDe/gOUZmYAgQ/2P6F8BiifXDp0iYoX//qb9pKO
Sha2M+/bazLfu39O6pL9FU1+A63vd+HyKi0WiTX3b9unzJ/jox15wV5pWujF
s6/vw8VnTTSTWLLtHlz8zdSH/kf237V/OO9wr0/Ydbg+obR9ArWX7tuvTF+X
+8/qmv3ig9PNos7fsDd1Kz3/5eZ1e5fpX43ll1y2X30vw73a/S6cPqxy+klM
73H7xryYz1atd+0zW/KWffmFsL/CweCNhMZ9+6Jm0VOW1bfg5sLsgdEwfTB/
wuyFmQ8zT91kR9lRx5twc4Sh7r62hvWmTvc9uLtg/oGZC7MHAC5o0fQ=
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 55, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 55]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 12]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
vv0dVgxBPA==
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KFe9o+SZ06btP0m+Od8o6rNoZzj5aIXd64JyDOuZL3
6VIbBgoBxLyT9hrrQTbdsvdJB4lss78cCWI9tYfJH6xl+S5457l9gTyItdEe
yHEvkH9oXwcSdr9gD+IdrH0CF4e476k9mDI9AtcndSobaNUdKP+gPdhaqVf2
oWBwFOqOXfbpEIvhNMj3/Q/e2SdZdb/UWXbZ/jdEAG4/RPyxPVDMrun3C7i5
MHtgNEwfzJ8we2Hmw8wDG7f5BNycT2CHP4TquwZ3F8w/MHNh9gAA3NO+JA==

                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+L/YPDe/gOUZmYAgQ/2P6F8BiifXDp0iYoX//qb9pKO
Sha2M+/bazLfu39O6pL9FU1+A63vd+HyKi0WiTX3b9unzJ/jox15wV5pWujF
s6/vw8VnTTSTWLLtHlz8zdSH/kf237V/OO9wr0/Ydbg+obR9ArWX7tuvTF+X
+8/qmv3ig9PNos7fsDd1Kz3/5eZ1e5fpX43ll1y2X30vw73a/S6cPqxy+klM
73H7xryYz1atd+0zW/KWffmFsL/CweCNhMZ9+6Jm0VOW1bfg5sLsgdEwfTB/
wuyFmQ8zT91kR9lRx5twc4Sh7r62hvWmTvc9uLtg/oGZC7MHAC5o0fQ=
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 12, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0176885, "MaxTrainingMemory" -> 205504, 
                  "DataMemory" -> 51312, "FunctionMemory" -> 31672, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 19.5508751`9.043741138587718}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 55, "Output" -> 
             Association[
              "((f1f2f3f4f7f8f22f27f40f47f50f52)(\
f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f35\
f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             4311599882817908201]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f7f8f22f27f40f47f50f52)(\
f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f35\
f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KFe9o+SZ06btP0m+Od8o6rNoZzj5aIXd64JyDOuZL3
6VIbBgoBxLyT9hrrQTbdsvdJB4lss78cCWI9tYfJH6xl+S5457l9gTyItdEe
yHEvkH9oXwcSdr9gD+IdrH0CF4e476k9mDI9AtcndSobaNUdKP+gPdhaqVf2
oWBwFOqOXfbpEIvhNMj3/Q/e2SdZdb/UWXbZ/jdEAG4/RPyxPVDMrun3C7i5
MHtgNEwfzJ8we2Hmw8wDG7f5BNycT2CHP4TquwZ3F8w/MHNh9gAA3NO+JA==

              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+L/YPDe/gOUZmYAgQ/2P6F8BiifXDp0iYoX//qb9pKO
Sha2M+/bazLfu39O6pL9FU1+A63vd+HyKi0WiTX3b9unzJ/jox15wV5pWujF
s6/vw8VnTTSTWLLtHlz8zdSH/kf237V/OO9wr0/Ydbg+obR9ArWX7tuvTF+X
+8/qmv3ig9PNos7fsDd1Kz3/5eZ1e5fpX43ll1y2X30vw73a/S6cPqxy+klM
73H7xryYz1atd+0zW/KWffmFsL/CweCNhMZ9+6Jm0VOW1bfg5sLsgdEwfTB/
wuyFmQ8zT91kR9lRx5twc4Sh7r62hvWmTvc9uLtg/oGZC7MHAC5o0fQ=
              "], "Output" -> 
             Association[
              "((f1f2f3f4f7f8f22f27f40f47f50f52)(\
f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f35\
f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Version" -> {12.1, 0}, "ID" -> 6868992361573323688]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 620099645158081789]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 4670643775065767920, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 3141892401787472791]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.25862068965517243`, True -> 0.7413793103448276]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{0.5864441990852356, 
             0.26533234119415283`, -0.19947467744350433`, \
-0.6905236840248108, -0.003977026790380478, 
             0.03314223140478134, -0.0007213761564344168, 
             0.025742219761013985`, -0.017340755090117455`, \
-0.0023188311606645584`, -0.004873647354543209, -0.045387208461761475`, 
             0.034952808171510696`, 0.044189970940351486`, 0.2658986449241638,
              0.055646445602178574`, -0.0299037117511034, \
-0.04111837223172188, 0.09613391757011414, 0.41627463698387146`, 
             0.06813092529773712, 0.23659659922122955`, 0.33994466066360474`, 
             0.7541923522949219, -0.0012561375042423606`, 
             0.13036343455314636`, 
             0.0492783784866333, -0.06175564229488373, -0.327378511428833, \
-0.1352051943540573, 0.1692008525133133, 0.14787794649600983`, 
             0.12885332107543945`, -0.08087556064128876, \
-0.45820382237434387`, 0.06671668589115143, 
             0.11019284278154373`, -0.5051068663597107, 
             0.9057321548461914, -0.2636469602584839, -0.1670089215040207, \
-0.14239506423473358`, 0.14865808188915253`, 
             0.26722484827041626`, -0.09207820892333984, \
-0.006254861131310463, 
             0.07407233864068985, -0.014860199764370918`, \
-0.31698498129844666`, 0.46357813477516174`, 0.5791382789611816, 
             0.13452085852622986`, 0.14565502107143402`, 
             0.09545913338661194, -0.057473909109830856`}}], "Biases" -> 
           RawArray["Real32",{-1.6776667833328247`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 55, 
           "$InputDimensions" -> {55}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{55}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.4", "Unstable" -> False]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 55., "Type" -> "NumericalVector"], 
         "Key" -> 
         "((f1f2f3f4f7f8f22f27f40f47f50f52)(\
f5f6f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f35\
f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Method" -> "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 1., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15313], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.3146727`6.949404060039168, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.5002173273654997, 0.1164536586578023], 
         "Accuracy" -> Around[0.7735256707329065, 0.12804441491888538`], 
         "EvaluationTime" -> 0.000034536010205403535`, "TestSize" -> 23, 
         "ModelMemory" -> 9560, "ModelUtility" -> -0.045978655455865325`, 
         "TrainingSize" -> 91, "TrainingTime" -> 0.03981071705534971, 
         "TrainingMemory" -> 192096, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.5002173273654997, 0.0823451717309155]}, "AccuracyHistory" -> {
           Around[0.7735256707329065, 0.09054107408220778]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 114], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 50148239159037]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.5354363970292795`, 1.4829685294350956`], "Accuracy" -> 
              Around[0.7256461609758977, 0.06385255540247138], 
              "EvaluationTime" -> 0.0004021284551045426, "TestSize" -> 99, 
              "ModelMemory" -> 54288, "ModelUtility" -> -2.2684589817628944`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 170200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.5354363970292795`, 1.0486171034497982`]}, 
              "AccuracyHistory" -> {
                Around[0.7256461609758977, 0.04515057492117723]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0004021284551045426, "MeanCrossEntropy" -> 
             Around[4.5354363970292795`, 1.4829685294350956`], "ModelMemory" -> 
             54288, "TrainingMemory" -> 170200, "TrainingTime" -> 
             0.053754369634305], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6893882755552494, 0.00893547607493553], "Accuracy" -> 
              Around[0.7456461609758979, 0.062390960103567566`], 
              "EvaluationTime" -> 0.000016009022146071847`, "TestSize" -> 99, 
              "ModelMemory" -> 20720, "ModelUtility" -> -0.32382239476977814`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 69152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6893882755552494, 0.006318335725717068]}, 
              "AccuracyHistory" -> {
                Around[0.7456461609758979, 0.04411707097397197]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5926853915386165, 0.19830856219406748`], "Accuracy" -> 
              Around[0.7318590040662397, 0.13418458989243845`], 
              "EvaluationTime" -> 0.00021790749288142256`, "TestSize" -> 23, 
              "ModelMemory" -> 119376, 
              "ModelUtility" -> -0.23489044105702162`, "TrainingSize" -> 91, 
              "TrainingTime" -> 0.1, "TrainingMemory" -> 366832, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5926853915386165, 0.1402253290947793]}, 
              "AccuracyHistory" -> {
                Around[0.7318590040662397, 0.0948828334436791]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00021790749288142256`, "MeanCrossEntropy" -> 
             Around[0.5926853915386165, 0.19830856219406748`], "ModelMemory" -> 
             119376, "TrainingMemory" -> 366832, "TrainingTime" -> 
             0.12984893192461114`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8999206300663677, 0.1382861432485061], "Accuracy" -> 
              Around[0.5656461609758974, 0.07054987074170593], 
              "EvaluationTime" -> 0.000016009022146071847`, "TestSize" -> 99, 
              "ModelMemory" -> 5968, "ModelUtility" -> -0.6180021114291231, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 77480, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8999206300663677, 0.09778306963515296]}, 
              "AccuracyHistory" -> {
                Around[0.5656461609758974, 0.04988629201329467]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9403893051335955, 0.3873908911761679], "Accuracy" -> 
              Around[0.690192337399573, 0.13901900692147195`], 
              "EvaluationTime" -> 0.000034536010205403535`, "TestSize" -> 23, 
              "ModelMemory" -> 6160, "ModelUtility" -> -0.7108904541229475, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 160808, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9403893051335955, 0.2739267261205682]}, 
              "AccuracyHistory" -> {
                Around[0.690192337399573, 0.0983012825079924]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000034536010205403535`, "MeanCrossEntropy" -> 
             Around[0.9403893051335955, 0.3873908911761679], "ModelMemory" -> 
             6160, "TrainingMemory" -> 160808, "TrainingTime" -> 
             0.026011064741299505`], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6555576615445591, 0.01362349874506061], "Accuracy" -> 
              Around[0.7456461609758979, 0.062390960103567566`], 
              "EvaluationTime" -> 0.000050624973093663836`, "TestSize" -> 99, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.2750806918647062, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 160512, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6555576615445591, 0.009633268346118776]}, 
              "AccuracyHistory" -> {
                Around[0.7456461609758979, 0.04411707097397197]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6030818938831477, 0.05191207314999902], "Accuracy" -> 
              Around[0.7318590040662397, 0.13418458989243845`], 
              "EvaluationTime" -> 0.00021790749288142256`, "TestSize" -> 23, 
              "ModelMemory" -> 98032, "ModelUtility" -> -0.204569098608132, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 219192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6030818938831477, 0.036707378949816405`]}, 
              "AccuracyHistory" -> {
                Around[0.7318590040662397, 0.0948828334436791]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00021790749288142256`, "MeanCrossEntropy" -> 
             Around[0.6030818938831477, 0.05191207314999902], "ModelMemory" -> 
             98032, "TrainingMemory" -> 219192, "TrainingTime" -> 
             0.030200681619064636`], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7656005412198684, 0.10666578109554326`], "Accuracy" -> 
              Around[0.5956461609758973, 0.0699035683531273], 
              "EvaluationTime" -> 0.000012716418300951175`, "TestSize" -> 99, 
              "ModelMemory" -> 13408, "ModelUtility" -> -0.4535711023805522, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 74136, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7656005412198684, 0.07542409713321847]}, 
              "AccuracyHistory" -> {
                Around[0.5956461609758973, 0.04942928721163366]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5503811057547818, 0.13909894486788538`], "Accuracy" -> 
              Around[0.7735256707329065, 0.12804441491888538`], 
              "EvaluationTime" -> 0.00004347826086956522, "TestSize" -> 23, 
              "ModelMemory" -> 48800, "ModelUtility" -> -0.14535675285325067`,
               "TrainingSize" -> 91, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 336464, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5503811057547818, 0.09835780717197545]}, 
              "AccuracyHistory" -> {
                Around[0.7735256707329065, 0.09054107408220778]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004347826086956522, "MeanCrossEntropy" -> 
             Around[0.5503811057547818, 0.13909894486788538`], "ModelMemory" -> 
             48800, "TrainingMemory" -> 336464, "TrainingTime" -> 
             0.014067214212129527`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1640772102204675`, 0.22112540513905882`], "Accuracy" -> 
              Around[0.6656461609758973, 0.06734017833186834], 
              "EvaluationTime" -> 0.000010101010101010101`, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.8823977944722484, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 121448, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1640772102204675`, 0.15635927346645112`]}, 
              "AccuracyHistory" -> {
                Around[0.6656461609758973, 0.04761669674477551]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5002173273654997, 0.1164536586578023], "Accuracy" -> 
              Around[0.7735256707329065, 0.12804441491888538`], 
              "EvaluationTime" -> 0.000034536010205403535`, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.045978655455865325`,
               "TrainingSize" -> 91, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 192096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5002173273654997, 0.0823451717309155]}, 
              "AccuracyHistory" -> {
                Around[0.7735256707329065, 0.09054107408220778]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000034536010205403535`, "MeanCrossEntropy" -> 
             Around[0.5002173273654997, 0.1164536586578023], "ModelMemory" -> 
             9560, "TrainingMemory" -> 192096, "TrainingTime" -> 
             0.07700699404478246], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6865543952056409, 0.01078331020164814], "Accuracy" -> 
              Around[0.5156461609758974, 0.07105333618925443], 
              "EvaluationTime" -> 0.000010101010101010101`, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.32024802384793827`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 98744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6865543952056409, 0.007624951767223477]}, 
              "AccuracyHistory" -> {
                Around[0.5156461609758974, 0.050242295845349325`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6738925862343202, 0.03998374833245373], "Accuracy" -> 
              Around[0.6068590040662396, 0.1452576640715988], 
              "EvaluationTime" -> 0.000027432928020877956`, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3102936041170843, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 179728, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6738925862343202, 0.02827277958313434]}, 
              "AccuracyHistory" -> {
                Around[0.6068590040662396, 0.10271267928434503`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000027432928020877956`, "MeanCrossEntropy" -> 
             Around[0.6738925862343202, 0.03998374833245373], "ModelMemory" -> 
             9560, "TrainingMemory" -> 179728, "TrainingTime" -> 
             0.03859492231525635], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.5289018229037863`, 0.7407518569071824], "Accuracy" -> 
              Around[0.6656461609758973, 0.06734017833186834], 
              "EvaluationTime" -> 8.02351752246749*^-6, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -1.9952928801075642`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 121576, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.5289018229037863`, 0.5237906611955957]}, 
              "AccuracyHistory" -> {
                Around[0.6656461609758973, 0.04761669674477551]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.02351752246749*^-6, "MeanCrossEntropy" -> 
             Around[3.5289018229037863`, 0.7407518569071824], "ModelMemory" -> 
             9560, "TrainingMemory" -> 121576, "TrainingTime" -> 
             0.06767274192760331], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6881050135292303, 0.038558850373204], "Accuracy" -> 
              Around[0.5256461609758974, 0.07100928192308983], 
              "EvaluationTime" -> 0.000012716418300951175`, "TestSize" -> 99, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.330512592530124, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 121272, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6881050135292303, 0.027265224573649986`]}, 
              "AccuracyHistory" -> {
                Around[0.5256461609758974, 0.05021114477500414]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6295324796471423, 0.06554503729689466], "Accuracy" -> 
              Around[0.6485256707329063, 0.14268045610528018`], 
              "EvaluationTime" -> 0.00005473588746931157, "TestSize" -> 23, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.25101325673920627`, 
              "TrainingSize" -> 91, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 192168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6295324796471423, 0.04634734034575939]}, 
              "AccuracyHistory" -> {
                Around[0.6485256707329063, 0.10089031805483314`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005473588746931157, "MeanCrossEntropy" -> 
             Around[0.6295324796471423, 0.06554503729689466], "ModelMemory" -> 
             9560, "TrainingMemory" -> 192168, "TrainingTime" -> 
             0.07050308175819447], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 50143944191741]], "MaxTrainingSize" -> 114, 
      "PreprocessorEvaluationTime" -> 6.932275390625`2.*^-6, 
      "PreprocessorMemory" -> 137704, "InputDimension" -> 55, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.5716092520747583,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341403915704`17.33219102326133*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
          0.26728810000000003`, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 91, "TimeBudgets" -> 0.39999999999999997`, 
          "ElapsedTimes" -> 0.3889624, "ExperimentCounts" -> 7]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 50156829093629]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0032721757224998664`}, "ID" -> 4320974050493114959],
          "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0011961765849286049`}, "ID" -> 315661506761656104], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0056551150274660915`}, "ID" -> 4609396093183805747],
          "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3}, "ID" -> 
           7888368477895926768], "f5" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5346155557091875260], "f6" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1262337938308826583], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8820429014208658305], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2830026427724412347], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3065081949069868795], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5952194722661206634], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4172377243062797276], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2254453161829243277], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           417184411674810962], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4954205544333763648], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8393142517673332977], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2368135820070429490], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4554038105226310238], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8564651345156656521], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7118169994420534225], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           685428322961758535], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1180870158250527878], "f22" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8308904938442281859], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4435869279503404840], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3830096988561467597], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6131165527094671781], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4200099109053498134], "f27" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2389001383860909557], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8421754851285438811], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2619911442566100223], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           272508841316359729], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5989163223125915559], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5023831084100741178], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7254670121457779111], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2803790281412067686], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2253028538090021358], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8397340437921861161], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5446665757225766772], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7863093911416874018], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1316854479138420980], "f40" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8653960014761669852], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6500335968749947662], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1771674503716709970], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6665570373315487216], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2734552590389718265], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9193351121365258527], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7886495976057884603], "f47" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1222175066655414199], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3800845768307102070], "f49" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3230373167919047936], "f50" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4586859744615402324], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8676025994051584186], "f52" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           261622186732691771], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5251244623107586582], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           989007788963465036], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6560666033651434576]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1586732, 
      "MaxTrainingMemory" -> 1121608, "DataMemory" -> 963584, 
      "FunctionMemory" -> 396696, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 20.5777206`9.065972200775931}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.792192153727916*^9, 3.7928446442443175`*^9, 
  3.794304622727006*^9, 3.79430482484888*^9, 3.794315079548808*^9, 
  3.7943500857790866`*^9, 3.794603800159668*^9, 3.794864960853894*^9, 
  3.7953466989713373`*^9, 3.7953763292718763`*^9, 3.7953774642567034`*^9, 
  3.7959513285484915`*^9, 3.7977278698343725`*^9, 3.7977289439464245`*^9, 
  3.79776799944178*^9, 3.7977733602265973`*^9, 3.7977768875913277`*^9, 
  3.797777390567373*^9, 3.797778157425544*^9, 3.797778900858074*^9, 
  3.797786005633334*^9, 3.797797557703573*^9, 3.797805545435236*^9, 
  3.798548157083352*^9, 3.79854854067446*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"2cf80c61-75da-419a-afe6-418c83c6f8a5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cmclassLaRedpHMaccs", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classLaRedpHMaccs", ",", 
     RowBox[{"mLmaccsRedpH", "@", "laDataMaccsTest"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921921574015813`*^9, 3.792192185603529*^9}, {
  3.7953774695286117`*^9, 3.7953774897715273`*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"295a3d40-adef-4de1-b28c-93035120347b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassLaRedpHMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921921875364647`*^9, 3.792192193334835*^9}, {
  3.795377492869212*^9, 3.7953774953655415`*^9}},
 CellLabel->
  "In[166]:=",ExpressionUUID->"6ef1303e-530e-4d63-bb47-714f2a8c4960"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.7142857142857143`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.45454545454545453`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8823529411764706`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.3799802978286742`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.3799802978286742`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.45454545454545453`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8823529411764706`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.8823529411764706`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.45454545454545453`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.7967914438502673`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.7967914438502673`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.5555555555555556`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.7894736842105263`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.792192193857645*^9, 3.792844644478672*^9, 
  3.7943046229000626`*^9, 3.794304825146081*^9, 3.794315079739483*^9, 
  3.794350086054635*^9, 3.794603800373745*^9, 3.7948649610882473`*^9, 
  3.795346699106964*^9, 3.795376329500266*^9, 3.7953774958312936`*^9, 
  3.795951328981355*^9, 3.7977278700192394`*^9, 3.7977289442627983`*^9, 
  3.797767999600358*^9, 3.797773360397606*^9, 3.7977768876691184`*^9, 
  3.797777390879834*^9, 3.79777815762862*^9, 3.7977789010924225`*^9, 
  3.7977860060709534`*^9, 3.7977975581861577`*^9, 3.797805545671606*^9, 
  3.7985481574454794`*^9, 3.798548540884899*^9},
 CellLabel->
  "Out[166]//TableForm=",ExpressionUUID->"5ba578a7-cca7-4b97-8821-\
58c2fd16843e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", "er", " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7946055569331408`*^9, 3.794605558693112*^9}},
 CellLabel->
  "In[167]:=",ExpressionUUID->"4f69c207-82a2-4927-8d7e-0702bed261df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classErRedpHMaccs", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccsRedpH", "@", "erDataMaccsTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794605324722955*^9, 3.7946053860154347`*^9}, {
  3.7946055650174136`*^9, 3.7946055716180778`*^9}, {3.7953775037092333`*^9, 
  3.795377515305234*^9}},
 CellLabel->
  "In[168]:=",ExpressionUUID->"9b56ffe6-8b6c-4ab3-be6b-7d03c6619c55"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "55", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Numerical", "Boolean", "Boolean",
                     "Boolean"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "55", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Numerical", "Boolean", "Boolean",
                     "Boolean"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["110", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Boolean"], "maccs65" -> 
           Association["Type" -> "Numerical"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Numerical"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Numerical"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Numerical"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Numerical"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Numerical"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Numerical"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                  "Amine Mole Fraction", "pH", "maccs53", "maccs54", 
                  "maccs62", "maccs65", "maccs74", "maccs79", "maccs80", 
                  "maccs82", "maccs83", "maccs84", "maccs85", "maccs86", 
                  "maccs90", "maccs91", "maccs93", "maccs96", "maccs98", 
                  "maccs100", "maccs103", "maccs104", "maccs105", "maccs108", 
                  "maccs111", "maccs115", "maccs116", "maccs118", "maccs120", 
                  "maccs121", "maccs122", "maccs128", "maccs129", "maccs131", 
                  "maccs133", "maccs134", "maccs137", "maccs138", "maccs141", 
                  "maccs145", "maccs147", "maccs148", "maccs149", "maccs151", 
                  "maccs153", "maccs155", "maccs156", "maccs158", "maccs160", 
                  "maccs162", "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 55]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f8f22f27f40f47f50f52)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]], 
             "Version" -> {12.1, 0}, "ID" -> 960346187694465589]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f8f22f27f40f47f50f52)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]], 
             "Mean" -> {0.0027125744939508526`, 0.0013702662912860152`, 
              0.005885270631865775, 2.436363636363636, 0., 1., 1., 1., 1., 1.,
               0.}, "StandardDeviation" -> {0.0008922678396605211, 
              0.0011033857541175838`, 0.0028718051216307847`, 
              1.8267072847427503`, 1., 1., 1., 1., 1., 1., 1.}, 
             "Version" -> {12.1, 0}, "ID" -> 1231413797954113814, "Output" -> 
             Association[
              "(f1f2f3f4f8f22f27f40f47f50f52)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f5" -> Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29\
f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 4564840229512339459]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29\
f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 7149190942226526055, "Output" -> 
             Association[
              "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29\
f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29\
f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 44]], 
             "Version" -> {12.1, 0}, "ID" -> 8005434184480095585, "Output" -> 
             Association[
              "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29\
f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 44]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f8f22f27f40f47f50f52)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11], 
               "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f2\
9f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 44]], 
             "Spans" -> {
               Span[1, 11], 
               Span[12, 55]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwZ4CBD/aj9NCiAbRTQvs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 937431574279929552]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwZ4CBD/aj9NCiAbRTQvs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 110, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KLruKxJRev2Ox6sahbb1fHHgh9xIbz0xQFf85VNgxk
ghKwwQft27fmR/xue2o/T+iJpuO8SfZuIOtcl0Pp5/YwdY5gBe+g6jbZG4PB
Y/u30tf2Jb5dbQ9WLn7XfiYY3LQHc2OfQOV3w/VBzL0O56Oa22QP9tanLVDz
zsJpkCnS12DqLkHNvQ23H8ZfzlLpNWH5Ewz3wmiYOpg/YfbCzIeZBxE/BDcH
5p/7G77xZt+/AHcXzD8wc2H2AADMjrtl
                    "], "Method" -> "Naive", "VectorLength" -> 55, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KLruKxJRev2Ox6sahbb1fHHgh9xIbz0xQFf85VNgxk
ghKwwQft27fmR/xue2o/T+iJpuO8SfZuIOtcl0Pp5/YwdY5gBe+g6jbZG4PB
Y/u30tf2Jb5dbQ9WLn7XfiYY3LQHc2OfQOV3w/VBzL0O56Oa22QP9tanLVDz
zsJpkCnS12DqLkHNvQ23H8ZfzlLpNWH5Ewz3wmiYOpg/YfbCzIeZBxE/BDcH
5p/7G77xZt+/AHcXzD8wc2H2AADMjrtl
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Jb/0HgvT0TAwh8sP8B5f+H0gxQcVLpqKOn/CZ+u2r/
YPbPmyvZ79k7rC2fISp10L6mM+V458pT9qJlx1eca7gDV5c1ZTJjgOBZe+vq
R5t3z7tg75Vx+01N1H37DKi4GEedlMi9+3DxkMZ994tP3rMvnd995/Dny3B9
MHEYH2ZuXpWNoKrPDnvFW/Fxy7ou2ocW7brMfekWnD5wYjPj56/Hofbdte94
fKwkcS/Cfhjf5F7Pks1z72G4F0bD1MH8CbMX1fyz9l+i29cETrgGNwfm7i8r
3h+5Y3QH7i6YOMxcmD0AzOjakg==
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 55, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 55]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 13]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KLruKxJRev2Ox6sahbb1fHHgh9xIbz0xQFf85VNgxk
ghKwwQft27fmR/xue2o/T+iJpuO8SfZuIOtcl0Pp5/YwdY5gBe+g6jbZG4PB
Y/u30tf2Jb5dbQ9WLn7XfiYY3LQHc2OfQOV3w/VBzL0O56Oa22QP9tanLVDz
zsJpkCnS12DqLkHNvQ23H8ZfzlLpNWH5Ewz3wmiYOpg/YfbCzIeZBxE/BDcH
5p/7G77xZt+/AHcXzD8wc2H2AADMjrtl
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Jb/0HgvT0TAwh8sP8B5f+H0gxQcVLpqKOn/CZ+u2r/
YPbPmyvZ79k7rC2fISp10L6mM+V458pT9qJlx1eca7gDV5c1ZTJjgOBZe+vq
R5t3z7tg75Vx+01N1H37DKi4GEedlMi9+3DxkMZ994tP3rMvnd995/Dny3B9
MHEYH2ZuXpWNoKrPDnvFW/Fxy7ou2ocW7brMfekWnD5wYjPj56/Hofbdte94
fKwkcS/Cfhjf5F7Pks1z72G4F0bD1MH8CbMX1fyz9l+i29cETrgGNwfm7i8r
3h+5Y3QH7i6YOMxcmD0AzOjakg==
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 13, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0170516, "MaxTrainingMemory" -> 199256, 
                  "DataMemory" -> 49264, "FunctionMemory" -> 32184, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 21.0694283`9.076227683459374}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 55, "Output" -> 
             Association[
              "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             7493133415222144944]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KLruKxJRev2Ox6sahbb1fHHgh9xIbz0xQFf85VNgxk
ghKwwQft27fmR/xue2o/T+iJpuO8SfZuIOtcl0Pp5/YwdY5gBe+g6jbZG4PB
Y/u30tf2Jb5dbQ9WLn7XfiYY3LQHc2OfQOV3w/VBzL0O56Oa22QP9tanLVDz
zsJpkCnS12DqLkHNvQ23H8ZfzlLpNWH5Ewz3wmiYOpg/YfbCzIeZBxE/BDcH
5p/7G77xZt+/AHcXzD8wc2H2AADMjrtl
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Jb/0HgvT0TAwh8sP8B5f+H0gxQcVLpqKOn/CZ+u2r/
YPbPmyvZ79k7rC2fISp10L6mM+V458pT9qJlx1eca7gDV5c1ZTJjgOBZe+vq
R5t3z7tg75Vx+01N1H37DKi4GEedlMi9+3DxkMZ994tP3rMvnd995/Dny3B9
MHEYH2ZuXpWNoKrPDnvFW/Fxy7ou2ocW7brMfekWnD5wYjPj56/Hofbdte94
fKwkcS/Cfhjf5F7Pks1z72G4F0bD1MH8CbMX1fyz9l+i29cETrgGNwfm7i8r
3h+5Y3QH7i6YOMxcmD0AzOjakg==
              "], "Output" -> 
             Association[
              
              "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
             "Version" -> {12.1, 0}, "ID" -> 6066714582389052362]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 620099645158081789]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 4670643775065767920, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 3141892401787472791]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.3482142857142857, True -> 0.6517857142857143]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 42, 12, 27, 55, 8, 36, 4}], 
          "NumericalThresholds" -> {-0.3935973048210144, \
-0.28183719515800476`, -0.39853787422180176`, -0.7618603110313416, \
-0.2760416567325592, 0.005548334680497646, 1.1301101446151733`, 
           0.30872419476509094`}, "Children" -> 
          RawArray["Integer16",{{2, -9}, {3, 6}, {-1, 4}, {-2, 5}, {-3, -4}, {
            7, 8}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 37, 53, 4, 49, 39, 10, 6}], 
          "NumericalThresholds" -> {-0.6445248126983643, \
-0.24010570347309113`, -0.7551971673965454, -0.7799711227416992, 
           0.24049687385559082`, 
           0.7385457158088684, -0.0048746815882623196`, \
-0.0014581794384866953`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {6, 8}, {
            7, -7}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 36, 6, 15, 26, 27, 46, 27, 53, 10, 46}], 
          "NumericalThresholds" -> {
           0.30872419476509094`, -0.8856791853904724, \
-0.0011698476737365127`, -0.22582241892814636`, -0.27858033776283264`, 
           1.3218212127685547`, 
           0.1895418018102646, -0.7609617710113525, -0.7500484585762024, 
           0.0033472226932644844`, 0.1943996697664261}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {-1, 3}, {4, 5}, {-2, -3}, {6, -7}, {
            7, -6}, {-4, -5}, {9, 10}, {-8, -9}, {11, -12}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{41, 29, 26, 28, 46, 3, 42, 47, 39, 26}], 
          "NumericalThresholds" -> {-0.28818127512931824`, 
           0.23388375341892242`, -0.2794799506664276, -0.27682068943977356`, 
           0.20008304715156555`, -0.7519146203994751, -0.28339913487434387`, \
-0.2393985241651535, 0.7329769730567932, 3.5688905715942383`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {5, 7}, {
            6, -6}, {-4, -5}, {8, 9}, {-7, -8}, {-9, 10}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 33, 16, 4, 17, 55, 30, 29, 13, 15}], 
          "NumericalThresholds" -> {-0.6442338228225708, -0.5353096723556519, 
           0.6176687479019165, -0.7790700197219849, -0.39227232336997986`, \
-0.28236499428749084`, -0.09878119826316833, 
           0.23717369139194489`, -1.4252651929855347`, -0.222036212682724}, 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {6, 10}, {
            7, 8}, {-5, -6}, {9, -9}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{29, 55, 17, 9, 6, 24, 28, 39, 13, 23, 48}], 
          "NumericalThresholds" -> {
           0.23195907473564148`, -0.28350362181663513`, \
-0.40162336826324463`, -0.009340456686913967, 0.0015772846527397633`, 
           0.7502040863037109, -0.2762945592403412, -1.3444465398788452`, 
           0.7033323049545288, 1.2169334888458252`, -0.41564807295799255`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, 5}, {6, 9}, {
            7, -8}, {8, -7}, {-5, -6}, {10, -12}, {-9, 11}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 29, 11, 14, 31, 31, 32, 41}], 
          "NumericalThresholds" -> {-0.2432405948638916, 
           0.2430577576160431, -0.0017192078521475196`, \
-0.14146950840950012`, -0.30159056186676025`, -0.30640530586242676`, \
-0.5432623624801636, -0.2866012454032898}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 
            6}, {-4, -5}, {-6, 7}, {8, -9}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 11, 27, 34, 39, 17, 53, 6, 10, 7, 53}], 
          "NumericalThresholds" -> {-0.23594850301742554`, \
-0.0023965982254594564`, -0.7590680718421936, 0.20095954835414886`, 
           0.7433314919471741, -0.3949068486690521, 1.3184154033660889`, 
           0.0015772846527397633`, -0.0009976993314921856, \
-0.0011298275785520673`, -0.7545714974403381}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 4}, {-2, -3}, {-4, -5}, {
            7, 10}, {8, -9}, {9, -8}, {-6, -7}, {-10, 11}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{32, 39, 7, 34, 54, 17, 33, 29}], 
          "NumericalThresholds" -> {1.8397624492645264`, 0.7382060885429382, 
           0.007468077354133129, 0.18530811369419098`, 
           1.1324046850204468`, -0.39865025877952576`, -0.5431025624275208, 
           0.23074598610401154`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {4, -3}, {-1, -2}, {6, 
            7}, {-4, -5}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{13, 4, 5, 34, 2, 38, 45, 8, 50, 34}], 
          "NumericalThresholds" -> {
           0.6923608183860779, -0.7804667949676514, -0.004712105728685856, 
           0.19352099299430847`, -0.32855427265167236`, -0.8816096782684326, \
-0.09515538811683655, 0.007470112759619951, 0.7626280188560486, 
           0.20121602714061737`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, 
            6}, {-3, -4}, {-5, 7}, {-6, -7}, {9, -11}, {10, -10}, {-8, -9}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 4, 44, 53, 41, 24, 3, 32, 31, 4, 32, 47, 
            43}], "NumericalThresholds" -> {
           0.2387901246547699, -0.2317386120557785, -0.20919065177440643`, 
           1.3138617277145386`, -0.28002050518989563`, 0.751857578754425, 
           0.14386345446109772`, -0.53801429271698, -0.29890134930610657`, \
-0.7771226763725281, -0.5478558540344238, -0.24555978178977966`, \
-0.8817424774169922}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, 
            6}, {-3, -4}, {-5, -6}, {8, 13}, {9, 12}, {10, 
            11}, {-7, -8}, {-9, -10}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{25, 40, 12, 43, 32, 23, 4, 7, 55, 33, 26, 8, 
            9}], "NumericalThresholds" -> {-0.3455654978752136, 
           0.23774279654026031`, -0.3902103304862976, -0.8800429105758667, \
-0.5353262424468994, 
           1.2184158563613892`, -0.24418629705905914`, -0.002572022145614028, \
-0.2834372818470001, -0.550255537033081, -0.27902889251708984`, 
           0.002426982158794999, -0.0028080667834728956`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {5, 6}, {-3, -4}, {
            7, 8}, {-5, -6}, {-7, -8}, {10, 11}, {-9, -10}, {12, 
            13}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 42, 19, 37, 13, 7, 38, 30, 55, 44}], 
          "NumericalThresholds" -> {
           0.0022017601877450943`, -0.2846234142780304, -0.2857792377471924, \
-0.23711590468883514`, 0.6991516351699829, 
           0.0020411175210028887`, -0.8769235610961914, \
-0.10137670487165451`, -0.277649849653244, -0.21429863572120667`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, 
            6}, {-3, -4}, {-5, -6}, {8, 9}, {-7, -8}, {-9, 10}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 35, 22, 32, 42, 26, 14, 45, 1}], 
          "NumericalThresholds" -> {-0.2124486118555069, -0.6447456479072571, \
-0.9059260487556458, -0.5487967729568481, -0.27491843700408936`, \
-0.2815057635307312, -0.1387937068939209, -0.09271708130836487, \
-0.7168065309524536}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, 6}, {-3, -4}, {
            7, -7}, {-5, -6}, {9, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{30, 2, 25, 18, 46, 27, 34, 49, 41, 8}], 
          "NumericalThresholds" -> {-0.1017112284898758, 
           0.032258354127407074`, -0.3503910005092621, 0.2497040182352066, 
           0.2009868025779724, -0.7598404288291931, 0.1888798177242279, 
           
           0.23288878798484802`, -0.27602696418762207`, \
-0.004668561741709709}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, -11}, {6, 
            10}, {-4, 7}, {-5, 8}, {9, -8}, {-6, -7}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 46, 53, 38, 16, 29, 39, 21, 6, 47, 26, 
            53}], "NumericalThresholds" -> {-0.6442338228225708, 
           0.1906554400920868, -0.7513582706451416, -0.8769235610961914, \
-1.6406584978103638`, 0.2377612590789795, 
           0.7394137382507324, -0.2447025626897812, 
           0.003133284393697977, -0.24727416038513184`, -0.2860043942928314, 
           1.3279714584350586`}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, 4}, {-1, -2}, {-3, -4}, {-5, 6}, {
            7, 10}, {8, -9}, {-6, 9}, {-7, -8}, {11, 
            12}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{36, 23, 26, 49, 51, 30, 26, 27, 35, 5}], 
          "NumericalThresholds" -> {-0.8740578889846802, 
           1.2286462783813477`, -0.2769535183906555, 
           0.24018394947052002`, -0.6022682785987854, -0.09366513043642044, 
           3.57232666015625, 1.315220594406128, 1.5609744787216187`, 
           0.0006073098047636449}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, -6}, {4, -5}, {5, 
            6}, {-1, -2}, {-3, -4}, {8, -11}, {-7, 9}, {10, -10}, {-8, -9}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 30, 14, 21, 42, 50, 13, 52, 12}], 
          "NumericalThresholds" -> {
           0.2993186116218567, -0.10370564460754395`, -0.14455653727054596`, \
-0.24859802424907684`, -0.27851414680480957`, -1.3252660036087036`, 
           0.6997142434120178, -0.5411303043365479, -0.3887057304382324}, 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {-2, 4}, {-3, -4}, {6, 
            8}, {-5, 7}, {-6, -7}, {-8, 9}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{23, 11, 44, 11, 4, 51, 23, 18, 26, 40}], 
          "NumericalThresholds" -> {
           1.220465064048767, -0.004978862591087818, -0.21287477016448975`, 
           0.0014557583490386605`, -0.23674167692661285`, -0.599902331829071, 
           1.2286462783813477`, 0.2375723272562027, -0.2725531756877899, 
           0.2386770397424698}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {-3, 5}, {-4, 
            6}, {-5, -6}, {8, 10}, {-7, 9}, {-8, -9}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{33, 34, 30, 49, 41, 41, 44, 29, 46}], 
          "NumericalThresholds" -> {1.8500804901123047`, 
           0.20138554275035858`, -0.1017112284898758, 
           0.23589178919792175`, -0.27658456563949585`, \
-0.27901268005371094`, -0.21360233426094055`, 0.2405429184436798, 
           0.19534654915332794`}, "Children" -> 
          RawArray["Integer16",{{2, -10}, {3, 8}, {4, 5}, {-1, -2}, {6, -6}, {
            7, -5}, {-3, -4}, {-7, 9}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{42, 26, 17, 1, 7, 17, 2, 38, 30, 23, 31}], 
          "NumericalThresholds" -> {-0.2886343002319336, -0.2742486298084259, \
-0.39411604404449463`, -0.6051715612411499, -0.00020069531456101686`, \
-0.39535045623779297`, -0.22074206173419952`, -0.8746742010116577, \
-0.09298701584339142, 1.2243950366973877`, -0.30151572823524475`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 8}, {4, -7}, {5, 6}, {-2, -3}, {
            7, -6}, {-4, -5}, {9, 11}, {10, -10}, {-8, -9}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 44, 26, 37, 13, 2, 44, 54, 15}], 
          "NumericalThresholds" -> {
           0.00015872153744567186`, -0.21256130933761597`, \
-0.2795259654521942, -0.2476716935634613, 
           0.6961808800697327, -0.04981738701462746, -0.21563972532749176`, 
           1.1403474807739258`, -0.21832175552845}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 6}, {4, 
            5}, {-1, -2}, {-3, -4}, {-5, -6}, {8, -10}, {9, -9}, {-7, -8}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 31, 39, 49, 18, 18, 46, 5, 55, 27, 21}], 
          "NumericalThresholds" -> {-0.6442338228225708, \
-0.29446646571159363`, 0.7346277236938477, 0.24049687385559082`, 
           0.23130516707897186`, 0.23532027006149292`, 0.1993405520915985, 
           0.00006513798143714666, -0.28236499428749084`, 
           1.3224347829818726`, -0.23602548241615295`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 10}, {-4, 
            6}, {-5, 7}, {8, -9}, {9, -8}, {-6, -7}, {11, -12}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{37, 49, 52, 33, 49, 29, 32, 33, 3, 52}], 
          "NumericalThresholds" -> {-0.24785491824150085`, 
           0.24930351972579956`, 1.8443783521652222`, -0.5502322912216187, 
           0.2330911010503769, 
           0.23064576089382172`, -0.538075864315033, -0.5360963344573975, \
-0.7174928784370422, -0.5364871025085449}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -11}, {4, -10}, {-2, 5}, {6, 
            8}, {7, -5}, {-3, -4}, {9, 10}, {-6, -7}, {-8, -9}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 29, 41, 8, 6, 24, 2, 18, 18, 48}], 
          "NumericalThresholds" -> {-0.2124486118555069, 
           0.23567265272140503`, -0.2856205701828003, 
           0.003941335715353489, -0.00092666270211339, 
           0.7524213194847107, -0.22074206173419952`, 0.23940062522888184`, 
           0.23654180765151978`, -0.40837913751602173`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {5, -8}, {-3, 6}, {
            7, 8}, {-4, -5}, {-6, -7}, {10, -11}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{27, 1, 40, 46, 29, 39, 32, 26, 29, 54, 9, 
            25}], "NumericalThresholds" -> {-0.7645244002342224, \
-0.8320149183273315, 0.23450236022472382`, 0.19253160059452057`, 
           0.2409287840127945, 
           0.7329127192497253, -0.5409224033355713, -0.2761625051498413, 
           0.23557348549365997`, 
           1.1400798559188843`, -0.008893522433936596, -0.3459746837615967}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 8}, {5, 
            6}, {-3, -4}, {-5, 7}, {-6, -7}, {9, 11}, {-8, 
            10}, {-9, -10}, {-11, 12}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{30, 46, 11, 30, 42, 28, 33, 14, 32, 5}], 
          "NumericalThresholds" -> {-0.10137670487165451`, 
           0.19176019728183746`, 
           0.0015728300204500556`, -0.09607347100973129, \
-0.28317469358444214`, -0.2809343636035919, -0.5407297611236572, \
-0.13287262618541718`, -0.5402823686599731, -0.0005517374956980348}, 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 6}, {-4, -5}, {
            7, 9}, {8, -8}, {-6, -7}, {-9, 10}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{47, 40, 34, 34, 21, 39, 42, 21, 7, 33}], 
          "NumericalThresholds" -> {-0.24857527017593384`, 0.2334093451499939,
            0.19449645280838013`, 0.18660558760166168`, 
           4.161210536956787, -1.355685830116272, -0.28466320037841797`, \
-0.24540455639362335`, 0.007227463182061911, -0.5487670302391052}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 6}, {4, 
            5}, {-2, -3}, {-4, -5}, {-6, 7}, {8, 9}, {-7, -8}, {
            10, -11}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 54, 46, 14, 44, 17, 54, 13, 19}], 
          "NumericalThresholds" -> {-0.2124486118555069, 1.1403474807739258`, 
           
           0.191796213388443, -0.1313796043395996, -0.21536998450756073`, \
-0.3949068486690521, -0.8778396248817444, 
           0.6902226209640503, -0.27435341477394104`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 8}, {-1, 4}, {5, 7}, {
            6, -4}, {-2, -3}, {-5, -6}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 20, 10, 47, 33, 22, 16, 47, 39, 34}], 
          "NumericalThresholds" -> {-0.6442338228225708, 
           0.8165756464004517, -0.004774394910782576, -0.24703747034072876`, \
-0.5431025624275208, 
           1.0980002880096436`, -1.6291142702102661`, -0.23411649465560913`, 
           0.7455904483795166, 0.1918165534734726}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 6}, {-4, -5}, {
            7, 10}, {-6, 8}, {9, -9}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 42, 44, 27, 42, 11, 49, 25, 32, 6, 44}], 
          "NumericalThresholds" -> {
           0.00009246882837032899, -0.2847328186035156, \
-0.21360233426094055`, -0.7600617408752441, -0.27361398935317993`, \
-0.002291965764015913, 
           0.23654276132583618`, -0.3459746837615967, -0.5430405735969543, 
           0.0010028306860476732`, -0.21722103655338287`}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {-2, 4}, {-3, -4}, {6, 10}, {
            7, 8}, {-5, -6}, {9, -9}, {-7, -8}, {-10, 11}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{46, 37, 42, 29, 14, 18, 14, 48, 32, 52}], 
          "NumericalThresholds" -> {
           0.1906554400920868, -0.23629118502140045`, -0.28278061747550964`, 
           0.23064576089382172`, -0.14042030274868011`, 
           0.23226043581962585`, -0.13215304911136627`, -0.4169299304485321, \
-0.5453993082046509, -0.5453984141349792}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {-3, 
            5}, {-4, -5}, {-6, 7}, {8, 9}, {-7, -8}, {-9, 10}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{34, 4, 32, 36, 2, 4, 21, 38}], 
          "NumericalThresholds" -> {0.20293335616588593`, 
           0.2993186116218567, -0.5478558540344238, -0.8856791853904724, \
-0.1926775574684143, 
           0.8481954336166382, -0.24125522375106812`, -0.8746742010116577}, 
          "Children" -> 
          RawArray["Integer16",{{2, -9}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
            7}, {-4, -5}, {-6, 8}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{49, 7, 46, 6, 19, 28, 50, 54, 10, 5, 26}], 
          "NumericalThresholds" -> {0.24049687385559082`, 
           0.0005996883846819401, 
           0.19179365038871765`, -0.002942004008218646, -0.2767760157585144, \
-0.27554434537887573`, 0.7563765048980713, 
           1.1442822217941284`, -0.007099180482327938, 
           0.000089256078354083, -0.2769535183906555}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
            7}, {-4, -5}, {-6, -7}, {9, -12}, {10, 
            11}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 29, 2, 52, 51, 32, 36, 49, 41, 31}], 
          "NumericalThresholds" -> {0.24247826635837555`, 
           0.23746854066848755`, -0.35928627848625183`, 1.836435079574585, 
           1.6620992422103882`, -0.5470970273017883, -0.8813322186470032, 
           0.2343602329492569, -0.2795739769935608, -0.3051925599575043}, 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 4}, {-2, -3}, {-4, -5}, {
            7, 8}, {-6, -7}, {-8, 9}, {10, -11}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{50, 40, 28, 24, 42, 50, 31, 38, 12, 25}], 
          "NumericalThresholds" -> {0.7482320070266724, 
           0.2472539246082306, -0.28799471259117126`, 
           0.7580598592758179, -0.28278061747550964`, 
           0.7585868835449219, -0.3022567331790924, 
           1.127852439880371, -0.3897554576396942, -0.34926891326904297`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 4}, {-2, -3}, {6, 8}, {
            7, -7}, {-5, -6}, {9, -11}, {10, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{15, 46, 44, 35, 29, 16, 7, 8, 8, 49}], 
          "NumericalThresholds" -> {-0.22789150476455688`, 
           0.1993405520915985, -0.21042737364768982`, -0.6468397378921509, 
           0.24708804488182068`, 0.6093612313270569, -0.00020069531456101686`,
            0.004024513065814972, -0.00023998849792405963`, 
           0.23307909071445465`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 9}, {4, -8}, {5, 7}, {
            6, -4}, {-2, -3}, {-5, 8}, {-6, -7}, {-9, 10}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{38, 51, 31, 13, 13, 26, 16, 30, 10, 22, 25}], 
          "NumericalThresholds" -> {-0.8767303228378296, -0.6028802990913391, \
-0.29630541801452637`, -1.4244844913482666`, 
           0.6931924223899841, -0.27255088090896606`, 
           0.6071416735649109, -0.10162901878356934`, -0.0015482399612665176`,
            1.095084547996521, -0.35835567116737366`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {-3, 5}, {-4, 
            6}, {-5, -6}, {8, 9}, {-7, -8}, {10, 11}, {-9, -10}, {-11, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 30, 4, 37, 38, 36, 40, 9, 16, 26, 10, 6}], 
          "NumericalThresholds" -> {
           0.008332572877407074, -0.10214461386203766`, \
-0.24634306132793427`, -0.24228350818157196`, 
           1.1339424848556519`, -0.8796241283416748, 0.2315446436405182, 
           0.0022036724258214235`, 
           0.6123347282409668, -0.28430667519569397`, \
-0.0017120966222137213`, -0.008088450878858566}, "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 5}, {4, -3}, {-1, -2}, {
            6, -11}, {7, 8}, {-4, -5}, {9, 11}, {
            10, -8}, {-6, -7}, {-9, -10}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{42, 6, 6, 9, 40, 38, 28, 30, 27, 15}], 
          "NumericalThresholds" -> {-0.2886343002319336, 
           0.00009246882837032899, -0.005469297058880329, \
-0.006766029633581638, 
           
           0.2467905431985855, -0.878632664680481, -0.2709629237651825, \
-0.09324310719966888, 1.315142273902893, -0.21885019540786743`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 6}, {4, 5}, {-2, -3}, {-4, -5}, {
            7, 8}, {-6, -7}, {9, 10}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{42, 49, 7, 46, 46, 42, 28, 55, 24, 5, 28, 18, 
            51}], "NumericalThresholds" -> {-0.2886343002319336, 
           0.23307909071445465`, 0.0007998502696864307, 0.19765448570251465`, 
           0.1926722228527069, -0.28394192457199097`, -0.2820482552051544, \
-0.2812999486923218, 
           0.750443160533905, -0.0022838411387056112`, -0.27806541323661804`, 
           0.23943549394607544`, -0.6000886559486389}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 6}, {-2, 4}, {5, -5}, {-3, -4}, {
            7, 10}, {8, 9}, {-6, -7}, {-8, -9}, {11, 13}, {-10, 
            12}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 2, 55, 7, 12, 25, 18, 54, 20, 39}], 
          "NumericalThresholds" -> {-0.6442338228225708, -0.5412371754646301, \
-0.2795156240463257, -0.00020069531456101686`, -0.39002540707588196`, \
-0.34952348470687866`, 
           0.2383480817079544, -0.8844598531723022, -1.225998044013977, 
           0.7329127192497253}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 7}, {-4, 
            6}, {-5, -6}, {8, 10}, {-7, 9}, {-8, -9}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{37, 49, 42, 43, 37, 27, 9, 50, 44, 30, 11}], 
          "NumericalThresholds" -> {-0.2389959692955017, 
           0.24049687385559082`, -0.28278061747550964`, -0.8791709542274475, \
-0.244660422205925, 1.315142273902893, 0.0013401064788922668`, 
           0.7582236528396606, -0.21289505064487457`, -0.09414336830377579, 
           0.004704352468252182}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, -6}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {8, 11}, {9, -10}, {10, -9}, {-7, -8}, {-11, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{12, 23, 14, 12, 11, 4, 4, 1, 53, 39, 48, 35, 
            16}], "NumericalThresholds" -> {-0.3897554576396942, \
-0.822794497013092, -0.1332555115222931, -0.40088212490081787`, \
-0.003913126420229673, -0.23488770425319672`, -0.23877261579036713`, 
           0.9181451201438904, 1.3257380723953247`, 
           0.7378382682800293, -0.40449258685112, -0.6364554762840271, 
           0.6040313243865967}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 4}, {-1, -2}, {5, 8}, {6, 
            7}, {-3, -4}, {-5, -6}, {9, 10}, {-7, -8}, {-9, -10}, {12, -14}, {
            13, -13}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{49, 4, 21, 38, 14, 2, 50, 55, 44, 32}], 
          "NumericalThresholds" -> {
           0.2403600811958313, -0.2432405948638916, -0.24026940762996674`, \
-0.8774847388267517, -0.14131182432174683`, -0.14570355415344238`, 
           0.7538043856620789, -0.27700236439704895`, -0.2177928239107132, \
-0.5454750657081604}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {4, -3}, {-1, -2}, {-4, 6}, {
            7, -7}, {-5, -6}, {9, 10}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 32, 6, 1, 17, 30, 31, 38, 17, 44}], 
          "NumericalThresholds" -> {-0.7790700197219849, -0.5428624153137207, \
-0.0033078533597290516`, -0.6135008931159973, -0.40149644017219543`, \
-0.1017112284898758, -0.2992711663246155, -0.8786423206329346, 
           2.5113470554351807`, -0.2143673151731491}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 6}, {-4, -5}, {
            7, 8}, {-6, -7}, {9, 10}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{44, 12, 16, 49, 44, 30, 22, 4, 23}], 
          "NumericalThresholds" -> {-0.2143673151731491, -0.4000227153301239, 
           0.6055265069007874, 
           0.2491055279970169, -0.2250605821609497, -0.10370564460754395`, \
-0.9160439968109131, -0.7804926633834839, -0.8086918592453003}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, -6}, {-3, 
            6}, {-4, -5}, {-7, 8}, {-8, 9}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 41, 45, 2, 38, 17, 46, 5, 27, 10}], 
          "NumericalThresholds" -> {
           0.6037774682044983, -0.286480188369751, -0.10199172049760818`, 
           0.032258354127407074`, -0.8859114050865173, -0.3959469199180603, 
           0.1949169635772705, -0.0005517374956980348, 
           1.319812536239624, -0.003710967255756259}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, -11}, {-4, 
            6}, {7, 9}, {8, -7}, {-5, -6}, {10, -10}, {-8, -9}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{33, 44, 42, 29, 20, 42, 38}], 
          "NumericalThresholds" -> {-0.5340752601623535, \
-0.21398712694644928`, -0.28581327199935913`, 0.2409287840127945, 
           0.8123358488082886, -0.2864554524421692, -0.8816096782684326}, 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
            5}, {-4, -5}, {-6, 7}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{45, 46, 15, 17, 30, 40, 23, 4, 30}], 
          "NumericalThresholds" -> {-0.10418388247489929`, 
           0.19556738436222076`, -0.2263968586921692, -0.3913857638835907, \
-0.09324310719966888, 0.2391768991947174, -0.8083996772766113, 
           0.3055785000324249, -0.0927765816450119}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 7}, {-2, 4}, {5, -6}, {-3, 
            6}, {-4, -5}, {8, 9}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]]},
       "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 55.], 
         "Key" -> 
         "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "OOBConfusionMatrix" -> {{0.6428571529686451, 0.3571428470313549}, {
       0.3571428470313549, 0.6428571529686451}}, "Method" -> "RandomForest", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "FeatureFraction" -> 
        Association[
         "Value" -> 55^Rational[-1, 2], "Options" -> Association[]], 
        "LeafSize" -> Association["Value" -> 5, "Options" -> Association[]], 
        "TreeNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "Implementation" -> 
        Association["Value" -> "DAAL", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15361], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.3007311`6.9297233363286965, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.6627202093389017, 0.02349803552730567],
          "Accuracy" -> Around[0.6408746146367451, 0.06985175830050416], 
         "EvaluationTime" -> 0.00006641656257686242, "TestSize" -> 95, 
         "ModelMemory" -> 97544, "ModelUtility" -> -0.2888661248227775, 
         "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
         "TrainingMemory" -> 160624, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.6627202093389017, 0.01661562026592025]}, 
         "AccuracyHistory" -> {
           Around[0.6408746146367451, 0.0493926519720902]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 110], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 269045542366974]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[6.335262118526043, 1.3711212032874587`], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00033287133264930306`, "TestSize" -> 95, 
              "ModelMemory" -> 54288, "ModelUtility" -> -2.5816982852710133`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 170328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[6.335262118526043, 0.9695291006732207]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1419370831128648`, 0.81745628171273], "Accuracy" -> 
              Around[0.8053896958751122, 0.12526076236552175`], 
              "EvaluationTime" -> 0.0005722388235428032, "TestSize" -> 22, 
              "ModelMemory" -> 80496, "ModelUtility" -> -0.9597298988354465, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 641744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1419370831128648`, 0.5780288801226121]}, 
              "AccuracyHistory" -> {
                Around[0.8053896958751122, 0.08857273448525711]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005722388235428032, "MeanCrossEntropy" -> 
             Around[1.1419370831128648`, 0.81745628171273], "ModelMemory" -> 
             80496, "TrainingMemory" -> 641744, "TrainingTime" -> 
             0.08360250581623441], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
              "ModelMemory" -> 20720, "ModelUtility" -> -0.3270465673931656, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 69280, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916370843501094, 0.0062588525193839105`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6458559805906412, 0.12646275393808698`], "Accuracy" -> 
              Around[0.6314766523968512, 0.14710342215590386`], 
              "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 119464, 
              "ModelUtility" -> -0.29444260269888656`, "TrainingSize" -> 88, 
              "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
              366304, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6458559805906412, 0.08942267087714707]}, 
              "AccuracyHistory" -> {
                Around[0.6314766523968512, 0.10401782734218702`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.6458559805906412, 0.12646275393808698`], "ModelMemory" -> 
             119464, "TrainingMemory" -> 366304, "TrainingTime" -> 
             0.10322503774428209`], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6612814986725103, 0.03281199323703066], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 95, 
              "ModelMemory" -> 13408, "ModelUtility" -> -0.28948168119251805`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 74152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6612814986725103, 0.02320158292215151]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6948904978969805, 0.06913001620314675], "Accuracy" -> 
              Around[0.41408534804902536`, 0.14723724723079126`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 46752, "ModelUtility" -> -0.34889059248633914`,
               "TrainingSize" -> 88, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 322496, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6948904978969805, 0.048882303240780973`]}, 
              "AccuracyHistory" -> {
                Around[0.41408534804902536`, 0.1041124559601327]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.6948904978969805, 0.06913001620314675], "ModelMemory" -> 
             46752, "TrainingMemory" -> 322496, "TrainingTime" -> 
             0.015047184026769026`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.102271345944818, 0.15419556460619946`], "Accuracy" -> 
              Around[0.526291281303412, 0.0724807042994671], "EvaluationTime" -> 
              0.000016683086236432762`, "TestSize" -> 95, "ModelMemory" -> 
              5968, "ModelUtility" -> -0.8181472441639723, "TrainingSize" -> 
              15, "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              77480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.102271345944818, 0.10903272936193202`]}, 
              "AccuracyHistory" -> {
                Around[0.526291281303412, 0.051251597515330136`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1693312925967607`, 0.3202082875523821], "Accuracy" -> 
              Around[0.4575636089185905, 0.14942705635897574`], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 6288, "ModelUtility" -> -0.9029335072693082, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 158600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1693312925967607`, 0.22642145152042134`]}, 
              "AccuracyHistory" -> {
                Around[0.4575636089185905, 0.10566088484417616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[1.1693312925967607`, 0.3202082875523821], "ModelMemory" -> 
             6288, "TrainingMemory" -> 158600, "TrainingTime" -> 
             0.02989116781190048], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6627202093389017, 0.02349803552730567], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00006641656257686242, "TestSize" -> 95, 
              "ModelMemory" -> 97544, "ModelUtility" -> -0.2888661248227775, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 160624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6627202093389017, 0.01661562026592025]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6663254360232492, 0.03980114525280433], "Accuracy" -> 
              Around[0.6749549132664163, 0.14368460052805063`], 
              "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 98800, "ModelUtility" -> -0.299101236299012, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 219064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6663254360232492, 0.028143659707248702`]}, 
              "AccuracyHistory" -> {
                Around[0.6749549132664163, 0.10160035538546477`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
             Around[0.6663254360232492, 0.03980114525280433], "ModelMemory" -> 
             98800, "TrainingMemory" -> 219064, "TrainingTime" -> 
             0.0377968173892688], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[23.779568654631646`, 4.720013350287113], "Accuracy" -> 
              Around[0.4846246146367454, 0.0724836937144565], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9560, "ModelUtility" -> -3.9009386939948683`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 121520, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[23.779568654631646`, 3.3375534472790527`]}, 
              "AccuracyHistory" -> {
                Around[0.4846246146367454, 0.051253711350940916`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.641656257686242*^-6, "MeanCrossEntropy" -> 
             Around[23.779568654631646`, 4.720013350287113], "ModelMemory" -> 
             9560, "TrainingMemory" -> 121520, "TrainingTime" -> 
             0.08360250581623441], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.211338360210993, 1.006704221390944], "Accuracy" -> 
              Around[0.5054579479700787, 0.07254454783434337], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9560, "ModelUtility" -> -2.381925804651487, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 121208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.211338360210993, 0.71184738159466]}, 
              "AccuracyHistory" -> {
                Around[0.5054579479700787, 0.05129674171177606]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
             Around[5.211338360210993, 1.006704221390944], "ModelMemory" -> 
             9560, "TrainingMemory" -> 121208, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0967948502013303`, 0.1650061558679542], "Accuracy" -> 
              Around[0.526291281303412, 0.0724807042994671], "EvaluationTime" -> 
              6.641656257686242*^-6, "TestSize" -> 95, "ModelMemory" -> 9560, 
              "ModelUtility" -> -0.8152187582561689, "TrainingSize" -> 15, 
              "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              121448, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0967948502013303`, 0.11667697175175484`]}, 
              "AccuracyHistory" -> {
                Around[0.526291281303412, 0.051251597515330136`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6831140069705061, 0.19034507404826573`], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.36631928736149366`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 189688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6831140069705061, 0.1345942926249842]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.6831140069705061, 0.19034507404826573`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 189688, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8411478729776051, 0.2735919999348135], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.5832174967456579, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 189928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8411478729776051, 0.19345875843229607`]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.8411478729776051, 0.2735919999348135], "ModelMemory" -> 
             9560, "TrainingMemory" -> 189928, "TrainingTime" -> 
             0.08360250581623441], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 269041247399678]], "MaxTrainingSize" -> 110, 
      "PreprocessorEvaluationTime" -> 0.0000105193359375`2., 
      "PreprocessorMemory" -> 138200, "InputDimension" -> 55, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6463341980550162,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341419316482`17.33219102343741*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.2799999999999999, 
          "ElapsedTimes" -> 0.27526140000000004`, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3884846, "ExperimentCounts" -> 7]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 269054132301566]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.001987292522879637}, "ID" -> 4320974050493114959], 
         "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.000980119587744349}, "ID" -> 315661506761656104], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.004381303688526783}, "ID" -> 4609396093183805747], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5}, "ID" -> 
           7888368477895926768], "f5" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5346155557091875260], "f6" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1262337938308826583], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8820429014208658305], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2830026427724412347], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3065081949069868795], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5952194722661206634], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4172377243062797276], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2254453161829243277], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           417184411674810962], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4954205544333763648], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8393142517673332977], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2368135820070429490], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4554038105226310238], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8564651345156656521], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7118169994420534225], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           685428322961758535], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1180870158250527878], "f22" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8308904938442281859], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4435869279503404840], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3830096988561467597], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6131165527094671781], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4200099109053498134], "f27" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2389001383860909557], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8421754851285438811], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2619911442566100223], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           272508841316359729], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5989163223125915559], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5023831084100741178], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7254670121457779111], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2803790281412067686], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2253028538090021358], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8397340437921861161], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5446665757225766772], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7863093911416874018], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1316854479138420980], "f40" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8653960014761669852], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6500335968749947662], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1771674503716709970], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6665570373315487216], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2734552590389718265], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           9193351121365258527], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7886495976057884603], "f47" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1222175066655414199], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3800845768307102070], "f49" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3230373167919047936], "f50" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4586859744615402324], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8676025994051584186], "f52" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           261622186732691771], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5251244623107586582], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           989007788963465036], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6560666033651434576]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1571558, 
      "MaxTrainingMemory" -> 1167152, "DataMemory" -> 929808, 
      "FunctionMemory" -> 486280, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 22.1101715`9.097167040399443}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7946053897190094`*^9, 3.794605585895097*^9, 
  3.7948851519563046`*^9, 3.795346699232599*^9, 3.795376331035165*^9, 
  3.79537751713235*^9, 3.7959513309372406`*^9, 3.797727871406908*^9, 
  3.797728946199*^9, 3.797767999700097*^9, 3.797773360507348*^9, 
  3.7977768877339463`*^9, 3.7977773928576393`*^9, 3.797778158817644*^9, 
  3.79777890264822*^9, 3.7977860076150227`*^9, 3.7977975600896397`*^9, 
  3.7978055469013143`*^9, 3.798548159077014*^9, 3.7985485422258673`*^9},
 CellLabel->
  "Out[168]=",ExpressionUUID->"34d48100-d657-4a74-ad72-cef56b7585a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cmclassErRedpHMaccs", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classErRedpHMaccs", ",", 
    RowBox[{"mLmaccsRedpH", "@", "erDataMaccsTest"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7946053941814556`*^9, 3.794605415392438*^9}, {
  3.7946055890303864`*^9, 3.794605601621561*^9}, {3.7953775189784527`*^9, 
  3.795377534990609*^9}},
 CellLabel->
  "In[169]:=",ExpressionUUID->"d132ac31-2d88-45da-a360-7079554ab7dc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   TemplateBox[{"0.59", "0.10"}, "Around"], 
                   Around[0.5925925925925926, 0.09636202008710988]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
              "Sodium Oxalate Mole Fraction" -> 
              Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
              Association["Type" -> "Numerical"], "pH" -> 
              Association["Type" -> "Numerical"], "maccs53" -> 
              Association["Type" -> "Boolean"], "maccs54" -> 
              Association["Type" -> "Boolean"], "maccs62" -> 
              Association["Type" -> "Boolean"], "maccs65" -> 
              Association["Type" -> "Numerical"], "maccs74" -> 
              Association["Type" -> "Boolean"], "maccs79" -> 
              Association["Type" -> "Boolean"], "maccs80" -> 
              Association["Type" -> "Boolean"], "maccs82" -> 
              Association["Type" -> "Boolean"], "maccs83" -> 
              Association["Type" -> "Boolean"], "maccs84" -> 
              Association["Type" -> "Boolean"], "maccs85" -> 
              Association["Type" -> "Boolean"], "maccs86" -> 
              Association["Type" -> "Boolean"], "maccs90" -> 
              Association["Type" -> "Boolean"], "maccs91" -> 
              Association["Type" -> "Boolean"], "maccs93" -> 
              Association["Type" -> "Boolean"], "maccs96" -> 
              Association["Type" -> "Boolean"], "maccs98" -> 
              Association["Type" -> "Boolean"], "maccs100" -> 
              Association["Type" -> "Numerical"], "maccs103" -> 
              Association["Type" -> "Boolean"], "maccs104" -> 
              Association["Type" -> "Boolean"], "maccs105" -> 
              Association["Type" -> "Boolean"], "maccs108" -> 
              Association["Type" -> "Boolean"], "maccs111" -> 
              Association["Type" -> "Numerical"], "maccs115" -> 
              Association["Type" -> "Boolean"], "maccs116" -> 
              Association["Type" -> "Boolean"], "maccs118" -> 
              Association["Type" -> "Boolean"], "maccs120" -> 
              Association["Type" -> "Boolean"], "maccs121" -> 
              Association["Type" -> "Boolean"], "maccs122" -> 
              Association["Type" -> "Boolean"], "maccs128" -> 
              Association["Type" -> "Boolean"], "maccs129" -> 
              Association["Type" -> "Boolean"], "maccs131" -> 
              Association["Type" -> "Boolean"], "maccs133" -> 
              Association["Type" -> "Boolean"], "maccs134" -> 
              Association["Type" -> "Boolean"], "maccs137" -> 
              Association["Type" -> "Boolean"], "maccs138" -> 
              Association["Type" -> "Numerical"], "maccs141" -> 
              Association["Type" -> "Boolean"], "maccs145" -> 
              Association["Type" -> "Boolean"], "maccs147" -> 
              Association["Type" -> "Boolean"], "maccs148" -> 
              Association["Type" -> "Boolean"], "maccs149" -> 
              Association["Type" -> "Boolean"], "maccs151" -> 
              Association["Type" -> "Boolean"], "maccs153" -> 
              Association["Type" -> "Numerical"], "maccs155" -> 
              Association["Type" -> "Boolean"], "maccs156" -> 
              Association["Type" -> "Boolean"], "maccs158" -> 
              Association["Type" -> "Numerical"], "maccs160" -> 
              Association["Type" -> "Boolean"], "maccs162" -> 
              Association["Type" -> "Numerical"], "maccs163" -> 
              Association["Type" -> "Boolean"], "maccs165" -> 
              Association["Type" -> "Boolean"], "maccs166" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f41" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f48" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f51" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f53" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                    "Amine Mole Fraction", "pH", "maccs53", "maccs54", 
                    "maccs62", "maccs65", "maccs74", "maccs79", "maccs80", 
                    "maccs82", "maccs83", "maccs84", "maccs85", "maccs86", 
                    "maccs90", "maccs91", "maccs93", "maccs96", "maccs98", 
                    "maccs100", "maccs103", "maccs104", "maccs105", 
                    "maccs108", "maccs111", "maccs115", "maccs116", 
                    "maccs118", "maccs120", "maccs121", "maccs122", 
                    "maccs128", "maccs129", "maccs131", "maccs133", 
                    "maccs134", "maccs137", "maccs138", "maccs141", 
                    "maccs145", "maccs147", "maccs148", "maccs149", 
                    "maccs151", "maccs153", "maccs155", "maccs156", 
                    "maccs158", "maccs160", "maccs162", "maccs163", 
                    "maccs165", "maccs166"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 55]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Numerical", "Boolean", "Boolean",
                     "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", 
                    "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", 
                    "f34", "f35", "f36", "f37", "f38", "f39", "f40", "f41", 
                    "f42", "f43", "f44", "f45", "f46", "f47", "f48", "f49", 
                    "f50", "f51", "f52", "f53", "f54", "f55"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f47" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f22" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f27" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f40" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f47" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f50" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f52" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                 "Output" -> 
                Association[
                 "(f1f2f3f4f8f22f27f40f47f50f52)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11]], 
                "Version" -> {12.1, 0}, "ID" -> 960346187694465589]], 
              MachineLearning`MLProcessor["NumericalVectorStandardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f8f22f27f40f47f50f52)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11]], 
                "Mean" -> {0.0027125744939508526`, 0.0013702662912860152`, 
                 0.005885270631865775, 2.436363636363636, 0., 1., 1., 1., 1., 
                 1., 0.}, 
                "StandardDeviation" -> {0.0008922678396605211, 
                 0.0011033857541175838`, 0.0028718051216307847`, 
                 1.8267072847427503`, 1., 1., 1., 1., 1., 1., 1.}, 
                "Version" -> {12.1, 0}, "ID" -> 1231413797954113814, "Output" -> 
                Association[
                 "(f1f2f3f4f8f22f27f40f47f50f52)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11]]]], 
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f5" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f20" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f21" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f23" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f24" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f25" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f26" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f28" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f29" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f30" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f31" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f32" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f33" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f34" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f35" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f36" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f37" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f38" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f39" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f41" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f42" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f43" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f44" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f45" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f46" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f48" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f49" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f51" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f53" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f54" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f55" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28\
f29f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 4564840229512339459]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28\
f29f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 7149190942226526055, "Output" -> 
                Association[
                 "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28\
f29f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28\
f29f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 44]], 
                "Version" -> {12.1, 0}, "ID" -> 8005434184480095585, "Output" -> 
                Association[
                 "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28\
f29f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 44]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f8f22f27f40f47f50f52)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11], 
                  "(f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f2\
8f29f30f31f32f33f34f35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 44]], 
                "Spans" -> {
                  Span[1, 11], 
                  Span[12, 55]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwZ4CBD/aj9NCiAbRTQvs=
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0},
                 "ID" -> 937431574279929552]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAwZ4CBD/aj9NCiAbRTQvs=
                    "], "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 110, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KLruKxJRev2Ox6sahbb1fHHgh9xIbz0xQFf85VNgxk
ghKwwQft27fmR/xue2o/T+iJpuO8SfZuIOtcl0Pp5/YwdY5gBe+g6jbZG4PB
Y/u30tf2Jb5dbQ9WLn7XfiYY3LQHc2OfQOV3w/VBzL0O56Oa22QP9tanLVDz
zsJpkCnS12DqLkHNvQ23H8ZfzlLpNWH5Ewz3wmiYOpg/YfbCzIeZBxE/BDcH
5p/7G77xZt+/AHcXzD8wc2H2AADMjrtl
                    "], "Method" -> "Naive", "VectorLength" -> 55, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KLruKxJRev2Ox6sahbb1fHHgh9xIbz0xQFf85VNgxk
ghKwwQft27fmR/xue2o/T+iJpuO8SfZuIOtcl0Pp5/YwdY5gBe+g6jbZG4PB
Y/u30tf2Jb5dbQ9WLn7XfiYY3LQHc2OfQOV3w/VBzL0O56Oa22QP9tanLVDz
zsJpkCnS12DqLkHNvQ23H8ZfzlLpNWH5Ewz3wmiYOpg/YfbCzIeZBxE/BDcH
5p/7G77xZt+/AHcXzD8wc2H2AADMjrtl
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Jb/0HgvT0TAwh8sP8B5f+H0gxQcVLpqKOn/CZ+u2r/
YPbPmyvZ79k7rC2fISp10L6mM+V458pT9qJlx1eca7gDV5c1ZTJjgOBZe+vq
R5t3z7tg75Vx+01N1H37DKi4GEedlMi9+3DxkMZ994tP3rMvnd995/Dny3B9
MHEYH2ZuXpWNoKrPDnvFW/Fxy7ou2ocW7brMfekWnD5wYjPj56/Hofbdte94
fKwkcS/Cfhjf5F7Pks1z72G4F0bD1MH8CbMX1fyz9l+i29cETrgGNwfm7i8r
3h+5Y3QH7i6YOMxcmD0AzOjakg==
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 55, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 55]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 13]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                   Association["Matrix" -> CompressedData["
1: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
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KLruKxJRev2Ox6sahbb1fHHgh9xIbz0xQFf85VNgxk
ghKwwQft27fmR/xue2o/T+iJpuO8SfZuIOtcl0Pp5/YwdY5gBe+g6jbZG4PB
Y/u30tf2Jb5dbQ9WLn7XfiYY3LQHc2OfQOV3w/VBzL0O56Oa22QP9tanLVDz
zsJpkCnS12DqLkHNvQ23H8ZfzlLpNWH5Ewz3wmiYOpg/YfbCzIeZBxE/BDcH
5p/7G77xZt+/AHcXzD8wc2H2AADMjrtl
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Jb/0HgvT0TAwh8sP8B5f+H0gxQcVLpqKOn/CZ+u2r/
YPbPmyvZ79k7rC2fISp10L6mM+V458pT9qJlx1eca7gDV5c1ZTJjgOBZe+vq
R5t3z7tg75Vx+01N1H37DKi4GEedlMi9+3DxkMZ994tP3rMvnd995/Dny3B9
MHEYH2ZuXpWNoKrPDnvFW/Fxy7ou2ocW7brMfekWnD5wYjPj56/Hofbdte94
fKwkcS/Cfhjf5F7Pks1z72G4F0bD1MH8CbMX1fyz9l+i29cETrgGNwfm7i8r
3h+5Y3QH7i6YOMxcmD0AzOjakg==
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 13, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0170516, "MaxTrainingMemory" -> 
                    199256, "DataMemory" -> 49264, "FunctionMemory" -> 32184, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 5, 15, 12, 22, 21.0694283`9.076227683459374}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 55, "Output" -> 
                Association[
                 "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
                "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                7493133415222144944]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
                "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+KLruKxJRev2Ox6sahbb1fHHgh9xIbz0xQFf85VNgxk
ghKwwQft27fmR/xue2o/T+iJpuO8SfZuIOtcl0Pp5/YwdY5gBe+g6jbZG4PB
Y/u30tf2Jb5dbQ9WLn7XfiYY3LQHc2OfQOV3w/VBzL0O56Oa22QP9tanLVDz
zsJpkCnS12DqLkHNvQ23H8ZfzlLpNWH5Ewz3wmiYOpg/YfbCzIeZBxE/BDcH
5p/7G77xZt+/AHcXzD8wc2H2AADMjrtl
                 "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGAwB+Jb/0HgvT0TAwh8sP8B5f+H0gxQcVLpqKOn/CZ+u2r/
YPbPmyvZ79k7rC2fISp10L6mM+V458pT9qJlx1eca7gDV5c1ZTJjgOBZe+vq
R5t3z7tg75Vx+01N1H37DKi4GEedlMi9+3DxkMZ994tP3rMvnd995/Dny3B9
MHEYH2ZuXpWNoKrPDnvFW/Fxy7ou2ocW7brMfekWnD5wYjPj56/Hofbdte94
fKwkcS/Cfhjf5F7Pks1z72G4F0bD1MH8CbMX1fyz9l+i29cETrgGNwfm7i8r
3h+5Y3QH7i6YOMxcmD0AzOjakg==
                 "], "Output" -> 
                Association[
                 "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 55.]], 
                "Version" -> {12.1, 0}, "ID" -> 6066714582389052362]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 620099645158081789]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 0}, "ID" -> 4670643775065767920, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 3141892401787472791]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          False -> 0.3482142857142857, True -> 0.6517857142857143]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 42, 12, 27, 55, 8, 36, 4}], 
             "NumericalThresholds" -> {-0.3935973048210144, \
-0.28183719515800476`, -0.39853787422180176`, -0.7618603110313416, \
-0.2760416567325592, 0.005548334680497646, 1.1301101446151733`, 
              0.30872419476509094`}, "Children" -> 
             RawArray["Integer16",{{2, -9}, {3, 6}, {-1, 4}, {-2, 
               5}, {-3, -4}, {7, 8}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 2, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{35, 37, 53, 4, 49, 39, 10, 6}], 
             "NumericalThresholds" -> {-0.6445248126983643, \
-0.24010570347309113`, -0.7551971673965454, -0.7799711227416992, 
              0.24049687385559082`, 
              0.7385457158088684, -0.0048746815882623196`, \
-0.0014581794384866953`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {6, 
               8}, {7, -7}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 36, 6, 15, 26, 27, 46, 27, 53, 10, 46}],
              "NumericalThresholds" -> {
              0.30872419476509094`, -0.8856791853904724, \
-0.0011698476737365127`, -0.22582241892814636`, -0.27858033776283264`, 
              1.3218212127685547`, 
              0.1895418018102646, -0.7609617710113525, -0.7500484585762024, 
              0.0033472226932644844`, 0.1943996697664261}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {-1, 3}, {4, 5}, {-2, -3}, {
               6, -7}, {7, -6}, {-4, -5}, {9, 10}, {-8, -9}, {
               11, -12}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{41, 29, 26, 28, 46, 3, 42, 47, 39, 26}], 
             "NumericalThresholds" -> {-0.28818127512931824`, 
              0.23388375341892242`, -0.2794799506664276, \
-0.27682068943977356`, 
              0.20008304715156555`, -0.7519146203994751, \
-0.28339913487434387`, -0.2393985241651535, 0.7329769730567932, 
              3.5688905715942383`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {5, 7}, {
               6, -6}, {-4, -5}, {8, 9}, {-7, -8}, {-9, 10}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{35, 33, 16, 4, 17, 55, 30, 29, 13, 15}], 
             "NumericalThresholds" -> {-0.6442338228225708, \
-0.5353096723556519, 
              0.6176687479019165, -0.7790700197219849, -0.39227232336997986`, \
-0.28236499428749084`, -0.09878119826316833, 
              0.23717369139194489`, -1.4252651929855347`, -0.222036212682724},
              "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {6, 
               10}, {7, 8}, {-5, -6}, {9, -9}, {-7, -8}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{29, 55, 17, 9, 6, 24, 28, 39, 13, 23, 48}],
              "NumericalThresholds" -> {
              0.23195907473564148`, -0.28350362181663513`, \
-0.40162336826324463`, -0.009340456686913967, 0.0015772846527397633`, 
              0.7502040863037109, -0.2762945592403412, -1.3444465398788452`, 
              0.7033323049545288, 1.2169334888458252`, -0.41564807295799255`},
              "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, 5}, {6, 
               9}, {7, -8}, {8, -7}, {-5, -6}, {10, -12}, {-9, 
               11}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 29, 11, 14, 31, 31, 32, 41}], 
             "NumericalThresholds" -> {-0.2432405948638916, 
              0.2430577576160431, -0.0017192078521475196`, \
-0.14146950840950012`, -0.30159056186676025`, -0.30640530586242676`, \
-0.5432623624801636, -0.2866012454032898}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 
               6}, {-4, -5}, {-6, 7}, {8, -9}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 11, 27, 34, 39, 17, 53, 6, 10, 7, 53}], 
             "NumericalThresholds" -> {-0.23594850301742554`, \
-0.0023965982254594564`, -0.7590680718421936, 0.20095954835414886`, 
              0.7433314919471741, -0.3949068486690521, 1.3184154033660889`, 
              0.0015772846527397633`, -0.0009976993314921856, \
-0.0011298275785520673`, -0.7545714974403381}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 
               4}, {-2, -3}, {-4, -5}, {7, 10}, {8, -9}, {
               9, -8}, {-6, -7}, {-10, 11}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{32, 39, 7, 34, 54, 17, 33, 29}], 
             "NumericalThresholds" -> {1.8397624492645264`, 
              0.7382060885429382, 0.007468077354133129, 0.18530811369419098`, 
              1.1324046850204468`, -0.39865025877952576`, -0.5431025624275208,
               0.23074598610401154`}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 5}, {4, -3}, {-1, -2}, {6, 
               7}, {-4, -5}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 2, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{13, 4, 5, 34, 2, 38, 45, 8, 50, 34}], 
             "NumericalThresholds" -> {
              0.6923608183860779, -0.7804667949676514, -0.004712105728685856, 
              0.19352099299430847`, -0.32855427265167236`, \
-0.8816096782684326, -0.09515538811683655, 0.007470112759619951, 
              0.7626280188560486, 0.20121602714061737`}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, 
               6}, {-3, -4}, {-5, 7}, {-6, -7}, {9, -11}, {
               10, -10}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{18, 4, 44, 53, 41, 24, 3, 32, 31, 4, 32, 
               47, 43}], 
             "NumericalThresholds" -> {
              0.2387901246547699, -0.2317386120557785, -0.20919065177440643`, 
              1.3138617277145386`, -0.28002050518989563`, 0.751857578754425, 
              0.14386345446109772`, -0.53801429271698, -0.29890134930610657`, \
-0.7771226763725281, -0.5478558540344238, -0.24555978178977966`, \
-0.8817424774169922}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, 
               6}, {-3, -4}, {-5, -6}, {8, 13}, {9, 12}, {10, 
               11}, {-7, -8}, {-9, -10}, {-11, -12}, {-13, -14}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 
               2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{25, 40, 12, 43, 32, 23, 4, 7, 55, 33, 26, 
               8, 9}], 
             "NumericalThresholds" -> {-0.3455654978752136, 
              0.23774279654026031`, -0.3902103304862976, -0.8800429105758667, \
-0.5353262424468994, 
              1.2184158563613892`, -0.24418629705905914`, \
-0.002572022145614028, -0.2834372818470001, -0.550255537033081, \
-0.27902889251708984`, 0.002426982158794999, -0.0028080667834728956`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {5, 
               6}, {-3, -4}, {7, 8}, {-5, -6}, {-7, -8}, {10, 
               11}, {-9, -10}, {12, 13}, {-11, -12}, {-13, -14}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 
               2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 42, 19, 37, 13, 7, 38, 30, 55, 44}], 
             "NumericalThresholds" -> {
              0.0022017601877450943`, -0.2846234142780304, \
-0.2857792377471924, -0.23711590468883514`, 0.6991516351699829, 
              0.0020411175210028887`, -0.8769235610961914, \
-0.10137670487165451`, -0.277649849653244, -0.21429863572120667`}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, 
               6}, {-3, -4}, {-5, -6}, {8, 9}, {-7, -8}, {-9, 
               10}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{44, 35, 22, 32, 42, 26, 14, 45, 1}], 
             "NumericalThresholds" -> {-0.2124486118555069, \
-0.6447456479072571, -0.9059260487556458, -0.5487967729568481, \
-0.27491843700408936`, -0.2815057635307312, -0.1387937068939209, \
-0.09271708130836487, -0.7168065309524536}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, 
               6}, {-3, -4}, {7, -7}, {-5, -6}, {9, -10}, {-8, -9}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 2, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{30, 2, 25, 18, 46, 27, 34, 49, 41, 8}], 
             "NumericalThresholds" -> {-0.1017112284898758, 
              0.032258354127407074`, -0.3503910005092621, 0.2497040182352066, 
              0.2009868025779724, -0.7598404288291931, 0.1888798177242279, 
              0.23288878798484802`, -0.27602696418762207`, \
-0.004668561741709709}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, -11}, {6, 
               10}, {-4, 7}, {-5, 8}, {9, -8}, {-6, -7}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{35, 46, 53, 38, 16, 29, 39, 21, 6, 47, 26, 
               53}], "NumericalThresholds" -> {-0.6442338228225708, 
              0.1906554400920868, -0.7513582706451416, -0.8769235610961914, \
-1.6406584978103638`, 0.2377612590789795, 
              0.7394137382507324, -0.2447025626897812, 
              0.003133284393697977, -0.24727416038513184`, \
-0.2860043942928314, 1.3279714584350586`}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, 4}, {-1, -2}, {-3, -4}, {-5, 
               6}, {7, 10}, {8, -9}, {-6, 9}, {-7, -8}, {11, 
               12}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{36, 23, 26, 49, 51, 30, 26, 27, 35, 5}], 
             "NumericalThresholds" -> {-0.8740578889846802, 
              1.2286462783813477`, -0.2769535183906555, 
              0.24018394947052002`, -0.6022682785987854, -0.09366513043642044,
               3.57232666015625, 1.315220594406128, 1.5609744787216187`, 
              0.0006073098047636449}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, -6}, {4, -5}, {5, 
               6}, {-1, -2}, {-3, -4}, {8, -11}, {-7, 9}, {
               10, -10}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 30, 14, 21, 42, 50, 13, 52, 12}], 
             "NumericalThresholds" -> {
              0.2993186116218567, -0.10370564460754395`, \
-0.14455653727054596`, -0.24859802424907684`, -0.27851414680480957`, \
-1.3252660036087036`, 
              0.6997142434120178, -0.5411303043365479, -0.3887057304382324}, 
             "Children" -> 
             RawArray["Integer16",{{2, 5}, {-1, 3}, {-2, 4}, {-3, -4}, {6, 
               8}, {-5, 7}, {-6, -7}, {-8, 9}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{23, 11, 44, 11, 4, 51, 23, 18, 26, 40}], 
             "NumericalThresholds" -> {
              1.220465064048767, -0.004978862591087818, -0.21287477016448975`,
               0.0014557583490386605`, -0.23674167692661285`, \
-0.599902331829071, 1.2286462783813477`, 
              0.2375723272562027, -0.2725531756877899, 0.2386770397424698}, 
             "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {-3, 5}, {-4, 
               6}, {-5, -6}, {8, 10}, {-7, 9}, {-8, -9}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{33, 34, 30, 49, 41, 41, 44, 29, 46}], 
             "NumericalThresholds" -> {1.8500804901123047`, 
              0.20138554275035858`, -0.1017112284898758, 
              0.23589178919792175`, -0.27658456563949585`, \
-0.27901268005371094`, -0.21360233426094055`, 0.2405429184436798, 
              0.19534654915332794`}, "Children" -> 
             RawArray["Integer16",{{2, -10}, {3, 8}, {4, 5}, {-1, -2}, {
               6, -6}, {7, -5}, {-3, -4}, {-7, 9}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 2, 1, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{42, 26, 17, 1, 7, 17, 2, 38, 30, 23, 31}], 
             "NumericalThresholds" -> {-0.2886343002319336, \
-0.2742486298084259, -0.39411604404449463`, -0.6051715612411499, \
-0.00020069531456101686`, -0.39535045623779297`, -0.22074206173419952`, \
-0.8746742010116577, -0.09298701584339142, 
              1.2243950366973877`, -0.30151572823524475`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 8}, {4, -7}, {5, 
               6}, {-2, -3}, {7, -6}, {-4, -5}, {9, 11}, {
               10, -10}, {-8, -9}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 44, 26, 37, 13, 2, 44, 54, 15}], 
             "NumericalThresholds" -> {
              0.00015872153744567186`, -0.21256130933761597`, \
-0.2795259654521942, -0.2476716935634613, 
              0.6961808800697327, -0.04981738701462746, -0.21563972532749176`,
               1.1403474807739258`, -0.21832175552845}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 6}, {4, 
               5}, {-1, -2}, {-3, -4}, {-5, -6}, {8, -10}, {
               9, -9}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 2, 1, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{35, 31, 39, 49, 18, 18, 46, 5, 55, 27, 
               21}], "NumericalThresholds" -> {-0.6442338228225708, \
-0.29446646571159363`, 0.7346277236938477, 0.24049687385559082`, 
              0.23130516707897186`, 0.23532027006149292`, 0.1993405520915985, 
              0.00006513798143714666, -0.28236499428749084`, 
              1.3224347829818726`, -0.23602548241615295`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 10}, {-4, 
               6}, {-5, 7}, {8, -9}, {9, -8}, {-6, -7}, {
               11, -12}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{37, 49, 52, 33, 49, 29, 32, 33, 3, 52}], 
             "NumericalThresholds" -> {-0.24785491824150085`, 
              0.24930351972579956`, 1.8443783521652222`, -0.5502322912216187, 
              0.2330911010503769, 
              0.23064576089382172`, -0.538075864315033, -0.5360963344573975, \
-0.7174928784370422, -0.5364871025085449}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -11}, {4, -10}, {-2, 5}, {6, 
               8}, {7, -5}, {-3, -4}, {9, 10}, {-6, -7}, {-8, -9}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{44, 29, 41, 8, 6, 24, 2, 18, 18, 48}], 
             "NumericalThresholds" -> {-0.2124486118555069, 
              0.23567265272140503`, -0.2856205701828003, 
              0.003941335715353489, -0.00092666270211339, 
              0.7524213194847107, -0.22074206173419952`, 0.23940062522888184`,
               0.23654180765151978`, -0.40837913751602173`}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {5, -8}, {-3, 
               6}, {7, 8}, {-4, -5}, {-6, -7}, {10, -11}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{27, 1, 40, 46, 29, 39, 32, 26, 29, 54, 9, 
               25}], "NumericalThresholds" -> {-0.7645244002342224, \
-0.8320149183273315, 0.23450236022472382`, 0.19253160059452057`, 
              0.2409287840127945, 
              0.7329127192497253, -0.5409224033355713, -0.2761625051498413, 
              0.23557348549365997`, 
              1.1400798559188843`, -0.008893522433936596, \
-0.3459746837615967}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 8}, {5, 
               6}, {-3, -4}, {-5, 7}, {-6, -7}, {9, 11}, {-8, 
               10}, {-9, -10}, {-11, 12}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{30, 46, 11, 30, 42, 28, 33, 14, 32, 5}], 
             "NumericalThresholds" -> {-0.10137670487165451`, 
              0.19176019728183746`, 
              0.0015728300204500556`, -0.09607347100973129, \
-0.28317469358444214`, -0.2809343636035919, -0.5407297611236572, \
-0.13287262618541718`, -0.5402823686599731, -0.0005517374956980348}, 
             "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 
               6}, {-4, -5}, {7, 9}, {8, -8}, {-6, -7}, {-9, 
               10}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{47, 40, 34, 34, 21, 39, 42, 21, 7, 33}], 
             "NumericalThresholds" -> {-0.24857527017593384`, 
              0.2334093451499939, 0.19449645280838013`, 0.18660558760166168`, 
              4.161210536956787, -1.355685830116272, -0.28466320037841797`, \
-0.24540455639362335`, 0.007227463182061911, -0.5487670302391052}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 6}, {4, 
               5}, {-2, -3}, {-4, -5}, {-6, 7}, {8, 9}, {-7, -8}, {
               10, -11}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{44, 54, 46, 14, 44, 17, 54, 13, 19}], 
             "NumericalThresholds" -> {-0.2124486118555069, 
              1.1403474807739258`, 
              0.191796213388443, -0.1313796043395996, -0.21536998450756073`, \
-0.3949068486690521, -0.8778396248817444, 
              0.6902226209640503, -0.27435341477394104`}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 8}, {-1, 4}, {5, 7}, {
               6, -4}, {-2, -3}, {-5, -6}, {-7, -8}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 1, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{35, 20, 10, 47, 33, 22, 16, 47, 39, 34}], 
             "NumericalThresholds" -> {-0.6442338228225708, 
              0.8165756464004517, -0.004774394910782576, \
-0.24703747034072876`, -0.5431025624275208, 
              1.0980002880096436`, -1.6291142702102661`, \
-0.23411649465560913`, 0.7455904483795166, 0.1918165534734726}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 
               6}, {-4, -5}, {7, 10}, {-6, 8}, {
               9, -9}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 42, 44, 27, 42, 11, 49, 25, 32, 6, 44}],
              "NumericalThresholds" -> {
              0.00009246882837032899, -0.2847328186035156, \
-0.21360233426094055`, -0.7600617408752441, -0.27361398935317993`, \
-0.002291965764015913, 
              0.23654276132583618`, -0.3459746837615967, -0.5430405735969543, 
              0.0010028306860476732`, -0.21722103655338287`}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {-1, 3}, {-2, 4}, {-3, -4}, {6, 
               10}, {7, 8}, {-5, -6}, {9, -9}, {-7, -8}, {-10, 
               11}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{46, 37, 42, 29, 14, 18, 14, 48, 32, 52}], 
             "NumericalThresholds" -> {
              0.1906554400920868, -0.23629118502140045`, \
-0.28278061747550964`, 0.23064576089382172`, -0.14042030274868011`, 
              0.23226043581962585`, -0.13215304911136627`, \
-0.4169299304485321, -0.5453993082046509, -0.5453984141349792}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {-3, 
               5}, {-4, -5}, {-6, 7}, {8, 9}, {-7, -8}, {-9, 
               10}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{34, 4, 32, 36, 2, 4, 21, 38}], 
             "NumericalThresholds" -> {0.20293335616588593`, 
              0.2993186116218567, -0.5478558540344238, -0.8856791853904724, \
-0.1926775574684143, 
              0.8481954336166382, -0.24125522375106812`, -0.8746742010116577},
              "Children" -> 
             RawArray["Integer16",{{2, -9}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
               7}, {-4, -5}, {-6, 8}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{49, 7, 46, 6, 19, 28, 50, 54, 10, 5, 26}], 
             "NumericalThresholds" -> {0.24049687385559082`, 
              0.0005996883846819401, 
              0.19179365038871765`, -0.002942004008218646, \
-0.2767760157585144, -0.27554434537887573`, 0.7563765048980713, 
              1.1442822217941284`, -0.007099180482327938, 
              0.000089256078354083, -0.2769535183906555}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
               7}, {-4, -5}, {-6, -7}, {9, -12}, {10, 
               11}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{18, 29, 2, 52, 51, 32, 36, 49, 41, 31}], 
             "NumericalThresholds" -> {0.24247826635837555`, 
              0.23746854066848755`, -0.35928627848625183`, 1.836435079574585, 
              1.6620992422103882`, -0.5470970273017883, -0.8813322186470032, 
              0.2343602329492569, -0.2795739769935608, -0.3051925599575043}, 
             "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 
               4}, {-2, -3}, {-4, -5}, {7, 8}, {-6, -7}, {-8, 9}, {
               10, -11}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{50, 40, 28, 24, 42, 50, 31, 38, 12, 25}], 
             "NumericalThresholds" -> {0.7482320070266724, 
              0.2472539246082306, -0.28799471259117126`, 
              0.7580598592758179, -0.28278061747550964`, 
              0.7585868835449219, -0.3022567331790924, 
              1.127852439880371, -0.3897554576396942, -0.34926891326904297`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 4}, {-2, -3}, {6, 
               8}, {7, -7}, {-5, -6}, {9, -11}, {10, -10}, {-8, -9}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{15, 46, 44, 35, 29, 16, 7, 8, 8, 49}], 
             "NumericalThresholds" -> {-0.22789150476455688`, 
              0.1993405520915985, -0.21042737364768982`, -0.6468397378921509, 
              0.24708804488182068`, 
              0.6093612313270569, -0.00020069531456101686`, 
              0.004024513065814972, -0.00023998849792405963`, 
              0.23307909071445465`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 9}, {4, -8}, {5, 7}, {
               6, -4}, {-2, -3}, {-5, 8}, {-6, -7}, {-9, 10}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{38, 51, 31, 13, 13, 26, 16, 30, 10, 22, 
               25}], "NumericalThresholds" -> {-0.8767303228378296, \
-0.6028802990913391, -0.29630541801452637`, -1.4244844913482666`, 
              0.6931924223899841, -0.27255088090896606`, 
              0.6071416735649109, -0.10162901878356934`, \
-0.0015482399612665176`, 1.095084547996521, -0.35835567116737366`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {-3, 5}, {-4, 
               6}, {-5, -6}, {8, 9}, {-7, -8}, {10, 
               11}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 30, 4, 37, 38, 36, 40, 9, 16, 26, 10, 
               6}], "NumericalThresholds" -> {
              0.008332572877407074, -0.10214461386203766`, \
-0.24634306132793427`, -0.24228350818157196`, 
              1.1339424848556519`, -0.8796241283416748, 0.2315446436405182, 
              0.0022036724258214235`, 
              0.6123347282409668, -0.28430667519569397`, \
-0.0017120966222137213`, -0.008088450878858566}, "Children" -> 
             RawArray["Integer16",{{2, 12}, {3, 5}, {4, -3}, {-1, -2}, {
               6, -11}, {7, 8}, {-4, -5}, {9, 11}, {
               10, -8}, {-6, -7}, {-9, -10}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{42, 6, 6, 9, 40, 38, 28, 30, 27, 15}], 
             "NumericalThresholds" -> {-0.2886343002319336, 
              0.00009246882837032899, -0.005469297058880329, \
-0.006766029633581638, 
              0.2467905431985855, -0.878632664680481, -0.2709629237651825, \
-0.09324310719966888, 1.315142273902893, -0.21885019540786743`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 6}, {4, 
               5}, {-2, -3}, {-4, -5}, {7, 8}, {-6, -7}, {9, 
               10}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{42, 49, 7, 46, 46, 42, 28, 55, 24, 5, 28, 
               18, 51}], 
             "NumericalThresholds" -> {-0.2886343002319336, 
              0.23307909071445465`, 0.0007998502696864307, 
              0.19765448570251465`, 
              0.1926722228527069, -0.28394192457199097`, -0.2820482552051544, \
-0.2812999486923218, 
              0.750443160533905, -0.0022838411387056112`, \
-0.27806541323661804`, 0.23943549394607544`, -0.6000886559486389}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 6}, {-2, 4}, {
               5, -5}, {-3, -4}, {7, 10}, {8, 9}, {-6, -7}, {-8, -9}, {11, 
               13}, {-10, 12}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 
               2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{35, 2, 55, 7, 12, 25, 18, 54, 20, 39}], 
             "NumericalThresholds" -> {-0.6442338228225708, \
-0.5412371754646301, -0.2795156240463257, -0.00020069531456101686`, \
-0.39002540707588196`, -0.34952348470687866`, 
              0.2383480817079544, -0.8844598531723022, -1.225998044013977, 
              0.7329127192497253}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 7}, {-4, 
               6}, {-5, -6}, {8, 10}, {-7, 9}, {-8, -9}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{37, 49, 42, 43, 37, 27, 9, 50, 44, 30, 
               11}], "NumericalThresholds" -> {-0.2389959692955017, 
              0.24049687385559082`, -0.28278061747550964`, \
-0.8791709542274475, -0.244660422205925, 1.315142273902893, 
              0.0013401064788922668`, 
              0.7582236528396606, -0.21289505064487457`, -0.09414336830377579,
               0.004704352468252182}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, -6}, {4, 5}, {-1, -2}, {-3, 
               6}, {-4, -5}, {8, 11}, {9, -10}, {
               10, -9}, {-7, -8}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{12, 23, 14, 12, 11, 4, 4, 1, 53, 39, 48, 
               35, 16}], 
             "NumericalThresholds" -> {-0.3897554576396942, \
-0.822794497013092, -0.1332555115222931, -0.40088212490081787`, \
-0.003913126420229673, -0.23488770425319672`, -0.23877261579036713`, 
              0.9181451201438904, 1.3257380723953247`, 
              0.7378382682800293, -0.40449258685112, -0.6364554762840271, 
              0.6040313243865967}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 4}, {-1, -2}, {5, 8}, {6, 
               7}, {-3, -4}, {-5, -6}, {9, 10}, {-7, -8}, {-9, -10}, {
               12, -14}, {13, -13}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 
               2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{49, 4, 21, 38, 14, 2, 50, 55, 44, 32}], 
             "NumericalThresholds" -> {
              0.2403600811958313, -0.2432405948638916, -0.24026940762996674`, \
-0.8774847388267517, -0.14131182432174683`, -0.14570355415344238`, 
              0.7538043856620789, -0.27700236439704895`, -0.2177928239107132, \
-0.5454750657081604}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 5}, {4, -3}, {-1, -2}, {-4, 
               6}, {7, -7}, {-5, -6}, {9, 10}, {-8, -9}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 32, 6, 1, 17, 30, 31, 38, 17, 44}], 
             "NumericalThresholds" -> {-0.7790700197219849, \
-0.5428624153137207, -0.0033078533597290516`, -0.6135008931159973, \
-0.40149644017219543`, -0.1017112284898758, -0.2992711663246155, \
-0.8786423206329346, 2.5113470554351807`, -0.2143673151731491}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 
               6}, {-4, -5}, {7, 8}, {-6, -7}, {9, 
               10}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{44, 12, 16, 49, 44, 30, 22, 4, 23}], 
             "NumericalThresholds" -> {-0.2143673151731491, \
-0.4000227153301239, 0.6055265069007874, 
              0.2491055279970169, -0.2250605821609497, -0.10370564460754395`, \
-0.9160439968109131, -0.7804926633834839, -0.8086918592453003}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, -6}, {-3, 
               6}, {-4, -5}, {-7, 8}, {-8, 9}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 2, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{16, 41, 45, 2, 38, 17, 46, 5, 27, 10}], 
             "NumericalThresholds" -> {
              0.6037774682044983, -0.286480188369751, -0.10199172049760818`, 
              0.032258354127407074`, -0.8859114050865173, -0.3959469199180603,
               0.1949169635772705, -0.0005517374956980348, 
              1.319812536239624, -0.003710967255756259}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, -11}, {-4, 
               6}, {7, 9}, {8, -7}, {-5, -6}, {10, -10}, {-8, -9}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{33, 44, 42, 29, 20, 42, 38}], 
             "NumericalThresholds" -> {-0.5340752601623535, \
-0.21398712694644928`, -0.28581327199935913`, 0.2409287840127945, 
              0.8123358488082886, -0.2864554524421692, -0.8816096782684326}, 
             "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
               5}, {-4, -5}, {-6, 7}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{45, 46, 15, 17, 30, 40, 23, 4, 30}], 
             "NumericalThresholds" -> {-0.10418388247489929`, 
              0.19556738436222076`, -0.2263968586921692, -0.3913857638835907, \
-0.09324310719966888, 0.2391768991947174, -0.8083996772766113, 
              0.3055785000324249, -0.0927765816450119}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 7}, {-2, 4}, {5, -6}, {-3, 
               6}, {-4, -5}, {8, 9}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 1, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]]}, "Processor" -> MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 55.], "Key" -> 
            "((f1f2f3f4f8f22f27f40f47f50f52)(\
f5f6f7f9f10f11f12f13f14f15f16f17f18f19f20f21f23f24f25f26f28f29f30f31f32f33f34f\
35f36f37f38f39f41f42f43f44f45f46f48f49f51f53f54f55))", "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], 
         "OOBConfusionMatrix" -> {{0.6428571529686451, 0.3571428470313549}, {
          0.3571428470313549, 0.6428571529686451}}, "Method" -> 
         "RandomForest", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "FeatureFraction" -> 
           Association[
            "Value" -> 55^Rational[-1, 2], "Options" -> Association[]], 
           "LeafSize" -> 
           Association["Value" -> 5, "Options" -> Association[]], 
           "TreeNumber" -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "Implementation" -> 
           Association["Value" -> "DAAL", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[15361], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.3007311`6.9297233363286965, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.6627202093389017, 0.02349803552730567], "Accuracy" -> 
            Around[0.6408746146367451, 0.06985175830050416], "EvaluationTime" -> 
            0.00006641656257686242, "TestSize" -> 95, "ModelMemory" -> 97544, 
            "ModelUtility" -> -0.2888661248227775, "TrainingSize" -> 15, 
            "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
            160624, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.6627202093389017, 0.01661562026592025]}, 
            "AccuracyHistory" -> {
              Around[0.6408746146367451, 0.0493926519720902]}, 
            "Configuration" -> {
             "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
              Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
              0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 
            110], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 269045542366974]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[6.335262118526043, 1.3711212032874587`], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00033287133264930306`, "TestSize" -> 
                 95, "ModelMemory" -> 54288, 
                 "ModelUtility" -> -2.5816982852710133`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 170328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[6.335262118526043, 0.9695291006732207]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1419370831128648`, 0.81745628171273], "Accuracy" -> 
                 Around[0.8053896958751122, 0.12526076236552175`], 
                 "EvaluationTime" -> 0.0005722388235428032, "TestSize" -> 22, 
                 "ModelMemory" -> 80496, 
                 "ModelUtility" -> -0.9597298988354465, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 641744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1419370831128648`, 0.5780288801226121]}, 
                 "AccuracyHistory" -> {
                   Around[0.8053896958751122, 0.08857273448525711]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0005722388235428032, "MeanCrossEntropy" -> 
                Around[1.1419370831128648`, 0.81745628171273], "ModelMemory" -> 
                80496, "TrainingMemory" -> 641744, "TrainingTime" -> 
                0.08360250581623441], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95,
                  "ModelMemory" -> 20720, 
                 "ModelUtility" -> -0.3270465673931656, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 69280, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6916370843501094, 0.0062588525193839105`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6458559805906412, 0.12646275393808698`], "Accuracy" -> 
                 Around[0.6314766523968512, 0.14710342215590386`], 
                 "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 119464, 
                 "ModelUtility" -> -0.29444260269888656`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 366304, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6458559805906412, 0.08942267087714707]}, 
                 "AccuracyHistory" -> {
                   Around[0.6314766523968512, 0.10401782734218702`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.6458559805906412, 0.12646275393808698`], 
                "ModelMemory" -> 119464, "TrainingMemory" -> 366304, 
                "TrainingTime" -> 0.10322503774428209`], "Index" -> 2], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6612814986725103, 0.03281199323703066], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 
                 95, "ModelMemory" -> 13408, 
                 "ModelUtility" -> -0.28948168119251805`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 74152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6612814986725103, 0.02320158292215151]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6948904978969805, 0.06913001620314675], "Accuracy" -> 
                 Around[0.41408534804902536`, 0.14723724723079126`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 46752, 
                 "ModelUtility" -> -0.34889059248633914`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 322496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6948904978969805, 0.048882303240780973`]}, 
                 "AccuracyHistory" -> {
                   Around[0.41408534804902536`, 0.1041124559601327]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.6948904978969805, 0.06913001620314675], 
                "ModelMemory" -> 46752, "TrainingMemory" -> 322496, 
                "TrainingTime" -> 0.015047184026769026`], "Index" -> 3], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.102271345944818, 0.15419556460619946`], "Accuracy" -> 
                 Around[0.526291281303412, 0.0724807042994671], 
                 "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 
                 95, "ModelMemory" -> 5968, 
                 "ModelUtility" -> -0.8181472441639723, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 77480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.102271345944818, 0.10903272936193202`]}, 
                 "AccuracyHistory" -> {
                   Around[0.526291281303412, 0.051251597515330136`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1693312925967607`, 0.3202082875523821], "Accuracy" -> 
                 Around[0.4575636089185905, 0.14942705635897574`], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 6288, 
                 "ModelUtility" -> -0.9029335072693082, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 158600, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1693312925967607`, 0.22642145152042134`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4575636089185905, 0.10566088484417616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[1.1693312925967607`, 0.3202082875523821], 
                "ModelMemory" -> 6288, "TrainingMemory" -> 158600, 
                "TrainingTime" -> 0.02989116781190048], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6627202093389017, 0.02349803552730567], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00006641656257686242, "TestSize" -> 95,
                  "ModelMemory" -> 97544, 
                 "ModelUtility" -> -0.2888661248227775, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 160624, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6627202093389017, 0.01661562026592025]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6663254360232492, 0.03980114525280433], "Accuracy" -> 
                 Around[0.6749549132664163, 0.14368460052805063`], 
                 "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
                 "ModelMemory" -> 98800, "ModelUtility" -> -0.299101236299012,
                  "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 219064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6663254360232492, 0.028143659707248702`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6749549132664163, 0.10160035538546477`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
                Around[0.6663254360232492, 0.03980114525280433], 
                "ModelMemory" -> 98800, "TrainingMemory" -> 219064, 
                "TrainingTime" -> 0.0377968173892688], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[23.779568654631646`, 4.720013350287113], "Accuracy" -> 
                 Around[0.4846246146367454, 0.0724836937144565], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9560, 
                 "ModelUtility" -> -3.9009386939948683`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 121520, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[23.779568654631646`, 3.3375534472790527`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4846246146367454, 0.051253711350940916`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 6.641656257686242*^-6, "MeanCrossEntropy" -> 
                Around[23.779568654631646`, 4.720013350287113], "ModelMemory" -> 
                9560, "TrainingMemory" -> 121520, "TrainingTime" -> 
                0.08360250581623441], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[5.211338360210993, 1.006704221390944], "Accuracy" -> 
                 Around[0.5054579479700787, 0.07254454783434337], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9560, "ModelUtility" -> -2.381925804651487, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
                 "TrainingMemory" -> 121208, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[5.211338360210993, 0.71184738159466]}, 
                 "AccuracyHistory" -> {
                   Around[0.5054579479700787, 0.05129674171177606]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
                Around[5.211338360210993, 1.006704221390944], "ModelMemory" -> 
                9560, "TrainingMemory" -> 121208, "TrainingTime" -> 
                0.06640783086353597], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.0967948502013303`, 0.1650061558679542], "Accuracy" -> 
                 Around[0.526291281303412, 0.0724807042994671], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9560, "ModelUtility" -> -0.8152187582561689,
                  "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379,
                  "TrainingMemory" -> 121448, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0967948502013303`, 0.11667697175175484`]}, 
                 "AccuracyHistory" -> {
                   Around[0.526291281303412, 0.051251597515330136`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6831140069705061, 0.19034507404826573`], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 9560, 
                 "ModelUtility" -> -0.36631928736149366`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 189688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6831140069705061, 0.1345942926249842]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.6831140069705061, 0.19034507404826573`], 
                "ModelMemory" -> 9560, "TrainingMemory" -> 189688, 
                "TrainingTime" -> 0.07541456536256848], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8411478729776051, 0.2735919999348135], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 9560, 
                 "ModelUtility" -> -0.5832174967456579, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 189928, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8411478729776051, 0.19345875843229607`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.8411478729776051, 0.2735919999348135], "ModelMemory" -> 
                9560, "TrainingMemory" -> 189928, "TrainingTime" -> 
                0.08360250581623441], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 269041247399678]], "MaxTrainingSize" -> 110, 
         "PreprocessorEvaluationTime" -> 0.0000105193359375`2., 
         "PreprocessorMemory" -> 138200, "InputDimension" -> 55, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6463341980550162, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.7985341419316482`17.33219102343741*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.2799999999999999, 
             "ElapsedTimes" -> 0.27526140000000004`, "ExperimentCounts" -> 8], 
            Association[
            "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.3884846, "ExperimentCounts" -> 7]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association["ID" -> 269054132301566]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.001987292522879637}, "ID" -> 
              4320974050493114959], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.000980119587744349}, "ID" -> 315661506761656104],
             "f3" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.004381303688526783}, "ID" -> 
              4609396093183805747], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5}, "ID" -> 
              7888368477895926768], "f5" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5346155557091875260], "f6" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              1262337938308826583], "f7" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8820429014208658305], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2830026427724412347], "f9" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3065081949069868795], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5952194722661206634], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4172377243062797276], "f12" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2254453161829243277], "f13" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              417184411674810962], "f14" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4954205544333763648], "f15" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8393142517673332977], "f16" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2368135820070429490], "f17" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4554038105226310238], "f18" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8564651345156656521], "f19" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7118169994420534225], "f20" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              685428322961758535], "f21" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              1180870158250527878], "f22" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8308904938442281859], "f23" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4435869279503404840], "f24" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              3830096988561467597], "f25" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6131165527094671781], "f26" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4200099109053498134], "f27" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2389001383860909557], "f28" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8421754851285438811], "f29" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2619911442566100223], "f30" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              272508841316359729], "f31" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5989163223125915559], "f32" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5023831084100741178], "f33" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7254670121457779111], "f34" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2803790281412067686], "f35" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              2253028538090021358], "f36" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8397340437921861161], "f37" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5446665757225766772], "f38" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7863093911416874018], "f39" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              1316854479138420980], "f40" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8653960014761669852], "f41" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6500335968749947662], "f42" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1771674503716709970], "f43" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              6665570373315487216], "f44" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2734552590389718265], "f45" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              9193351121365258527], "f46" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7886495976057884603], "f47" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              1222175066655414199], "f48" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3800845768307102070], "f49" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3230373167919047936], "f50" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              4586859744615402324], "f51" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8676025994051584186], "f52" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              261622186732691771], "f53" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5251244623107586582], "f54" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              989007788963465036], "f55" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6560666033651434576]], 
           Association[
           "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1,
             "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1571558, 
         "MaxTrainingMemory" -> 1167152, "DataMemory" -> 929808, 
         "FunctionMemory" -> 486280, "LanguageVersion" -> {12.1, 0}, "Date" -> 
         DateObject[{2020, 5, 15, 12, 22, 22.1101715`9.097167040399443}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        0.002742856482203961, 0.0009611854860558385, 0.002892876469155599, 3, 
         1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.001704141656958028, 0.0006617173076112417, 0.007508424018214351, 1, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 
         0, 0, 1, 1, 0}, {
        0.0029969934830547133`, 0.0012032082868960632`, 0.007947779832756888, 
         7, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
         1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
         1, 0, 0, 0, 0, 0}, {
        0.0017991688438474653`, 0.0012396762978101733`, 0.005272002492468928, 
         4, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
         1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
         1, 0, 0, 0, 0, 0}, {
        0.0026385439030547145`, 0.0015339186522904415`, 
         0.0032832551341424993`, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 
         0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 
         0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0}, {
        0.003342335102635483, 0.0009466068802355844, 0.005608200903576244, 4, 
         1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.003589084030695279, 0.0013276852201036533`, 0.007041650700829742, 3,
          0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,
          0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1,
          0, 0, 1, 1, 0}, {
        0.004427859532784215, 0.0016545651035664928`, 0.01247309377642404, 7, 
         0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}, {
        0.003288565482747599, 0.0015896659134678015`, 0.004604378811730589, 1,
          0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1,
          0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,
          0, 0, 1, 1, 0}, {
        0.0011433323150822812`, 0.0004364105851348042, 0.009131485154821137, 
         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 
         1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
         1, 0, 0, 0, 0, 0}, {
        0.0037364831666406523`, 0.0012127492611802182`, 0.006774198539696626, 
         2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
         1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
         1, 0, 0, 0, 0, 0}, {
        0.0029008260676477785`, 0.0014764831848957725`, 0.004398478895920877, 
         4, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
         1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
         1, 0, 0, 0, 0, 0}, {
        0.0028066891892804414`, 0.0011677812659528723`, 0.010004129208828412`,
          1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
          1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0,
          1, 0, 0, 0, 0, 0}, {
        0.001966681418466253, 0.00135628743053894, 0.006574887303437697, 3, 0,
          1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1,
          1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1,
          0, 0, 0, 0}, {
        0.004303180533678753, 0.0015233245320398388`, 0.012150430016555898`, 
         5, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
         1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
         1, 0, 0, 0, 0, 0}, {
        0.002911181172847666, 0.0010104925859168226`, 0.008546152612740096, 3,
          0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1,
          0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1,
          0, 0, 0, 0, 0}, {
        0.003138588459463973, 0.0013504447668227042`, 0.004579180523311962, 2,
          0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,
          1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1,
          1, 0, 0, 0, 0}, {
        0.0024905932968404655`, 0.0012405352886126005`, 0.007303765804535912, 
         0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 
         1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 
         1, 0, 0, 0, 1, 1}, {
        0.0023002230310254566`, 0.0014859778613716137`, 
         0.0062277031207299905`, 5, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 
         1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
         0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}, {
        0.0022412788106185447`, 0.0009639411445887004, 0.007954918295070725, 
         4, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 
         1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 
         1, 1, 0, 1, 1, 0}, {
        0.001692408765460826, 0.001314266585169407, 0.0037923726488239776`, 5,
          1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1,
          0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1,
          0, 0, 0, 1, 1}, {
        0.0020353269139815515`, 0.0013077895804229547`, 0.007323925300228177, 
         3, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 
         1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 
         1, 0, 0, 1, 1, 0}, {
        0.0035084939828442835`, 0.0017133181898631848`, 0.007373585714129375, 
         1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 
         1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 
         1, 1, 0, 1, 1, 0}, {
        0.0017907520590454687`, 0.001345469098892494, 0.004027970177337451, 3,
          0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,
          0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1,
          0, 0, 1, 1, 0}, {
        0.0020128002552121486`, 0.0008934267124638364, 0.005550283390360934, 
         3, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 
         1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 
         1, 0, 0, 1, 1, 0}, {
        0.002583840189365972, 0.0012642691352116287`, 0.006736589429320739, 5,
          0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,
          0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1,
          0, 0, 1, 1, 0}, {
        0.002499488450998751, 0.00103690567741659, 0.0038851098823570324`, 6, 
         1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 
         0, 0, 0, 0, 0}}, 
      "Output" -> {
       True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, False, False, False, False, False, False, 
        False, False, False, False, False}], 
    "Predictions" -> {
     True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True}, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmViYGCQBmIQnW+wwC5n+cv9/Fn236x4Hu+X+3Vpx4Qlb/aL5FsF
9517gMF/4RN/fuGzV/vDaw9m5gs+2v8w67rDneDX+49YTdjevP/h/r2irCt3
2r/cn7qlqW5C4uP9hMxHN+/kcr0pEw693m+12mpVet7D/YdlFk74JP52/6u3
1+xO1j/YL3HwnvJJozf7t+3O1xeXe7h/ZmhemW7Nu/2ffqy4fl3//v6ap299
r1e92m+1dOsnvZRHGPah60d3Pzof3X05U+/oFgu82h8gbLL02PZH+3d1bH8V
dPPF/pNHLv4+vf0xhjy6+9HDA10/un3o4QkAUaQEXQ==
     "], "CountMatrix" -> {{0, 11, 0}, {0, 16, 0}}, 
    "IndicesMatrix" -> {{{}, {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
       27}, {}}, {{}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
       16}, {}}}, "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {27}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006044925925925926, "SingleEvaluationTime" -> 
    0.0114423500000000004`2., "Version" -> {12.1, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7946054160587225`*^9, 3.7946056025542336`*^9, 
  3.794885156581441*^9, 3.795346699328346*^9, 3.795376331398195*^9, 
  3.7953775381352024`*^9, 3.795951331465831*^9, 3.7977278717076316`*^9, 
  3.7977289464841866`*^9, 3.7977679998271933`*^9, 3.797773360608044*^9, 
  3.79777688778082*^9, 3.7977773931700277`*^9, 3.7977781591316767`*^9, 
  3.797778902936447*^9, 3.7977860078753295`*^9, 3.7977975605833187`*^9, 
  3.7978055472124834`*^9, 3.798548159653582*^9, 3.7985485424991016`*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"d9afc394-5707-476c-91d2-c8406b0fd509"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassErRedpHMaccs", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7946054168816786`*^9, 3.794605423008206*^9}, {
  3.7946056043724213`*^9, 3.794605605312814*^9}, {3.795377541045455*^9, 
  3.795377544238885*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"ad5eefac-0ab6-4f52-bddd-9e874ab627fd"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.5925925925925926`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "Indeterminate"}], ",", 
       RowBox[{"True", "\[Rule]", "Indeterminate"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "1.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.7670454545454545`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.7102272727272727`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.7441860465116279`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.794605423304203*^9, 3.7946056058341827`*^9, 
  3.794885161185073*^9, 3.7953466993882227`*^9, 3.795376331446065*^9, 
  3.7953775449021444`*^9, 3.795951331681032*^9, 3.797727871787865*^9, 
  3.7977289465844316`*^9, 3.7977679998950577`*^9, 3.7977733606830373`*^9, 
  3.797776887821748*^9, 3.797777393248139*^9, 3.7977781592254057`*^9, 
  3.7977789030342197`*^9, 3.7977860079411507`*^9, 3.7977975606990094`*^9, 
  3.797805547298252*^9, 3.798548159757818*^9, 3.798548542545966*^9},
 CellLabel->
  "Out[170]//TableForm=",ExpressionUUID->"a0c376fb-8eb9-4ef2-a620-\
88dd2dc2c244"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["One-Hot Encoded Amine", "Section",
 CellChangeTimes->{{3.797728601177741*^9, 
  3.797728605009495*^9}},ExpressionUUID->"f65314a4-2e28-47f2-82c9-\
b869b9146999"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "1841", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"allDataErOHTrain", ",", "allDataErOHTest"}], "}"}], "=", 
   RowBox[{
    RowBox[{"trainTestSplit", "[", "0.8", "]"}], "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"allDataOneHot", ",", "erGroupQ"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.794884636302066*^9, 3.7948847040020504`*^9}},
 CellLabel->
  "In[171]:=",ExpressionUUID->"44f7ffd7-00ef-4d38-8263-35993fb01787"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"all", " ", "columns"}], ",", " ", 
   RowBox[{"er", " ", "rxns"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948833196755486`*^9, 3.7948833547680225`*^9}},
 CellLabel->
  "In[173]:=",ExpressionUUID->"72c0a8f2-ca7b-44be-8e72-83316f581a10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classOhEr", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLOH", "@", "allDataErOHTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.794884411579316*^9, 3.7948844175507565`*^9}, {
  3.7948844544204245`*^9, 3.794884500741375*^9}},
 CellLabel->
  "In[174]:=",ExpressionUUID->"375935a1-8645-4148-9ce3-57765c538b29"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "25", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Numerical", "Numerical", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", "Boolean",
                     "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "25", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Numerical", "Numerical", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", "Boolean",
                     "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["110", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "NCCN" -> 
           Association["Type" -> "Boolean"], "NCCCN" -> 
           Association["Type" -> "Numerical"], "NCCCCN" -> 
           Association["Type" -> "Boolean"], "NCCCCCN" -> 
           Association["Type" -> "Boolean"], "NCCCCCCCN" -> 
           Association["Type" -> "Numerical"], "NCCCNCCCCNCCCN" -> 
           Association["Type" -> "Numerical"], "CN(C)CCN(C)C" -> 
           Association["Type" -> "Boolean"], "CNCCNC" -> 
           Association["Type" -> "Boolean"], "C1CNCCN1" -> 
           Association["Type" -> "Boolean"], "CC1CNCCN1" -> 
           Association["Type" -> "Boolean"], "CC1CNC(C)CN1" -> 
           Association["Type" -> "Boolean"], "C1CN2CCN1CC2" -> 
           Association["Type" -> "Boolean"], "Cl.Cl.NC1CN2CCC1CC2" -> 
           Association["Type" -> "Numerical"], "Cl.Cl.NC1CCNC1" -> 
           Association["Type" -> "Boolean"], "NCC1CCCCN1" -> 
           Association["Type" -> "Boolean"], "CC1=NC=CN=C1" -> 
           Association["Type" -> "Numerical"], "NCCNCCN" -> 
           Association["Type" -> "Boolean"], "C1CC(CCN1)C2CCNCC2" -> 
           Association["Type" -> "Boolean"], "C(CN)CN" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                  "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                  "H2O Mole Fraction", "pH", "NCCN", "NCCCN", "NCCCCN", 
                  "NCCCCCN", "NCCCCCCCN", "NCCCNCCCCNCCCN", "CN(C)CCN(C)C", 
                  "CNCCNC", "C1CNCCN1", "CC1CNCCN1", "CC1CNC(C)CN1", 
                  "C1CN2CCN1CC2", "Cl.Cl.NC1CN2CCC1CC2", "Cl.Cl.NC1CCNC1", 
                  "NCC1CCCCN1", "CC1=NC=CN=C1", "NCCNCCN", 
                  "C1CC(CCN1)C2CCNCC2", "C(CN)CN"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 25]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Boolean", "Numerical", "Boolean",
                   "Boolean", "Numerical", "Numerical", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f8f11f12f19f22)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]], 
             "Version" -> {12.1, 0}, "ID" -> 8050051190399832767]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6f8f11f12f19f22)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]], 
             "Mean" -> {0.0027125744939508526`, 0.03661327540196216, 
              0.0013702662912860152`, 0.005885270631865775, 
              0.9534186131809349, 2.436363636363636, 0., 0., 0., 0., 0.}, 
             "StandardDeviation" -> {0.0008922678396605211, 
              0.007732101328696449, 0.0011033857541175838`, 
              0.0028718051216307847`, 0.006045733366698505, 
              1.8267072847427503`, 1., 1., 1., 1., 1.}, 
             "Version" -> {12.1, 0}, "ID" -> 4379057655022649502, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f8f11f12f19f22)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 1459333080280557027]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 5402267474867977866, "Output" -> 
             Association[
              "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 4989418527115648706, "Output" -> 
             Association[
              "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6f8f11f12f19f22)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11], 
               "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]], 
             "Spans" -> {
               Span[1, 11], 
               Span[12, 25]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                  1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             6971839385794057051]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                  1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 110, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.1556412392689129`*^-15, 
                    6.207156001313375*^-16, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 4.703863561287976*^-14, 
                    1.8066356491627547`*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, "Method" -> 
                   "Naive", "VectorLength" -> 25, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.1556412392689129`*^-15, 
                    6.207156001313375*^-16, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 4.703863561287976*^-14, 
                    1.8066356491627547`*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                   "StandardDeviation" -> {0.9999999999999958, 
                    0.999999999999997, 1.0000000000000002`, 
                    0.9999999999999991, 0.9999999999846566, 
                    0.9999999999999999, 1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 25, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 25]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 18]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1:eJzNlvk31dsbx91yM1RSlwgNSFEnSnWV6VFCXQ1kzFCh5LoqZCqUhoNkOBWZ
xTFnPDgOBz0ydTrGYz4oxxQSl3sp3XC/rdXxw7f1/QO+e629Xuv97Gc/+72e
z1qfvaVtr5+9vIKHh2fTt7nh29Q1cJQ2Ce+AN0WLa6Ous7Hpp97sQPVXqPru
trW3djLw5GSENVBeYtDKmsx9E4VIOGLLp5ZFxSvPs5SlrWIxYz4vXvLnRKhe
mKg+mhoLamSbpy/tArGR9/xIg3I+EIo2S3CIUaBi5mRS/agbZYSF8K4JFQQD
71JjKFUwv/+WYohXE+S8XH1ST3wED9YpdPeeHcDUktduOoklSJZsMPn6dyWY
Gtn6NkVm4/5jf4lMiETglpqxC5bnYzEpyNl2avghGm6rW5I95YcSInOR22gO
oMqRT/2UfRULaAuVKQJOwFF8YOQy5Qqe4yey/iQGQFfHatWAjwx4oX+CVi1c
Bm7BZ8rcRV+BUp3DSUm1x5h2VD7Vu78efSM9T0+LtMGzz+wnbv/UgsvggMwr
3wHg1w5Ssr9eBF4W4QK5ikU4uOnChVXC8bhlAtJpPYHY/JvGE/N0F/DoCCOX
7HgCX8P2y3PiiXhqJubS112X4EnQro8ZozcwnLJUy6PmgJkhZ+bDXuXBnG9A
Z4BCFTqt77tm2TYIwzmxj5TY3bD6KvFKrDcDbFnRM1rqbIjM6pPcs5GN6QuF
+jKFBbDAO78qPakC8yRO3ptaVQD38/dVuMymQ+i+8iUblj/mmnb/fsg6GEKP
RgcfDCOh7q4P9HvJJFTe9taKJZ+AbsLMICHCHVTcLPB1d4kfiup6pNNyytGC
+CiFfrAAShyEHrQuvQbXPAXWg+0j2EcXym4eaIOLu73S1DPYkECfVn3/sAMm
q9JXRRJacfVhXd9LB8tAuHNm2oAUDaQjMNl2Oh4qY/a/4jwgQ5TSPanVud5A
Kc4gku86I2eliEacCBGuCHYszFv7w8Hi854TK/zRwXrl5zDdYEzMstlZdKwa
dd/bOVsPV6PwqS81E/3daKtdzbvJqhE0FbyN779kwCnTG+28VBqmamy0iP/c
iYpi6mIFftlg4/oKpwjdIOZ94a+W6hTct8ts/I5mIcTFnthkakMHhzCxusm+
LOjtiWljDfiBL1nv+pjuM/Q9Gq4t3R0HjCtKdRnDhSinbz+WWJSFn/QaRgqo
pTDfGrPKYn4cJXl3L176lY7tNmw/YWouSko4uTb/kYU8/9ejsvQ7Oarf6af2
ndvUv9OZS7/y7yQtay7zl/O46xeXyY2TuPX2cjlP/84F7nkLXJ14mJvHjRtw
8zlq/+0jcZk/+In5Ib6cl7FMbny67DujuHTm1r/F1T5czbPsi+uHxF3n59ZZ
7kf+D+eRyv+3X9IP/VreJ89lO7d+Cfd8Blczufoi18/yqOSub1vuw7KPZX/q
/50f/EMfEn/4jsv+DJb3cbncL36uXlMeRsonnvaqB8Xfz/y5tZGNbI0/4wcD
8yEi+nlYJV8rtvgr6l3Y3Qq2Gt4agxZU9DCUYnScqQGXbDZz9FEB6gigtZFo
IhIV/tjqNXkL5PaYmPcBHQo2vowpvZaJjoeuMwdW+8E7uwUzul0/xP/5LOz3
ozT4V0/gjONwI+ZGD2h/ym8HzfdabXkBGXBMnznN9qTjUtF7TpmBCxB3vza5
87IKwkNaSmlvOjDG32Frt34UphTuXvMbeQycVjZ/DKIy8QoW13uJZWGMoNzG
61sLQGxv0oyyXy5MVH/IsvznGe5/2qs2dyAMzgq2TTK3ZSA7SZoYfo2F3k8F
YliGldhzjp7+q1E+rlnguXlnexEoWQrn8MntBj+vWbMQ9xLg8z7l4fwmFPU6
58iSK1hoeyNr7qd37WB+o3+HnCwHdykeuST/bzX0fWXFhgR1Y2Z46JRJei2S
JIiE46dfY21FTZlgUBO+9U1i3LeKxNLSWjM303w09wuQHF0bDK2y6qtuBnSB
eqwEgaxZDcez32mFHKCDmnWEvzimYvMXJ35+iUx4d/Jpf609DdUMfBJnOiKQ
5znD9KlqOiTpuWsHH6OBgOnA4bwWJsbdP+ryvK4Ykd04H6xcCTa23vCRnwJe
ipZ3bvKUwN71wV8O2LnDWYU+jrzMR7ArrqR1IhXuVMx3almloqiR/qOdhg1I
jDTNQRUqnHYz+MXKLwiPd8t8VpyOwzR9u4QXX8vhn8WGuXXtZBy7FWZ3ZIqE
3iGEXxID81Hq0HbSi39TYX2Bl4HIjm/9cjWxcVp8jfvcX+8bcE/Eb5deu6jG
Y3wRXZ4sRmiHyFXHCXJD47BBxatH2JiBPkdUPhQ3lKJ91dHqLYIU/JzqYKXh
/xCej8itObLiDKjfotfPGkdAKG+Kjkrgc6Rwyhzu0srgVtoJlQtmFdgQ7hhw
/7jtt3ukRVRuQzlkj3kT6mcGIJc6NNs3NAg28oKHEoayUcvn3Zzu5RbUfez/
t487DU/kD46Nx5JQh52Q9j4qHB6pyAcMGxVia5S/Q7grBayGSJfy9INhYYrg
26rUhFI7B3PU5mrAhqByen2RD8jKfLoccO0ehjLNbRuLMuHBpfMUHZFM5BX/
mHWymgaBBWlhQwuIm/5OT97MbEefBQ7NyiQdPOleb3rWs1HPvqnu6tk+fLJF
4O1w3VtI9BhQOyTGgKnaKk3hRhaWu8fIXl6Xhs6ygc2HGyvQnNIgqTlVhiZ7
jKoi/y7Az/fcm4cFWjDP+E2xQiEVelZKXRTIicOszbPyxbNuYNTAl+38RzPM
0dfdV7/ZBQXvxaN9dfrhgO/ijakeMjwWH2z+pa8IJU5HBK0re4G+zRLHSJpP
we635EGdp0FQGsLrMZSWDPdVXKTSOCb4yPfXtOnSx3DNsshsMjkajR94Rl3J
jIGbi7tW2P1UB668POY/3QnG0T0yZGPRdjRab79JiNKNjA1Zr6+K9+PDWXGF
RaUQvOillUArIYOpzzh15lk+npRlXHVLLkOZQYIWUTYCz+2YYGEKFf8wV3d1
Vi5Euv7aLTuj87FKP3ax5KgzeIY7MuyGc6Bmldc+q0g93HLt/NiSIQdW2PqM
2deMQ4/4EXNHrXjo1vk53HKcgdif+rtsQjIYWgq9mbBIRZ3Ru5sLm8igZthH
MemnYkcwbeygaR5Mrt1B2iaRiXrMHpZy0rf/3Swtzj+zAouNrZXCHteheD/z
uH1hF+zdvl/Je3QAB2XfLjmR2eB22y9ErLQb7dRGd/Yp1aO407xx1DsS+hCk
XECCgleP1wx1vmIgo+lNwlqpb+8QvTzZAw4U0Lyc3nOOk46ik53Se96mw2Dv
JKSEV+DJ28SgL9QHoCpoHSufTocQN2ZimWcVLr3svhr2pg7Px4Nu3MlmZNhu
kFxDrIE0jWlPyQ8vUDMPqj9ojGPohFApW68Q5Oy1LcXOV6PlCR1zxxcuKHv/
S9Tn3UXY/NeTsJHZVjTz2kg495mGTiYLtaGv03BO+sRLwW0eYOAFF5M78+GS
3taUCeNo8LF16mlyZcCgzKs6YlcLDt+RXXlEKAZVJm3iDTOZMDYntjNbGKGU
IiSiPFMP8Feq44rVbqBr2Jsh10rHM757Rwbli+DcdNrWIJMqyD+2npB2cQR9
tZ1Z3dLdcFona3S7IBHiz2rz8QRR0CzfWTRJtx1ukXoD7C1KkN/RPMKVtxal
IxynDyUUwbH5XNGm8SbgZByq/yTTiUPJXV98nxXg2zm+25ThRnhuZHZ9MYkG
+//xvNe4sRr2FV9fqJfKwIrxf9uE88rQgNIS6rynCjxu5W9MZ5aAHidoZ9vA
W7CRkvcgqPVgLu+m5rx7DfCe9cHkilYdhr9oPPjkTBfQvjzml++qwsS1Mn5b
NzDRYfjsuiZJEqoqzIv38CUi6+LlG5evkZFKPjvSurMeZlikkrBfqlA5EPn2
GDNA7zD82tvZDwUxxDgLp2HIEuxS1S2kQeH7tJBp3yrkpSx1bZRl4cOfs7o7
eKtBVz3t6chEAeT5j/bKH49Ex606LYOBTGCeuG2x1ygF9rjzi5yTew76OrIz
4+2R8B/lySVc
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.1556412392689129`*^-15, 
                    6.207156001313375*^-16, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 4.703863561287976*^-14, 
                    1.8066356491627547`*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    0.999999999999997, 1.0000000000000002`, 
                    0.9999999999999991, 0.9999999999846566, 
                    0.9999999999999999, 1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 18, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0187563, "MaxTrainingMemory" -> 118832, 
                  "DataMemory" -> 22640, "FunctionMemory" -> 27832, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 22.7520381`9.109595235463372}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 25, "Output" -> 
             Association[
              "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             8527455847692012519]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
             "Mean" -> {1.1556412392689129`*^-15, 
              6.207156001313375*^-16, -4.289498049688105*^-17, 
              5.752973854875811*^-16, 4.703863561287976*^-14, 
              1.8066356491627547`*^-16, 0., 0., 0., 0., 0., 
              0.18181818181818182`, 0.09999999999999999, 0.09090909090909091, 
              0.045454545454545456`, 0.06363636363636363, 
              0.14545454545454545`, 0.08181818181818182, 0.03636363636363636, 
              0.00909090909090909, 0.07272727272727272, 0.07272727272727272, 
              0.01818181818181818, 0.01818181818181818, 0.06363636363636363}, 
             "StandardDeviation" -> {0.9999999999999958, 0.999999999999997, 
              1.0000000000000002`, 0.9999999999999991, 0.9999999999846566, 
              0.9999999999999999, 1., 1., 1., 1., 1., 0.38569460791993504`, 
              0.3, 0.28747978728803447`, 0.20829889522526546`, 
              0.24410402876541004`, 0.35255853508482393`, 
              0.27408751693966066`, 0.18719327529067273`, 0.09491187735373227,
               0.25968830649246727`, 0.25968830649246727`, 0.133608531424537, 
              0.133608531424537, 0.24410402876541004`}, "Output" -> 
             Association[
              "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
             "Version" -> {12.1, 0}, "ID" -> 4716705353569549883]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1896705890663231818]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 8748628872160238337, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 7129751554765353380]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.3482142857142857, True -> 0.6517857142857143]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2, 9, 16, 8}], 
          "NumericalThresholds" -> {-0.5880609452724457, \
-0.0008109045447781682, -0.2590217739343643, 0.001216973876580596}, 
          "LeafValues" -> 
          RawArray["Real32",{0.16521738469600677`, 
            0.02222222276031971, -0.14666666090488434`, 0.05000000074505806, 
            0.15000000596046448`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6, 21, 18, 1}], 
          "NumericalThresholds" -> {-0.24551329016685486`, \
-0.28229959309101105`, -0.2984703332185745, -0.024068507365882397`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.1703755110502243, 0.10266613960266113`, 
            0.010353486984968185`, -0.1472962200641632, 0.06834600120782852}],
           "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2, 9, 16, 14}], 
          "NumericalThresholds" -> {-0.5880609452724457, \
-0.0008109045447781682, -0.2590217739343643, -0.3135950416326523}, 
          "LeafValues" -> 
          RawArray["Real32",{0.14199163019657135`, 
            0.02032477781176567, -0.13439972698688507`, 0.042460162192583084`,
             0.13126003742218018`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6, 21, 4, 22}], 
          "NumericalThresholds" -> {-0.24551329016685486`, \
-0.28229959309101105`, -0.2511119395494461, -0.2773115932941437}, 
          "LeafValues" -> 
          RawArray["Real32",{0.15413708984851837`, 
            0.08680519461631775, -0.13950850069522858`, 0.012432549148797989`,
             0.05864053592085838}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 6, 16, 20}], 
          "NumericalThresholds" -> {-0.20015810430049896`, 
           0.30509884655475616`, -0.2588934451341629, -0.09504415467381477}, 
          "LeafValues" -> 
          RawArray["Real32",{0.14606904983520508`, 
            0.02670157141983509, -0.11513210088014603`, 0.14219261705875397`, 
            0.0020924562122672796`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2, 22, 15}], 
          "NumericalThresholds" -> {-0.5880609452724457, \
-0.28316791355609894`, -0.21435962617397308`}, "LeafValues" -> 
          RawArray["Real32",{0.12050308287143707`, 0.08412087708711624, 
            0.020885774865746498`, -0.11833769828081131`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 10, 3, 12}], 
          "NumericalThresholds" -> {0.6698188185691833, 
           0.0025593581376597285`, -0.35120876133441925`, \
-0.4758021682500839}, "LeafValues" -> 
          RawArray["Real32",{0.08285520225763321, 0.13279877603054047`, 
            0.108644999563694, 0.021898671984672546`, -0.11435093730688095`}],
           "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {-1, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 6, 1, 20}], 
          "NumericalThresholds" -> {-0.20015810430049896`, 
           0.30509884655475616`, -0.024068507365882397`, \
-0.09504415467381477}, "LeafValues" -> 
          RawArray["Real32",{0.12950639426708221`, 
            0.10714458674192429`, -0.1005495935678482, \
-0.0024376835208386183`, -0.004313127137720585}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 18, 14, 1}], 
          "NumericalThresholds" -> {
           0.1961836740374565, -0.2899957001209259, -0.31091125309467316`, \
-0.09645421430468559}, "LeafValues" -> 
          RawArray["Real32",{0.0032283805776387453`, 0.12752416729927063`, 
            0.10977481305599213`, 
            0.056962404400110245`, -0.1531059890985489}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 10, 10, 6}], 
          "NumericalThresholds" -> {0.6698188185691833, 
           0.0025593581376597285`, -0.002680311445146799, \
-0.2317555472254753}, "LeafValues" -> 
          RawArray["Real32",{0.09838995337486267, 0.12003134936094284`, 
            0.09445683658123016, -0.1060129702091217, -0.0486348532140255}], 
          "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 6, 16, 5}], 
          "NumericalThresholds" -> {-0.20015810430049896`, 
           0.30509884655475616`, -0.2588934451341629, -0.36491161584854126`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.11732695996761322`, 
            0.00772396195679903, -0.0919245183467865, 
            0.11596626043319702`, -0.00653432123363018}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 18, 13, 14}], 
          "NumericalThresholds" -> {
           0.6698188185691833, -0.2899957001209259, -0.3279372453689575, \
-0.31213824450969696`}, "LeafValues" -> 
          RawArray["Real32",{-0.044788893312215805`, 0.1129208356142044, 
            0.09539639949798584, -0.09620571881532669, 0.09804144501686096}], 
          "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 18, 14, 1}], 
          "NumericalThresholds" -> {
           0.1961836740374565, -0.2899957001209259, -0.31213824450969696`, \
-0.09645421430468559}, "LeafValues" -> 
          RawArray["Real32",{-0.004455853719264269, 0.11365620791912079`, 
            0.09133988618850708, 
            0.042703524231910706`, -0.13588596880435944`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 10, 13, 13}], 
          "NumericalThresholds" -> {-0.20015810430049896`, 
           0.002924342406913638, -0.3279372453689575, -0.3372671604156494}, 
          "LeafValues" -> 
          RawArray["Real32",{0.10852895677089691`, -0.07123453170061111, 
            0.08162984251976013, -0.11837565153837204`, 0.09706416726112366}],
           "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 22, 6}], 
          "NumericalThresholds" -> {
           0.1961836740374565, -0.35120876133441925`, -0.2773115932941437, 
           0.30801618099212646`}, "LeafValues" -> 
          RawArray["Real32",{0.07326671481132507, 0.10632987320423126`, 
            0.09325799345970154, -0.10877694934606552`, \
-0.034421566873788834`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {4, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{14, 6, 21, 11}], 
          "NumericalThresholds" -> {-0.3080844581127167, \
-0.24551329016685486`, -0.28229959309101105`, 0.002142337732948363}, 
          "LeafValues" -> 
          RawArray["Real32",{0.10265614837408066`, 0.09638921171426773, 
            0.039510857313871384`, -0.10025233775377274`, 
            0.03408262878656387}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 13, 14, 6}], 
          "NumericalThresholds" -> {-0.20015810430049896`, \
-0.3277881145477295, -0.30995243787765503`, 9.999999682655224*^-21}, 
          "LeafValues" -> 
          RawArray["Real32",{0.10049807280302048`, 
            0.05510377883911133, -0.06640756875276566, 
            0.10196146368980408`, -0.08354543894529343}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 17, 6}], 
          "NumericalThresholds" -> {
           0.6698188185691833, -0.4081830084323883, -0.23804571479558945`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.031885091215372086`, 0.10066122561693192`, 
            0.056883394718170166`, -0.09241705387830734}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 22, 17, 17}], 
          "NumericalThresholds" -> {
           0.1961836740374565, -0.28316791355609894`, -0.4081830084323883, \
-0.4156035780906677}, "LeafValues" -> 
          RawArray["Real32",{0.062469061464071274`, 
            0.09994154423475266, -0.019418345764279366`, 
            0.037883467972278595`, -0.11916879564523697`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {4, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{10, 3, 3}], 
          "NumericalThresholds" -> {
           0.002924342406913638, -0.35120876133441925`, -0.08250337839126587},
           "LeafValues" -> 
          RawArray["Real32",{0.05920407921075821, 
            0.07649166882038116, -0.07312284409999847, 
            0.014597505331039429`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 13, 13}], 
          "NumericalThresholds" -> {-0.20015810430049896`, \
-0.3277881145477295, -0.3372671604156494}, "LeafValues" -> 
          RawArray["Real32",{
            0.0940236896276474, -0.031257662922143936`, -0.06586198508739471, 
            0.06648971140384674}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 17, 6}], 
          "NumericalThresholds" -> {
           0.6698188185691833, -0.4081830084323883, -0.23804571479558945`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.03072412684559822, 0.09290152043104172, 
            0.04783061519265175, -0.08600658923387527}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{10, 18, 2}], 
          "NumericalThresholds" -> {0.002924342406913638, -0.3008217066526413,
            0.16292914748191833`}, "LeafValues" -> 
          RawArray["Real32",{-0.05945930257439613, 0.07098829746246338, 
            0.08321332931518555, -0.020003587007522583`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 13, 14, 6}], 
          "NumericalThresholds" -> {-0.20015810430049896`, \
-0.3277881145477295, -0.30995243787765503`, 9.999999682655224*^-21}, 
          "LeafValues" -> 
          RawArray["Real32",{0.08976607024669647, 
            0.043780237436294556`, -0.06180687993764877, 
            0.08812804520130157, -0.07682595402002335}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 18, 14, 1}], 
          "NumericalThresholds" -> {
           0.1961836740374565, -0.2899957001209259, -0.31213824450969696`, \
-0.09645421430468559}, "LeafValues" -> 
          RawArray["Real32",{-0.013285505585372448`, 0.09193839132785797, 
            0.07641998678445816, 
            0.029889581725001335`, -0.11727961152791977`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 17, 6}], 
          "NumericalThresholds" -> {
           0.6698188185691833, -0.4081830084323883, -0.23804571479558945`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.025519056245684624`, 0.08924677968025208, 
            0.0424194410443306, -0.08055028319358826}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{5, 25, 9, 7}], 
          "NumericalThresholds" -> {-0.7238884270191193, \
-0.25969696044921875`, 0.001496350218076259, 0.0026956035289913416`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.06218132749199867, 0.04818250611424446, 
            0.10246359556913376`, -0.0906011238694191, 
            0.0074625806882977486`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 10, 13, 13}], 
          "NumericalThresholds" -> {-0.20015810430049896`, 
           0.002924342406913638, -0.3279372453689575, -0.3372671604156494}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0860566794872284, -0.0675104632973671, 
            0.06026163697242737, -0.09970597177743912, 0.07898136973381042}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{22, 15, 9}], 
          "NumericalThresholds" -> {-0.28316791355609894`, \
-0.2145167589187622, -0.0006864676543045789}, "LeafValues" -> 
          RawArray["Real32",{0.05640554428100586, 
            0.07821452617645264, -0.08141341805458069, -0.03266807645559311}],
           "Children" -> RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 22, 19}], 
          "NumericalThresholds" -> {
           0.1961836740374565, -0.2758500874042511, -0.19140807539224625`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.07089148461818695, 
            0.08784584701061249, -0.058078259229660034`, -0.048309076577425}],
           "Children" -> RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{10, 3, 22, 14}], 
          "NumericalThresholds" -> {
           0.002924342406913638, -0.35120876133441925`, -0.2765132188796997, \
-0.3134359270334244}, "LeafValues" -> 
          RawArray["Real32",{0.04789659008383751, 
            0.06283547729253769, -0.04940682649612427, -0.07871616631746292, 
            0.0643114298582077}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {4, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 18, 14, 1}], 
          "NumericalThresholds" -> {
           0.1961836740374565, -0.2899957001209259, -0.31213824450969696`, \
-0.09645421430468559}, "LeafValues" -> 
          RawArray["Real32",{-0.013203461654484272`, 0.08506764471530914, 
            0.06520403921604156, 0.027316492050886154`, -0.1071118414402008}],
           "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 10, 13, 13}], 
          "NumericalThresholds" -> {-0.20015810430049896`, 
           0.002924342406913638, -0.3279372453689575, -0.3372671604156494}, 
          "LeafValues" -> 
          RawArray["Real32",{0.07976749539375305, -0.059131115674972534`, 
            0.052841804921627045`, -0.09241871535778046, 
            0.06830495595932007}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6, 21, 18, 1}], 
          "NumericalThresholds" -> {-0.24551329016685486`, \
-0.28229959309101105`, -0.2984703332185745, -0.024068507365882397`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.09092243760824203, 0.04475658759474754, 
            0.006275256164371967, -0.1037059873342514, \
-0.0032328132074326277`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{17, 10, 14, 6}], 
          "NumericalThresholds" -> {-0.4081830084323883, \
-0.0037450056988745928`, -0.3100692182779312, -0.23747041821479797`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.012615825049579144`, 
            0.11833615601062775`, -0.013362321071326733`, 
            0.05463230609893799, -0.09396388381719589}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 4, 14, 7}], 
          "NumericalThresholds" -> {
           0.6698188185691833, -0.10819749161601067`, -0.31949615478515625`, 
           0.0004450814885785803}, "LeafValues" -> 
          RawArray["Real32",{0.10316315293312073`, 
            0.08119438588619232, -0.06524178385734558, 
            0.04645274206995964, -0.056246113032102585`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {-1, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{5, 25, 19, 24}], 
          "NumericalThresholds" -> {-0.7238884270191193, \
-0.26100634038448334`, -0.19098898768424988`, -0.13547403365373611`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.05814211070537567, 0.032885756343603134`, 
            0.09144007414579391, -0.016480490565299988`, \
-0.07131646573543549}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{10, 10, 17, 10}], 
          "NumericalThresholds" -> {0.002924342406913638, 
           0.00006159668555483222, -0.4081830084323883, \
-0.005869175540283322}, "LeafValues" -> 
          RawArray["Real32",{-0.08142990618944168, 
            0.05912453308701515, -0.06721795350313187, 0.07682893425226212, 
            0.027537694200873375`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 17, 25}], 
          "NumericalThresholds" -> {
           0.6698188185691833, -0.4081830084323883, -0.2542802393436432}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.06769370287656784, 0.07862219214439392, 
            0.03529847040772438, 0.028425678610801697`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{10, 18, 2}], 
          "NumericalThresholds" -> {0.002924342406913638, -0.3008217066526413,
            0.16292914748191833`}, "LeafValues" -> 
          RawArray["Real32",{-0.05499919876456261, 0.05589679256081581, 
            0.07424098998308182, -0.0242086760699749}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6, 21, 18, 1}], 
          "NumericalThresholds" -> {-0.24551329016685486`, \
-0.28229959309101105`, -0.2984703332185745, -0.024068507365882397`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.08651313185691833, 0.04164746776223183, 
            0.004428316373378038, -0.09650078415870667, \
-0.004055918660014868}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{5, 16, 9, 2}], 
          "NumericalThresholds" -> {-0.7238884270191193, -0.2603900283575058, \
-0.0004929510614601895, 0.23389128595590591`}, "LeafValues" -> 
          RawArray["Real32",{-0.05412224307656288, 0.03699541464447975, 
            0.11594349145889282`, -0.07049194723367691, 
            0.0037683143746107817`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{22, 12, 19}], 
          "NumericalThresholds" -> {-0.28316791355609894`, \
-0.4739004671573639, -0.19552163034677505`}, "LeafValues" -> 
          RawArray["Real32",{
            0.04691791534423828, -0.06401702761650085, -0.061299242079257965`,
             0.08293034136295319}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{19, 21, 24, 3}], 
          "NumericalThresholds" -> {-0.20015810430049896`, \
-0.2754518836736679, -0.1357417106628418, -0.10729461163282394`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.07364083081483841, 0.021709037944674492`, 
            0.04302285984158516, -0.09190814942121506, -0.02321530692279339}],
           "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{14, 6, 21, 23}], 
          "NumericalThresholds" -> {-0.3080844581127167, \
-0.24551329016685486`, -0.28229959309101105`, -0.1337127834558487}, 
          "LeafValues" -> 
          RawArray["Real32",{0.007294369861483574, 0.05926225706934929, 
            0.025187671184539795`, -0.08075511455535889, 0.0835508406162262}],
           "Children" -> 
          RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4, 4, 14, 7}], 
          "NumericalThresholds" -> {
           0.6698188185691833, -0.10819749161601067`, -0.31949615478515625`, 
           0.0004450814885785803}, "LeafValues" -> 
          RawArray["Real32",{0.09375675767660141, 
            0.07466530054807663, -0.05838384851813316, 
            0.044639088213443756`, -0.049709513783454895`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {-1, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{10, 18, 25}], 
          "NumericalThresholds" -> {
           0.002924342406913638, -0.3008217066526413, -0.2594607472419739}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.057236190885305405`, 
            0.05492737516760826, -0.037996310740709305`, 
            0.04679850488901138}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{18, 13, 14}], 
          "NumericalThresholds" -> {-0.2899957001209259, -0.3277881145477295, \
-0.31213824450969696`}, "LeafValues" -> 
          RawArray["Real32",{-0.022010741755366325`, 
            0.05982678756117821, -0.06646279990673065, 0.06696266680955887}], 
          "Children" -> RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 18, 20}], 
          "NumericalThresholds" -> {
           0.1961836740374565, -0.29313939809799194`, -0.0960339792072773}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.0868174359202385, 0.07531387358903885, 
            0.037163931876420975`, 0.014034596271812916`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{17, 14, 10, 6}], 
          "NumericalThresholds" -> {-0.4081830084323883, -0.3100692182779312, \
-0.0037450056988745928`, -0.23747041821479797`}, "LeafValues" -> 
          RawArray["Real32",{0.005260319449007511, 0.09866709262132645, 
            0.05188458040356636, -0.009407346136868, -0.0846550464630127}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]]}, "ClassNumber" -> 2, "IterationsNumber" -> 
      50, "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
         "Output" -> 
         Association[
          "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
             "Version" -> {12.1, 0}, "ID" -> 6386831507609569542, "Output" -> 
             Association[
              "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 25.]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 25.], "Key" -> 
             "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Method" -> "GradientBoostedTrees", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 110, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 2, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 15, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15425], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.2598775`6.866313673732495, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.5418054653318523, 0.09967677760095288],
          "Accuracy" -> Around[0.7184331741359817, 0.13900487017229604`], 
         "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 22, 
         "ModelMemory" -> 119096, "ModelUtility" -> -0.11648160738236302`, 
         "TrainingSize" -> 88, "TrainingTime" -> 0.07943282347242814, 
         "TrainingMemory" -> 336888, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.5418054653318523, 0.07048212536845715]}, 
         "AccuracyHistory" -> {
           Around[0.7184331741359817, 0.09829128631678617]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
           0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 2, "MaxDepth" -> 6, "LeafSize" -> 15, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> Automatic}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 17]}], 
        Association["ID" -> 269109966876416]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.3980322077754574`, 0.5551284541530289], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.0002644090980536399, "TestSize" -> 95, 
              "ModelMemory" -> 32272, "ModelUtility" -> -1.6130834804992986`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 103544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.3980322077754574`, 0.39253509436121214`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9765474475863132, 0.3400253491865089], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.000361058288511037, "TestSize" -> 22, 
              "ModelMemory" -> 48272, "ModelUtility" -> -0.7367685396689091, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 318720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9765474475863132, 0.24043423018510415`]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000361058288511037, "MeanCrossEntropy" -> 
             Around[0.9765474475863132, 0.3400253491865089], "ModelMemory" -> 
             48272, "TrainingMemory" -> 318720, "TrainingTime" -> 
             0.0377968173892688], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
              "ModelMemory" -> 20208, "ModelUtility" -> -0.3270354386037785, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 60160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916370843501094, 0.0062588525193839105`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5418054653318523, 0.09967677760095288], "Accuracy" -> 
              Around[0.7184331741359817, 0.13900487017229604`], 
              "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 119096, 
              "ModelUtility" -> -0.11648160738236302`, "TrainingSize" -> 88, 
              "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
              336888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5418054653318523, 0.07048212536845715]}, 
              "AccuracyHistory" -> {
                Around[0.7184331741359817, 0.09829128631678617]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.5418054653318523, 0.09967677760095288], "ModelMemory" -> 
             119096, "TrainingMemory" -> 336888, "TrainingTime" -> 
             0.10322503774428209`], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6630300629157142, 0.031251911055319014`], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 95, 
              "ModelMemory" -> 9312, "ModelUtility" -> -0.29161844161042305`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 62672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6630300629157142, 0.022098438232254908`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7109839763833231, 0.09279620469258731], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 26144, "ModelUtility" -> -0.37783780411202417`,
               "TrainingSize" -> 88, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              240576, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7109839763833231, 0.0656168256065034]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.7109839763833231, 0.09279620469258731], "ModelMemory" -> 
             26144, "TrainingMemory" -> 240576, "TrainingTime" -> 
             0.017309573444801933`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1203874499470035`, 0.15438265436759854`], "Accuracy" -> 
              Around[0.5158746146367453, 0.0725282187804213], 
              "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 95, 
              "ModelMemory" -> 5968, "ModelUtility" -> -0.8340302174593448, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 69736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1203874499470035`, 0.1091650218009079]}, 
              "AccuracyHistory" -> {
                Around[0.5158746146367453, 0.051285195327017405`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9241302396717478, 0.30146239639538336`], "Accuracy" -> 
              Around[0.6314766523968512, 0.14710342215590386`], 
              "EvaluationTime" -> 0.0000361058288511037, "TestSize" -> 22, 
              "ModelMemory" -> 6288, "ModelUtility" -> -0.6774699770904594, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 117384, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9241302396717478, 0.2131661047639226]}, 
              "AccuracyHistory" -> {
                Around[0.6314766523968512, 0.10401782734218702`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000361058288511037, "MeanCrossEntropy" -> 
             Around[0.9241302396717478, 0.30146239639538336`], "ModelMemory" -> 
             6288, "TrainingMemory" -> 117384, "TrainingTime" -> 
             0.02537710746431506], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6802068941562269, 0.013470586218719667`], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00008361349839202962, "TestSize" -> 95, 
              "ModelMemory" -> 97288, "ModelUtility" -> -0.3117857319558168, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 154784, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6802068941562269, 0.00952514286181473]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6655505721969345, 0.03734282049276269], "Accuracy" -> 
              Around[0.8488679567446776, 0.11567659116024787`], 
              "EvaluationTime" -> 0.00014373989364401725`, "TestSize" -> 22, 
              "ModelMemory" -> 99312, "ModelUtility" -> -0.2972101098864731, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 191320, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6655505721969345, 0.02640536159906447]}, 
              "AccuracyHistory" -> {
                Around[0.8488679567446776, 0.0817957020339551]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00014373989364401725`, "MeanCrossEntropy" -> 
             Around[0.6655505721969345, 0.03734282049276269], "ModelMemory" -> 
             99312, "TrainingMemory" -> 191320, "TrainingTime" -> 
             0.03328275704168338], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[8.579994398937652, 2.169570605263921], "Accuracy" -> 
              Around[0.5887912813034119, 0.07153438877263654], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9304, "ModelUtility" -> -2.891939307150355, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 93816, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.579994398937652, 1.5341180872451208`]}, 
              "AccuracyHistory" -> {
                Around[0.5887912813034119, 0.05058245138916613]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.641656257686242*^-6, "MeanCrossEntropy" -> 
             Around[8.579994398937652, 2.169570605263921], "ModelMemory" -> 
             9304, "TrainingMemory" -> 93816, "TrainingTime" -> 
             0.08360250581623441], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.9671204571948735`, 0.7262756052599894], "Accuracy" -> 
              Around[0.5783746146367452, 0.07177176002370075], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9304, "ModelUtility" -> -1.8285568177234688`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 93800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.9671204571948735`, 0.5135544054897027]}, 
              "AccuracyHistory" -> {
                Around[0.5783746146367452, 0.05075029821045236]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.714226527784244, 0.2487755382673497], "Accuracy" -> 
              Around[0.6314766523968512, 0.14710342215590386`], 
              "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 22, 
              "ModelMemory" -> 9304, "ModelUtility" -> -0.4239590155565154, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 126520, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.714226527784244, 0.1759108701021764]}, 
              "AccuracyHistory" -> {
                Around[0.6314766523968512, 0.10401782734218702`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018095780479704407`, "MeanCrossEntropy" -> 
             Around[0.714226527784244, 0.2487755382673497], "ModelMemory" -> 
             9304, "TrainingMemory" -> 126520, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9081156733371942, 0.1552170066305145], "Accuracy" -> 
              Around[0.5992079479700785, 0.07126451357137402], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9304, "ModelUtility" -> -0.6304001260573239, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 93792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9081156733371942, 0.1097549979439141]}, 
              "AccuracyHistory" -> {
                Around[0.5992079479700785, 0.050391620804279315`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6757203584002969, 0.2051970517128593], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 9304, "ModelUtility" -> -0.3601560026393583, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 126760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6757203584002969, 0.14509622674564945`]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.6757203584002969, 0.2051970517128593], "ModelMemory" -> 
             9304, "TrainingMemory" -> 126760, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7132709888856925, 0.23840944540424372`], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 9304, "ModelUtility" -> -0.4199867034936954, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 126712, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7132709888856925, 0.1685809355442647]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.7132709888856925, 0.23840944540424372`], "ModelMemory" -> 
             9304, "TrainingMemory" -> 126712, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 269105671909120]], "MaxTrainingSize" -> 110, 
      "PreprocessorEvaluationTime" -> 9.1720703125`2.*^-6, 
      "PreprocessorMemory" -> 90920, "InputDimension" -> 25, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6463341980550162,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.798534143587962`17.332191023626784*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.2799999999999999, 
          "ElapsedTimes" -> 0.2682857, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.40492100000000003`, "ExperimentCounts" -> 8]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 269118556811008]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0029526200285634745`}, "ID" -> 8511873936122161098],
          "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.04597181387887822}, "ID" -> 5088942956773271181], 
         "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.001085912257616931}, "ID" -> 4253280274407493710], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.008055768548599632}, "ID" -> 6444935715165722643], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.9419338852863417}, "ID" -> 8287822489335055839], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5398284783267227250], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7447522866192929020], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7453984742751158262], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1428794229868072886], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4802055837799981101], "f11" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8848321885782794657], "f12" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2490428512728594186], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2599340417608718357], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           561205973647836867], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1560883827943403534], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8307803120298057525], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5607097060491411873], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8544478472710159942], "f19" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2976349730845863470], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           517164664669944708], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3578591542206779947], "f22" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4014917344036450558], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3736618373860919307], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           326100556807555048], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3101102390966293056]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1411143, 
      "MaxTrainingMemory" -> 752184, "DataMemory" -> 437888, "FunctionMemory" -> 
      395480, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 23.8023878`9.129195453077692}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.794884417951455*^9, 3.794884460891612*^9, 3.794884519626912*^9, 
   3.794884710297784*^9, 3.7953467871141796`*^9, 3.7953469387052417`*^9, 
   3.7953470977624297`*^9, 3.7977289485585155`*^9, 3.797792940683303*^9, 
   3.79779756970284*^9, {3.7977980131891127`*^9, 3.7977980223247643`*^9}, 
   3.7978059061276684`*^9, 3.7985485439021206`*^9},
 CellLabel->
  "Out[174]=",ExpressionUUID->"43863f93-a013-46f2-8797-8a1f0aec5796"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cmclassOhEr", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classOhEr", ",", 
    RowBox[{"mLOH", "@", "allDataErOHTest"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7948847248484173`*^9, 3.79488474240405*^9}},
 CellLabel->
  "In[175]:=",ExpressionUUID->"685d24d2-0755-49ee-9e6b-236d5e128023"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   TemplateBox[{"0.52", "0.10"}, "Around"], 
                   Around[0.5185185185185185, 0.09799078929868867]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
              "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
              "Sodium Oxalate Mole Fraction" -> 
              Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
              Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
              Association["Type" -> "Numerical"], "pH" -> 
              Association["Type" -> "Numerical"], "NCCN" -> 
              Association["Type" -> "Boolean"], "NCCCN" -> 
              Association["Type" -> "Numerical"], "NCCCCN" -> 
              Association["Type" -> "Boolean"], "NCCCCCN" -> 
              Association["Type" -> "Boolean"], "NCCCCCCCN" -> 
              Association["Type" -> "Numerical"], "NCCCNCCCCNCCCN" -> 
              Association["Type" -> "Numerical"], "CN(C)CCN(C)C" -> 
              Association["Type" -> "Boolean"], "CNCCNC" -> 
              Association["Type" -> "Boolean"], "C1CNCCN1" -> 
              Association["Type" -> "Boolean"], "CC1CNCCN1" -> 
              Association["Type" -> "Boolean"], "CC1CNC(C)CN1" -> 
              Association["Type" -> "Boolean"], "C1CN2CCN1CC2" -> 
              Association["Type" -> "Boolean"], "Cl.Cl.NC1CN2CCC1CC2" -> 
              Association["Type" -> "Numerical"], "Cl.Cl.NC1CCNC1" -> 
              Association["Type" -> "Boolean"], "NCC1CCCCN1" -> 
              Association["Type" -> "Boolean"], "CC1=NC=CN=C1" -> 
              Association["Type" -> "Numerical"], "NCCNCCN" -> 
              Association["Type" -> "Boolean"], "C1CC(CCN1)C2CCNCC2" -> 
              Association["Type" -> "Boolean"], "C(CN)CN" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                    "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                    "H2O Mole Fraction", "pH", "NCCN", "NCCCN", "NCCCCN", 
                    "NCCCCCN", "NCCCCCCCN", "NCCCNCCCCNCCCN", "CN(C)CCN(C)C", 
                    "CNCCNC", "C1CNCCN1", "CC1CNCCN1", "CC1CNC(C)CN1", 
                    "C1CN2CCN1CC2", "Cl.Cl.NC1CN2CCC1CC2", "Cl.Cl.NC1CCNC1", 
                    "NCC1CCCCN1", "CC1=NC=CN=C1", "NCCNCCN", 
                    "C1CC(CCN1)C2CCNCC2", "C(CN)CN"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 25]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Numerical", "Numerical", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", "Boolean",
                     "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f22" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                 "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f8f11f12f19f22)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11]], 
                "Version" -> {12.1, 0}, "ID" -> 8050051190399832767]], 
              MachineLearning`MLProcessor["NumericalVectorStandardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f5f6f8f11f12f19f22)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11]], 
                "Mean" -> {0.0027125744939508526`, 0.03661327540196216, 
                 0.0013702662912860152`, 0.005885270631865775, 
                 0.9534186131809349, 2.436363636363636, 0., 0., 0., 0., 0.}, 
                "StandardDeviation" -> {0.0008922678396605211, 
                 0.007732101328696449, 0.0011033857541175838`, 
                 0.0028718051216307847`, 0.006045733366698505, 
                 1.8267072847427503`, 1., 1., 1., 1., 1.}, 
                "Version" -> {12.1, 0}, "ID" -> 4379057655022649502, "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f8f11f12f19f22)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11]]]], 
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f20" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f21" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f23" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f24" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f25" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 1459333080280557027]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 5402267474867977866, "Output" -> 
                Association[
                 "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 4989418527115648706, "Output" -> 
                Association[
                 "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f5f6f8f11f12f19f22)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11], 
                  "(f7f9f10f13f14f15f16f17f18f20f21f23f24f25)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 14]], 
                "Spans" -> {
                  Span[1, 11], 
                  Span[12, 25]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
                "ID" -> 6971839385794057051]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 110, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {1.1556412392689129`*^-15, 
                    6.207156001313375*^-16, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 4.703863561287976*^-14, 
                    1.8066356491627547`*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, "Method" -> 
                    "Naive", "VectorLength" -> 25, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.1556412392689129`*^-15, 
                    6.207156001313375*^-16, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 4.703863561287976*^-14, 
                    1.8066356491627547`*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    0.999999999999997, 1.0000000000000002`, 
                    0.9999999999999991, 0.9999999999846566, 
                    0.9999999999999999, 1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 25, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 25]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 18]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                   Association["Matrix" -> CompressedData["
1:eJzNlvk31dsbx91yM1RSlwgNSFEnSnWV6VFCXQ1kzFCh5LoqZCqUhoNkOBWZ
xTFnPDgOBz0ydTrGYz4oxxQSl3sp3XC/rdXxw7f1/QO+e629Xuv97Gc/+72e
z1qfvaVtr5+9vIKHh2fTt7nh29Q1cJQ2Ce+AN0WLa6Ous7Hpp97sQPVXqPru
trW3djLw5GSENVBeYtDKmsx9E4VIOGLLp5ZFxSvPs5SlrWIxYz4vXvLnRKhe
mKg+mhoLamSbpy/tArGR9/xIg3I+EIo2S3CIUaBi5mRS/agbZYSF8K4JFQQD
71JjKFUwv/+WYohXE+S8XH1ST3wED9YpdPeeHcDUktduOoklSJZsMPn6dyWY
Gtn6NkVm4/5jf4lMiETglpqxC5bnYzEpyNl2avghGm6rW5I95YcSInOR22gO
oMqRT/2UfRULaAuVKQJOwFF8YOQy5Qqe4yey/iQGQFfHatWAjwx4oX+CVi1c
Bm7BZ8rcRV+BUp3DSUm1x5h2VD7Vu78efSM9T0+LtMGzz+wnbv/UgsvggMwr
3wHg1w5Ssr9eBF4W4QK5ikU4uOnChVXC8bhlAtJpPYHY/JvGE/N0F/DoCCOX
7HgCX8P2y3PiiXhqJubS112X4EnQro8ZozcwnLJUy6PmgJkhZ+bDXuXBnG9A
Z4BCFTqt77tm2TYIwzmxj5TY3bD6KvFKrDcDbFnRM1rqbIjM6pPcs5GN6QuF
+jKFBbDAO78qPakC8yRO3ptaVQD38/dVuMymQ+i+8iUblj/mmnb/fsg6GEKP
RgcfDCOh7q4P9HvJJFTe9taKJZ+AbsLMICHCHVTcLPB1d4kfiup6pNNyytGC
+CiFfrAAShyEHrQuvQbXPAXWg+0j2EcXym4eaIOLu73S1DPYkECfVn3/sAMm
q9JXRRJacfVhXd9LB8tAuHNm2oAUDaQjMNl2Oh4qY/a/4jwgQ5TSPanVud5A
Kc4gku86I2eliEacCBGuCHYszFv7w8Hi854TK/zRwXrl5zDdYEzMstlZdKwa
dd/bOVsPV6PwqS81E/3daKtdzbvJqhE0FbyN779kwCnTG+28VBqmamy0iP/c
iYpi6mIFftlg4/oKpwjdIOZ94a+W6hTct8ts/I5mIcTFnthkakMHhzCxusm+
LOjtiWljDfiBL1nv+pjuM/Q9Gq4t3R0HjCtKdRnDhSinbz+WWJSFn/QaRgqo
pTDfGrPKYn4cJXl3L176lY7tNmw/YWouSko4uTb/kYU8/9ejsvQ7Oarf6af2
ndvUv9OZS7/y7yQtay7zl/O46xeXyY2TuPX2cjlP/84F7nkLXJ14mJvHjRtw
8zlq/+0jcZk/+In5Ib6cl7FMbny67DujuHTm1r/F1T5czbPsi+uHxF3n59ZZ
7kf+D+eRyv+3X9IP/VreJ89lO7d+Cfd8Blczufoi18/yqOSub1vuw7KPZX/q
/50f/EMfEn/4jsv+DJb3cbncL36uXlMeRsonnvaqB8Xfz/y5tZGNbI0/4wcD
8yEi+nlYJV8rtvgr6l3Y3Qq2Gt4agxZU9DCUYnScqQGXbDZz9FEB6gigtZFo
IhIV/tjqNXkL5PaYmPcBHQo2vowpvZaJjoeuMwdW+8E7uwUzul0/xP/5LOz3
ozT4V0/gjONwI+ZGD2h/ym8HzfdabXkBGXBMnznN9qTjUtF7TpmBCxB3vza5
87IKwkNaSmlvOjDG32Frt34UphTuXvMbeQycVjZ/DKIy8QoW13uJZWGMoNzG
61sLQGxv0oyyXy5MVH/IsvznGe5/2qs2dyAMzgq2TTK3ZSA7SZoYfo2F3k8F
YliGldhzjp7+q1E+rlnguXlnexEoWQrn8MntBj+vWbMQ9xLg8z7l4fwmFPU6
58iSK1hoeyNr7qd37WB+o3+HnCwHdykeuST/bzX0fWXFhgR1Y2Z46JRJei2S
JIiE46dfY21FTZlgUBO+9U1i3LeKxNLSWjM303w09wuQHF0bDK2y6qtuBnSB
eqwEgaxZDcez32mFHKCDmnWEvzimYvMXJ35+iUx4d/Jpf609DdUMfBJnOiKQ
5znD9KlqOiTpuWsHH6OBgOnA4bwWJsbdP+ryvK4Ykd04H6xcCTa23vCRnwJe
ipZ3bvKUwN71wV8O2LnDWYU+jrzMR7ArrqR1IhXuVMx3almloqiR/qOdhg1I
jDTNQRUqnHYz+MXKLwiPd8t8VpyOwzR9u4QXX8vhn8WGuXXtZBy7FWZ3ZIqE
3iGEXxID81Hq0HbSi39TYX2Bl4HIjm/9cjWxcVp8jfvcX+8bcE/Eb5deu6jG
Y3wRXZ4sRmiHyFXHCXJD47BBxatH2JiBPkdUPhQ3lKJ91dHqLYIU/JzqYKXh
/xCej8itObLiDKjfotfPGkdAKG+Kjkrgc6Rwyhzu0srgVtoJlQtmFdgQ7hhw
/7jtt3ukRVRuQzlkj3kT6mcGIJc6NNs3NAg28oKHEoayUcvn3Zzu5RbUfez/
t487DU/kD46Nx5JQh52Q9j4qHB6pyAcMGxVia5S/Q7grBayGSJfy9INhYYrg
26rUhFI7B3PU5mrAhqByen2RD8jKfLoccO0ehjLNbRuLMuHBpfMUHZFM5BX/
mHWymgaBBWlhQwuIm/5OT97MbEefBQ7NyiQdPOleb3rWs1HPvqnu6tk+fLJF
4O1w3VtI9BhQOyTGgKnaKk3hRhaWu8fIXl6Xhs6ygc2HGyvQnNIgqTlVhiZ7
jKoi/y7Az/fcm4cFWjDP+E2xQiEVelZKXRTIicOszbPyxbNuYNTAl+38RzPM
0dfdV7/ZBQXvxaN9dfrhgO/ijakeMjwWH2z+pa8IJU5HBK0re4G+zRLHSJpP
we635EGdp0FQGsLrMZSWDPdVXKTSOCb4yPfXtOnSx3DNsshsMjkajR94Rl3J
jIGbi7tW2P1UB668POY/3QnG0T0yZGPRdjRab79JiNKNjA1Zr6+K9+PDWXGF
RaUQvOillUArIYOpzzh15lk+npRlXHVLLkOZQYIWUTYCz+2YYGEKFf8wV3d1
Vi5Euv7aLTuj87FKP3ax5KgzeIY7MuyGc6Bmldc+q0g93HLt/NiSIQdW2PqM
2deMQ4/4EXNHrXjo1vk53HKcgdif+rtsQjIYWgq9mbBIRZ3Ru5sLm8igZthH
MemnYkcwbeygaR5Mrt1B2iaRiXrMHpZy0rf/3Swtzj+zAouNrZXCHteheD/z
uH1hF+zdvl/Je3QAB2XfLjmR2eB22y9ErLQb7dRGd/Yp1aO407xx1DsS+hCk
XECCgleP1wx1vmIgo+lNwlqpb+8QvTzZAw4U0Lyc3nOOk46ik53Se96mw2Dv
JKSEV+DJ28SgL9QHoCpoHSufTocQN2ZimWcVLr3svhr2pg7Px4Nu3MlmZNhu
kFxDrIE0jWlPyQ8vUDMPqj9ojGPohFApW68Q5Oy1LcXOV6PlCR1zxxcuKHv/
S9Tn3UXY/NeTsJHZVjTz2kg495mGTiYLtaGv03BO+sRLwW0eYOAFF5M78+GS
3taUCeNo8LF16mlyZcCgzKs6YlcLDt+RXXlEKAZVJm3iDTOZMDYntjNbGKGU
IiSiPFMP8Feq44rVbqBr2Jsh10rHM757Rwbli+DcdNrWIJMqyD+2npB2cQR9
tZ1Z3dLdcFona3S7IBHiz2rz8QRR0CzfWTRJtx1ukXoD7C1KkN/RPMKVtxal
IxynDyUUwbH5XNGm8SbgZByq/yTTiUPJXV98nxXg2zm+25ThRnhuZHZ9MYkG
+//xvNe4sRr2FV9fqJfKwIrxf9uE88rQgNIS6rynCjxu5W9MZ5aAHidoZ9vA
W7CRkvcgqPVgLu+m5rx7DfCe9cHkilYdhr9oPPjkTBfQvjzml++qwsS1Mn5b
NzDRYfjsuiZJEqoqzIv38CUi6+LlG5evkZFKPjvSurMeZlikkrBfqlA5EPn2
GDNA7zD82tvZDwUxxDgLp2HIEuxS1S2kQeH7tJBp3yrkpSx1bZRl4cOfs7o7
eKtBVz3t6chEAeT5j/bKH49Ex606LYOBTGCeuG2x1ygF9rjzi5yTew76OrIz
4+2R8B/lySVc
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.1556412392689129`*^-15, 
                    6.207156001313375*^-16, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 4.703863561287976*^-14, 
                    1.8066356491627547`*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    0.999999999999997, 1.0000000000000002`, 
                    0.9999999999999991, 0.9999999999846566, 
                    0.9999999999999999, 1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 18, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0187563, "MaxTrainingMemory" -> 
                    118832, "DataMemory" -> 22640, "FunctionMemory" -> 27832, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 5, 15, 12, 22, 22.7520381`9.109595235463372}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 25, "Output" -> 
                Association[
                 "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
                "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                8527455847692012519]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
                "Mean" -> {1.1556412392689129`*^-15, 
                 6.207156001313375*^-16, -4.289498049688105*^-17, 
                 5.752973854875811*^-16, 4.703863561287976*^-14, 
                 1.8066356491627547`*^-16, 0., 0., 0., 0., 0., 
                 0.18181818181818182`, 0.09999999999999999, 
                 0.09090909090909091, 0.045454545454545456`, 
                 0.06363636363636363, 0.14545454545454545`, 
                 0.08181818181818182, 0.03636363636363636, 
                 0.00909090909090909, 0.07272727272727272, 
                 0.07272727272727272, 0.01818181818181818, 
                 0.01818181818181818, 0.06363636363636363}, 
                "StandardDeviation" -> {0.9999999999999958, 0.999999999999997,
                  1.0000000000000002`, 0.9999999999999991, 0.9999999999846566,
                  0.9999999999999999, 1., 1., 1., 1., 1., 
                 0.38569460791993504`, 0.3, 0.28747978728803447`, 
                 0.20829889522526546`, 0.24410402876541004`, 
                 0.35255853508482393`, 0.27408751693966066`, 
                 0.18719327529067273`, 0.09491187735373227, 
                 0.25968830649246727`, 0.25968830649246727`, 
                 0.133608531424537, 0.133608531424537, 0.24410402876541004`}, 
                "Output" -> 
                Association[
                 "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
                "Version" -> {12.1, 0}, "ID" -> 4716705353569549883]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 1896705890663231818]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 0}, "ID" -> 8748628872160238337, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 7129751554765353380]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          False -> 0.3482142857142857, True -> 0.6517857142857143]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{2, 9, 16, 8}], 
             "NumericalThresholds" -> {-0.5880609452724457, \
-0.0008109045447781682, -0.2590217739343643, 0.001216973876580596}, 
             "LeafValues" -> 
             RawArray["Real32",{0.16521738469600677`, 
               0.02222222276031971, -0.14666666090488434`, 
               0.05000000074505806, 0.15000000596046448`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{6, 21, 18, 1}], 
             "NumericalThresholds" -> {-0.24551329016685486`, \
-0.28229959309101105`, -0.2984703332185745, -0.024068507365882397`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.1703755110502243, 0.10266613960266113`, 
               0.010353486984968185`, -0.1472962200641632, 
               0.06834600120782852}], "Children" -> 
             RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{2, 9, 16, 14}], 
             "NumericalThresholds" -> {-0.5880609452724457, \
-0.0008109045447781682, -0.2590217739343643, -0.3135950416326523}, 
             "LeafValues" -> 
             RawArray["Real32",{0.14199163019657135`, 
               0.02032477781176567, -0.13439972698688507`, 
               0.042460162192583084`, 0.13126003742218018`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{6, 21, 4, 22}], 
             "NumericalThresholds" -> {-0.24551329016685486`, \
-0.28229959309101105`, -0.2511119395494461, -0.2773115932941437}, 
             "LeafValues" -> 
             RawArray["Real32",{0.15413708984851837`, 
               0.08680519461631775, -0.13950850069522858`, 
               0.012432549148797989`, 0.05864053592085838}], "Children" -> 
             RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 6, 16, 20}], 
             "NumericalThresholds" -> {-0.20015810430049896`, 
              0.30509884655475616`, -0.2588934451341629, \
-0.09504415467381477}, "LeafValues" -> 
             RawArray["Real32",{0.14606904983520508`, 
               0.02670157141983509, -0.11513210088014603`, 
               0.14219261705875397`, 0.0020924562122672796`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{2, 22, 15}], 
             "NumericalThresholds" -> {-0.5880609452724457, \
-0.28316791355609894`, -0.21435962617397308`}, "LeafValues" -> 
             RawArray["Real32",{0.12050308287143707`, 0.08412087708711624, 
               0.020885774865746498`, -0.11833769828081131`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 10, 3, 12}], 
             "NumericalThresholds" -> {0.6698188185691833, 
              0.0025593581376597285`, -0.35120876133441925`, \
-0.4758021682500839}, "LeafValues" -> 
             RawArray["Real32",{0.08285520225763321, 0.13279877603054047`, 
               0.108644999563694, 
               0.021898671984672546`, -0.11435093730688095`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, 4}, {-4, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 6, 1, 20}], 
             "NumericalThresholds" -> {-0.20015810430049896`, 
              0.30509884655475616`, -0.024068507365882397`, \
-0.09504415467381477}, "LeafValues" -> 
             RawArray["Real32",{0.12950639426708221`, 
               0.10714458674192429`, -0.1005495935678482, \
-0.0024376835208386183`, -0.004313127137720585}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 18, 14, 1}], 
             "NumericalThresholds" -> {
              0.1961836740374565, -0.2899957001209259, -0.31091125309467316`, \
-0.09645421430468559}, "LeafValues" -> 
             RawArray["Real32",{0.0032283805776387453`, 0.12752416729927063`, 
               0.10977481305599213`, 
               0.056962404400110245`, -0.1531059890985489}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 10, 10, 6}], 
             "NumericalThresholds" -> {0.6698188185691833, 
              
              0.0025593581376597285`, -0.002680311445146799, \
-0.2317555472254753}, "LeafValues" -> 
             RawArray["Real32",{0.09838995337486267, 0.12003134936094284`, 
               0.09445683658123016, -0.1060129702091217, \
-0.0486348532140255}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 6, 16, 5}], 
             "NumericalThresholds" -> {-0.20015810430049896`, 
              0.30509884655475616`, -0.2588934451341629, \
-0.36491161584854126`}, "LeafValues" -> 
             RawArray["Real32",{0.11732695996761322`, 
               0.00772396195679903, -0.0919245183467865, 
               0.11596626043319702`, -0.00653432123363018}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 18, 13, 14}], 
             "NumericalThresholds" -> {
              0.6698188185691833, -0.2899957001209259, -0.3279372453689575, \
-0.31213824450969696`}, "LeafValues" -> 
             RawArray["Real32",{-0.044788893312215805`, 0.1129208356142044, 
               0.09539639949798584, -0.09620571881532669, 
               0.09804144501686096}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 18, 14, 1}], 
             "NumericalThresholds" -> {
              0.1961836740374565, -0.2899957001209259, -0.31213824450969696`, \
-0.09645421430468559}, "LeafValues" -> 
             RawArray["Real32",{-0.004455853719264269, 0.11365620791912079`, 
               0.09133988618850708, 
               0.042703524231910706`, -0.13588596880435944`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 10, 13, 13}], 
             "NumericalThresholds" -> {-0.20015810430049896`, 
              0.002924342406913638, -0.3279372453689575, -0.3372671604156494},
              "LeafValues" -> 
             RawArray["Real32",{0.10852895677089691`, -0.07123453170061111, 
               0.08162984251976013, -0.11837565153837204`, 
               0.09706416726112366}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 22, 6}], 
             "NumericalThresholds" -> {
              0.1961836740374565, -0.35120876133441925`, -0.2773115932941437, 
              0.30801618099212646`}, "LeafValues" -> 
             RawArray["Real32",{0.07326671481132507, 0.10632987320423126`, 
               0.09325799345970154, -0.10877694934606552`, \
-0.034421566873788834`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {4, -4}, {-3, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{14, 6, 21, 11}], 
             "NumericalThresholds" -> {-0.3080844581127167, \
-0.24551329016685486`, -0.28229959309101105`, 0.002142337732948363}, 
             "LeafValues" -> 
             RawArray["Real32",{0.10265614837408066`, 0.09638921171426773, 
               0.039510857313871384`, -0.10025233775377274`, 
               0.03408262878656387}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 13, 14, 6}], 
             "NumericalThresholds" -> {-0.20015810430049896`, \
-0.3277881145477295, -0.30995243787765503`, 9.999999682655224*^-21}, 
             "LeafValues" -> 
             RawArray["Real32",{0.10049807280302048`, 
               0.05510377883911133, -0.06640756875276566, 
               0.10196146368980408`, -0.08354543894529343}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 17, 6}], 
             "NumericalThresholds" -> {
              0.6698188185691833, -0.4081830084323883, -0.23804571479558945`},
              "LeafValues" -> 
             RawArray["Real32",{0.031885091215372086`, 0.10066122561693192`, 
               0.056883394718170166`, -0.09241705387830734}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 22, 17, 17}], 
             "NumericalThresholds" -> {
              0.1961836740374565, -0.28316791355609894`, -0.4081830084323883, \
-0.4156035780906677}, "LeafValues" -> 
             RawArray["Real32",{0.062469061464071274`, 
               0.09994154423475266, -0.019418345764279366`, 
               0.037883467972278595`, -0.11916879564523697`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {4, -4}, {-3, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{10, 3, 3}], 
             "NumericalThresholds" -> {
              0.002924342406913638, -0.35120876133441925`, \
-0.08250337839126587}, "LeafValues" -> 
             RawArray["Real32",{0.05920407921075821, 
               0.07649166882038116, -0.07312284409999847, 
               0.014597505331039429`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 13, 13}], 
             "NumericalThresholds" -> {-0.20015810430049896`, \
-0.3277881145477295, -0.3372671604156494}, "LeafValues" -> 
             RawArray["Real32",{
               0.0940236896276474, -0.031257662922143936`, \
-0.06586198508739471, 0.06648971140384674}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 17, 6}], 
             "NumericalThresholds" -> {
              0.6698188185691833, -0.4081830084323883, -0.23804571479558945`},
              "LeafValues" -> 
             RawArray["Real32",{0.03072412684559822, 0.09290152043104172, 
               0.04783061519265175, -0.08600658923387527}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{10, 18, 2}], 
             "NumericalThresholds" -> {
              0.002924342406913638, -0.3008217066526413, 
              0.16292914748191833`}, "LeafValues" -> 
             RawArray["Real32",{-0.05945930257439613, 0.07098829746246338, 
               0.08321332931518555, -0.020003587007522583`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 13, 14, 6}], 
             "NumericalThresholds" -> {-0.20015810430049896`, \
-0.3277881145477295, -0.30995243787765503`, 9.999999682655224*^-21}, 
             "LeafValues" -> 
             RawArray["Real32",{0.08976607024669647, 
               0.043780237436294556`, -0.06180687993764877, 
               0.08812804520130157, -0.07682595402002335}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 18, 14, 1}], 
             "NumericalThresholds" -> {
              0.1961836740374565, -0.2899957001209259, -0.31213824450969696`, \
-0.09645421430468559}, "LeafValues" -> 
             RawArray["Real32",{-0.013285505585372448`, 0.09193839132785797, 
               0.07641998678445816, 
               0.029889581725001335`, -0.11727961152791977`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 17, 6}], 
             "NumericalThresholds" -> {
              0.6698188185691833, -0.4081830084323883, -0.23804571479558945`},
              "LeafValues" -> 
             RawArray["Real32",{0.025519056245684624`, 0.08924677968025208, 
               0.0424194410443306, -0.08055028319358826}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{5, 25, 9, 7}], 
             "NumericalThresholds" -> {-0.7238884270191193, \
-0.25969696044921875`, 0.001496350218076259, 0.0026956035289913416`}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.06218132749199867, 0.04818250611424446, 
               0.10246359556913376`, -0.0906011238694191, 
               0.0074625806882977486`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 10, 13, 13}], 
             "NumericalThresholds" -> {-0.20015810430049896`, 
              0.002924342406913638, -0.3279372453689575, -0.3372671604156494},
              "LeafValues" -> 
             RawArray["Real32",{0.0860566794872284, -0.0675104632973671, 
               0.06026163697242737, -0.09970597177743912, 
               0.07898136973381042}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{22, 15, 9}], 
             "NumericalThresholds" -> {-0.28316791355609894`, \
-0.2145167589187622, -0.0006864676543045789}, "LeafValues" -> 
             RawArray["Real32",{0.05640554428100586, 
               0.07821452617645264, -0.08141341805458069, \
-0.03266807645559311}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 22, 19}], 
             "NumericalThresholds" -> {
              0.1961836740374565, -0.2758500874042511, -0.19140807539224625`},
              "LeafValues" -> 
             RawArray["Real32",{0.07089148461818695, 
               0.08784584701061249, -0.058078259229660034`, \
-0.048309076577425}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{10, 3, 22, 14}], 
             "NumericalThresholds" -> {
              0.002924342406913638, -0.35120876133441925`, \
-0.2765132188796997, -0.3134359270334244}, "LeafValues" -> 
             RawArray["Real32",{0.04789659008383751, 
               0.06283547729253769, -0.04940682649612427, \
-0.07871616631746292, 0.0643114298582077}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {4, -4}, {-3, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 18, 14, 1}], 
             "NumericalThresholds" -> {
              0.1961836740374565, -0.2899957001209259, -0.31213824450969696`, \
-0.09645421430468559}, "LeafValues" -> 
             RawArray["Real32",{-0.013203461654484272`, 0.08506764471530914, 
               0.06520403921604156, 
               0.027316492050886154`, -0.1071118414402008}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 10, 13, 13}], 
             "NumericalThresholds" -> {-0.20015810430049896`, 
              0.002924342406913638, -0.3279372453689575, -0.3372671604156494},
              "LeafValues" -> 
             RawArray["Real32",{0.07976749539375305, -0.059131115674972534`, 
               0.052841804921627045`, -0.09241871535778046, 
               0.06830495595932007}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{6, 21, 18, 1}], 
             "NumericalThresholds" -> {-0.24551329016685486`, \
-0.28229959309101105`, -0.2984703332185745, -0.024068507365882397`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.09092243760824203, 0.04475658759474754, 
               0.006275256164371967, -0.1037059873342514, \
-0.0032328132074326277`}], "Children" -> 
             RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{17, 10, 14, 6}], 
             "NumericalThresholds" -> {-0.4081830084323883, \
-0.0037450056988745928`, -0.3100692182779312, -0.23747041821479797`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.012615825049579144`, 
               0.11833615601062775`, -0.013362321071326733`, 
               0.05463230609893799, -0.09396388381719589}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 14, 7}], 
             "NumericalThresholds" -> {
              0.6698188185691833, -0.10819749161601067`, \
-0.31949615478515625`, 0.0004450814885785803}, "LeafValues" -> 
             RawArray["Real32",{0.10316315293312073`, 
               0.08119438588619232, -0.06524178385734558, 
               0.04645274206995964, -0.056246113032102585`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, 4}, {-4, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{5, 25, 19, 24}], 
             "NumericalThresholds" -> {-0.7238884270191193, \
-0.26100634038448334`, -0.19098898768424988`, -0.13547403365373611`}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.05814211070537567, 0.032885756343603134`, 
               0.09144007414579391, -0.016480490565299988`, \
-0.07131646573543549}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{10, 10, 17, 10}], 
             "NumericalThresholds" -> {0.002924342406913638, 
              0.00006159668555483222, -0.4081830084323883, \
-0.005869175540283322}, "LeafValues" -> 
             RawArray["Real32",{-0.08142990618944168, 
               0.05912453308701515, -0.06721795350313187, 0.07682893425226212,
                0.027537694200873375`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 17, 25}], 
             "NumericalThresholds" -> {
              0.6698188185691833, -0.4081830084323883, -0.2542802393436432}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.06769370287656784, 0.07862219214439392, 
               0.03529847040772438, 0.028425678610801697`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{10, 18, 2}], 
             "NumericalThresholds" -> {
              0.002924342406913638, -0.3008217066526413, 
              0.16292914748191833`}, "LeafValues" -> 
             RawArray["Real32",{-0.05499919876456261, 0.05589679256081581, 
               0.07424098998308182, -0.0242086760699749}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{6, 21, 18, 1}], 
             "NumericalThresholds" -> {-0.24551329016685486`, \
-0.28229959309101105`, -0.2984703332185745, -0.024068507365882397`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.08651313185691833, 0.04164746776223183, 
               
               0.004428316373378038, -0.09650078415870667, \
-0.004055918660014868}], "Children" -> 
             RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{5, 16, 9, 2}], 
             "NumericalThresholds" -> {-0.7238884270191193, \
-0.2603900283575058, -0.0004929510614601895, 0.23389128595590591`}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.05412224307656288, 0.03699541464447975, 
               0.11594349145889282`, -0.07049194723367691, 
               0.0037683143746107817`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{22, 12, 19}], 
             "NumericalThresholds" -> {-0.28316791355609894`, \
-0.4739004671573639, -0.19552163034677505`}, "LeafValues" -> 
             RawArray["Real32",{
               0.04691791534423828, -0.06401702761650085, \
-0.061299242079257965`, 0.08293034136295319}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{19, 21, 24, 3}], 
             "NumericalThresholds" -> {-0.20015810430049896`, \
-0.2754518836736679, -0.1357417106628418, -0.10729461163282394`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.07364083081483841, 0.021709037944674492`, 
               0.04302285984158516, -0.09190814942121506, \
-0.02321530692279339}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{14, 6, 21, 23}], 
             "NumericalThresholds" -> {-0.3080844581127167, \
-0.24551329016685486`, -0.28229959309101105`, -0.1337127834558487}, 
             "LeafValues" -> 
             RawArray["Real32",{0.007294369861483574, 0.05926225706934929, 
               0.025187671184539795`, -0.08075511455535889, 
               0.0835508406162262}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 14, 7}], 
             "NumericalThresholds" -> {
              0.6698188185691833, -0.10819749161601067`, \
-0.31949615478515625`, 0.0004450814885785803}, "LeafValues" -> 
             RawArray["Real32",{0.09375675767660141, 
               0.07466530054807663, -0.05838384851813316, 
               0.044639088213443756`, -0.049709513783454895`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, 4}, {-4, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{10, 18, 25}], 
             "NumericalThresholds" -> {
              0.002924342406913638, -0.3008217066526413, -0.2594607472419739},
              "LeafValues" -> 
             RawArray["Real32",{-0.057236190885305405`, 
               0.05492737516760826, -0.037996310740709305`, 
               0.04679850488901138}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{18, 13, 14}], 
             "NumericalThresholds" -> {-0.2899957001209259, \
-0.3277881145477295, -0.31213824450969696`}, "LeafValues" -> 
             RawArray["Real32",{-0.022010741755366325`, 
               0.05982678756117821, -0.06646279990673065, 
               0.06696266680955887}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 18, 20}], 
             "NumericalThresholds" -> {
              0.1961836740374565, -0.29313939809799194`, -0.0960339792072773},
              "LeafValues" -> 
             RawArray["Real32",{-0.0868174359202385, 0.07531387358903885, 
               0.037163931876420975`, 0.014034596271812916`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {-1, -4}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{17, 14, 10, 6}], 
             "NumericalThresholds" -> {-0.4081830084323883, \
-0.3100692182779312, -0.0037450056988745928`, -0.23747041821479797`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.005260319449007511, 0.09866709262132645, 
               0.05188458040356636, -0.009407346136868, -0.0846550464630127}],
              "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {-1, -5}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]]}, "ClassNumber" -> 2, 
         "IterationsNumber" -> 50, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
            "Output" -> 
            Association[
             "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["DensifyNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 25.]], 
                "Version" -> {12.1, 0}, "ID" -> 6386831507609569542, "Output" -> 
                Association[
                 "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))" -> 
                  Association[
                   "Type" -> "NumericalVector", "Weight" -> 25.]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 25.], "Key" -> 
                "((f1f2f3f4f5f6f8f11f12f19f22)(\
f7f9f10f13f14f15f16f17f18f20f21f23f24f25))", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], "Method" -> "GradientBoostedTrees", 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "BoostingMethod" -> 
           Association["Value" -> "Gradient", "Options" -> Association[]], 
           MaxTrainingRounds -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "LeavesNumber" -> 
           Association["Value" -> 110, "Options" -> Association[]], 
           "LearningRate" -> 
           Association["Value" -> 0.1, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "MaxBinNumber" -> 
           Association["Value" -> 255, "Options" -> Association[]], 
           "ThreadNumber" -> 
           Association["Value" -> 2, "Options" -> Association[]], "MaxDepth" -> 
           Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
           Association["Value" -> 15, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFrequency" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "MinGainToSplit" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "LossFunction" -> 
           Association["Value" -> Automatic, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[15425], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.2598775`6.866313673732495, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.5418054653318523, 0.09967677760095288], "Accuracy" -> 
            Around[0.7184331741359817, 0.13900487017229604`], 
            "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 22, 
            "ModelMemory" -> 119096, "ModelUtility" -> -0.11648160738236302`, 
            "TrainingSize" -> 88, "TrainingTime" -> 0.07943282347242814, 
            "TrainingMemory" -> 336888, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.5418054653318523, 0.07048212536845715]}, 
            "AccuracyHistory" -> {
              Around[0.7184331741359817, 0.09829128631678617]}, 
            "Configuration" -> {
             "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
              MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
              0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
              "ThreadNumber" -> 2, "MaxDepth" -> 6, "LeafSize" -> 15, 
              "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
              "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
              "L1Regularization" -> 0, "L2Regularization" -> 0, 
              "LossFunction" -> Automatic}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 17]}], 
           Association["ID" -> 269109966876416]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.3980322077754574`, 0.5551284541530289], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.0002644090980536399, "TestSize" -> 95, 
                 "ModelMemory" -> 32272, 
                 "ModelUtility" -> -1.6130834804992986`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 103544, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.3980322077754574`, 0.39253509436121214`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9765474475863132, 0.3400253491865089], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.000361058288511037, "TestSize" -> 22, 
                 "ModelMemory" -> 48272, 
                 "ModelUtility" -> -0.7367685396689091, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 318720, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9765474475863132, 0.24043423018510415`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000361058288511037, "MeanCrossEntropy" -> 
                Around[0.9765474475863132, 0.3400253491865089], "ModelMemory" -> 
                48272, "TrainingMemory" -> 318720, "TrainingTime" -> 
                0.0377968173892688], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95,
                  "ModelMemory" -> 20208, 
                 "ModelUtility" -> -0.3270354386037785, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 60160, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6916370843501094, 0.0062588525193839105`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5418054653318523, 0.09967677760095288], "Accuracy" -> 
                 Around[0.7184331741359817, 0.13900487017229604`], 
                 "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 119096, 
                 "ModelUtility" -> -0.11648160738236302`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 336888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5418054653318523, 0.07048212536845715]}, 
                 "AccuracyHistory" -> {
                   Around[0.7184331741359817, 0.09829128631678617]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.5418054653318523, 0.09967677760095288], 
                "ModelMemory" -> 119096, "TrainingMemory" -> 336888, 
                "TrainingTime" -> 0.10322503774428209`], "Index" -> 2], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6630300629157142, 0.031251911055319014`], 
                 "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 
                 95, "ModelMemory" -> 9312, 
                 "ModelUtility" -> -0.29161844161042305`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 62672, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6630300629157142, 0.022098438232254908`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7109839763833231, 0.09279620469258731], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 26144, 
                 "ModelUtility" -> -0.37783780411202417`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.01, "TrainingMemory" -> 240576, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7109839763833231, 0.0656168256065034]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.7109839763833231, 0.09279620469258731], 
                "ModelMemory" -> 26144, "TrainingMemory" -> 240576, 
                "TrainingTime" -> 0.017309573444801933`], "Index" -> 3], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1203874499470035`, 0.15438265436759854`], 
                 "Accuracy" -> Around[0.5158746146367453, 0.0725282187804213],
                  "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 
                 95, "ModelMemory" -> 5968, 
                 "ModelUtility" -> -0.8340302174593448, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 69736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1203874499470035`, 0.1091650218009079]}, 
                 "AccuracyHistory" -> {
                   Around[0.5158746146367453, 0.051285195327017405`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9241302396717478, 0.30146239639538336`], "Accuracy" -> 
                 Around[0.6314766523968512, 0.14710342215590386`], 
                 "EvaluationTime" -> 0.0000361058288511037, "TestSize" -> 22, 
                 "ModelMemory" -> 6288, "ModelUtility" -> -0.6774699770904594,
                  "TrainingSize" -> 88, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 117384, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9241302396717478, 0.2131661047639226]}, 
                 "AccuracyHistory" -> {
                   Around[0.6314766523968512, 0.10401782734218702`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000361058288511037, "MeanCrossEntropy" -> 
                Around[0.9241302396717478, 0.30146239639538336`], 
                "ModelMemory" -> 6288, "TrainingMemory" -> 117384, 
                "TrainingTime" -> 0.02537710746431506], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6802068941562269, 0.013470586218719667`], 
                 "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00008361349839202962, "TestSize" -> 95,
                  "ModelMemory" -> 97288, 
                 "ModelUtility" -> -0.3117857319558168, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 154784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6802068941562269, 0.00952514286181473]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6655505721969345, 0.03734282049276269], "Accuracy" -> 
                 Around[0.8488679567446776, 0.11567659116024787`], 
                 "EvaluationTime" -> 0.00014373989364401725`, "TestSize" -> 
                 22, "ModelMemory" -> 99312, 
                 "ModelUtility" -> -0.2972101098864731, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 191320, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6655505721969345, 0.02640536159906447]}, 
                 "AccuracyHistory" -> {
                   Around[0.8488679567446776, 0.0817957020339551]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00014373989364401725`, 
                "MeanCrossEntropy" -> 
                Around[0.6655505721969345, 0.03734282049276269], 
                "ModelMemory" -> 99312, "TrainingMemory" -> 191320, 
                "TrainingTime" -> 0.03328275704168338], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[8.579994398937652, 2.169570605263921], "Accuracy" -> 
                 Around[0.5887912813034119, 0.07153438877263654], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9304, "ModelUtility" -> -2.891939307150355, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
                 "TrainingMemory" -> 93816, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[8.579994398937652, 1.5341180872451208`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5887912813034119, 0.05058245138916613]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 6.641656257686242*^-6, "MeanCrossEntropy" -> 
                Around[8.579994398937652, 2.169570605263921], "ModelMemory" -> 
                9304, "TrainingMemory" -> 93816, "TrainingTime" -> 
                0.08360250581623441], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.9671204571948735`, 0.7262756052599894], "Accuracy" -> 
                 Around[0.5783746146367452, 0.07177176002370075], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9304, 
                 "ModelUtility" -> -1.8285568177234688`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 93800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.9671204571948735`, 0.5135544054897027]}, 
                 "AccuracyHistory" -> {
                   Around[0.5783746146367452, 0.05075029821045236]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.714226527784244, 0.2487755382673497], "Accuracy" -> 
                 Around[0.6314766523968512, 0.14710342215590386`], 
                 "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 
                 22, "ModelMemory" -> 9304, 
                 "ModelUtility" -> -0.4239590155565154, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 126520, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.714226527784244, 0.1759108701021764]}, 
                 "AccuracyHistory" -> {
                   Around[0.6314766523968512, 0.10401782734218702`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000018095780479704407`, 
                "MeanCrossEntropy" -> 
                Around[0.714226527784244, 0.2487755382673497], "ModelMemory" -> 
                9304, "TrainingMemory" -> 126520, "TrainingTime" -> 
                0.07541456536256848], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9081156733371942, 0.1552170066305145], "Accuracy" -> 
                 Around[0.5992079479700785, 0.07126451357137402], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9304, "ModelUtility" -> -0.6304001260573239,
                  "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379,
                  "TrainingMemory" -> 93792, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.9081156733371942, 0.1097549979439141]}, 
                 "AccuracyHistory" -> {
                   Around[0.5992079479700785, 0.050391620804279315`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6757203584002969, 0.2051970517128593], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 9304, 
                 "ModelUtility" -> -0.3601560026393583, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 126760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6757203584002969, 0.14509622674564945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.6757203584002969, 0.2051970517128593], "ModelMemory" -> 
                9304, "TrainingMemory" -> 126760, "TrainingTime" -> 
                0.07541456536256848], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7132709888856925, 0.23840944540424372`], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 9304, 
                 "ModelUtility" -> -0.4199867034936954, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 126712, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7132709888856925, 0.1685809355442647]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.7132709888856925, 0.23840944540424372`], 
                "ModelMemory" -> 9304, "TrainingMemory" -> 126712, 
                "TrainingTime" -> 0.06640783086353597], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 269105671909120]], "MaxTrainingSize" -> 110, 
         "PreprocessorEvaluationTime" -> 9.1720703125`2.*^-6, 
         "PreprocessorMemory" -> 90920, "InputDimension" -> 25, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6463341980550162, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.798534143587962`17.332191023626784*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.2799999999999999, 
             "ElapsedTimes" -> 0.2682857, "ExperimentCounts" -> 8], 
            Association[
            "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.40492100000000003`, "ExperimentCounts" -> 8]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association["ID" -> 269118556811008]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0029526200285634745`}, "ID" -> 
              8511873936122161098], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.04597181387887822}, "ID" -> 5088942956773271181],
             "f3" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.001085912257616931}, "ID" -> 
              4253280274407493710], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.008055768548599632}, "ID" -> 
              6444935715165722643], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.9419338852863417}, "ID" -> 8287822489335055839], 
            "f6" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5398284783267227250], "f7" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7447522866192929020], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7453984742751158262], "f9" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1428794229868072886], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4802055837799981101], "f11" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8848321885782794657], "f12" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2490428512728594186], "f13" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2599340417608718357], "f14" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              561205973647836867], "f15" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1560883827943403534], "f16" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8307803120298057525], "f17" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5607097060491411873], "f18" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8544478472710159942], "f19" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2976349730845863470], "f20" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              517164664669944708], "f21" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3578591542206779947], "f22" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4014917344036450558], "f23" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3736618373860919307], "f24" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              326100556807555048], "f25" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3101102390966293056]], 
           Association[
           "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1,
             "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1411143, 
         "MaxTrainingMemory" -> 752184, "DataMemory" -> 437888, 
         "FunctionMemory" -> 395480, "LanguageVersion" -> {12.1, 0}, "Date" -> 
         DateObject[{2020, 5, 15, 12, 22, 23.8023878`9.129195453077692}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        0.002742856482203961, 0.04588309511862027, 0.0009611854860558385, 
         0.002892876469155599, 0.9475199864439645, 3, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {
        0.001704141656958028, 0.042986587756607714`, 0.0006617173076112417, 
         0.007508424018214351, 0.9471391292606087, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0029969934830547133`, 0.04648420572299379, 0.0012032082868960632`, 
         0.007947779832756888, 0.9413678126742985, 7, 1, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0017991688438474653`, 0.042234668216929894`, 0.0012396762978101733`,
          0.005272002492468928, 0.9494544841489435, 4, 1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0026385439030547145`, 0.03928567616061125, 0.0015339186522904415`, 
         0.0032832551341424993`, 0.9532586061499009, 2, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.003342335102635483, 0.038610750755278464`, 0.0009466068802355844, 
         0.005608200903576244, 0.9514921063582742, 4, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {
        0.003589084030695279, 0.03055061511171091, 0.0013276852201036533`, 
         0.007041650700829742, 0.9574909649366604, 3, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, {
        0.004427859532784215, 0.030073404010708817`, 0.0016545651035664928`, 
         0.01247309377642404, 0.9513710775765165, 7, 1, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.003288565482747599, 0.04277673731826657, 0.0015896659134678015`, 
         0.004604378811730589, 0.9477406524737875, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, {
        0.0011433323150822812`, 0.020316178784995746`, 0.0004364105851348042, 
         0.009131485154821137, 0.9689725931599662, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0037364831666406523`, 0.03632346329620389, 0.0012127492611802182`, 
         0.006774198539696626, 0.9519531057362786, 2, 1, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0029008260676477785`, 0.03851255106298201, 0.0014764831848957725`, 
         0.004398478895920877, 0.9527116607885535, 4, 1, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0028066891892804414`, 0.03358180869653973, 0.0011677812659528723`, 
         0.010004129208828412`, 0.9524395916393986, 1, 1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.001966681418466253, 0.03815070688582993, 0.00135628743053894, 
         0.006574887303437697, 0.951951436961727, 3, 0, 0, 0, 0, 0, 0, 0, 1, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.004303180533678753, 0.028332127356610472`, 0.0015233245320398388`, 
         0.012150430016555898`, 0.9536909375611151, 5, 1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.002911181172847666, 0.04568342332300607, 0.0010104925859168226`, 
         0.008546152612740096, 0.9418487503054894, 3, 1, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.003138588459463973, 0.0345609614783663, 0.0013504447668227042`, 
         0.004579180523311962, 0.956370824772035, 2, 0, 0, 0, 0, 0, 0, 0, 1, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0024905932968404655`, 0.03422110860031605, 0.0012405352886126005`, 
         0.007303765804535912, 0.954743997009695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, {
        0.0023002230310254566`, 0.03363619531515473, 0.0014859778613716137`, 
         0.0062277031207299905`, 0.9563499006717183, 5, 0, 0, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0022412788106185447`, 0.038527075287995594`, 0.0009639411445887004, 
         0.007954918295070725, 0.9503127864617265, 4, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.001692408765460826, 0.03988338623422155, 0.001314266585169407, 
         0.0037923726488239776`, 0.9533175657663242, 5, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, {
        0.0020353269139815515`, 0.03879651007982007, 0.0013077895804229547`, 
         0.007323925300228177, 0.9505364481255472, 3, 0, 0, 0, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0035084939828442835`, 0.0361164594942982, 0.0017133181898631848`, 
         0.007373585714129375, 0.951288142618865, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0017907520590454687`, 0.04682634239857451, 0.001345469098892494, 
         0.004027970177337451, 0.9460094662661501, 3, 0, 0, 0, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0020128002552121486`, 0.04344079013606219, 0.0008934267124638364, 
         0.005550283390360934, 0.948102699505901, 3, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, {
        0.002583840189365972, 0.03215037516277405, 0.0012642691352116287`, 
         0.006736589429320739, 0.9572649260833276, 5, 0, 0, 0, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.002499488450998751, 0.0383435558254779, 0.00103690567741659, 
         0.0038851098823570324`, 0.9542349401637497, 6, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}}, 
      "Output" -> {
       True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, False, False, False, False, False, False, 
        False, False, False, False, False}], 
    "Predictions" -> {
     False, True, False, False, True, False, False, True, True, True, False, 
      False, True, False, True, False, True, True, False, True, False, False, 
      True, False, False, False, False}, "LogProbabilities" -> CompressedData["
1:eJwBwQE+/iFib1JlAgAAABsAAAACAAAA/oGQyNVQyL9AEHLG9hH8v1XBC6I7
NfW/VQVvlVnD0794eP7WU+HYvx6eH19aIPK/5DEerD0/zL88xjMj3+j5vxlC
GE3n6Oi/GUKYcYyq47+f1h/LvTXQv6j1pxql9Pe/VFo1Smu1z79Kq6b5l0T4
vzOMBCtfiQDAP8NIPdpRwb+vFAFdaV70v7BSBOCsBdW/3HTvYP5vAMCiTXf9
Go3BvxhEUTznYtu/BVHk1wDi8L+mD8nw+nbCv/qQfNk1DwDA5EKvc6Uo9r+R
C72L4HDSv2uZocRTM9a/W2ZYrp2i87+BMQ0W/zXwv//FtIWI3ty/eHj+1lPh
2L8enh9fWiDyvxbDtx6Gd+u/GMPXXS2l4b9kXhtoDC3yv455rQtBydi/93fU
/69C2r/+HSUAbmzxv/fyKxjbx+2/9fIrqzUL4L+4fKAdplfNv5cPZDTpXfm/
5ZxbQJ7J2r8650bnvCrxv1LpRYDK4/m/m0ov7khJzL/yoagLlg/Xv34oGkrJ
IPO/CEXboGdQ0L9C0eZamt33v8LG+ORGcd+/Y2PcVVdI7r8OZAbNCmnQvwSZ
cZ91yPe/H4j0Iw==
     "], "CountMatrix" -> {{7, 4, 0}, {9, 7, 0}}, 
    "IndicesMatrix" -> {{{19, 21, 22, 24, 25, 26, 27}, {17, 18, 20, 
       23}, {}}, {{1, 3, 4, 6, 7, 11, 12, 14, 16}, {2, 5, 8, 9, 10, 13, 
       15}, {}}}, "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {27}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00041643703703703704`, "SingleEvaluationTime" -> 
    0.0096400500000000007`3., "Version" -> {12.1, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.794884744579697*^9, 3.7953467873401585`*^9, 3.795347098377842*^9, 
   3.797728948843591*^9, 3.797792940983303*^9, 3.7977975700546646`*^9, {
   3.797798013560157*^9, 3.79779802267483*^9}, 3.797805906439834*^9, 
   3.798548544170912*^9},
 CellLabel->
  "Out[175]=",ExpressionUUID->"89827625-efc3-4387-b571-c91a0e7a181e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassOhEr", "]"}]], "Input",
 CellChangeTimes->{{3.7948847473734465`*^9, 3.794884752667651*^9}},
 CellLabel->
  "In[176]:=",ExpressionUUID->"a0119bad-4f6e-4149-95fd-022784333708"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.5185185185185185`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.6363636363636364`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.4375`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.07386363636363624`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.07386363636363624`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.6363636363636364`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.4375`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.4375`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.6363636363636364`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.49431818181818177`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.4943181818181818`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.5185185185185185`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.5185185185185185`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7948847529861617`*^9, 3.795346787476127*^9, 3.7953470985174685`*^9, 
   3.7977289489282045`*^9, 3.7977929411037817`*^9, 3.797797570159387*^9, {
   3.7977980136827917`*^9, 3.7977980227905183`*^9}, 3.7978059065495405`*^9, 
   3.7985485442217836`*^9},
 CellLabel->
  "Out[176]//TableForm=",ExpressionUUID->"b401e637-ac62-45f7-9521-\
ac97f5b841cd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", "red", " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948848161787033`*^9, 3.794884818208391*^9}},
 CellLabel->
  "In[177]:=",ExpressionUUID->"32228919-d762-4890-8690-d5ab7f1298cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classOhErRed", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLOHred", "@", "allDataErOHTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7948848218607664`*^9, 3.7948848453182144`*^9}},
 CellLabel->
  "In[178]:=",ExpressionUUID->"1d52c0df-d424-40fa-918a-33515037ea2e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "22", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Numerical\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "22", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Numerical\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["110", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "NCCN" -> 
           Association["Type" -> "Boolean"], "NCCCN" -> 
           Association["Type" -> "Numerical"], "NCCCCN" -> 
           Association["Type" -> "Boolean"], "NCCCCCN" -> 
           Association["Type" -> "Boolean"], "NCCCCCCCN" -> 
           Association["Type" -> "Numerical"], "NCCCNCCCCNCCCN" -> 
           Association["Type" -> "Numerical"], "CN(C)CCN(C)C" -> 
           Association["Type" -> "Boolean"], "CNCCNC" -> 
           Association["Type" -> "Boolean"], "C1CNCCN1" -> 
           Association["Type" -> "Boolean"], "CC1CNCCN1" -> 
           Association["Type" -> "Boolean"], "CC1CNC(C)CN1" -> 
           Association["Type" -> "Boolean"], "C1CN2CCN1CC2" -> 
           Association["Type" -> "Boolean"], "Cl.Cl.NC1CN2CCC1CC2" -> 
           Association["Type" -> "Numerical"], "Cl.Cl.NC1CCNC1" -> 
           Association["Type" -> "Boolean"], "NCC1CCCCN1" -> 
           Association["Type" -> "Boolean"], "CC1=NC=CN=C1" -> 
           Association["Type" -> "Numerical"], "NCCNCCN" -> 
           Association["Type" -> "Boolean"], "C1CC(CCN1)C2CCNCC2" -> 
           Association["Type" -> "Boolean"], "C(CN)CN" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                  "Amine Mole Fraction", "NCCN", "NCCCN", "NCCCCN", "NCCCCCN",
                   "NCCCCCCCN", "NCCCNCCCCNCCCN", "CN(C)CCN(C)C", "CNCCNC", 
                  "C1CNCCN1", "CC1CNCCN1", "CC1CNC(C)CN1", "C1CN2CCN1CC2", 
                  "Cl.Cl.NC1CN2CCC1CC2", "Cl.Cl.NC1CCNC1", "NCC1CCCCN1", 
                  "CC1=NC=CN=C1", "NCCNCCN", "C1CC(CCN1)C2CCNCC2", 
                  "C(CN)CN"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 22]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Numerical", "Numerical",
                   "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Numerical", "Boolean", "Boolean", "Numerical", 
                  "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 22.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f5f8f9f16f19)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 8]], 
             "Version" -> {12.1, 0}, "ID" -> 4462902058618482583]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f8f9f16f19)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 8]], 
             "Mean" -> {0.0027125744939508526`, 0.0013702662912860152`, 
              0.005885270631865775, 0., 0., 0., 0., 0.}, 
             "StandardDeviation" -> {0.0008922678396605211, 
              0.0011033857541175838`, 0.0028718051216307847`, 1., 1., 1., 1., 
              1.}, "Version" -> {12.1, 0}, "ID" -> 124065359484358159, 
             "Output" -> 
             Association[
              "(f1f2f3f5f8f9f16f19)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 8]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 7352995199434552655]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 7752557210050409023, "Output" -> 
             Association[
              "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 7672479918638034227, "Output" -> 
             Association[
              "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f8f9f16f19)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 8], 
               "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]], 
             "Spans" -> {
               Span[1, 8], 
               Span[9, 22]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))\
" -> Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                  1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             6351700579469570360]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))\
" -> Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                  1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 110, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, "Method" -> 
                   "Naive", "VectorLength" -> 22, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                   "StandardDeviation" -> {0.9999999999999958, 
                    1.0000000000000002`, 0.9999999999999991, 1., 1., 1., 1., 
                    1., 0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 22, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 22]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 16]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
0/EYW+znjmRo0GQjxa/BvwHq0YDz
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    1.0000000000000002`, 0.9999999999999991, 1., 1., 1., 1., 
                    1., 0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 16, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0376843, "MaxTrainingMemory" -> 109648, 
                  "DataMemory" -> 19568, "FunctionMemory" -> 26808, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 24.3893329`9.139774845299932}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 22, "Output" -> 
             Association[
              "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))\
" -> Association["Type" -> "NumericalVector", "Weight" -> 22.]], "Type" -> 
             "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             1401518302868632620]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))\
" -> Association["Type" -> "NumericalVector", "Weight" -> 22.]], 
             "Mean" -> {1.1556412392689129`*^-15, -4.289498049688105*^-17, 
              5.752973854875811*^-16, 0., 0., 0., 0., 0., 
              0.18181818181818182`, 0.09999999999999999, 0.09090909090909091, 
              0.045454545454545456`, 0.06363636363636363, 
              0.14545454545454545`, 0.08181818181818182, 0.03636363636363636, 
              0.00909090909090909, 0.07272727272727272, 0.07272727272727272, 
              0.01818181818181818, 0.01818181818181818, 0.06363636363636363}, 
             "StandardDeviation" -> {0.9999999999999958, 1.0000000000000002`, 
              0.9999999999999991, 1., 1., 1., 1., 1., 0.38569460791993504`, 
              0.3, 0.28747978728803447`, 0.20829889522526546`, 
              0.24410402876541004`, 0.35255853508482393`, 
              0.27408751693966066`, 0.18719327529067273`, 0.09491187735373227,
               0.25968830649246727`, 0.25968830649246727`, 0.133608531424537, 
              0.133608531424537, 0.24410402876541004`}, "Output" -> 
             Association[
              "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))\
" -> Association["Type" -> "NumericalVector", "Weight" -> 22.]], 
             "Version" -> {12.1, 0}, "ID" -> 5063217780808148937]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 14111402000870112]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 2679119642341790783, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 7544847649283220122]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.3482142857142857, True -> 0.6517857142857143]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{19, 1, 11, 9, 22, 11, 15, 20, 9, 10}], 
          "NumericalThresholds" -> {-0.2700895369052887, -0.841812789440155, \
-0.3253421187400818, -0.4643126428127289, -0.2612587511539459, \
-0.3152429163455963, -0.30318859219551086`, -0.14174975454807281`, \
-0.47839072346687317`, -0.3276815414428711}, "Children" -> 
          RawArray["Integer16",{{2, -11}, {-1, 3}, {-2, 4}, {5, 10}, {6, 
            8}, {-3, 7}, {-4, -5}, {-6, 9}, {-7, -8}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{19, 14, 17, 3, 3, 19, 19, 19, 20}], 
          "NumericalThresholds" -> {-0.2719886898994446, -0.4038362205028534, \
-0.09406682103872299, -0.4903698265552521, -0.6425952315330505, \
-0.27959367632865906`, -0.285665899515152, -0.27972611784935, \
-0.13950946927070618`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 8}, {4, -6}, {5, 7}, {
            6, -3}, {-1, -2}, {-4, -5}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 1, 14, 5, 3, 5, 2, 16, 14}], 
          "NumericalThresholds" -> {-0.4643126428127289, \
-0.043721672147512436`, 2.4214916229248047`, 
           0.004040263127535582, -0.11774817109107971`, 0.006724684499204159, 
           0.1306554526090622, -0.19060760736465454`, -0.4196817874908447}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 7}, {4, -5}, {5, 
            6}, {-1, -2}, {-3, -4}, {8, -8}, {-6, -7}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 14, 11, 11, 8, 14, 19, 13, 15, 6}], 
          "NumericalThresholds" -> {-0.4660809338092804, -0.4090591073036194, \
-0.32195132970809937`, -0.30846384167671204`, -0.00035630803904496133`, \
-0.4213654100894928, -0.27972611784935, -0.26332104206085205`, \
-0.3031415641307831, -0.003541450249031186}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 7}, {-1, 4}, {5, -5}, {-2, 
            6}, {-3, -4}, {-6, -7}, {9, 10}, {-8, -9}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 22, 9, 3, 3, 18, 3, 10, 21, 16, 18}], 
          "NumericalThresholds" -> {-0.08948260545730591, \
-0.2547871768474579, -0.47635847330093384`, -0.18197417259216309`, 
           0.027258602902293205`, -0.28172528743743896`, \
-0.26349353790283203`, -0.3399447500705719, -0.144039124250412, \
-0.19571594893932343`, -0.2827376425266266}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 9}, {4, 6}, {-1, 5}, {-2, -3}, {
            7, 8}, {-4, -5}, {-6, -7}, {-8, 10}, {-9, -10}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 20, 5, 9, 8, 12, 20, 22, 8, 3}], 
          "NumericalThresholds" -> {
           2.4172160625457764`, -0.13107670843601227`, 
           0.007315237540751696, -0.47654977440834045`, \
-0.0026579820550978184`, -0.21003399789333344`, -0.1331005096435547, \
-0.2507650554180145, -0.004097300115972757, -0.6425952315330505}, "Children" -> 
          RawArray["Integer16",{{2, -11}, {3, 10}, {4, 9}, {5, 6}, {-1, -2}, {
            7, -6}, {8, -5}, {-3, -4}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 14, 11, 21, 10, 18, 1, 14, 3, 15, 13}], 
          "NumericalThresholds" -> {0.0010796106653288007`, 
           2.420387029647827, -0.325069785118103, -0.1371517777442932, \
-0.33945298194885254`, -0.27736151218414307`, 
           0.11231797188520432`, -0.41126832365989685`, \
-0.36237555742263794`, -0.2999108135700226, -0.26557657122612}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, -6}, {-1, 4}, {-2, 5}, {-3, 
            6}, {-4, -5}, {8, 11}, {-7, 9}, {-8, 10}, {-9, -10}, {-11, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 19, 16, 14, 15, 19, 22, 8, 10, 14, 22}], 
          "NumericalThresholds" -> {-0.0220144335180521, -0.281995564699173, \
-0.19135868549346924`, 
           2.413947582244873, -0.28961271047592163`, -0.27972611784935, \
-0.25525057315826416`, 
           0.007584203965961933, -0.33446842432022095`, \
-0.42044585943222046`, -0.2639601230621338}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 6}, {4, -4}, {
            5, -3}, {-1, -2}, {-5, 7}, {8, 10}, {
            9, -8}, {-6, -7}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 7, 1, 19, 9, 8, 19, 14, 10, 14}], 
          "NumericalThresholds" -> {-0.19571594893932343`, 
           0.001558235613629222, -0.3056701421737671, -0.2837267220020294, \
-0.47845378518104553`, -0.002701313467696309, -0.27855968475341797`, \
-0.41103434562683105`, -0.3244405686855316, -0.4078083038330078}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {-5, 6}, {
            7, 8}, {-6, -7}, {-8, 9}, {10, -11}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 19, 2, 12, 7, 14, 7, 12, 8, 2}], 
          "NumericalThresholds" -> {-0.4660809338092804, -0.2731941342353821, \
-0.3473511040210724, -0.213710755109787, 
           0.0020886710844933987`, -0.4173377454280853, \
-0.0006958959857001901, -0.21105660498142242`, 
           0.0014403016539290547`, -0.09236167371273041}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, -7}, {-1, 4}, {5, 7}, {
            6, -4}, {-2, -3}, {-5, -6}, {9, -11}, {-8, 10}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{12, 15, 16, 13, 7, 5, 9, 18, 15, 13, 21}], 
          "NumericalThresholds" -> {-0.22590333223342896`, \
-0.294922798871994, -0.18767407536506653`, -0.26863861083984375`, \
-0.009743350557982922, -0.00710940919816494, -0.48086199164390564`, \
-0.2711985111236572, -0.30174124240875244`, -0.2644614279270172, \
-0.13249872624874115`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 11}, {-3, 5}, {-4, 
            6}, {-5, 7}, {-6, 8}, {9, -10}, {10, -9}, {-7, -8}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 4, 19, 9, 12, 12, 7, 4, 11, 10, 13, 5}], 
          "NumericalThresholds" -> {-0.00870926771312952, \
-0.00581309525296092, -0.27911174297332764`, -0.4660809338092804, \
-0.22352173924446106`, -0.22590333223342896`, -0.004304192494601011, \
-0.0009111018152907491, -0.3120971620082855, -0.33210960030555725`, \
-0.26484212279319763`, -0.005191755015403032}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {5, 11}, {6, 
            8}, {-4, 7}, {-5, -6}, {-7, 9}, {10, -10}, {-8, -9}, {-11, 
            12}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 17, 4, 15, 10, 18, 11, 3, 7, 4, 16}], 
          "NumericalThresholds" -> {-0.007405860349535942, \
-0.09749637544155121, 
           0.0024194265715777874`, -0.30493444204330444`, -0.329214483499527, \
-0.27602311968803406`, -0.3192867040634155, 0.508104145526886, 
           0.001558235613629222, 0.006809440907090902, -0.1984999179840088}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 8}, {5, 
            6}, {-3, -4}, {-5, 7}, {-6, -7}, {9, -12}, {10, 
            11}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 21, 3, 9, 3, 22, 15, 18, 20, 21}], 
          "NumericalThresholds" -> {-0.28806230425834656`, \
-0.14192941784858704`, -0.26349353790283203`, -0.47616222500801086`, \
-0.5913024544715881, -0.2619756758213043, -0.3052259385585785, \
-0.2811967730522156, -0.1331005096435547, -0.14297978579998016`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 7}, {-4, 
            6}, {-5, -6}, {8, 9}, {-7, -8}, {10, -11}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 13, 9, 7, 4, 2, 2, 14, 22, 13, 6, 11}], 
          "NumericalThresholds" -> {-0.004338572267442942, \
-0.26332104206085205`, -0.463443785905838, 0.0005612902459688485, 
           0.0021286809351295233`, -0.3109213709831238, 
           0.14254435896873474`, -0.41023749113082886`, -0.2697344124317169, \
-0.25737154483795166`, -0.0014865435659885406`, -0.31442034244537354`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 10}, {6, 
            7}, {-4, -5}, {8, -9}, {9, -8}, {-6, -7}, {11, -13}, {-10, 
            12}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 13, 4, 18, 6, 11, 6, 19, 2, 1, 20}], 
          "NumericalThresholds" -> {-0.2887960970401764, \
-0.25741228461265564`, 0.0047643156722188, -0.27719050645828247`, 
           0.0003445563488639891, -0.31442660093307495`, 
           0.001875711022876203, -0.2858363389968872, -0.3413759171962738, \
-1.2206038236618042`, -0.13494232296943665`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 9}, {5, 7}, {-3, 
            6}, {-4, -5}, {8, -8}, {-6, -7}, {-9, 10}, {-10, 
            11}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 1, 12, 6, 5, 8, 8, 13, 14, 13, 12}], 
          "NumericalThresholds" -> {-0.47845378518104553`, 
           0.5626259446144104, -0.21066920459270477`, -0.004187134560197592, \
-0.0038034713361412287`, 0.005208499263972044, 
           0.0031574091408401728`, -0.2541559636592865, \
-0.40802711248397827`, -0.26399239897727966`, -0.22352173924446106`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -12}, {-3, 5}, {-4, 
            6}, {7, 11}, {8, -9}, {9, -8}, {10, -7}, {-5, -6}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 19, 12, 4, 19, 4, 14, 11, 21, 4}], 
          "NumericalThresholds" -> {-0.47845378518104553`, \
-0.2783917784690857, -0.20929139852523804`, 
           0.005584060680121183, -0.2700895369052887, -0.005875354167073965, \
-0.4094795286655426, -0.3249230682849884, -0.14514681696891785`, 
           0.007522485684603453}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -11}, {5, 10}, {
            6, -8}, {7, 8}, {-3, -4}, {-5, 9}, {-6, -7}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 3, 21, 15, 21, 2, 12, 9, 5, 17, 22}], 
          "NumericalThresholds" -> {0.005664067808538675, 
           0.3695148527622223, -0.12885352969169617`, -0.28863993287086487`, \
-0.13160718977451324`, -0.35581016540527344`, -0.21191181242465973`, \
-0.4793722331523895, 
           0.000741048192139715, -0.09982692450284958, -0.2579905390739441}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 9}, {4, -7}, {5, -6}, {6, 
            8}, {-1, 7}, {-2, -3}, {-4, -5}, {-8, -9}, {-10, 
            11}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 15, 20, 9, 17, 14, 15, 4, 18, 4, 10}], 
          "NumericalThresholds" -> {-0.3244405686855316, \
-0.30174124240875244`, -0.1335669755935669, -0.4666792154312134, \
-0.0996328666806221, -0.4205394387245178, -0.2894126772880554, \
-0.006355905439704657, -0.2870245575904846, 0.0024194265715777874`, 
           3.002147912979126}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 6}, {4, 
            5}, {-1, -2}, {-3, -4}, {-5, 7}, {8, 10}, {-6, 
            9}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 21, 17, 4, 12, 6, 19, 3, 3, 18, 15, 17}], 
          "NumericalThresholds" -> {-0.4643126428127289, -0.1398669332265854, \
-0.09350505471229553, 0.005584060680121183, -0.22323550283908844`, 
           0.007188881281763315, -0.2766512632369995, -0.8473467826843262, \
-0.676859438419342, -0.2785988748073578, -0.3031415641307831, \
-0.09344271570444107}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 4}, {-1, -2}, {5, 10}, {6, 
            7}, {-3, -4}, {8, -8}, {-5, 9}, {-6, -7}, {-9, -10}, {-11, 
            12}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 10, 20, 10, 2, 2, 12, 12, 12, 5, 15, 21}],
           "NumericalThresholds" -> {-0.09178284555673599, \
-0.32455453276634216`, -0.129562646150589, -0.34261730313301086`, \
-0.09112297743558884, -0.22482150793075562`, -0.21834267675876617`, \
-0.21883639693260193`, -0.21867938339710236`, -0.003476574318483472, \
-0.29805809259414673`, -0.1441441774368286}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 9}, {4, -7}, {-1, 5}, {6, 8}, {
            7, -4}, {-2, -3}, {-5, -6}, {-8, -9}, {-10, 11}, {
            12, -13}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 9, 18, 8, 9, 12, 15, 3, 2, 11, 1, 13, 8}],
           "NumericalThresholds" -> {-0.3242586553096771, \
-0.46435242891311646`, -0.28053975105285645`, 
           0.002837421605363488, -0.47760263085365295`, \
-0.22069314122200012`, -0.30018505454063416`, -0.2449808418750763, \
-0.36684608459472656`, -0.31902170181274414`, -1.1777313947677612`, \
-0.26863861083984375`, -0.0038688986096531153`}, "Children" -> 
          RawArray["Integer16",{{2, 13}, {3, 11}, {4, 7}, {5, 
            6}, {-1, -2}, {-3, -4}, {8, 9}, {-5, -6}, {-7, 
            10}, {-8, -9}, {-10, 12}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 10, 14, 19, 5, 4, 20, 11, 18, 21, 22, 21}],
           "NumericalThresholds" -> {0.1853523701429367, -0.3244405686855316, 
           2.4172160625457764`, -0.28113317489624023`, \
-0.0014525720616802573`, 
           0.0011575097450986505`, -0.13725592195987701`, \
-0.3131917417049408, -0.279006689786911, -0.13619543612003326`, \
-0.258009672164917, -0.13249872624874115`}, "Children" -> 
          RawArray["Integer16",{{2, -13}, {3, 12}, {4, -10}, {5, 7}, {
            6, -3}, {-1, -2}, {8, 9}, {-4, -5}, {10, 
            11}, {-6, -7}, {-8, -9}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 9, 19, 13, 8, 10, 8, 9, 22, 22, 21}], 
          "NumericalThresholds" -> {-0.08948260545730591, \
-0.47845378518104553`, -0.280603289604187, -0.26332104206085205`, 
           0.006193771958351135, -0.3282149136066437, 
           0.004952722229063511, -0.4700327515602112, -0.258009672164917, \
-0.25847211480140686`, -0.13496237993240356`}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 4}, {-1, -2}, {5, 7}, {
            6, -5}, {-3, -4}, {8, 9}, {-6, -7}, {-8, -9}, {
            11, -12}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{15, 17, 13, 10, 8, 16, 1, 10, 2, 13, 4}], 
          "NumericalThresholds" -> {-0.30493444204330444`, \
-0.10169507563114166`, -0.261075884103775, -0.3242586553096771, 
           0.0037232518661767244`, -0.19119544327259064`, \
-0.6095561385154724, -0.3399061858654022, -0.07548173516988754, \
-0.2685968279838562, -0.006882132962346077}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, -12}, {6, 
            11}, {7, -9}, {8, 9}, {-4, -5}, {10, -8}, {-6, -7}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 2, 6, 3, 19, 16, 3, 2, 6}], 
          "NumericalThresholds" -> {-0.009354442358016968, 0.1306554526090622,
            0.000793144921772182, -0.8155310750007629, -0.2765081524848938, \
-0.18908290565013885`, 0.10530006885528564`, -0.3413759171962738, 
           0.0058923992328345776`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -10}, {4, 7}, {-2, 5}, {
            6, -5}, {-3, -4}, {8, -9}, {-6, 9}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 4, 1, 13, 13, 19, 10, 21, 5, 4, 17}], 
          "NumericalThresholds" -> {-0.3242586553096771, 
           0.0006628766423091292, -0.48305416107177734`, \
-0.26332104206085205`, -0.2513991892337799, -0.2871890068054199, \
-0.3293783366680145, -0.13125541806221008`, 0.006290507968515158, 
           0.004465494770556688, -0.10218338668346405`}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 7}, {4, 6}, {-1, 
            5}, {-2, -3}, {-4, -5}, {8, -10}, {9, -9}, {
            10, -8}, {-6, -7}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 4, 20, 19, 12, 22, 4, 18, 8, 10, 22}], 
          "NumericalThresholds" -> {0.000793144921772182, 
           0.005243327934294939, -0.13095664978027344`, -0.2765081524848938, \
-0.21088503301143646`, -0.25874221324920654`, 
           0.006820696406066418, -0.2833786606788635, \
-0.00013112934539094567`, -0.32455453276634216`, -0.26562708616256714`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 7}, {4, -5}, {5, 
            6}, {-1, -2}, {-3, -4}, {-6, -7}, {9, 10}, {-8, -9}, {
            11, -12}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 2, 12, 6, 15, 17, 4, 9, 20, 1}], 
          "NumericalThresholds" -> {-0.007476677652448416, \
-0.3581937253475189, -0.21322867274284363`, 
           0.006195706315338612, -0.2980479598045349, -0.10169507563114166`, 
           0.0001089073412003927, -0.46446502208709717`, -0.137834832072258, \
-0.005152508150786161}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {5, -11}, {6, 9}, {
            7, 8}, {-4, -5}, {-6, -7}, {-8, 10}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 3, 8, 4, 9, 20, 21, 6, 15, 17, 5, 10}], 
          "NumericalThresholds" -> {-0.3242586553096771, 
           0.6582287549972534, -0.004097300115972757, \
-0.0036425734870135784`, -0.4666792154312134, -0.13534273207187653`, \
-0.13023486733436584`, 
           0.0006196867907419801, -0.2965311110019684, -0.09458495676517487, \
-0.0032255889382213354`, 3.0035414695739746`}, "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, -11}, {4, 7}, {-1, 5}, {
            6, -4}, {-2, -3}, {8, 11}, {9, 
            10}, {-5, -6}, {-7, -8}, {-9, -10}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 6, 14, 10, 1, 9, 5, 8, 22, 22, 8, 21}], 
          "NumericalThresholds" -> {
           0.006316245533525944, -0.006041122134774923, -0.4038362205028534, \
-0.3375241458415985, -0.3305834233760834, -0.47616222500801086`, 
           0.00018329039448872209`, 
           0.0022414065897464752`, -0.2545393109321594, -0.2590106725692749, 
           0.00415052892640233, -0.13782835006713867`}, "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 4}, {-1, -2}, {5, 6}, {-3, -4}, {
            7, 8}, {-5, -6}, {9, 10}, {-7, -8}, {-9, 
            11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 6, 18, 15, 8, 16, 5, 15, 5, 8, 1, 3}], 
          "NumericalThresholds" -> {-0.3244405686855316, 
           0.000793144921772182, -0.2892988920211792, -0.29805809259414673`, 
           0.007587932050228119, -0.19135868549346924`, 
           0.0011968311155214906`, -0.2904406487941742, \
-0.0017107224557548761`, 
           0.0006426802719943225, -0.6095561385154724, -0.21112705767154694`},
           "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 8}, {-1, 4}, {5, -6}, {6, -5}, {
            7, -4}, {-2, -3}, {9, 11}, {-7, 
            10}, {-8, -9}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 21, 19, 20, 6, 5, 21, 14, 16, 3, 22}], 
          "NumericalThresholds" -> {-0.006305393297225237, \
-0.12980173528194427`, -0.2740715742111206, -0.13583895564079285`, 
           0.000793144921772182, 
           0.004040263127535582, -0.13296589255332947`, -0.4125867784023285, \
-0.19562071561813354`, -0.6874450445175171, -0.2646746337413788}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 11}, {5, 8}, {6, 
            7}, {-3, -4}, {-5, -6}, {9, 
            10}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 9, 16, 17, 8, 19, 12, 16, 10, 20, 21}], 
          "NumericalThresholds" -> {-0.4660809338092804, -0.4706542193889618, \
-0.1877877414226532, -0.10431445389986038`, -0.0026579820550978184`, \
-0.2804635763168335, -0.21768730878829956`, -0.1872299611568451, \
-0.3305051326751709, -0.13033832609653473`, -0.1435082107782364}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 9}, {4, 8}, {-1, 5}, {6, 
            7}, {-2, -3}, {-4, -5}, {-6, -7}, {-8, -9}, {
            11, -12}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{22, 17, 9, 17, 9, 9, 7, 12, 18, 1, 8, 3}], 
          "NumericalThresholds" -> {-0.263956755399704, -0.09159073233604431, \
-0.4666792154312134, -0.10135116428136826`, -0.4660809338092804, \
-0.47654977440834045`, -0.0073158289305865765`, -0.2248607724905014, \
-0.2892988920211792, -0.10127952694892883`, 
           0.004302465822547674, -0.2491663545370102}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 4}, {-2, -3}, {-4, -5}, {
            7, 9}, {-6, 8}, {-7, -8}, {-9, 10}, {11, 
            12}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 21, 19, 18, 16, 9, 11, 10, 6, 13, 8}], 
          "NumericalThresholds" -> {-0.0022244981955736876`, \
-0.13349856436252594`, -0.27287107706069946`, -0.28172528743743896`, \
-0.19135868549346924`, -0.4661814272403717, -0.31168293952941895`, \
-0.3305051326751709, 
           0.006033061072230339, -0.261075884103775, \
-0.000048233356210403144`}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 5}, {-4, -5}, {
            7, 10}, {8, 9}, {-6, -7}, {-8, -9}, {11, -12}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 9, 15, 1, 10, 20, 11, 4, 11, 3, 5, 14}], 
          "NumericalThresholds" -> {-0.3242586553096771, -0.4739360511302948, \
-0.2965311110019684, -0.3526002764701843, -0.3296710252761841, \
-0.13562507927417755`, -0.3227461874485016, 
           0.0065329172648489475`, -0.32157424092292786`, 
           0.7905891537666321, -0.003476574318483472, -0.40887266397476196`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 7}, {4, -5}, {5, 
            6}, {-1, -2}, {-3, -4}, {-6, 8}, {9, 11}, {-7, 
            10}, {-8, -9}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 12, 18, 2, 17, 13, 15, 11, 17, 2, 12, 21}],
           "NumericalThresholds" -> {-0.4643126428127289, -0.213710755109787, \
-0.27498921751976013`, 
           0.02393556386232376, -0.10119276493787766`, -0.25925344228744507`, \
-0.300193727016449, -0.3107738792896271, -0.10405414551496506`, 
           0.01862824149429798, -0.20980539917945862`, -0.1453893631696701}, 
          "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 10}, {4, 9}, {5, -6}, {6, 
            7}, {-1, -2}, {8, -5}, {-3, -4}, {-7, -8}, {
            11, -11}, {-9, -10}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{13, 19, 16, 9, 8, 13, 21, 3, 4, 18, 12, 22}], 
          "NumericalThresholds" -> {-0.26286742091178894`, \
-0.28113317489624023`, -0.19131867587566376`, -0.4651176631450653, \
-0.004097300115972757, -0.2548784911632538, -0.1295667141675949, 
           0.06786973774433136, 
           0.006528571713715792, -0.27602311968803406`, -0.2182835340499878, \
-0.2552034258842468}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, 4}, {-1, -2}, {-3, -4}, {6, 
            7}, {-5, -6}, {8, 12}, {9, -11}, {10, -10}, {
            11, -9}, {-7, -8}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 14, 9, 22, 18, 17, 9, 19, 5, 3, 11}], 
          "NumericalThresholds" -> {-0.009354442358016968, 
           0.0065329172648489475`, -0.4092395305633545, \
-0.47710558772087097`, -0.2565307021141052, -0.279006689786911, \
-0.0890842005610466, -0.4666792154312134, -0.2821924686431885, \
-0.0008586116600781679, 0.06786973774433136, -0.31194519996643066`}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 11}, {4, 7}, {-2, 5}, {-3, 
            6}, {-4, -5}, {8, -10}, {9, 10}, {-6, -7}, {-8, -9}, {
            12, -13}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 4, 19, 13, 20, 15, 18, 9, 6, 8, 17}], 
          "NumericalThresholds" -> {0.1853523701429367, 
           0.0011575097450986505`, -0.2765081524848938, -0.2644304037094116, \
-0.13520367443561554`, -0.3000277280807495, -0.2785988748073578, \
-0.4660809338092804, 0.005068780388683081, 
           0.0008228620281443, -0.10144535452127457`}, "Children" -> 
          RawArray["Integer16",{{2, -12}, {3, 7}, {4, 6}, {
            5, -3}, {-1, -2}, {-4, -5}, {8, 10}, {9, -8}, {-6, -7}, {
            11, -11}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{21, 10, 10, 5, 20, 16, 10, 14, 10, 1, 10}], 
          "NumericalThresholds" -> {-0.12892581522464752`, \
-0.3244405686855316, -0.32789045572280884`, -0.007405860349535942, \
-0.13627946376800537`, -0.19823527336120605`, -0.33485090732574463`, \
-0.40839076042175293`, -0.338996559381485, -0.5334402918815613, \
-0.3399447500705719}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 10}, {4, -8}, {-1, 5}, {6, 
            7}, {-2, -3}, {8, -7}, {9, -6}, {-4, -5}, {-9, -10}, {-11, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 11, 4, 14, 1, 19, 20, 2, 13, 8, 17}], 
          "NumericalThresholds" -> {0.1853523701429367, -0.3064531087875366, 
           0.005176149308681488, -0.40638864040374756`, 
           0.261428564786911, -0.27833908796310425`, -0.137834832072258, \
-0.32758408784866333`, -0.26491665840148926`, 
           0.0008228620281443, -0.09565744549036026}, "Children" -> 
          RawArray["Integer16",{{2, -12}, {3, -11}, {4, 10}, {5, 9}, {
            6, -5}, {-1, 7}, {-2, 8}, {-3, -4}, {-6, -7}, {
            11, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 12, 8, 3, 7, 19, 6, 20, 22, 9, 16}], 
          "NumericalThresholds" -> {0.6582287549972534, -0.22588054835796356`,
            0.00862541701644659, -0.4153064787387848, \
-0.0016962701920419931`, -0.277233362197876, 
           0.0058923992328345776`, -0.14245213568210602`, \
-0.25667834281921387`, -0.47498181462287903`, -0.195440411567688}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {-1, 3}, {4, -10}, {5, 7}, {-2, 
            6}, {-3, -4}, {8, -9}, {-5, 9}, {10, -8}, {-6, -7}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 8, 22, 16, 21, 6, 1, 17, 20, 4, 10, 16}], 
          "NumericalThresholds" -> {
           0.5626259446144104, -0.008053933270275593, -0.2521434724330902, \
-0.19881023466587067`, -0.12980173528194427`, -0.0052893864922225475`, \
-0.7164359092712402, -0.09744914621114731, -0.1346098929643631, 
           0.0024194265715777874`, -0.326994389295578, -0.19320033490657806`},
           "Children" -> 
          RawArray["Integer16",{{2, 11}, {-1, 3}, {4, -10}, {5, 7}, {
            6, -4}, {-2, -3}, {8, 9}, {-5, -6}, {-7, 10}, {-8, -9}, {
            12, -13}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 19, 10, 20, 1, 17, 19, 20, 5, 1, 6, 1}], 
          "NumericalThresholds" -> {-0.28806230425834656`, \
-0.2797500491142273, -0.3244405686855316, -0.13095664978027344`, \
-0.42274874448776245`, -0.09744914621114731, -0.2854105830192566, \
-0.14458079636096954`, 0.0008080296101979911, -0.1775067001581192, 
           0.0006196867907419801, -0.6696448922157288}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 11}, {5, 9}, {6, 
            8}, {-3, 7}, {-4, -5}, {-6, -7}, {10, -10}, {-8, -9}, {
            12, -13}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 7, 14, 15, 2, 20, 9, 9, 6}], 
          "NumericalThresholds" -> {2.415522336959839, 
           0.007916389964520931, -0.4213654100894928, -0.2984948754310608, \
-0.03820342198014259, -0.13761673867702484`, -0.4700327515602112, \
-0.47616222500801086`, 0.0058923992328345776`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, -8}, {-1, 4}, {5, 8}, {6, -5}, {
            7, -4}, {-2, -3}, {-6, -7}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 2, 22, 17, 14, 12, 9, 3, 12, 8}], 
          "NumericalThresholds" -> {-0.17359831929206848`, \
-0.3413759171962738, -0.25941503047943115`, -0.0939243733882904, \
-0.41746851801872253`, -0.22603559494018555`, -0.46435242891311646`, \
-0.7452529668807983, -0.21362318098545074`, -0.006305393297225237}, 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 
            4}, {-2, -3}, {-4, -5}, {-6, 7}, {8, -11}, {-7, 9}, {
            10, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 13, 10, 19, 13, 18, 16}], 
          "NumericalThresholds" -> {-0.006666158325970173, \
-0.26332104206085205`, -0.3242586553096771, -0.28880152106285095`, \
-0.2512997090816498, -0.2711985111236572, -0.189242422580719}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 7}, {-3, 5}, {
            6, -6}, {-4, -5}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]]},
       "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 22.], 
         "Key" -> 
         "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "OOBConfusionMatrix" -> {{0.5714285618492535, 0.4285714381507465}, {
       0.4285714381507465, 0.5714285618492535}}, "Method" -> "RandomForest", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "FeatureFraction" -> 
        Association[
         "Value" -> 22^Rational[-1, 2], "Options" -> Association[]], 
        "LeafSize" -> Association["Value" -> 5, "Options" -> Association[]], 
        "TreeNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "Implementation" -> 
        Association["Value" -> "DAAL", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15489], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.2384457`6.828934488506113, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.6662037841948929, 0.024763973743803822`], "Accuracy" -> 
         Around[0.6304579479700784, 0.07025589306900139], "EvaluationTime" -> 
         0.000052756550908133885`, "TestSize" -> 95, "ModelMemory" -> 97352, 
         "ModelUtility" -> -0.2944371138801881, "TrainingSize" -> 15, 
         "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 154552, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.6662037841948929, 0.017510773763369295`]}, 
         "AccuracyHistory" -> {
           Around[0.6304579479700784, 0.04967841840740784]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 110], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 269144326614785]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.070178869328436, 0.7824142232778953], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00021002761210198723`, "TestSize" -> 95, 
              "ModelMemory" -> 30096, "ModelUtility" -> -1.8646225071931943`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 96664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.070178869328436, 0.5532504029766052]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1047382886332782`, 0.33070974663375596`], "Accuracy" -> 
              Around[0.4575636089185905, 0.14942705635897574`], 
              "EvaluationTime" -> 0.000361058288511037, "TestSize" -> 22, 
              "ModelMemory" -> 43792, "ModelUtility" -> -0.8509335754559441, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 286200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1047382886332782`, 0.23384710444921383`]}, 
              "AccuracyHistory" -> {
                Around[0.4575636089185905, 0.10566088484417616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000361058288511037, "MeanCrossEntropy" -> 
             Around[1.1047382886332782`, 0.33070974663375596`], "ModelMemory" -> 
             43792, "TrainingMemory" -> 286200, "TrainingTime" -> 
             0.0377968173892688], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 95, 
              "ModelMemory" -> 20208, "ModelUtility" -> -0.32703429985819865`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 59568, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916370843501094, 0.0062588525193839105`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7534575066931077, 0.11382075959908065`], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 118952, 
              "ModelUtility" -> -0.43987797863619027`, "TrainingSize" -> 88, 
              "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
              329920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7534575066931077, 0.08048343095231375]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.7534575066931077, 0.11382075959908065`], "ModelMemory" -> 
             118952, "TrainingMemory" -> 329920, "TrainingTime" -> 
             0.08525423981743238], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8727578151960201, 0.11969275744460825`], "Accuracy" -> 
              Around[0.5679579479700786, 0.07197694890754595], 
              "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
              "ModelMemory" -> 8992, "ModelUtility" -> -0.5841313461566909, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 61904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8727578151960201, 0.08463556044799911]}, 
              "AccuracyHistory" -> {
                Around[0.5679579479700786, 0.050895388661643406`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6789749832843422, 0.060767345088089515`], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.0000361058288511037, "TestSize" -> 22, 
              "ModelMemory" -> 23008, "ModelUtility" -> -0.3237430261262437, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 230336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6789749832843422, 0.042969001786491136`]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000361058288511037, "MeanCrossEntropy" -> 
             Around[0.6789749832843422, 0.060767345088089515`], "ModelMemory" -> 
             23008, "TrainingMemory" -> 230336, "TrainingTime" -> 
             0.015047184026769026`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.87682879188725, 0.1520773246857443], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
              "ModelMemory" -> 5968, "ModelUtility" -> -0.5958250517617328, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 69288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.87682879188725, 0.10753490754999814`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2250785542122669`, 0.34256179775461865`], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 6288, "ModelUtility" -> -0.9505907042814727, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 115424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2250785542122669`, 0.24222777016774547`]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[1.2250785542122669`, 0.34256179775461865`], "ModelMemory" -> 
             6288, "TrainingMemory" -> 115424, "TrainingTime" -> 
             0.028257458909459597`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6662037841948929, 0.024763973743803822`], "Accuracy" -> 
              Around[0.6304579479700784, 0.07025589306900139], 
              "EvaluationTime" -> 0.000052756550908133885`, "TestSize" -> 95, 
              "ModelMemory" -> 97352, "ModelUtility" -> -0.2944371138801881, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 154552, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6662037841948929, 0.017510773763369295`]}, 
              "AccuracyHistory" -> {
                Around[0.6304579479700784, 0.04967841840740784]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6770531402293156, 0.037189611422465144`], "Accuracy" -> 
              Around[0.7184331741359817, 0.13900487017229604`], 
              "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 99248, "ModelUtility" -> -0.31411091567755856`,
               "TrainingSize" -> 88, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 187320, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6770531402293156, 0.026297026426517787`]}, 
              "AccuracyHistory" -> {
                Around[0.7184331741359817, 0.09829128631678617]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
             Around[0.6770531402293156, 0.037189611422465144`], "ModelMemory" -> 
             99248, "TrainingMemory" -> 187320, "TrainingTime" -> 
             0.03328275704168338], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[13.363892051753997`, 3.1204605140329886`], "Accuracy" -> 
              Around[0.5679579479700786, 0.07197694890754595], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9240, "ModelUtility" -> -3.3313680583265652`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 90488, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[13.363892051753997`, 2.206498789897586]}, 
              "AccuracyHistory" -> {
                Around[0.5679579479700786, 0.050895388661643406`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7910671708781336, 0.17759861485548556`], "Accuracy" -> 
              Around[0.5010418697881557, 0.15049692772910647`], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.5027191538105134, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 119224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7910671708781336, 0.12558118489365175`]}, 
              "AccuracyHistory" -> {
                Around[0.5010418697881557, 0.10641739814499294`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.7910671708781336, 0.17759861485548556`], "ModelMemory" -> 
             9240, "TrainingMemory" -> 119224, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.594823234051712, 0.822039273931748], "Accuracy" -> 
              Around[0.5887912813034119, 0.07153438877263654], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9240, "ModelUtility" -> -2.017383810753995, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 90344, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.594823234051712, 0.5812695449988049]}, 
              "AccuracyHistory" -> {
                Around[0.5887912813034119, 0.05058245138916613]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7266781367304216, 0.1444273121587598], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.41287807297177814`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 119336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7266781367304216, 0.10212553181600537`]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.7266781367304216, 0.1444273121587598], "ModelMemory" -> 
             9240, "TrainingMemory" -> 119336, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.93948304841848, 0.15884963611178085`], "Accuracy" -> 
              Around[0.6096246146367451, 0.07096176357285101], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.6640010566123412, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 90208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.93948304841848, 0.11232365488365571`]}, 
              "AccuracyHistory" -> {
                Around[0.6096246146367451, 0.05017754422731947]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7058268829455386, 0.13065134424136585`], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 22, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.381136079113654, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 119096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7058268829455386, 0.09238445148420778]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018095780479704407`, "MeanCrossEntropy" -> 
             Around[0.7058268829455386, 0.13065134424136585`], "ModelMemory" -> 
             9240, "TrainingMemory" -> 119096, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[8.69511459337822, 2.0237296323962926`], "Accuracy" -> 
              Around[0.5783746146367452, 0.07177176002370075], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9240, "ModelUtility" -> -2.9014284578312877`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 90376, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.69511459337822, 1.4309929463555773`]}, 
              "AccuracyHistory" -> {
                Around[0.5783746146367452, 0.05075029821045236]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7857327078539007, 0.17343279999845196`], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.4952296192002046, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 119336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7857327078539007, 0.12263550895907563`]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.7857327078539007, 0.17343279999845196`], "ModelMemory" -> 
             9240, "TrainingMemory" -> 119336, "TrainingTime" -> 
             0.08360250581623441], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7170150927601658, 0.14012537699462424`], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 22, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.39885223658459146`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 119336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7170150927601658, 0.09908360428922024]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018095780479704407`, "MeanCrossEntropy" -> 
             Around[0.7170150927601658, 0.14012537699462424`], "ModelMemory" -> 
             9240, "TrainingMemory" -> 119336, "TrainingTime" -> 
             0.08360250581623441], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 269140031647489]], "MaxTrainingSize" -> 110, 
      "PreprocessorEvaluationTime" -> 6.339697265625`2.*^-6, 
      "PreprocessorMemory" -> 86008, "InputDimension" -> 22, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6463341980550162,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341451709599`17.33219102380777*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.2799999999999999, 
          "ElapsedTimes" -> 0.3556674, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3913687, "ExperimentCounts" -> 10]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 269152916549378]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0021664936441581416`}, "ID" -> 223830984131347470], 
         "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0007387628192406622}, "ID" -> 3181086525719607783], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0048012775367450924`}, "ID" -> 509165656554065290], 
         "f4" -> Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1604161506447929441], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4712557960321622165], "f6" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1736894384284373350], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6385081267771642384], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           9050612953462206946], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7620751929912453154], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7711695143384896275], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6947422922590196435], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5937810478194738894], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6353494181561493803], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6386650481869391281], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2405872803971830730], "f16" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4992907507517299211], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6201216371099642783], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7004436718853321618], "f19" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6489080358938780074], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1321833030588948872], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6714386864055124245], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8311728235746515674]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.223385, 
      "MaxTrainingMemory" -> 748352, "DataMemory" -> 381568, "FunctionMemory" -> 
      370912, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 25.5168095`9.15940129230742}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.794884847679819*^9, 3.795346787878443*^9, 
  3.795347100678387*^9, 3.797728950378426*^9, 3.7985485456300163`*^9},
 CellLabel->
  "Out[178]=",ExpressionUUID->"21534de6-dbe9-4403-a8de-ae997671a59d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cmclassOhErRed", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classOhErRed", ",", 
    RowBox[{"mLOHred", "@", "allDataErOHTest"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.794884848309389*^9, 3.7948848718726225`*^9}},
 CellLabel->
  "In[179]:=",ExpressionUUID->"06c1014d-59d5-489e-8eb3-297e0bfcbb5b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   TemplateBox[{"0.59", "0.10"}, "Around"], 
                   Around[0.5925925925925926, 0.09636202008710988]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
              "Sodium Oxalate Mole Fraction" -> 
              Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
              Association["Type" -> "Numerical"], "NCCN" -> 
              Association["Type" -> "Boolean"], "NCCCN" -> 
              Association["Type" -> "Numerical"], "NCCCCN" -> 
              Association["Type" -> "Boolean"], "NCCCCCN" -> 
              Association["Type" -> "Boolean"], "NCCCCCCCN" -> 
              Association["Type" -> "Numerical"], "NCCCNCCCCNCCCN" -> 
              Association["Type" -> "Numerical"], "CN(C)CCN(C)C" -> 
              Association["Type" -> "Boolean"], "CNCCNC" -> 
              Association["Type" -> "Boolean"], "C1CNCCN1" -> 
              Association["Type" -> "Boolean"], "CC1CNCCN1" -> 
              Association["Type" -> "Boolean"], "CC1CNC(C)CN1" -> 
              Association["Type" -> "Boolean"], "C1CN2CCN1CC2" -> 
              Association["Type" -> "Boolean"], "Cl.Cl.NC1CN2CCC1CC2" -> 
              Association["Type" -> "Numerical"], "Cl.Cl.NC1CCNC1" -> 
              Association["Type" -> "Boolean"], "NCC1CCCCN1" -> 
              Association["Type" -> "Boolean"], "CC1=NC=CN=C1" -> 
              Association["Type" -> "Numerical"], "NCCNCCN" -> 
              Association["Type" -> "Boolean"], "C1CC(CCN1)C2CCNCC2" -> 
              Association["Type" -> "Boolean"], "C(CN)CN" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                    "Amine Mole Fraction", "NCCN", "NCCCN", "NCCCCN", 
                    "NCCCCCN", "NCCCCCCCN", "NCCCNCCCCNCCCN", "CN(C)CCN(C)C", 
                    "CNCCNC", "C1CNCCN1", "CC1CNCCN1", "CC1CNC(C)CN1", 
                    "C1CN2CCN1CC2", "Cl.Cl.NC1CN2CCC1CC2", "Cl.Cl.NC1CCNC1", 
                    "NCC1CCCCN1", "CC1=NC=CN=C1", "NCCNCCN", 
                    "C1CC(CCN1)C2CCNCC2", "C(CN)CN"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 22]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))\
" -> Association["Type" -> "NumericalVector", "Weight" -> 22.]], "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                 "Output" -> 
                Association[
                 "(f1f2f3f5f8f9f16f19)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 8]], 
                "Version" -> {12.1, 0}, "ID" -> 4462902058618482583]], 
              MachineLearning`MLProcessor["NumericalVectorStandardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f5f8f9f16f19)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 8]], 
                "Mean" -> {0.0027125744939508526`, 0.0013702662912860152`, 
                 0.005885270631865775, 0., 0., 0., 0., 0.}, 
                "StandardDeviation" -> {0.0008922678396605211, 
                 0.0011033857541175838`, 0.0028718051216307847`, 1., 1., 1., 
                 1., 1.}, "Version" -> {12.1, 0}, "ID" -> 124065359484358159, 
                "Output" -> 
                Association[
                 "(f1f2f3f5f8f9f16f19)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 8]]]], 
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f4" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f20" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f21" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f22" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 7352995199434552655]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 7752557210050409023, "Output" -> 
                Association[
                 "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 7672479918638034227, "Output" -> 
                Association[
                 "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f5f8f9f16f19)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 8], 
                  "(f4f6f7f10f11f12f13f14f15f17f18f20f21f22)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 14]], 
                "Spans" -> {
                  Span[1, 8], 
                  Span[9, 22]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f1f2f3f5f8f9f16f19)(\
f4f6f7f10f11f12f13f14f15f17f18f20f21f22))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
                6351700579469570360]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f5f8f9f16f19)(\
f4f6f7f10f11f12f13f14f15f17f18f20f21f22))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 110, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, "Method" -> 
                    "Naive", "VectorLength" -> 22, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    1.0000000000000002`, 0.9999999999999991, 1., 1., 1., 1., 
                    1., 0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 22, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 22]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 16]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                   Association["Matrix" -> CompressedData["
1:eJztlGk0FIwexjW3RbIUZWsZJSQlQjTkr7LmYqS0b/ZSMopSyi4RxgwxZGwR
k7Hv5G95zdhTypYSRZIMeq/K1u2cer+8H+7He7/c55zn/M7/nOec59P/2Whz
+aA9gY+PT/ynV/40xTtT5Fb/WzBf4csrk+CiNUmf8ayRBeqFp55HOjWAv7CF
7q5YKsrSsojlS28C4cqGfxJn7wD93n4BQls6tr8pNd87EoU8a15S1mVXnNXS
1aXkFuOUQOFozis39JwqcBqRiYLet+Pli572Q3fI4Msr40+BkK13lHFuEOj9
owFqTlwY9gqkde0agghFXutu33CIMv/WvY6WBcI/5Lh9TUYoq93uGzaggrlr
KrxOb/cAySCJE6aDgRix1ya7M8AHX7FVZEMkHHHCXsY21ygO2xbbSyifPoLN
jZbGnQb2UPtqLW80qBlWNSjtcK4YwsDVFGVvROD45Jz0VXoHydUxkrTkS3h8
9SKZxjBftB26YqU/Xoo9BlLMrxHJyLx64UavKx1TbJzbalvvYPwPiYSMBiq8
3JlMu+HOgJY3g4alDfG4w6Q8aEDzNhTo9JLZUx4ws1Tv9YekaMy1zRiYqW2F
A3Ofwlc9KYKMNOymrhlBvv/rf6D2sl98W/bf7V2p/YuupF/0If3nvIrO71zl
Lyb9df8m9Tdd/8a/8n8X+Xd/7u/edhL9m875s5/eAO/JgKQ3uQwHlpa4GN5J
QQOTPnfT8y9RUm8t8e7OJtDd41TeqscC+5P6kssSo6B6pNSbRC8AVtoTVkpW
Lq5PtDL43FsEKoqVQwT3OhgkWOueoHrg92H+vlWagbDZxsVBfdsgKhDm54Mn
a1CGI/Z9JKcF+NW1m/ZnF2CBsW0sNbhBN8G4kD9DrBOn6+PchcZ60MHI1iCY
8gFV/YinsxeYOHV/T13HssdwmygkbUHIwXH1AvGjdhW4YtG3IoUQFr64Gfg2
iclBm+p9sj5bz6JC4o60q6Z6OFhWLfilsRo2eO8ndeqfA9ejblXxAblQqXKj
74R3HoiGyi8sDcvHJcX2W0Z8/FBuwluUxxkGYbW3lkEZ3Shq38Ae+1yJ3I1e
82rOj7BZqH3/WbcukLQ8XO8/egX2rTAb0K4IxPuaAaOyas2w4UK4x/CsP1jV
r9ByzcrAjvXf3ct7uEhT6ZqcdSvEHgo5oUciH7dblAxx7uTh8rD+eXXFVGzV
2fdIi8DC8ccSZw3eVAOls3R1w4UicD8SEUdYXwCnuyoDb1QzwNRIyokd/QQV
rivWj2mk4epi5c43B8aA39BaXQ46kK6tyqdkFAdXx4fVboSXorRDgVHP0UJY
xsygTJXF48aDKziOx0qQPtvwovtpLG6y3OfC0spDjc2qMVJZaRjbZW9NjHgG
lCYbZq14Hpzn5bTl+NWCe3yOijWxGCxWXfzynD2CRZdKM8mhXUj9M523/Xkz
sveaPUSPOgjnPmojLo+EXJmo7/5n85FxRsH/eTcd80sbesqjcnDxMq/JgcwS
1Duoqy37qgqn519JKQpfRZNLiwxHjMdgQq1CS2VJPUpRPs7PkSvR8UDkJGlH
Kna2MIRUU+zg2UmzPzkXaUA7/r2I4RWJA/oMpiWFhU7RejHcH7k4yTdHlbFz
BUrR7bV2RtFo3V7amjGMUOehaTkYchkSvrl5zYSnYrpzuAZzphQJZ6grYtTY
eGSRg0eVKQethsmHnGau48TeUzl9T19CXqqgh6fpKF7IL/ap6UsFLaferKB/
PATZQ58H0jMLUeC0FXtEtAb3zrOr5qw5uF2/tbCxwwMeTEtrMrhMTGpZUx7i
Wwv+J3Ynz9il4qf9QXLriA/wmoiayx4NP4i1beEsjR2Gac0TZ7YdSMOucz7C
XuJskE5fUivwORPkEsOcvlwNwQ/ZUQdfBCaAydEUo+sTERhUq1PJl+aHeRr0
dz7TQUDaJMJQk0wCsqlx9RJyGNQ+c3xd5cmAseHydBXfaqSTrnutEx+C69bi
Ovq7H0DoKRGx+WEmBsW12xLfJ2GivCv51EAI1hFV45iP2cCWXruhjhUDAfSF
YNUvdMimZUpfMbwFZle4RorUBDQYoXCKSoJRJmSRoX1aJrSJW1JCOtxxxpmW
oSSYjs5zFIHECB7o58ewZagpoH51yY2TnUys4IqfVUjLwnLH5n4rUhUKPn04
XmL+CKfEuCb+xTVIjZcf2urwGJjHFOtne9rhZpTFmGhvL/iIBE0Uv3wHoXa3
Ll8T6gSH2KXPlKSScJeC62kuqxW1JckfdWuakSVowOeWGAh3Fja52Qtn4Gfv
+38QZurhtdiBuI/vYjFhxpw4viEPT3q2HRD++R8XRmNiwrdS8a7n3MzKiRrU
cM3ZHSzgDbYXs8PdHJoh6alQR57WC4iknSm2qhhBA0Or+LIYDvjqaZprH65B
Td8yY9NRLiZ8WpDXvtmMuwZC2c56t4CxfdqERU3GjT2Dd6NFayFOre/hgrUr
6ti94B1alowk828mO7fU4L4HKw09be8jm6/j0uyhYtzZ4nk3rLAOq6tqNHw1
imCu07Vw2xYGhCYdys1PjUTqa8HoE8pFYCZFCgrpTob2nTG3pUVqQe75XXP5
N+8gkhiw+Frge3AOY1+L2uQENJEJxcIfHRAtNp0Ub2YHagzVqjl+KsyEln7r
d6zCw4/qPkVwvFHd7t7m2+YF2PYv9odx5UrMULKRe3SvANSXb/++6UIc6LRF
fBQYC8JbC5Hvv/6RDTb3+0efSMQCxe+LoPXyGmApHC6LPvQWShwqvvreHEES
gXvQJCYb5+cLelym2oFf9WXLPY9Q6GPNuFwfO4nHOyzy0xuDsTA1d1BoVQpO
Tsl7V7QVoldTtkWUeDYo69GTK3zjwcuJR26LzQS3seMXv1anY8j6bR+Gzj1H
zVYBMbnJMRA23v1EOaccuU1+lHqlbFzCDE8xrXeBUjIvJIoUj3FWdr2qR43B
0/EYW+znjmRo0GQjxa/BvwHq0YDz
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 0., 0., 0., 0., 0., 
                    0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    1.0000000000000002`, 0.9999999999999991, 1., 1., 1., 1., 
                    1., 0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 16, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0376843, "MaxTrainingMemory" -> 
                    109648, "DataMemory" -> 19568, "FunctionMemory" -> 26808, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 5, 15, 12, 22, 24.3893329`9.139774845299932}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 22, "Output" -> 
                Association[
                 "((f1f2f3f5f8f9f16f19)(\
f4f6f7f10f11f12f13f14f15f17f18f20f21f22))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 22.]], 
                "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                1401518302868632620]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f5f8f9f16f19)(\
f4f6f7f10f11f12f13f14f15f17f18f20f21f22))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 22.]], 
                "Mean" -> {1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                 5.752973854875811*^-16, 0., 0., 0., 0., 0., 
                 0.18181818181818182`, 0.09999999999999999, 
                 0.09090909090909091, 0.045454545454545456`, 
                 0.06363636363636363, 0.14545454545454545`, 
                 0.08181818181818182, 0.03636363636363636, 
                 0.00909090909090909, 0.07272727272727272, 
                 0.07272727272727272, 0.01818181818181818, 
                 0.01818181818181818, 0.06363636363636363}, 
                "StandardDeviation" -> {0.9999999999999958, 
                 1.0000000000000002`, 0.9999999999999991, 1., 1., 1., 1., 1., 
                 0.38569460791993504`, 0.3, 0.28747978728803447`, 
                 0.20829889522526546`, 0.24410402876541004`, 
                 0.35255853508482393`, 0.27408751693966066`, 
                 0.18719327529067273`, 0.09491187735373227, 
                 0.25968830649246727`, 0.25968830649246727`, 
                 0.133608531424537, 0.133608531424537, 0.24410402876541004`}, 
                "Output" -> 
                Association[
                 "((f1f2f3f5f8f9f16f19)(\
f4f6f7f10f11f12f13f14f15f17f18f20f21f22))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 22.]], 
                "Version" -> {12.1, 0}, "ID" -> 5063217780808148937]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 14111402000870112]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 0}, "ID" -> 2679119642341790783, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 7544847649283220122]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          False -> 0.3482142857142857, True -> 0.6517857142857143]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{19, 1, 11, 9, 22, 11, 15, 20, 9, 10}], 
             "NumericalThresholds" -> {-0.2700895369052887, \
-0.841812789440155, -0.3253421187400818, -0.4643126428127289, \
-0.2612587511539459, -0.3152429163455963, -0.30318859219551086`, \
-0.14174975454807281`, -0.47839072346687317`, -0.3276815414428711}, 
             "Children" -> 
             RawArray["Integer16",{{2, -11}, {-1, 3}, {-2, 4}, {5, 10}, {6, 
               8}, {-3, 7}, {-4, -5}, {-6, 9}, {-7, -8}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{19, 14, 17, 3, 3, 19, 19, 19, 20}], 
             "NumericalThresholds" -> {-0.2719886898994446, \
-0.4038362205028534, -0.09406682103872299, -0.4903698265552521, \
-0.6425952315330505, -0.27959367632865906`, -0.285665899515152, \
-0.27972611784935, -0.13950946927070618`}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 8}, {4, -6}, {5, 7}, {
               6, -3}, {-1, -2}, {-4, -5}, {-7, -8}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 1, 14, 5, 3, 5, 2, 16, 14}], 
             "NumericalThresholds" -> {-0.4643126428127289, \
-0.043721672147512436`, 2.4214916229248047`, 
              0.004040263127535582, -0.11774817109107971`, 
              0.006724684499204159, 
              0.1306554526090622, -0.19060760736465454`, -0.4196817874908447},
              "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 7}, {4, -5}, {5, 
               6}, {-1, -2}, {-3, -4}, {8, -8}, {-6, -7}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 14, 11, 11, 8, 14, 19, 13, 15, 6}], 
             "NumericalThresholds" -> {-0.4660809338092804, \
-0.4090591073036194, -0.32195132970809937`, -0.30846384167671204`, \
-0.00035630803904496133`, -0.4213654100894928, -0.27972611784935, \
-0.26332104206085205`, -0.3031415641307831, -0.003541450249031186}, 
             "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 7}, {-1, 4}, {5, -5}, {-2, 
               6}, {-3, -4}, {-6, -7}, {9, 10}, {-8, -9}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 22, 9, 3, 3, 18, 3, 10, 21, 16, 18}], 
             "NumericalThresholds" -> {-0.08948260545730591, \
-0.2547871768474579, -0.47635847330093384`, -0.18197417259216309`, 
              0.027258602902293205`, -0.28172528743743896`, \
-0.26349353790283203`, -0.3399447500705719, -0.144039124250412, \
-0.19571594893932343`, -0.2827376425266266}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 9}, {4, 6}, {-1, 
               5}, {-2, -3}, {7, 8}, {-4, -5}, {-6, -7}, {-8, 
               10}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{14, 20, 5, 9, 8, 12, 20, 22, 8, 3}], 
             "NumericalThresholds" -> {
              2.4172160625457764`, -0.13107670843601227`, 
              0.007315237540751696, -0.47654977440834045`, \
-0.0026579820550978184`, -0.21003399789333344`, -0.1331005096435547, \
-0.2507650554180145, -0.004097300115972757, -0.6425952315330505}, "Children" -> 
             RawArray["Integer16",{{2, -11}, {3, 10}, {4, 9}, {5, 
               6}, {-1, -2}, {7, -6}, {
               8, -5}, {-3, -4}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 14, 11, 21, 10, 18, 1, 14, 3, 15, 13}], 
             "NumericalThresholds" -> {0.0010796106653288007`, 
              2.420387029647827, -0.325069785118103, -0.1371517777442932, \
-0.33945298194885254`, -0.27736151218414307`, 
              0.11231797188520432`, -0.41126832365989685`, \
-0.36237555742263794`, -0.2999108135700226, -0.26557657122612}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, -6}, {-1, 4}, {-2, 5}, {-3, 
               6}, {-4, -5}, {8, 11}, {-7, 9}, {-8, 
               10}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 19, 16, 14, 15, 19, 22, 8, 10, 14, 22}],
              "NumericalThresholds" -> {-0.0220144335180521, \
-0.281995564699173, -0.19135868549346924`, 
              2.413947582244873, -0.28961271047592163`, -0.27972611784935, \
-0.25525057315826416`, 
              0.007584203965961933, -0.33446842432022095`, \
-0.42044585943222046`, -0.2639601230621338}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 6}, {4, -4}, {
               5, -3}, {-1, -2}, {-5, 7}, {8, 10}, {
               9, -8}, {-6, -7}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{16, 7, 1, 19, 9, 8, 19, 14, 10, 14}], 
             "NumericalThresholds" -> {-0.19571594893932343`, 
              0.001558235613629222, -0.3056701421737671, -0.2837267220020294, \
-0.47845378518104553`, -0.002701313467696309, -0.27855968475341797`, \
-0.41103434562683105`, -0.3244405686855316, -0.4078083038330078}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {-5, 
               6}, {7, 8}, {-6, -7}, {-8, 9}, {10, -11}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 19, 2, 12, 7, 14, 7, 12, 8, 2}], 
             "NumericalThresholds" -> {-0.4660809338092804, \
-0.2731941342353821, -0.3473511040210724, -0.213710755109787, 
              0.0020886710844933987`, -0.4173377454280853, \
-0.0006958959857001901, -0.21105660498142242`, 
              0.0014403016539290547`, -0.09236167371273041}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, -7}, {-1, 4}, {5, 7}, {
               6, -4}, {-2, -3}, {-5, -6}, {9, -11}, {-8, 10}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{12, 15, 16, 13, 7, 5, 9, 18, 15, 13, 21}], 
             "NumericalThresholds" -> {-0.22590333223342896`, \
-0.294922798871994, -0.18767407536506653`, -0.26863861083984375`, \
-0.009743350557982922, -0.00710940919816494, -0.48086199164390564`, \
-0.2711985111236572, -0.30174124240875244`, -0.2644614279270172, \
-0.13249872624874115`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 11}, {-3, 5}, {-4, 
               6}, {-5, 7}, {-6, 8}, {9, -10}, {
               10, -9}, {-7, -8}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 4, 19, 9, 12, 12, 7, 4, 11, 10, 13, 5}],
              "NumericalThresholds" -> {-0.00870926771312952, \
-0.00581309525296092, -0.27911174297332764`, -0.4660809338092804, \
-0.22352173924446106`, -0.22590333223342896`, -0.004304192494601011, \
-0.0009111018152907491, -0.3120971620082855, -0.33210960030555725`, \
-0.26484212279319763`, -0.005191755015403032}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {5, 11}, {6, 
               8}, {-4, 7}, {-5, -6}, {-7, 9}, {10, -10}, {-8, -9}, {-11, 
               12}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 17, 4, 15, 10, 18, 11, 3, 7, 4, 16}], 
             "NumericalThresholds" -> {-0.007405860349535942, \
-0.09749637544155121, 
              0.0024194265715777874`, -0.30493444204330444`, \
-0.329214483499527, -0.27602311968803406`, -0.3192867040634155, 
              0.508104145526886, 0.001558235613629222, 
              0.006809440907090902, -0.1984999179840088}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 8}, {5, 
               6}, {-3, -4}, {-5, 7}, {-6, -7}, {9, -12}, {10, 
               11}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{18, 21, 3, 9, 3, 22, 15, 18, 20, 21}], 
             "NumericalThresholds" -> {-0.28806230425834656`, \
-0.14192941784858704`, -0.26349353790283203`, -0.47616222500801086`, \
-0.5913024544715881, -0.2619756758213043, -0.3052259385585785, \
-0.2811967730522156, -0.1331005096435547, -0.14297978579998016`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 7}, {-4, 
               6}, {-5, -6}, {8, 9}, {-7, -8}, {10, -11}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 13, 9, 7, 4, 2, 2, 14, 22, 13, 6, 11}], 
             "NumericalThresholds" -> {-0.004338572267442942, \
-0.26332104206085205`, -0.463443785905838, 0.0005612902459688485, 
              0.0021286809351295233`, -0.3109213709831238, 
              0.14254435896873474`, -0.41023749113082886`, \
-0.2697344124317169, -0.25737154483795166`, -0.0014865435659885406`, \
-0.31442034244537354`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 10}, {6, 
               7}, {-4, -5}, {8, -9}, {9, -8}, {-6, -7}, {11, -13}, {-10, 
               12}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{18, 13, 4, 18, 6, 11, 6, 19, 2, 1, 20}], 
             "NumericalThresholds" -> {-0.2887960970401764, \
-0.25741228461265564`, 0.0047643156722188, -0.27719050645828247`, 
              0.0003445563488639891, -0.31442660093307495`, 
              0.001875711022876203, -0.2858363389968872, -0.3413759171962738, \
-1.2206038236618042`, -0.13494232296943665`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 9}, {5, 7}, {-3, 
               6}, {-4, -5}, {8, -8}, {-6, -7}, {-9, 10}, {-10, 
               11}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 1, 12, 6, 5, 8, 8, 13, 14, 13, 12}], 
             "NumericalThresholds" -> {-0.47845378518104553`, 
              0.5626259446144104, -0.21066920459270477`, \
-0.004187134560197592, -0.0038034713361412287`, 0.005208499263972044, 
              0.0031574091408401728`, -0.2541559636592865, \
-0.40802711248397827`, -0.26399239897727966`, -0.22352173924446106`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -12}, {-3, 5}, {-4, 
               6}, {7, 11}, {8, -9}, {9, -8}, {
               10, -7}, {-5, -6}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 19, 12, 4, 19, 4, 14, 11, 21, 4}], 
             "NumericalThresholds" -> {-0.47845378518104553`, \
-0.2783917784690857, -0.20929139852523804`, 
              0.005584060680121183, -0.2700895369052887, \
-0.005875354167073965, -0.4094795286655426, -0.3249230682849884, \
-0.14514681696891785`, 0.007522485684603453}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -11}, {5, 10}, {
               6, -8}, {7, 8}, {-3, -4}, {-5, 9}, {-6, -7}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 3, 21, 15, 21, 2, 12, 9, 5, 17, 22}], 
             "NumericalThresholds" -> {0.005664067808538675, 
              0.3695148527622223, -0.12885352969169617`, \
-0.28863993287086487`, -0.13160718977451324`, -0.35581016540527344`, \
-0.21191181242465973`, -0.4793722331523895, 
              0.000741048192139715, -0.09982692450284958, \
-0.2579905390739441}, "Children" -> 
             RawArray["Integer16",{{2, 10}, {3, 9}, {4, -7}, {5, -6}, {6, 
               8}, {-1, 7}, {-2, -3}, {-4, -5}, {-8, -9}, {-10, 
               11}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 15, 20, 9, 17, 14, 15, 4, 18, 4, 10}], 
             
             "NumericalThresholds" -> {-0.3244405686855316, \
-0.30174124240875244`, -0.1335669755935669, -0.4666792154312134, \
-0.0996328666806221, -0.4205394387245178, -0.2894126772880554, \
-0.006355905439704657, -0.2870245575904846, 0.0024194265715777874`, 
              3.002147912979126}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 6}, {4, 
               5}, {-1, -2}, {-3, -4}, {-5, 7}, {8, 10}, {-6, 
               9}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 21, 17, 4, 12, 6, 19, 3, 3, 18, 15, 
               17}], "NumericalThresholds" -> {-0.4643126428127289, \
-0.1398669332265854, -0.09350505471229553, 
              0.005584060680121183, -0.22323550283908844`, 
              0.007188881281763315, -0.2766512632369995, -0.8473467826843262, \
-0.676859438419342, -0.2785988748073578, -0.3031415641307831, \
-0.09344271570444107}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 4}, {-1, -2}, {5, 10}, {6, 
               7}, {-3, -4}, {8, -8}, {-5, 9}, {-6, -7}, {-9, -10}, {-11, 
               12}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 10, 20, 10, 2, 2, 12, 12, 12, 5, 15, 
               21}], "NumericalThresholds" -> {-0.09178284555673599, \
-0.32455453276634216`, -0.129562646150589, -0.34261730313301086`, \
-0.09112297743558884, -0.22482150793075562`, -0.21834267675876617`, \
-0.21883639693260193`, -0.21867938339710236`, -0.003476574318483472, \
-0.29805809259414673`, -0.1441441774368286}, "Children" -> 
             RawArray["Integer16",{{2, 10}, {3, 9}, {4, -7}, {-1, 5}, {6, 
               8}, {7, -4}, {-2, -3}, {-5, -6}, {-8, -9}, {-10, 11}, {
               12, -13}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 9, 18, 8, 9, 12, 15, 3, 2, 11, 1, 13, 
               8}], "NumericalThresholds" -> {-0.3242586553096771, \
-0.46435242891311646`, -0.28053975105285645`, 
              0.002837421605363488, -0.47760263085365295`, \
-0.22069314122200012`, -0.30018505454063416`, -0.2449808418750763, \
-0.36684608459472656`, -0.31902170181274414`, -1.1777313947677612`, \
-0.26863861083984375`, -0.0038688986096531153`}, "Children" -> 
             RawArray["Integer16",{{2, 13}, {3, 11}, {4, 7}, {5, 
               6}, {-1, -2}, {-3, -4}, {8, 9}, {-5, -6}, {-7, 
               10}, {-8, -9}, {-10, 12}, {-11, -12}, {-13, -14}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 
               1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 10, 14, 19, 5, 4, 20, 11, 18, 21, 22, 
               21}], "NumericalThresholds" -> {
              0.1853523701429367, -0.3244405686855316, 
              2.4172160625457764`, -0.28113317489624023`, \
-0.0014525720616802573`, 
              0.0011575097450986505`, -0.13725592195987701`, \
-0.3131917417049408, -0.279006689786911, -0.13619543612003326`, \
-0.258009672164917, -0.13249872624874115`}, "Children" -> 
             RawArray["Integer16",{{2, -13}, {3, 12}, {4, -10}, {5, 7}, {
               6, -3}, {-1, -2}, {8, 9}, {-4, -5}, {10, 
               11}, {-6, -7}, {-8, -9}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 9, 19, 13, 8, 10, 8, 9, 22, 22, 21}], 
             
             "NumericalThresholds" -> {-0.08948260545730591, \
-0.47845378518104553`, -0.280603289604187, -0.26332104206085205`, 
              0.006193771958351135, -0.3282149136066437, 
              0.004952722229063511, -0.4700327515602112, -0.258009672164917, \
-0.25847211480140686`, -0.13496237993240356`}, "Children" -> 
             RawArray["Integer16",{{2, 10}, {3, 4}, {-1, -2}, {5, 7}, {
               6, -5}, {-3, -4}, {8, 9}, {-6, -7}, {-8, -9}, {
               11, -12}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{15, 17, 13, 10, 8, 16, 1, 10, 2, 13, 4}], 
             "NumericalThresholds" -> {-0.30493444204330444`, \
-0.10169507563114166`, -0.261075884103775, -0.3242586553096771, 
              0.0037232518661767244`, -0.19119544327259064`, \
-0.6095561385154724, -0.3399061858654022, -0.07548173516988754, \
-0.2685968279838562, -0.006882132962346077}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, -12}, {6, 
               11}, {7, -9}, {8, 9}, {-4, -5}, {
               10, -8}, {-6, -7}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 2, 6, 3, 19, 16, 3, 2, 6}], 
             "NumericalThresholds" -> {-0.009354442358016968, 
              0.1306554526090622, 
              0.000793144921772182, -0.8155310750007629, -0.2765081524848938, \
-0.18908290565013885`, 0.10530006885528564`, -0.3413759171962738, 
              0.0058923992328345776`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -10}, {4, 7}, {-2, 5}, {
               6, -5}, {-3, -4}, {8, -9}, {-6, 9}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 4, 1, 13, 13, 19, 10, 21, 5, 4, 17}], 
             "NumericalThresholds" -> {-0.3242586553096771, 
              0.0006628766423091292, -0.48305416107177734`, \
-0.26332104206085205`, -0.2513991892337799, -0.2871890068054199, \
-0.3293783366680145, -0.13125541806221008`, 0.006290507968515158, 
              0.004465494770556688, -0.10218338668346405`}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 7}, {4, 6}, {-1, 
               5}, {-2, -3}, {-4, -5}, {8, -10}, {9, -9}, {
               10, -8}, {-6, -7}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 4, 20, 19, 12, 22, 4, 18, 8, 10, 22}], 
             "NumericalThresholds" -> {0.000793144921772182, 
              0.005243327934294939, -0.13095664978027344`, \
-0.2765081524848938, -0.21088503301143646`, -0.25874221324920654`, 
              0.006820696406066418, -0.2833786606788635, \
-0.00013112934539094567`, -0.32455453276634216`, -0.26562708616256714`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 7}, {4, -5}, {5, 
               6}, {-1, -2}, {-3, -4}, {-6, -7}, {9, 10}, {-8, -9}, {
               11, -12}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 2, 12, 6, 15, 17, 4, 9, 20, 1}], 
             "NumericalThresholds" -> {-0.007476677652448416, \
-0.3581937253475189, -0.21322867274284363`, 
              0.006195706315338612, -0.2980479598045349, \
-0.10169507563114166`, 
              0.0001089073412003927, -0.46446502208709717`, \
-0.137834832072258, -0.005152508150786161}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {5, -11}, {6, 
               9}, {7, 8}, {-4, -5}, {-6, -7}, {-8, 10}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 3, 8, 4, 9, 20, 21, 6, 15, 17, 5, 10}],
              "NumericalThresholds" -> {-0.3242586553096771, 
              0.6582287549972534, -0.004097300115972757, \
-0.0036425734870135784`, -0.4666792154312134, -0.13534273207187653`, \
-0.13023486733436584`, 
              0.0006196867907419801, -0.2965311110019684, \
-0.09458495676517487, -0.0032255889382213354`, 3.0035414695739746`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 12}, {3, -11}, {4, 7}, {-1, 5}, {
               6, -4}, {-2, -3}, {8, 11}, {9, 
               10}, {-5, -6}, {-7, -8}, {-9, -10}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 6, 14, 10, 1, 9, 5, 8, 22, 22, 8, 21}], 
             "NumericalThresholds" -> {
              0.006316245533525944, -0.006041122134774923, \
-0.4038362205028534, -0.3375241458415985, -0.3305834233760834, \
-0.47616222500801086`, 0.00018329039448872209`, 
              0.0022414065897464752`, -0.2545393109321594, \
-0.2590106725692749, 0.00415052892640233, -0.13782835006713867`}, "Children" -> 
             RawArray["Integer16",{{2, 12}, {3, 4}, {-1, -2}, {5, 
               6}, {-3, -4}, {7, 8}, {-5, -6}, {9, 10}, {-7, -8}, {-9, 
               11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 6, 18, 15, 8, 16, 5, 15, 5, 8, 1, 3}], 
             "NumericalThresholds" -> {-0.3244405686855316, 
              0.000793144921772182, -0.2892988920211792, \
-0.29805809259414673`, 0.007587932050228119, -0.19135868549346924`, 
              0.0011968311155214906`, -0.2904406487941742, \
-0.0017107224557548761`, 
              0.0006426802719943225, -0.6095561385154724, \
-0.21112705767154694`}, "Children" -> 
             RawArray["Integer16",{{2, 12}, {3, 8}, {-1, 4}, {5, -6}, {
               6, -5}, {7, -4}, {-2, -3}, {9, 11}, {-7, 
               10}, {-8, -9}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 21, 19, 20, 6, 5, 21, 14, 16, 3, 22}], 
             "NumericalThresholds" -> {-0.006305393297225237, \
-0.12980173528194427`, -0.2740715742111206, -0.13583895564079285`, 
              0.000793144921772182, 
              0.004040263127535582, -0.13296589255332947`, \
-0.4125867784023285, -0.19562071561813354`, -0.6874450445175171, \
-0.2646746337413788}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 11}, {5, 8}, {6, 
               7}, {-3, -4}, {-5, -6}, {9, 
               10}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 9, 16, 17, 8, 19, 12, 16, 10, 20, 21}], 
             "NumericalThresholds" -> {-0.4660809338092804, \
-0.4706542193889618, -0.1877877414226532, -0.10431445389986038`, \
-0.0026579820550978184`, -0.2804635763168335, -0.21768730878829956`, \
-0.1872299611568451, -0.3305051326751709, -0.13033832609653473`, \
-0.1435082107782364}, "Children" -> 
             RawArray["Integer16",{{2, 10}, {3, 9}, {4, 8}, {-1, 5}, {6, 
               7}, {-2, -3}, {-4, -5}, {-6, -7}, {-8, -9}, {
               11, -12}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{22, 17, 9, 17, 9, 9, 7, 12, 18, 1, 8, 3}], 
             "NumericalThresholds" -> {-0.263956755399704, \
-0.09159073233604431, -0.4666792154312134, -0.10135116428136826`, \
-0.4660809338092804, -0.47654977440834045`, -0.0073158289305865765`, \
-0.2248607724905014, -0.2892988920211792, -0.10127952694892883`, 
              0.004302465822547674, -0.2491663545370102}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 
               4}, {-2, -3}, {-4, -5}, {7, 9}, {-6, 8}, {-7, -8}, {-9, 10}, {
               11, 12}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 21, 19, 18, 16, 9, 11, 10, 6, 13, 8}], 
             "NumericalThresholds" -> {-0.0022244981955736876`, \
-0.13349856436252594`, -0.27287107706069946`, -0.28172528743743896`, \
-0.19135868549346924`, -0.4661814272403717, -0.31168293952941895`, \
-0.3305051326751709, 
              0.006033061072230339, -0.261075884103775, \
-0.000048233356210403144`}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
               5}, {-4, -5}, {7, 10}, {8, 9}, {-6, -7}, {-8, -9}, {
               11, -12}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 9, 15, 1, 10, 20, 11, 4, 11, 3, 5, 
               14}], "NumericalThresholds" -> {-0.3242586553096771, \
-0.4739360511302948, -0.2965311110019684, -0.3526002764701843, \
-0.3296710252761841, -0.13562507927417755`, -0.3227461874485016, 
              0.0065329172648489475`, -0.32157424092292786`, 
              0.7905891537666321, -0.003476574318483472, \
-0.40887266397476196`}, "Children" -> 
             RawArray["Integer16",{{2, 12}, {3, 7}, {4, -5}, {5, 
               6}, {-1, -2}, {-3, -4}, {-6, 8}, {9, 11}, {-7, 
               10}, {-8, -9}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 12, 18, 2, 17, 13, 15, 11, 17, 2, 12, 
               21}], "NumericalThresholds" -> {-0.4643126428127289, \
-0.213710755109787, -0.27498921751976013`, 
              0.02393556386232376, -0.10119276493787766`, \
-0.25925344228744507`, -0.300193727016449, -0.3107738792896271, \
-0.10405414551496506`, 
              0.01862824149429798, -0.20980539917945862`, \
-0.1453893631696701}, "Children" -> 
             RawArray["Integer16",{{2, 12}, {3, 10}, {4, 9}, {5, -6}, {6, 
               7}, {-1, -2}, {8, -5}, {-3, -4}, {-7, -8}, {
               11, -11}, {-9, -10}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{13, 19, 16, 9, 8, 13, 21, 3, 4, 18, 12, 
               22}], "NumericalThresholds" -> {-0.26286742091178894`, \
-0.28113317489624023`, -0.19131867587566376`, -0.4651176631450653, \
-0.004097300115972757, -0.2548784911632538, -0.1295667141675949, 
              0.06786973774433136, 
              0.006528571713715792, -0.27602311968803406`, \
-0.2182835340499878, -0.2552034258842468}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, 4}, {-1, -2}, {-3, -4}, {6, 
               7}, {-5, -6}, {8, 12}, {9, -11}, {10, -10}, {
               11, -9}, {-7, -8}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 4, 14, 9, 22, 18, 17, 9, 19, 5, 3, 11}],
              "NumericalThresholds" -> {-0.009354442358016968, 
              0.0065329172648489475`, -0.4092395305633545, \
-0.47710558772087097`, -0.2565307021141052, -0.279006689786911, \
-0.0890842005610466, -0.4666792154312134, -0.2821924686431885, \
-0.0008586116600781679, 0.06786973774433136, -0.31194519996643066`}, 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 11}, {4, 7}, {-2, 5}, {-3, 
               6}, {-4, -5}, {8, -10}, {9, 10}, {-6, -7}, {-8, -9}, {
               12, -13}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 4, 19, 13, 20, 15, 18, 9, 6, 8, 17}], 
             "NumericalThresholds" -> {0.1853523701429367, 
              0.0011575097450986505`, -0.2765081524848938, \
-0.2644304037094116, -0.13520367443561554`, -0.3000277280807495, \
-0.2785988748073578, -0.4660809338092804, 0.005068780388683081, 
              0.0008228620281443, -0.10144535452127457`}, "Children" -> 
             RawArray["Integer16",{{2, -12}, {3, 7}, {4, 6}, {
               5, -3}, {-1, -2}, {-4, -5}, {8, 10}, {9, -8}, {-6, -7}, {
               11, -11}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{21, 10, 10, 5, 20, 16, 10, 14, 10, 1, 10}],
              "NumericalThresholds" -> {-0.12892581522464752`, \
-0.3244405686855316, -0.32789045572280884`, -0.007405860349535942, \
-0.13627946376800537`, -0.19823527336120605`, -0.33485090732574463`, \
-0.40839076042175293`, -0.338996559381485, -0.5334402918815613, \
-0.3399447500705719}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 10}, {4, -8}, {-1, 5}, {6, 
               7}, {-2, -3}, {8, -7}, {
               9, -6}, {-4, -5}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 11, 4, 14, 1, 19, 20, 2, 13, 8, 17}], 
             "NumericalThresholds" -> {
              0.1853523701429367, -0.3064531087875366, 
              0.005176149308681488, -0.40638864040374756`, 
              0.261428564786911, -0.27833908796310425`, -0.137834832072258, \
-0.32758408784866333`, -0.26491665840148926`, 
              0.0008228620281443, -0.09565744549036026}, "Children" -> 
             RawArray["Integer16",{{2, -12}, {3, -11}, {4, 10}, {5, 9}, {
               6, -5}, {-1, 7}, {-2, 8}, {-3, -4}, {-6, -7}, {
               11, -10}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 12, 8, 3, 7, 19, 6, 20, 22, 9, 16}], 
             "NumericalThresholds" -> {
              0.6582287549972534, -0.22588054835796356`, 
              0.00862541701644659, -0.4153064787387848, \
-0.0016962701920419931`, -0.277233362197876, 
              0.0058923992328345776`, -0.14245213568210602`, \
-0.25667834281921387`, -0.47498181462287903`, -0.195440411567688}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {-1, 3}, {4, -10}, {5, 7}, {-2, 
               6}, {-3, -4}, {8, -9}, {-5, 9}, {
               10, -8}, {-6, -7}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 8, 22, 16, 21, 6, 1, 17, 20, 4, 10, 
               16}], "NumericalThresholds" -> {
              0.5626259446144104, -0.008053933270275593, -0.2521434724330902, \
-0.19881023466587067`, -0.12980173528194427`, -0.0052893864922225475`, \
-0.7164359092712402, -0.09744914621114731, -0.1346098929643631, 
              0.0024194265715777874`, -0.326994389295578, \
-0.19320033490657806`}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {-1, 3}, {4, -10}, {5, 7}, {
               6, -4}, {-2, -3}, {8, 9}, {-5, -6}, {-7, 10}, {-8, -9}, {
               12, -13}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{18, 19, 10, 20, 1, 17, 19, 20, 5, 1, 6, 
               1}], "NumericalThresholds" -> {-0.28806230425834656`, \
-0.2797500491142273, -0.3244405686855316, -0.13095664978027344`, \
-0.42274874448776245`, -0.09744914621114731, -0.2854105830192566, \
-0.14458079636096954`, 0.0008080296101979911, -0.1775067001581192, 
              0.0006196867907419801, -0.6696448922157288}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 11}, {5, 9}, {6, 
               8}, {-3, 7}, {-4, -5}, {-6, -7}, {10, -10}, {-8, -9}, {
               12, -13}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{14, 7, 14, 15, 2, 20, 9, 9, 6}], 
             "NumericalThresholds" -> {2.415522336959839, 
              0.007916389964520931, -0.4213654100894928, -0.2984948754310608, \
-0.03820342198014259, -0.13761673867702484`, -0.4700327515602112, \
-0.47616222500801086`, 0.0058923992328345776`}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, -8}, {-1, 4}, {5, 8}, {
               6, -5}, {7, -4}, {-2, -3}, {-6, -7}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 2, 22, 17, 14, 12, 9, 3, 12, 8}], 
             "NumericalThresholds" -> {-0.17359831929206848`, \
-0.3413759171962738, -0.25941503047943115`, -0.0939243733882904, \
-0.41746851801872253`, -0.22603559494018555`, -0.46435242891311646`, \
-0.7452529668807983, -0.21362318098545074`, -0.006305393297225237}, 
             "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 
               4}, {-2, -3}, {-4, -5}, {-6, 7}, {8, -11}, {-7, 9}, {
               10, -10}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 13, 10, 19, 13, 18, 16}], 
             "NumericalThresholds" -> {-0.006666158325970173, \
-0.26332104206085205`, -0.3242586553096771, -0.28880152106285095`, \
-0.2512997090816498, -0.2711985111236572, -0.189242422580719}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 7}, {-3, 5}, {
               6, -6}, {-4, -5}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]]}, "Processor" -> MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 22.], "Key" -> 
            "((f1f2f3f5f8f9f16f19)(f4f6f7f10f11f12f13f14f15f17f18f20f21f22))",
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], 
         "OOBConfusionMatrix" -> {{0.5714285618492535, 0.4285714381507465}, {
          0.4285714381507465, 0.5714285618492535}}, "Method" -> 
         "RandomForest", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "FeatureFraction" -> 
           Association[
            "Value" -> 22^Rational[-1, 2], "Options" -> Association[]], 
           "LeafSize" -> 
           Association["Value" -> 5, "Options" -> Association[]], 
           "TreeNumber" -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "Implementation" -> 
           Association["Value" -> "DAAL", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[15489], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.2384457`6.828934488506113, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.6662037841948929, 0.024763973743803822`], "Accuracy" -> 
            Around[0.6304579479700784, 0.07025589306900139], "EvaluationTime" -> 
            0.000052756550908133885`, "TestSize" -> 95, "ModelMemory" -> 
            97352, "ModelUtility" -> -0.2944371138801881, "TrainingSize" -> 
            15, "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
            154552, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.6662037841948929, 0.017510773763369295`]}, 
            "AccuracyHistory" -> {
              Around[0.6304579479700784, 0.04967841840740784]}, 
            "Configuration" -> {
             "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
              Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
              0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 
            110], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 269144326614785]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.070178869328436, 0.7824142232778953], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00021002761210198723`, "TestSize" -> 
                 95, "ModelMemory" -> 30096, 
                 "ModelUtility" -> -1.8646225071931943`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 96664, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.070178869328436, 0.5532504029766052]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1047382886332782`, 0.33070974663375596`], 
                 "Accuracy" -> 
                 Around[0.4575636089185905, 0.14942705635897574`], 
                 "EvaluationTime" -> 0.000361058288511037, "TestSize" -> 22, 
                 "ModelMemory" -> 43792, 
                 "ModelUtility" -> -0.8509335754559441, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 286200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1047382886332782`, 0.23384710444921383`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4575636089185905, 0.10566088484417616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000361058288511037, "MeanCrossEntropy" -> 
                Around[1.1047382886332782`, 0.33070974663375596`], 
                "ModelMemory" -> 43792, "TrainingMemory" -> 286200, 
                "TrainingTime" -> 0.0377968173892688], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 
                 95, "ModelMemory" -> 20208, 
                 "ModelUtility" -> -0.32703429985819865`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.015848931924611134`, 
                 "TrainingMemory" -> 59568, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6916370843501094, 0.0062588525193839105`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7534575066931077, 0.11382075959908065`], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 118952, 
                 "ModelUtility" -> -0.43987797863619027`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
                 329920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7534575066931077, 0.08048343095231375]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.7534575066931077, 0.11382075959908065`], 
                "ModelMemory" -> 118952, "TrainingMemory" -> 329920, 
                "TrainingTime" -> 0.08525423981743238], "Index" -> 2], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8727578151960201, 0.11969275744460825`], "Accuracy" -> 
                 Around[0.5679579479700786, 0.07197694890754595], 
                 "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95,
                  "ModelMemory" -> 8992, 
                 "ModelUtility" -> -0.5841313461566909, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 61904, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8727578151960201, 0.08463556044799911]}, 
                 "AccuracyHistory" -> {
                   Around[0.5679579479700786, 0.050895388661643406`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6789749832843422, 0.060767345088089515`], 
                 "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.0000361058288511037, "TestSize" -> 22, 
                 "ModelMemory" -> 23008, 
                 "ModelUtility" -> -0.3237430261262437, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 230336, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6789749832843422, 0.042969001786491136`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000361058288511037, "MeanCrossEntropy" -> 
                Around[0.6789749832843422, 0.060767345088089515`], 
                "ModelMemory" -> 23008, "TrainingMemory" -> 230336, 
                "TrainingTime" -> 0.015047184026769026`], "Index" -> 3], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.87682879188725, 0.1520773246857443], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95,
                  "ModelMemory" -> 5968, 
                 "ModelUtility" -> -0.5958250517617328, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 69288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.87682879188725, 0.10753490754999814`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.2250785542122669`, 0.34256179775461865`], 
                 "Accuracy" -> Around[0.5445201306577209, 0.1504707520532654],
                  "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 6288, 
                 "ModelUtility" -> -0.9505907042814727, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 115424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2250785542122669`, 0.24222777016774547`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[1.2250785542122669`, 0.34256179775461865`], 
                "ModelMemory" -> 6288, "TrainingMemory" -> 115424, 
                "TrainingTime" -> 0.028257458909459597`], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6662037841948929, 0.024763973743803822`], 
                 "Accuracy" -> 
                 Around[0.6304579479700784, 0.07025589306900139], 
                 "EvaluationTime" -> 0.000052756550908133885`, "TestSize" -> 
                 95, "ModelMemory" -> 97352, 
                 "ModelUtility" -> -0.2944371138801881, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 154552, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6662037841948929, 0.017510773763369295`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6304579479700784, 0.04967841840740784]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6770531402293156, 0.037189611422465144`], 
                 "Accuracy" -> 
                 Around[0.7184331741359817, 0.13900487017229604`], 
                 "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
                 "ModelMemory" -> 99248, 
                 "ModelUtility" -> -0.31411091567755856`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.015848931924611134`, 
                 "TrainingMemory" -> 187320, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6770531402293156, 0.026297026426517787`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7184331741359817, 0.09829128631678617]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
                Around[0.6770531402293156, 0.037189611422465144`], 
                "ModelMemory" -> 99248, "TrainingMemory" -> 187320, 
                "TrainingTime" -> 0.03328275704168338], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[13.363892051753997`, 3.1204605140329886`], "Accuracy" -> 
                 Around[0.5679579479700786, 0.07197694890754595], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9240, 
                 "ModelUtility" -> -3.3313680583265652`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 90488, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[13.363892051753997`, 2.206498789897586]}, 
                 "AccuracyHistory" -> {
                   Around[0.5679579479700786, 0.050895388661643406`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7910671708781336, 0.17759861485548556`], "Accuracy" -> 
                 Around[0.5010418697881557, 0.15049692772910647`], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 9240, 
                 "ModelUtility" -> -0.5027191538105134, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 119224, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7910671708781336, 0.12558118489365175`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5010418697881557, 0.10641739814499294`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.7910671708781336, 0.17759861485548556`], 
                "ModelMemory" -> 9240, "TrainingMemory" -> 119224, 
                "TrainingTime" -> 0.07541456536256848], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.594823234051712, 0.822039273931748], "Accuracy" -> 
                 Around[0.5887912813034119, 0.07153438877263654], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9240, "ModelUtility" -> -2.017383810753995, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
                 "TrainingMemory" -> 90344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.594823234051712, 0.5812695449988049]}, 
                 "AccuracyHistory" -> {
                   Around[0.5887912813034119, 0.05058245138916613]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7266781367304216, 0.1444273121587598], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 9240, 
                 "ModelUtility" -> -0.41287807297177814`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 119336, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7266781367304216, 0.10212553181600537`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.7266781367304216, 0.1444273121587598], "ModelMemory" -> 
                9240, "TrainingMemory" -> 119336, "TrainingTime" -> 
                0.07541456536256848], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.93948304841848, 0.15884963611178085`], "Accuracy" -> 
                 Around[0.6096246146367451, 0.07096176357285101], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9240, "ModelUtility" -> -0.6640010566123412,
                  "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379,
                  "TrainingMemory" -> 90208, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.93948304841848, 0.11232365488365571`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6096246146367451, 0.05017754422731947]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7058268829455386, 0.13065134424136585`], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 
                 22, "ModelMemory" -> 9240, 
                 "ModelUtility" -> -0.381136079113654, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 119096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7058268829455386, 0.09238445148420778]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000018095780479704407`, 
                "MeanCrossEntropy" -> 
                Around[0.7058268829455386, 0.13065134424136585`], 
                "ModelMemory" -> 9240, "TrainingMemory" -> 119096, 
                "TrainingTime" -> 0.07541456536256848], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[8.69511459337822, 2.0237296323962926`], "Accuracy" -> 
                 Around[0.5783746146367452, 0.07177176002370075], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9240, 
                 "ModelUtility" -> -2.9014284578312877`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 90376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[8.69511459337822, 1.4309929463555773`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5783746146367452, 0.05075029821045236]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7857327078539007, 0.17343279999845196`], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 9240, 
                 "ModelUtility" -> -0.4952296192002046, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 119336, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7857327078539007, 0.12263550895907563`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.7857327078539007, 0.17343279999845196`], 
                "ModelMemory" -> 9240, "TrainingMemory" -> 119336, 
                "TrainingTime" -> 0.08360250581623441], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7170150927601658, 0.14012537699462424`], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 
                 22, "ModelMemory" -> 9240, 
                 "ModelUtility" -> -0.39885223658459146`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 119336, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7170150927601658, 0.09908360428922024]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000018095780479704407`, 
                "MeanCrossEntropy" -> 
                Around[0.7170150927601658, 0.14012537699462424`], 
                "ModelMemory" -> 9240, "TrainingMemory" -> 119336, 
                "TrainingTime" -> 0.08360250581623441], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 269140031647489]], "MaxTrainingSize" -> 110, 
         "PreprocessorEvaluationTime" -> 6.339697265625`2.*^-6, 
         "PreprocessorMemory" -> 86008, "InputDimension" -> 22, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6463341980550162, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.7985341451709599`17.33219102380777*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.2799999999999999, 
             "ElapsedTimes" -> 0.3556674, "ExperimentCounts" -> 9], 
            Association[
            "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.3913687, "ExperimentCounts" -> 10]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association["ID" -> 269152916549378]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0021664936441581416`}, "ID" -> 
              223830984131347470], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0007387628192406622}, "ID" -> 
              3181086525719607783], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0048012775367450924`}, "ID" -> 
              509165656554065290], "f4" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1604161506447929441], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4712557960321622165], "f6" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1736894384284373350], "f7" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6385081267771642384], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              9050612953462206946], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7620751929912453154], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7711695143384896275], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6947422922590196435], "f12" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5937810478194738894], "f13" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6353494181561493803], "f14" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6386650481869391281], "f15" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2405872803971830730], "f16" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4992907507517299211], "f17" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6201216371099642783], "f18" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7004436718853321618], "f19" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6489080358938780074], "f20" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1321833030588948872], "f21" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6714386864055124245], "f22" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8311728235746515674]], 
           Association[
           "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1,
             "LogDensityRatios" -> 0]], "TrainingTime" -> 1.223385, 
         "MaxTrainingMemory" -> 748352, "DataMemory" -> 381568, 
         "FunctionMemory" -> 370912, "LanguageVersion" -> {12.1, 0}, "Date" -> 
         DateObject[{2020, 5, 15, 12, 22, 25.5168095`9.15940129230742}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        0.002742856482203961, 0.0009611854860558385, 0.002892876469155599, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {
        0.001704141656958028, 0.0006617173076112417, 0.007508424018214351, 0, 
         0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0029969934830547133`, 0.0012032082868960632`, 0.007947779832756888, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0017991688438474653`, 0.0012396762978101733`, 0.005272002492468928, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0026385439030547145`, 0.0015339186522904415`, 
         0.0032832551341424993`, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
         0, 0, 0, 0}, {
        0.003342335102635483, 0.0009466068802355844, 0.005608200903576244, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {
        0.003589084030695279, 0.0013276852201036533`, 0.007041650700829742, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, {
        0.004427859532784215, 0.0016545651035664928`, 0.01247309377642404, 1, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.003288565482747599, 0.0015896659134678015`, 0.004604378811730589, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, {
        0.0011433323150822812`, 0.0004364105851348042, 0.009131485154821137, 
         0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0037364831666406523`, 0.0012127492611802182`, 0.006774198539696626, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0029008260676477785`, 0.0014764831848957725`, 0.004398478895920877, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0028066891892804414`, 0.0011677812659528723`, 0.010004129208828412`,
          1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.001966681418466253, 0.00135628743053894, 0.006574887303437697, 0, 0,
          0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.004303180533678753, 0.0015233245320398388`, 0.012150430016555898`, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.002911181172847666, 0.0010104925859168226`, 0.008546152612740096, 1,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.003138588459463973, 0.0013504447668227042`, 0.004579180523311962, 0,
          0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0024905932968404655`, 0.0012405352886126005`, 0.007303765804535912, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, {
        0.0023002230310254566`, 0.0014859778613716137`, 
         0.0062277031207299905`, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0}, {
        0.0022412788106185447`, 0.0009639411445887004, 0.007954918295070725, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.001692408765460826, 0.001314266585169407, 0.0037923726488239776`, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, {
        0.0020353269139815515`, 0.0013077895804229547`, 0.007323925300228177, 
         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0035084939828442835`, 0.0017133181898631848`, 0.007373585714129375, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0017907520590454687`, 0.001345469098892494, 0.004027970177337451, 0,
          0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0020128002552121486`, 0.0008934267124638364, 0.005550283390360934, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, {
        0.002583840189365972, 0.0012642691352116287`, 0.006736589429320739, 0,
          0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.002499488450998751, 0.00103690567741659, 0.0038851098823570324`, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}}, 
      "Output" -> {
       True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, False, False, False, False, False, False, 
        False, False, False, False, False}], 
    "Predictions" -> {
     True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True}, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmViYGCQBmIQXc3XVuwh8GK/uK3xNI70J/tv7Up/uabm+f7r77eY
fn/zZP+5+M9zd9q/3B+6Ymf7hMTH+5deU3sYdPPF/ksbvzOf2f54//YtrxNm
LnuxP6jqerPj48f7MzYLKok6vdjf6rZP477Vk/18m82ddkk/3/+nY2JKjfvT
/cz7ZeyuV73afzDr3z+9lEcY+jWLZM6euPd8/0SzVK/8yU/2Rz6f5hnL83L/
Ra07lhN7HmO4B52Pbh4X52r5YoFX+6+412w4tv0Rhnp096Lz0c1Ddw+6e9H9
W7ac2Shn+cv9PnsaGax5Hu9XVppvtu71s/2CR8x2yJc+xVCPLo/uHgD+oPik

     "], "CountMatrix" -> {{0, 11, 0}, {0, 16, 0}}, 
    "IndicesMatrix" -> {{{}, {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
       27}, {}}, {{}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
       16}, {}}}, "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {27}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0004114407407407407, "SingleEvaluationTime" -> 
    0.0090082499999999989`2., "Version" -> {12.1, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7948848755505457`*^9, 3.795346788062953*^9, 
  3.7953471010957856`*^9, 3.7977289506253567`*^9, 3.7985485459247465`*^9},
 CellLabel->
  "Out[179]=",ExpressionUUID->"92ea1c2b-240d-445e-8c05-8726b5019274"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassOhErRed", "]"}]], "Input",
 CellChangeTimes->{{3.794884876340831*^9, 3.7948848809513755`*^9}},
 CellLabel->
  "In[180]:=",ExpressionUUID->"8322475d-90fb-44e5-9a65-75b1dbc3b024"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.5925925925925926`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "Indeterminate"}], ",", 
       RowBox[{"True", "\[Rule]", "Indeterminate"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "1.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.7613636363636361`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.7045454545454545`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.7441860465116279`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7948848814176598`*^9, 3.7953467881721687`*^9, 
  3.795347101251402*^9, 3.797728950725605*^9, 3.7985485459741387`*^9},
 CellLabel->
  "Out[180]//TableForm=",ExpressionUUID->"0edc0efc-742a-424e-98c7-\
d4ce7bd26066"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", "redpH", " ", "*)"}]], "Input",
 CellChangeTimes->{{3.794884891762399*^9, 3.794884895587056*^9}},
 CellLabel->
  "In[181]:=",ExpressionUUID->"23da1025-6790-4576-8242-dd8a3ad677ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classOhErRedpH", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLOHredpH", "@", "allDataErOHTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7948848218607664`*^9, 3.7948848453182144`*^9}, {
  3.7948849070746098`*^9, 3.794884910343296*^9}},
 CellLabel->
  "In[182]:=",ExpressionUUID->"de028032-bcab-4ab1-96a9-1bb6a37b5d6c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "23", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"}, 
                    10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "23", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Numerical\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"}, 
                    10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["110", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "NCCN" -> 
           Association["Type" -> "Boolean"], "NCCCN" -> 
           Association["Type" -> "Numerical"], "NCCCCN" -> 
           Association["Type" -> "Boolean"], "NCCCCCN" -> 
           Association["Type" -> "Boolean"], "NCCCCCCCN" -> 
           Association["Type" -> "Numerical"], "NCCCNCCCCNCCCN" -> 
           Association["Type" -> "Numerical"], "CN(C)CCN(C)C" -> 
           Association["Type" -> "Boolean"], "CNCCNC" -> 
           Association["Type" -> "Boolean"], "C1CNCCN1" -> 
           Association["Type" -> "Boolean"], "CC1CNCCN1" -> 
           Association["Type" -> "Boolean"], "CC1CNC(C)CN1" -> 
           Association["Type" -> "Boolean"], "C1CN2CCN1CC2" -> 
           Association["Type" -> "Boolean"], "Cl.Cl.NC1CN2CCC1CC2" -> 
           Association["Type" -> "Numerical"], "Cl.Cl.NC1CCNC1" -> 
           Association["Type" -> "Boolean"], "NCC1CCCCN1" -> 
           Association["Type" -> "Boolean"], "CC1=NC=CN=C1" -> 
           Association["Type" -> "Numerical"], "NCCNCCN" -> 
           Association["Type" -> "Boolean"], "C1CC(CCN1)C2CCNCC2" -> 
           Association["Type" -> "Boolean"], "C(CN)CN" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                  "Amine Mole Fraction", "pH", "NCCN", "NCCCN", "NCCCCN", 
                  "NCCCCCN", "NCCCCCCCN", "NCCCNCCCCNCCCN", "CN(C)CCN(C)C", 
                  "CNCCNC", "C1CNCCN1", "CC1CNCCN1", "CC1CNC(C)CN1", 
                  "C1CN2CCN1CC2", "Cl.Cl.NC1CN2CCC1CC2", "Cl.Cl.NC1CCNC1", 
                  "NCC1CCCCN1", "CC1=NC=CN=C1", "NCCNCCN", 
                  "C1CC(CCN1)C2CCNCC2", "C(CN)CN"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 23]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Boolean", "Numerical", "Boolean", "Boolean", "Numerical", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f6f9f10f17f20)(f5f7f8f11f12f13f14f15f16f18f19f21f22f23))\
" -> Association["Type" -> "NumericalVector", "Weight" -> 23.]], "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f6f9f10f17f20)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Version" -> {12.1, 0}, "ID" -> 5751016935026014940]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f6f9f10f17f20)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Mean" -> {0.0027125744939508526`, 0.0013702662912860152`, 
              0.005885270631865775, 2.436363636363636, 0., 0., 0., 0., 0.}, 
             "StandardDeviation" -> {0.0008922678396605211, 
              0.0011033857541175838`, 0.0028718051216307847`, 
              1.8267072847427503`, 1., 1., 1., 1., 1.}, 
             "Version" -> {12.1, 0}, "ID" -> 7615742423183057409, "Output" -> 
             Association[
              "(f1f2f3f4f6f9f10f17f20)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f5" -> Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 7247090572181790839]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 3583975695416164889, "Output" -> 
             Association[
              "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 6110732689722106564, "Output" -> 
             Association[
              "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f6f9f10f17f20)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9], 
               "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]], 
             "Spans" -> {
               Span[1, 9], 
               Span[10, 23]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                  1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             6179668086521503169]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                  1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 110, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 1.8066356491627547`*^-16, 0., 0., 
                    0., 0., 0., 0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, "Method" -> 
                   "Naive", "VectorLength" -> 23, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 1.8066356491627547`*^-16, 0., 0., 
                    0., 0., 0., 0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                   "StandardDeviation" -> {0.9999999999999958, 
                    1.0000000000000002`, 0.9999999999999991, 
                    0.9999999999999999, 1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 23, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 23]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 17]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 1.8066356491627547`*^-16, 0., 0., 
                    0., 0., 0., 0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    1.0000000000000002`, 0.9999999999999991, 
                    0.9999999999999999, 1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 17, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0132815, "MaxTrainingMemory" -> 112672, 
                  "DataMemory" -> 20592, "FunctionMemory" -> 27064, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 26.1127618`9.169427725381913}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 23, "Output" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             834451891423770229]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
             "Mean" -> {1.1556412392689129`*^-15, -4.289498049688105*^-17, 
              5.752973854875811*^-16, 1.8066356491627547`*^-16, 0., 0., 0., 
              0., 0., 0.18181818181818182`, 0.09999999999999999, 
              0.09090909090909091, 0.045454545454545456`, 0.06363636363636363,
               0.14545454545454545`, 0.08181818181818182, 0.03636363636363636,
               0.00909090909090909, 0.07272727272727272, 0.07272727272727272, 
              0.01818181818181818, 0.01818181818181818, 0.06363636363636363}, 
             "StandardDeviation" -> {0.9999999999999958, 1.0000000000000002`, 
              0.9999999999999991, 0.9999999999999999, 1., 1., 1., 1., 1., 
              0.38569460791993504`, 0.3, 0.28747978728803447`, 
              0.20829889522526546`, 0.24410402876541004`, 
              0.35255853508482393`, 0.27408751693966066`, 
              0.18719327529067273`, 0.09491187735373227, 0.25968830649246727`,
               0.25968830649246727`, 0.133608531424537, 0.133608531424537, 
              0.24410402876541004`}, "Output" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
             "Version" -> {12.1, 0}, "ID" -> 2293140387535639149]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 2261324410695280242]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 6896886200291672713, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 4893084385012160001]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.3482142857142857, True -> 0.6517857142857143]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassNumber" -> 2, "ClassPriors" -> 
      Association[1 -> 0.3482142857142857, 2 -> 0.6517857142857143], 
      "LogProbabilities" -> CompressedData["
1:eJylVk0oRFEUvjNjGgsWijEbU5ayYEFpZoFIWajBYsqSjNmIwspvihUlaoqF
xcxK06RRysp7CzZYSJIFQhRlFqLxpvE3m2PxvU7nvSzu4nR/vu9+5zvn3ur+
kZ5Bl1KqsjCKC8NZGJ7nTGldQOljyWDzTlzpJ8mty7hy6jXXy9NG7EcL52Z2
77KGdroXKm+9cf3N03rcfzHUksktfWkrjlGjYc1hmt+4dT+9v5boU5PpgfvU
pxbyx/ZXO4v08+hx+3zZt3a2GGhamPX8zSP+41zUUL68KQ4fPqwfJJwmPAlf
Wo/8JHyMcT/iU9yYmAhuR/Ia6o96UIx8CM/f5W27qvjQXoY3a9+63TrqR/fj
8oN4OE/np+v7shGfx4TH8aUY/YP6oH9QD+Qv+Y3zN+d3KSY8zm8SH6l+0A+Y
X9yPeP/Vz6oehG+3/ijfyIfLB6cv4Un3x3i848ib6q1i9ZX8i/px/ZH4Yz6x
fpAfnsf5ScovV1/Yf+zuR/2t1gvmg9uP67n+SvogP+k9keoX99v1L8ZcfXD3
w/tzfKzWK3cezUv4Uv2jv5Evvg9S/5f4S/1bek+ovoiP9P5J/VPC4/Tl/G8X
3+p7g/857v52/Sv5Feel/4/EX3p/pH4s5c9qP7D6f0L/Y/5/AU5PJAQ=
       "], "FeatureNumber" -> 23, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "((f1f2f3f4f6f9f10f17f20)(f5f7f8f11f12f13f14f15f16f18f19f21f22f23))\
" -> Association["Type" -> "NumericalVector", "Weight" -> 23.]], "Output" -> 
         Association[
          "((f1f2f3f4f6f9f10f17f20)(f5f7f8f11f12f13f14f15f16f18f19f21f22f23))\
" -> Association["Type" -> "NominalVector", "Weight" -> 23.]], "Processors" -> {
           MachineLearning`MLProcessor["DiscretizeNumericalVector", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
             "Boundaries" -> CompressedData["
1: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
              "], "Version" -> {12.1, 0}, "ID" -> 9011896343896864504, 
             "Output" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association["Type" -> "NominalVector", "Weight" -> 23.]]]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association[
                "Type" -> "NominalVector", "Weight" -> 23., 
                 "SetSize" -> {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                   8, 8, 8, 8, 8, 8, 8}]], "Index" -> {
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8]}, "MissingCode" -> 0, "Version" -> {12.1, 0}, "ID" -> 
             3333530559991094101, "Output" -> 
             Association[
              "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
               Association["Type" -> "NominalVector", "Weight" -> 23.]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NominalVector", "Weight" -> 23., 
               "SetSize" -> {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
                8, 8, 8, 8, 8, 8, 8}], "Key" -> 
             "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Approximate", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Method" -> "NaiveBayes", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "SmoothingParameter" -> 
        Association["Value" -> 0.2, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15553], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.2273958`6.808327432503499, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.4722787826926522, 0.28664393355448753`], "Accuracy" -> 
         Around[0.9358244784838081, 0.08818406716597949], "EvaluationTime" -> 
         0.0002867987929455423, "TestSize" -> 22, "ModelMemory" -> 45968, 
         "ModelUtility" -> -0.057559534066756846`, "TrainingSize" -> 88, 
         "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 296784, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.4722787826926522, 0.20268786920236428`]}, 
         "AccuracyHistory" -> {
           Around[0.9358244784838081, 0.06235555188567406]}, 
         "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}, 
         "FinalTrainingSize" -> 110], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 269178686353155]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.4470093226326557`, 0.5816639148268223], "Accuracy" -> 
              Around[0.6512912813034117, 0.06941271239287487], 
              "EvaluationTime" -> 0.00016683086236432773`, "TestSize" -> 95, 
              "ModelMemory" -> 31184, "ModelUtility" -> -1.6344868707651279`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 99032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.4470093226326557`, 0.41129849854556044`]}, 
              "AccuracyHistory" -> {
                Around[0.6512912813034117, 0.04908219963355333]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4722787826926522, 0.28664393355448753`], "Accuracy" -> 
              Around[0.9358244784838081, 0.08818406716597949], 
              "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 45968, 
              "ModelUtility" -> -0.057559534066756846`, "TrainingSize" -> 88, 
              "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
              296784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4722787826926522, 0.20268786920236428`]}, 
              "AccuracyHistory" -> {
                Around[0.9358244784838081, 0.06235555188567406]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
             Around[0.4722787826926522, 0.28664393355448753`], "ModelMemory" -> 
             45968, "TrainingMemory" -> 296784, "TrainingTime" -> 
             0.04190050861434645], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
              "ModelMemory" -> 20208, "ModelUtility" -> -0.32703460619963765`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 59744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916370843501094, 0.0062588525193839105`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7478931515039814, 0.210536708292767], "Accuracy" -> 
              Around[0.7184331741359817, 0.13900487017229604`], 
              "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 119048, 
              "ModelUtility" -> -0.45747382184636287`, "TrainingSize" -> 88, 
              "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
              331984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7478931515039814, 0.14887193412250957`]}, 
              "AccuracyHistory" -> {
                Around[0.7184331741359817, 0.09829128631678617]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
             Around[0.7478931515039814, 0.210536708292767], "ModelMemory" -> 
             119048, "TrainingMemory" -> 331984, "TrainingTime" -> 
             0.08525423981743238], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6630300629157142, 0.031251911055319014`], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 95, 
              "ModelMemory" -> 9184, "ModelUtility" -> -0.2916175750842849, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 62120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6630300629157142, 0.022098438232254908`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6585741578892982, 0.07524640233259557], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.0000361058288511037, "TestSize" -> 22, 
              "ModelMemory" -> 24096, "ModelUtility" -> -0.2980891516825127, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 232384, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6585741578892982, 0.05320724134926957]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000361058288511037, "MeanCrossEntropy" -> 
             Around[0.6585741578892982, 0.07524640233259557], "ModelMemory" -> 
             24096, "TrainingMemory" -> 232384, "TrainingTime" -> 
             0.013749482918239814`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.984084734016536, 0.13708583600265964`], "Accuracy" -> 
              Around[0.5471246146367452, 0.07229183273554146], 
              "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 95, 
              "ModelMemory" -> 5968, "ModelUtility" -> -0.7046051897319089, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 69544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.984084734016536, 0.09693432424210759]}, 
              "AccuracyHistory" -> {
                Around[0.5471246146367452, 0.05111804515170501]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4509993436405884`, 0.4090555229678684], "Accuracy" -> 
              Around[0.4575636089185905, 0.14942705635897574`], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 6288, "ModelUtility" -> -1.1202719577582405`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 112376, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4509993436405884`, 0.28924593417238925`]}, 
              "AccuracyHistory" -> {
                Around[0.4575636089185905, 0.10566088484417616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[1.4509993436405884`, 0.4090555229678684], "ModelMemory" -> 
             6288, "TrainingMemory" -> 112376, "TrainingTime" -> 
             0.021791461876978648`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6871518600850861, 0.018165337935199862`], "Accuracy" -> 
              Around[0.5992079479700785, 0.07126451357137402], 
              "EvaluationTime" -> 0.000052756550908133885`, "TestSize" -> 95, 
              "ModelMemory" -> 97416, "ModelUtility" -> -0.3232635088724375, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 154744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6871518600850861, 0.012844833636525058`]}, 
              "AccuracyHistory" -> {
                Around[0.5992079479700785, 0.050391620804279315`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6661258569767712, 0.04131114582941981], "Accuracy" -> 
              Around[0.761911435005547, 0.1329311299813264], "EvaluationTime" -> 
              0.00018095780479704407`, "TestSize" -> 22, "ModelMemory" -> 
              99248, "ModelUtility" -> -0.29924127691096947`, "TrainingSize" -> 
              88, "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
              187648, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6661258569767712, 0.029211391354569106`]}, 
              "AccuracyHistory" -> {
                Around[0.761911435005547, 0.09399650344058626]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00018095780479704407`, "MeanCrossEntropy" -> 
             Around[0.6661258569767712, 0.04131114582941981], "ModelMemory" -> 
             99248, "TrainingMemory" -> 187648, "TrainingTime" -> 
             0.03328275704168338], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[12.533604577217616`, 2.932434853885269], "Accuracy" -> 
              Around[0.5887912813034119, 0.07153438877263654], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9304, "ModelUtility" -> -3.2673144621427492`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 90480, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[12.533604577217616`, 2.073544570570056]}, 
              "AccuracyHistory" -> {
                Around[0.5887912813034119, 0.05058245138916613]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
             Around[12.533604577217616`, 2.932434853885269], "ModelMemory" -> 
             9304, "TrainingMemory" -> 90480, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.562521421518567, 0.8152559179316707], "Accuracy" -> 
              Around[0.5887912813034119, 0.07153438877263654], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9304, "ModelUtility" -> -2.0083902586971014`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 90536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.562521421518567, 0.5764729879719478]}, 
              "AccuracyHistory" -> {
                Around[0.5887912813034119, 0.05058245138916613]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7261032396512243, 0.23374194388369707`], "Accuracy" -> 
              Around[0.6314766523968512, 0.14710342215590386`], 
              "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 22, 
              "ModelMemory" -> 9304, "ModelUtility" -> -0.43550151929877223`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 120736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7261032396512243, 0.16528051356788764`]}, 
              "AccuracyHistory" -> {
                Around[0.6314766523968512, 0.10401782734218702`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018095780479704407`, "MeanCrossEntropy" -> 
             Around[0.7261032396512243, 0.23374194388369707`], "ModelMemory" -> 
             9304, "TrainingMemory" -> 120736, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8907379284010806, 0.1495677508269029], "Accuracy" -> 
              Around[0.6512912813034117, 0.06941271239287487], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9304, "ModelUtility" -> -0.6104959702402385, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 90536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8907379284010806, 0.10576037085652289`]}, 
              "AccuracyHistory" -> {
                Around[0.6512912813034117, 0.04908219963355333]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6849353747083124, 0.2028878440317469], "Accuracy" -> 
              Around[0.6314766523968512, 0.14710342215590386`], 
              "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 22, 
              "ModelMemory" -> 9304, "ModelUtility" -> -0.37229334464470265`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 120704, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6849353747083124, 0.14346337033516682`]}, 
              "AccuracyHistory" -> {
                Around[0.6314766523968512, 0.10401782734218702`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018095780479704407`, "MeanCrossEntropy" -> 
             Around[0.6849353747083124, 0.2028878440317469], "ModelMemory" -> 
             9304, "TrainingMemory" -> 120704, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[8.67352570433673, 2.024336571373517], "Accuracy" -> 
              Around[0.5887912813034119, 0.07153438877263654], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9304, "ModelUtility" -> -2.899066897528852, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 90376, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.67352570433673, 1.4314221170221393`]}, 
              "AccuracyHistory" -> {
                Around[0.5887912813034119, 0.05058245138916613]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
             Around[8.67352570433673, 2.024336571373517], "ModelMemory" -> 
             9304, "TrainingMemory" -> 90376, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6829968430334084`, 0.37221594330488744`], "Accuracy" -> 
              Around[0.557541281303412, 0.07215022999612741], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9304, "ModelUtility" -> -1.2570279236594195`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 90360, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6829968430334084`, 0.2631964175766334]}, 
              "AccuracyHistory" -> {
                Around[0.557541281303412, 0.05101791689443074]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7135210769662116, 0.22767278020555837`], "Accuracy" -> 
              Around[0.6314766523968512, 0.14710342215590386`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 9304, "ModelUtility" -> -0.41748951472338547`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 120872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7135210769662116, 0.16098896677494468`]}, 
              "AccuracyHistory" -> {
                Around[0.6314766523968512, 0.10401782734218702`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.7135210769662116, 0.22767278020555837`], "ModelMemory" -> 
             9304, "TrainingMemory" -> 120872, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 269174391385859]], "MaxTrainingSize" -> 110, 
      "PreprocessorEvaluationTime" -> 7.507666015625`2.*^-6, 
      "PreprocessorMemory" -> 87352, "InputDimension" -> 23, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6463341980550162,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341469186016`17.33219102400758*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
          0.2961927, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3800034, "ExperimentCounts" -> 8]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 269187276287747]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0026559342934007264`}, "ID" -> 5499027565193401273],
          "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0013027101918389869`}, "ID" -> 4778500353103930540],
          "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.003344505898832862}, "ID" -> 4214147365684682261], 
         "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4}, "ID" -> 
           3454510977500381988], "f5" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8523381195173964632], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2807528991107311265], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7400746512852215019], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           793367120169970877], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4209791006471134589], "f10" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7006975192161162086], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8387542876213791528], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1410950058917660075], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           788026977638880846], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2411741045116074708], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7532476622168060807], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8892723370809227438], "f17" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8520636880367870322], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           326881935104768447], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7828378610506007911], "f20" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7435052403572491365], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7269446031916795018], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8792167990484322949], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8522395963276249052]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1252767, 
      "MaxTrainingMemory" -> 707632, "DataMemory" -> 394768, "FunctionMemory" -> 
      321680, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 27.1629524`9.186551888096496}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.794884847679819*^9, 3.7948849409849653`*^9, 
  3.795346788450545*^9, 3.795347103174511*^9, 3.7977289522138147`*^9, 
  3.798548547251233*^9},
 CellLabel->
  "Out[182]=",ExpressionUUID->"a4fde107-0f58-4be6-8d6a-f96741218bc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cmclassOhErRedpH", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classOhErRedpH", ",", 
    RowBox[{"mLOHredpH", "@", "allDataErOHTest"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.794884848309389*^9, 3.7948848718726225`*^9}, {
  3.7948849165305758`*^9, 3.794884924683687*^9}},
 CellLabel->
  "In[183]:=",ExpressionUUID->"91473e33-f15f-4d1f-9898-6e788aa2b348"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   TemplateBox[{"0.70", "0.09"}, "Around"], 
                   Around[0.7037037037037037, 0.08955118886325777]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
              "Sodium Oxalate Mole Fraction" -> 
              Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
              Association["Type" -> "Numerical"], "pH" -> 
              Association["Type" -> "Numerical"], "NCCN" -> 
              Association["Type" -> "Boolean"], "NCCCN" -> 
              Association["Type" -> "Numerical"], "NCCCCN" -> 
              Association["Type" -> "Boolean"], "NCCCCCN" -> 
              Association["Type" -> "Boolean"], "NCCCCCCCN" -> 
              Association["Type" -> "Numerical"], "NCCCNCCCCNCCCN" -> 
              Association["Type" -> "Numerical"], "CN(C)CCN(C)C" -> 
              Association["Type" -> "Boolean"], "CNCCNC" -> 
              Association["Type" -> "Boolean"], "C1CNCCN1" -> 
              Association["Type" -> "Boolean"], "CC1CNCCN1" -> 
              Association["Type" -> "Boolean"], "CC1CNC(C)CN1" -> 
              Association["Type" -> "Boolean"], "C1CN2CCN1CC2" -> 
              Association["Type" -> "Boolean"], "Cl.Cl.NC1CN2CCC1CC2" -> 
              Association["Type" -> "Numerical"], "Cl.Cl.NC1CCNC1" -> 
              Association["Type" -> "Boolean"], "NCC1CCCCN1" -> 
              Association["Type" -> "Boolean"], "CC1=NC=CN=C1" -> 
              Association["Type" -> "Numerical"], "NCCNCCN" -> 
              Association["Type" -> "Boolean"], "C1CC(CCN1)C2CCNCC2" -> 
              Association["Type" -> "Boolean"], "C(CN)CN" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Ln Mole Fraction", "Sodium Oxalate Mole Fraction", 
                    "Amine Mole Fraction", "pH", "NCCN", "NCCCN", "NCCCCN", 
                    "NCCCCCN", "NCCCCCCCN", "NCCCNCCCCNCCCN", "CN(C)CCN(C)C", 
                    "CNCCNC", "C1CNCCN1", "CC1CNCCN1", "CC1CNC(C)CN1", 
                    "C1CN2CCN1CC2", "Cl.Cl.NC1CN2CCC1CC2", "Cl.Cl.NC1CCNC1", 
                    "NCC1CCCCN1", "CC1=NC=CN=C1", "NCCNCCN", 
                    "C1CC(CCN1)C2CCNCC2", "C(CN)CN"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 23]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Numerical",
                     "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22", "f23"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f20" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                 "Output" -> 
                Association[
                 "(f1f2f3f4f6f9f10f17f20)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Version" -> {12.1, 0}, "ID" -> 5751016935026014940]], 
              MachineLearning`MLProcessor["NumericalVectorStandardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f6f9f10f17f20)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Mean" -> {0.0027125744939508526`, 0.0013702662912860152`, 
                 0.005885270631865775, 2.436363636363636, 0., 0., 0., 0., 0.},
                 "StandardDeviation" -> {0.0008922678396605211, 
                 0.0011033857541175838`, 0.0028718051216307847`, 
                 1.8267072847427503`, 1., 1., 1., 1., 1.}, 
                "Version" -> {12.1, 0}, "ID" -> 7615742423183057409, "Output" -> 
                Association[
                 "(f1f2f3f4f6f9f10f17f20)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]]]], 
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f5" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f21" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f22" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f23" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 7247090572181790839]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 3583975695416164889, "Output" -> 
                Association[
                 "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 6110732689722106564, "Output" -> 
                Association[
                 "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f6f9f10f17f20)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9], 
                  "(f5f7f8f11f12f13f14f15f16f18f19f21f22f23)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 14]], 
                "Spans" -> {
                  Span[1, 9], 
                  Span[10, 23]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
                6179668086521503169]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 110, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 1.8066356491627547`*^-16, 0., 0., 
                    0., 0., 0., 0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, "Method" -> 
                    "Naive", "VectorLength" -> 23, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 1.8066356491627547`*^-16, 0., 0., 
                    0., 0., 0., 0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    1.0000000000000002`, 0.9999999999999991, 
                    0.9999999999999999, 1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 23, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 23]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 17]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                   Association["Matrix" -> CompressedData["
1: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
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {
                    1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                    5.752973854875811*^-16, 1.8066356491627547`*^-16, 0., 0., 
                    0., 0., 0., 0.18181818181818182`, 0.09999999999999999, 
                    0.09090909090909091, 0.045454545454545456`, 
                    0.06363636363636363, 0.14545454545454545`, 
                    0.08181818181818182, 0.03636363636363636, 
                    0.00909090909090909, 0.07272727272727272, 
                    0.07272727272727272, 0.01818181818181818, 
                    0.01818181818181818, 0.06363636363636363}, 
                    "StandardDeviation" -> {0.9999999999999958, 
                    1.0000000000000002`, 0.9999999999999991, 
                    0.9999999999999999, 1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 17, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0132815, "MaxTrainingMemory" -> 
                    112672, "DataMemory" -> 20592, "FunctionMemory" -> 27064, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 5, 15, 12, 22, 26.1127618`9.169427725381913}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 23, "Output" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
                "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                834451891423770229]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
                "Mean" -> {1.1556412392689129`*^-15, -4.289498049688105*^-17, 
                 5.752973854875811*^-16, 1.8066356491627547`*^-16, 0., 0., 0.,
                  0., 0., 0.18181818181818182`, 0.09999999999999999, 
                 0.09090909090909091, 0.045454545454545456`, 
                 0.06363636363636363, 0.14545454545454545`, 
                 0.08181818181818182, 0.03636363636363636, 
                 0.00909090909090909, 0.07272727272727272, 
                 0.07272727272727272, 0.01818181818181818, 
                 0.01818181818181818, 0.06363636363636363}, 
                "StandardDeviation" -> {0.9999999999999958, 
                 1.0000000000000002`, 0.9999999999999991, 0.9999999999999999, 
                 1., 1., 1., 1., 1., 0.38569460791993504`, 0.3, 
                 0.28747978728803447`, 0.20829889522526546`, 
                 0.24410402876541004`, 0.35255853508482393`, 
                 0.27408751693966066`, 0.18719327529067273`, 
                 0.09491187735373227, 0.25968830649246727`, 
                 0.25968830649246727`, 0.133608531424537, 0.133608531424537, 
                 0.24410402876541004`}, "Output" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
                "Version" -> {12.1, 0}, "ID" -> 2293140387535639149]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 2261324410695280242]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 0}, "ID" -> 6896886200291672713, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 4893084385012160001]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          False -> 0.3482142857142857, True -> 0.6517857142857143]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "ClassNumber" -> 2, "ClassPriors" -> 
         Association[1 -> 0.3482142857142857, 2 -> 0.6517857142857143], 
         "LogProbabilities" -> CompressedData["
1:eJylVk0oRFEUvjNjGgsWijEbU5ayYEFpZoFIWajBYsqSjNmIwspvihUlaoqF
xcxK06RRysp7CzZYSJIFQhRlFqLxpvE3m2PxvU7nvSzu4nR/vu9+5zvn3ur+
kZ5Bl1KqsjCKC8NZGJ7nTGldQOljyWDzTlzpJ8mty7hy6jXXy9NG7EcL52Z2
77KGdroXKm+9cf3N03rcfzHUksktfWkrjlGjYc1hmt+4dT+9v5boU5PpgfvU
pxbyx/ZXO4v08+hx+3zZt3a2GGhamPX8zSP+41zUUL68KQ4fPqwfJJwmPAlf
Wo/8JHyMcT/iU9yYmAhuR/Ia6o96UIx8CM/f5W27qvjQXoY3a9+63TrqR/fj
8oN4OE/np+v7shGfx4TH8aUY/YP6oH9QD+Qv+Y3zN+d3KSY8zm8SH6l+0A+Y
X9yPeP/Vz6oehG+3/ijfyIfLB6cv4Un3x3i848ib6q1i9ZX8i/px/ZH4Yz6x
fpAfnsf5ScovV1/Yf+zuR/2t1gvmg9uP67n+SvogP+k9keoX99v1L8ZcfXD3
w/tzfKzWK3cezUv4Uv2jv5Evvg9S/5f4S/1bek+ovoiP9P5J/VPC4/Tl/G8X
3+p7g/857v52/Sv5Feel/4/EX3p/pH4s5c9qP7D6f0L/Y/5/AU5PJAQ=
          "], "FeatureNumber" -> 23, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
            "Output" -> 
            Association[
             "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
              Association["Type" -> "NominalVector", "Weight" -> 23.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["DiscretizeNumericalVector", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 23.]], 
                "Boundaries" -> CompressedData["
1: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
                 "], "Version" -> {12.1, 0}, "ID" -> 9011896343896864504, 
                "Output" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 23.]]]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association[
                   "Type" -> "NominalVector", "Weight" -> 23., 
                    "SetSize" -> {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8}]], "Index" -> {
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8]}, "MissingCode" -> 0, "Version" -> {12.1, 0}, "ID" -> 
                3333530559991094101, "Output" -> 
                Association[
                 "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 23.]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 23., 
                  "SetSize" -> {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
                   8, 8, 8, 8, 8, 8, 8, 8}], "Key" -> 
                "((f1f2f3f4f6f9f10f17f20)(\
f5f7f8f11f12f13f14f15f16f18f19f21f22f23))", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Approximate", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], "Method" -> "NaiveBayes", 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "SmoothingParameter" -> 
           Association["Value" -> 0.2, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[15553], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.2273958`6.808327432503499, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.4722787826926522, 0.28664393355448753`], "Accuracy" -> 
            Around[0.9358244784838081, 0.08818406716597949], "EvaluationTime" -> 
            0.0002867987929455423, "TestSize" -> 22, "ModelMemory" -> 45968, 
            "ModelUtility" -> -0.057559534066756846`, "TrainingSize" -> 88, 
            "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 296784,
             "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.4722787826926522, 0.20268786920236428`]}, 
            "AccuracyHistory" -> {
              Around[0.9358244784838081, 0.06235555188567406]}, 
            "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}, 
            "FinalTrainingSize" -> 110], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 269178686353155]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.4470093226326557`, 0.5816639148268223], "Accuracy" -> 
                 Around[0.6512912813034117, 0.06941271239287487], 
                 "EvaluationTime" -> 0.00016683086236432773`, "TestSize" -> 
                 95, "ModelMemory" -> 31184, 
                 "ModelUtility" -> -1.6344868707651279`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 99032, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.4470093226326557`, 0.41129849854556044`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6512912813034117, 0.04908219963355333]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.4722787826926522, 0.28664393355448753`], "Accuracy" -> 
                 Around[0.9358244784838081, 0.08818406716597949], 
                 "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
                 "ModelMemory" -> 45968, 
                 "ModelUtility" -> -0.057559534066756846`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 296784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4722787826926522, 0.20268786920236428`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9358244784838081, 0.06235555188567406]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
                Around[0.4722787826926522, 0.28664393355448753`], 
                "ModelMemory" -> 45968, "TrainingMemory" -> 296784, 
                "TrainingTime" -> 0.04190050861434645], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95,
                  "ModelMemory" -> 20208, 
                 "ModelUtility" -> -0.32703460619963765`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.015848931924611134`, 
                 "TrainingMemory" -> 59744, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6916370843501094, 0.0062588525193839105`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7478931515039814, 0.210536708292767], "Accuracy" -> 
                 Around[0.7184331741359817, 0.13900487017229604`], 
                 "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
                 "ModelMemory" -> 119048, 
                 "ModelUtility" -> -0.45747382184636287`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
                 331984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7478931515039814, 0.14887193412250957`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7184331741359817, 0.09829128631678617]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
                Around[0.7478931515039814, 0.210536708292767], "ModelMemory" -> 
                119048, "TrainingMemory" -> 331984, "TrainingTime" -> 
                0.08525423981743238], "Index" -> 2], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6630300629157142, 0.031251911055319014`], 
                 "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 
                 95, "ModelMemory" -> 9184, 
                 "ModelUtility" -> -0.2916175750842849, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
                 62120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6630300629157142, 0.022098438232254908`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6585741578892982, 0.07524640233259557], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.0000361058288511037, "TestSize" -> 22, 
                 "ModelMemory" -> 24096, 
                 "ModelUtility" -> -0.2980891516825127, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 232384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6585741578892982, 0.05320724134926957]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000361058288511037, "MeanCrossEntropy" -> 
                Around[0.6585741578892982, 0.07524640233259557], 
                "ModelMemory" -> 24096, "TrainingMemory" -> 232384, 
                "TrainingTime" -> 0.013749482918239814`], "Index" -> 3], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.984084734016536, 0.13708583600265964`], "Accuracy" -> 
                 Around[0.5471246146367452, 0.07229183273554146], 
                 "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 
                 95, "ModelMemory" -> 5968, 
                 "ModelUtility" -> -0.7046051897319089, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 69544, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.984084734016536, 0.09693432424210759]}, 
                 "AccuracyHistory" -> {
                   Around[0.5471246146367452, 0.05111804515170501]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.4509993436405884`, 0.4090555229678684], "Accuracy" -> 
                 Around[0.4575636089185905, 0.14942705635897574`], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 6288, 
                 "ModelUtility" -> -1.1202719577582405`, "TrainingSize" -> 88,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 112376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.4509993436405884`, 0.28924593417238925`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4575636089185905, 0.10566088484417616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[1.4509993436405884`, 0.4090555229678684], 
                "ModelMemory" -> 6288, "TrainingMemory" -> 112376, 
                "TrainingTime" -> 0.021791461876978648`], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6871518600850861, 0.018165337935199862`], 
                 "Accuracy" -> 
                 Around[0.5992079479700785, 0.07126451357137402], 
                 "EvaluationTime" -> 0.000052756550908133885`, "TestSize" -> 
                 95, "ModelMemory" -> 97416, 
                 "ModelUtility" -> -0.3232635088724375, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 154744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6871518600850861, 0.012844833636525058`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5992079479700785, 0.050391620804279315`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6661258569767712, 0.04131114582941981], "Accuracy" -> 
                 Around[0.761911435005547, 0.1329311299813264], 
                 "EvaluationTime" -> 0.00018095780479704407`, "TestSize" -> 
                 22, "ModelMemory" -> 99248, 
                 "ModelUtility" -> -0.29924127691096947`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.015848931924611134`, 
                 "TrainingMemory" -> 187648, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6661258569767712, 0.029211391354569106`]}, 
                 "AccuracyHistory" -> {
                   Around[0.761911435005547, 0.09399650344058626]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00018095780479704407`, 
                "MeanCrossEntropy" -> 
                Around[0.6661258569767712, 0.04131114582941981], 
                "ModelMemory" -> 99248, "TrainingMemory" -> 187648, 
                "TrainingTime" -> 0.03328275704168338], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[12.533604577217616`, 2.932434853885269], "Accuracy" -> 
                 Around[0.5887912813034119, 0.07153438877263654], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9304, 
                 "ModelUtility" -> -3.2673144621427492`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 90480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[12.533604577217616`, 2.073544570570056]}, 
                 "AccuracyHistory" -> {
                   Around[0.5887912813034119, 0.05058245138916613]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
                Around[12.533604577217616`, 2.932434853885269], "ModelMemory" -> 
                9304, "TrainingMemory" -> 90480, "TrainingTime" -> 
                0.06640783086353597], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.562521421518567, 0.8152559179316707], "Accuracy" -> 
                 Around[0.5887912813034119, 0.07153438877263654], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9304, 
                 "ModelUtility" -> -2.0083902586971014`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 90536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.562521421518567, 0.5764729879719478]}, 
                 "AccuracyHistory" -> {
                   Around[0.5887912813034119, 0.05058245138916613]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7261032396512243, 0.23374194388369707`], "Accuracy" -> 
                 Around[0.6314766523968512, 0.14710342215590386`], 
                 "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 
                 22, "ModelMemory" -> 9304, 
                 "ModelUtility" -> -0.43550151929877223`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 120736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7261032396512243, 0.16528051356788764`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6314766523968512, 0.10401782734218702`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000018095780479704407`, 
                "MeanCrossEntropy" -> 
                Around[0.7261032396512243, 0.23374194388369707`], 
                "ModelMemory" -> 9304, "TrainingMemory" -> 120736, 
                "TrainingTime" -> 0.07541456536256848], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8907379284010806, 0.1495677508269029], "Accuracy" -> 
                 Around[0.6512912813034117, 0.06941271239287487], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9304, "ModelUtility" -> -0.6104959702402385,
                  "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379,
                  "TrainingMemory" -> 90536, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8907379284010806, 0.10576037085652289`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6512912813034117, 0.04908219963355333]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6849353747083124, 0.2028878440317469], "Accuracy" -> 
                 Around[0.6314766523968512, 0.14710342215590386`], 
                 "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 
                 22, "ModelMemory" -> 9304, 
                 "ModelUtility" -> -0.37229334464470265`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 120704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6849353747083124, 0.14346337033516682`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6314766523968512, 0.10401782734218702`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000018095780479704407`, 
                "MeanCrossEntropy" -> 
                Around[0.6849353747083124, 0.2028878440317469], "ModelMemory" -> 
                9304, "TrainingMemory" -> 120704, "TrainingTime" -> 
                0.07541456536256848], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[8.67352570433673, 2.024336571373517], "Accuracy" -> 
                 Around[0.5887912813034119, 0.07153438877263654], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9304, "ModelUtility" -> -2.899066897528852, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
                 "TrainingMemory" -> 90376, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[8.67352570433673, 1.4314221170221393`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5887912813034119, 0.05058245138916613]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
                Around[8.67352570433673, 2.024336571373517], "ModelMemory" -> 
                9304, "TrainingMemory" -> 90376, "TrainingTime" -> 
                0.06640783086353597], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.6829968430334084`, 0.37221594330488744`], 
                 "Accuracy" -> Around[0.557541281303412, 0.07215022999612741],
                  "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95,
                  "ModelMemory" -> 9304, 
                 "ModelUtility" -> -1.2570279236594195`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 90360, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.6829968430334084`, 0.2631964175766334]}, 
                 "AccuracyHistory" -> {
                   Around[0.557541281303412, 0.05101791689443074]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7135210769662116, 0.22767278020555837`], "Accuracy" -> 
                 Around[0.6314766523968512, 0.14710342215590386`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 9304, 
                 "ModelUtility" -> -0.41748951472338547`, "TrainingSize" -> 
                 88, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 120872, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7135210769662116, 0.16098896677494468`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6314766523968512, 0.10401782734218702`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.7135210769662116, 0.22767278020555837`], 
                "ModelMemory" -> 9304, "TrainingMemory" -> 120872, 
                "TrainingTime" -> 0.06640783086353597], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 269174391385859]], "MaxTrainingSize" -> 110, 
         "PreprocessorEvaluationTime" -> 7.507666015625`2.*^-6, 
         "PreprocessorMemory" -> 87352, "InputDimension" -> 23, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6463341980550162, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.7985341469186016`17.33219102400758*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
             0.2961927, "ExperimentCounts" -> 10], 
            Association[
            "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.3800034, "ExperimentCounts" -> 8]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association["ID" -> 269187276287747]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0026559342934007264`}, "ID" -> 
              5499027565193401273], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0013027101918389869`}, "ID" -> 
              4778500353103930540], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.003344505898832862}, "ID" -> 
              4214147365684682261], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4}, "ID" -> 
              3454510977500381988], "f5" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8523381195173964632], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2807528991107311265], "f7" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7400746512852215019], "f8" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              793367120169970877], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4209791006471134589], "f10" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7006975192161162086], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              8387542876213791528], "f12" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1410950058917660075], "f13" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              788026977638880846], "f14" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2411741045116074708], "f15" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7532476622168060807], "f16" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8892723370809227438], "f17" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8520636880367870322], "f18" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              326881935104768447], "f19" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7828378610506007911], "f20" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7435052403572491365], "f21" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7269446031916795018], "f22" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8792167990484322949], "f23" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8522395963276249052]], 
           Association[
           "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1,
             "LogDensityRatios" -> 0]], "TrainingTime" -> 1.1252767, 
         "MaxTrainingMemory" -> 707632, "DataMemory" -> 394768, 
         "FunctionMemory" -> 321680, "LanguageVersion" -> {12.1, 0}, "Date" -> 
         DateObject[{2020, 5, 15, 12, 22, 27.1629524`9.186551888096496}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        0.002742856482203961, 0.0009611854860558385, 0.002892876469155599, 3, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {
        0.001704141656958028, 0.0006617173076112417, 0.007508424018214351, 1, 
         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0029969934830547133`, 0.0012032082868960632`, 0.007947779832756888, 
         7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0017991688438474653`, 0.0012396762978101733`, 0.005272002492468928, 
         4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0026385439030547145`, 0.0015339186522904415`, 
         0.0032832551341424993`, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
         0, 0, 0, 0, 0}, {
        0.003342335102635483, 0.0009466068802355844, 0.005608200903576244, 4, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {
        0.003589084030695279, 0.0013276852201036533`, 0.007041650700829742, 3,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, {
        0.004427859532784215, 0.0016545651035664928`, 0.01247309377642404, 7, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.003288565482747599, 0.0015896659134678015`, 0.004604378811730589, 1,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, {
        0.0011433323150822812`, 0.0004364105851348042, 0.009131485154821137, 
         0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0037364831666406523`, 0.0012127492611802182`, 0.006774198539696626, 
         2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0029008260676477785`, 0.0014764831848957725`, 0.004398478895920877, 
         4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0028066891892804414`, 0.0011677812659528723`, 0.010004129208828412`,
          1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.001966681418466253, 0.00135628743053894, 0.006574887303437697, 3, 0,
          0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.004303180533678753, 0.0015233245320398388`, 0.012150430016555898`, 
         5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.002911181172847666, 0.0010104925859168226`, 0.008546152612740096, 3,
          1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.003138588459463973, 0.0013504447668227042`, 0.004579180523311962, 2,
          0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0024905932968404655`, 0.0012405352886126005`, 0.007303765804535912, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, {
        0.0023002230310254566`, 0.0014859778613716137`, 
         0.0062277031207299905`, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0}, {
        0.0022412788106185447`, 0.0009639411445887004, 0.007954918295070725, 
         4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.001692408765460826, 0.001314266585169407, 0.0037923726488239776`, 5,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, {
        0.0020353269139815515`, 0.0013077895804229547`, 0.007323925300228177, 
         3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0035084939828442835`, 0.0017133181898631848`, 0.007373585714129375, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0017907520590454687`, 0.001345469098892494, 0.004027970177337451, 3,
          0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.0020128002552121486`, 0.0008934267124638364, 0.005550283390360934, 
         3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, {
        0.002583840189365972, 0.0012642691352116287`, 0.006736589429320739, 5,
          0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
        0.002499488450998751, 0.00103690567741659, 0.0038851098823570324`, 6, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}}, 
      "Output" -> {
       True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, False, False, False, False, False, False, 
        False, False, False, False, False}], 
    "Predictions" -> {
     False, False, True, True, False, False, False, True, False, True, True, 
      True, True, False, True, True, False, False, False, False, False, False,
       True, False, False, False, False}, 
    "LogProbabilities" -> CompressedData["
1:eJwBwQE+/iFib1JlAgAAABsAAAACAAAAOXTKCBCKqL9RDzhGzn4IwLKeCLD6
ZtK/7AmKqhAw9r8K+2gHhQMIwHI2t6XyGaq/JLYae79u978OIErJbdPQv7GN
EmKiHNa/zM8VjlSw87+w3mWuYYiivzs0r6jTsQrA4n6wmyG5ub9HQ0ND5ccC
wPJAiRozhxvAbiK+H8/RUL9d5Ik7tzqnv2GdPduO7AjABYlXb1Ob+L8oLELp
/PTOv5aIhK0ZaxnAWmC8GC+DXL9d/d/0qbsGwCcTkK6Gxa6/VNB53NywEcA4
N+crWLqIv48mKF2LlJK/90tBod8SEMDyQIkaM4cbwG4ivh/P0VC/G6owqJq3
BsDKQu40o9Wuv2EvGJZ1aLe/K3pDVO9/A8DBhkBey1fIv9jxSvTODfy/ommR
Y9HAcb/K5B4BAsYVwP3EUwGW9MK/wEWzWqm6/7/XFEXUJ++Sv8pOjvRz/w/A
SJ1emHhqqb/VHOmHqTgIwA4NFQVPDvS/NwJhIvqD1b9A73V7BnSiv835pYp5
ugrAc+MQsy6jlL/3qUcyvlAPwJ340RFBKa2/gv3QQZAmB8Db62uS5oKWv/jQ
3yidoA7A4U3krA==
     "], "CountMatrix" -> {{10, 1, 0}, {7, 9, 0}}, 
    "IndicesMatrix" -> {{{17, 18, 19, 20, 21, 22, 24, 25, 26, 27}, {
       23}, {}}, {{1, 2, 5, 6, 7, 9, 14}, {3, 4, 8, 10, 11, 12, 13, 15, 
       16}, {}}}, "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {27}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006446888888888889, "SingleEvaluationTime" -> 
    0.0104008`3., "Version" -> {12.1, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7948848755505457`*^9, 3.794884941310536*^9, 
  3.7953467886385574`*^9, 3.795347103590934*^9, 3.797728952480565*^9, 
  3.7985485475140004`*^9},
 CellLabel->
  "Out[183]=",ExpressionUUID->"f04590ea-cc13-43f1-9dad-11b651c2e9d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassOhErRedpH", "]"}]], "Input",
 CellChangeTimes->{{3.794884876340831*^9, 3.7948848809513755`*^9}, {
  3.7948849287100525`*^9, 3.794884930481294*^9}},
 CellLabel->
  "In[184]:=",ExpressionUUID->"660d12eb-f69b-43f8-a8fd-9f2ec1deb99f"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.7037037037037037`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.9090909090909091`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.5625`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.47984093844023834`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.47984093844023834`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.9090909090909091`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.5625`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.5625`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.9090909090909091`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.8125`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.8125000000000001`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.7142857142857143`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.6923076923076923`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7948849414685535`*^9, 3.795346788803116*^9, 
  3.795347103746035*^9, 3.7977289525808463`*^9, 3.798548547567857*^9},
 CellLabel->
  "Out[184]//TableForm=",ExpressionUUID->"64ee4ec0-f757-44a3-8082-\
dca486c6310f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"just", " ", "one", " ", "hot"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948849528806424`*^9, 3.7948849562922707`*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"a4859b17-6707-4a57-a0ad-c169efc911a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classOhOnlyEr", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLOHonly", "@", "allDataErOHTrain"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7948849919253373`*^9, 3.7948850245456734`*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"d707cc6a-0c9c-4434-a581-eca47483b82a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "19", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"}, 
                    10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "19", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Boolean\"", ",", "\"Numerical\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean"}, 
                    10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["110", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "NCCN" -> Association["Type" -> "Boolean"], "NCCCN" -> 
           Association["Type" -> "Numerical"], "NCCCCN" -> 
           Association["Type" -> "Boolean"], "NCCCCCN" -> 
           Association["Type" -> "Boolean"], "NCCCCCCCN" -> 
           Association["Type" -> "Numerical"], "NCCCNCCCCNCCCN" -> 
           Association["Type" -> "Numerical"], "CN(C)CCN(C)C" -> 
           Association["Type" -> "Boolean"], "CNCCNC" -> 
           Association["Type" -> "Boolean"], "C1CNCCN1" -> 
           Association["Type" -> "Boolean"], "CC1CNCCN1" -> 
           Association["Type" -> "Boolean"], "CC1CNC(C)CN1" -> 
           Association["Type" -> "Boolean"], "C1CN2CCN1CC2" -> 
           Association["Type" -> "Boolean"], "Cl.Cl.NC1CN2CCC1CC2" -> 
           Association["Type" -> "Numerical"], "Cl.Cl.NC1CCNC1" -> 
           Association["Type" -> "Boolean"], "NCC1CCCCN1" -> 
           Association["Type" -> "Boolean"], "CC1=NC=CN=C1" -> 
           Association["Type" -> "Numerical"], "NCCNCCN" -> 
           Association["Type" -> "Boolean"], "C1CC(CCN1)C2CCNCC2" -> 
           Association["Type" -> "Boolean"], "C(CN)CN" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Boolean", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "NCCN", "NCCCN", "NCCCCN", "NCCCCCN", "NCCCCCCCN", 
                  "NCCCNCCCCNCCCN", "CN(C)CCN(C)C", "CNCCNC", "C1CNCCN1", 
                  "CC1CNCCN1", "CC1CNC(C)CN1", "C1CN2CCN1CC2", 
                  "Cl.Cl.NC1CN2CCC1CC2", "Cl.Cl.NC1CCNC1", "NCC1CCCCN1", 
                  "CC1=NC=CN=C1", "NCCNCCN", "C1CC(CCN1)C2CCNCC2", 
                  "C(CN)CN"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 19]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Boolean", "Numerical", "Boolean", "Boolean", "Numerical", 
                  "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                  "Numerical", "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19"}, "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                Automatic, "RawExample" -> Missing["KeyAbsent", "RawExample"],
                 "StructurePreserving" -> False]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f1" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 19.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f2f5f6f13f16)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Version" -> {12.1, 0}, "ID" -> 6945678714693038801]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2f5f6f13f16)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Mean" -> {0., 0., 0., 0., 0.}, 
             "StandardDeviation" -> {1., 1., 1., 1., 1.}, 
             "Version" -> {12.1, 0}, "ID" -> 912111237495088376, "Output" -> 
             Association[
              "(f2f5f6f13f16)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Boolean", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 4598506453767151831]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 2588259279539323703, "Output" -> 
             Association[
              "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 14]], 
             "Version" -> {12.1, 0}, "ID" -> 4702548804648667413, "Output" -> 
             Association[
              "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2f5f6f13f16)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5], 
               "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 14]], 
             "Spans" -> {
               Span[1, 5], 
               Span[6, 19]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                  1., 1., 1., 1., 1., 1., 1.}, "Type" -> "NumericalVector"]], 
             "Version" -> {12.1, 0}, "ID" -> 160504210633110758]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                  1., 1., 1., 1., 1., 1., 1.}, "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 110, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0., 0., 0., 0., 0., 0.18181818181818182`, 
                    0.09999999999999999, 0.09090909090909091, 
                    0.045454545454545456`, 0.06363636363636363, 
                    0.14545454545454545`, 0.08181818181818182, 
                    0.03636363636363636, 0.00909090909090909, 
                    0.07272727272727272, 0.07272727272727272, 
                    0.01818181818181818, 0.01818181818181818, 
                    0.06363636363636363}, "Method" -> "Naive", "VectorLength" -> 
                   19, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0., 0., 0., 0., 0., 0.18181818181818182`, 
                    0.09999999999999999, 0.09090909090909091, 
                    0.045454545454545456`, 0.06363636363636363, 
                    0.14545454545454545`, 0.08181818181818182, 
                    0.03636363636363636, 0.00909090909090909, 
                    0.07272727272727272, 0.07272727272727272, 
                    0.01818181818181818, 0.01818181818181818, 
                    0.06363636363636363}, 
                   "StandardDeviation" -> {1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 19, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 19]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 13]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1:eJzt0/k/1HkcwPERQsZdD7FWoW0TaqOHyJdPj6h2XQm5SuaR62E7bMoVIjU0
62hozIOEHFMm9zhjeI9jsBSWkuMh97jPiqlR7T4e3/kzej8en5+fj/f783hp
XPa3995GIBCU/n8yhB/zY/Cxyp9WOLaxgNxKrIoHCT1o8aPN8LtlBhK8qrcD
PQYqlz8Y8pmWjRycuhdF6AWY5c5LBQ7YE1BgLV8ixzRhBguBU411T9GXtMTm
QWIadJLeOR8ozIKOrgFWufdHzMQqrogjH4dUDx155hgJoEHmqrlLv4EtLG3G
vWMeBXDbM2o2X6OYF4arsTYcxHIL1taY/cR2t7jCkvq1HNzMIJ90uh8baJab
MeGUImLl7sGLOc/AdeucWo0EE0gujrpyxnxMldShJytHQ1G+OhNhxbXw1m+H
wLPtNVimKf3THf8eSo83nFl6OYNkVQIczMY6UEnXB1/O0fdscu1gRKv7S6gO
k+cqlo+zu62cNU/cKkdO3YFSpdeYMElLupupXAACPvOGeuxHjEeKV7LzSEEe
FPk/y0PywXhpJnXcrgI8bgpo6nW5cPD2Ha8+zRcQbT2Wk7BaBMOnpqVkEJ/t
Lz1qoXa4AjH1bQ0sxzbYUvKr452hS+D5OWPCuqgHvl7R680aqgOa52yIb5aM
6R4vvqX6o2wUWLUvLrGrFMxvGMbHGzTAO8L1trqVMtgVK3FK9EQdVAcfUJh9
3gysV+TTC2yiqYvb3XP63hNowyTSJ/MpDxaHW68XF7ei24WMSNaFKniQUR85
382CqnAr2+sqfCw7DFQUz6Wj5CvallpzQzBobB+0qT2POqk+ukXhZSheY4/0
z94l6N8/2nY2c/NR1/3FqSXlSTbLeruP0XQO2IuRt1IL+7AKUvXwbhEGig1Z
n3+VnwnUlfWr+1g5QAyUzBU1+YK5WgU8D3J/iKRGrNfdO6tAf1luQO1QG/Sa
O1zsDmiFFGXFBHmncVhrmpMQmeUhCerffr72lVhEg4SocnIzEARJM5Ycgunr
52jClVKN9i8c89K0KoKjt4bQzcIi+Cvru1lyiwBrf+txOX2NjoiNoY0j4Xmw
31l8LCG6FPI4eztK1DJBzJUQk2WRC2Id33S8FBngoGX2i1HjFNuw87L/bAIT
MY8vT3JHVzEs6MHkrrNt4EuCWKPfllHN5vcJm45m8A3gWcwVSpq+jAoyStdh
IGtq1gWiaRJQ1GfIDNHHkMQNPyYlTobKVC0/Ny8KPJKgn4mYokAINeSe+d5G
dnvfndC54DhkZz54lZXHxq5ZOMpSbJ8ArVGZtfNmJhp2JuSlbNWi0dx9ei6M
bfV3Tvo1cdNXQHUje82YWg6qq296vBKb4ATvcLuPSy0wZRV6t3PagLii6MmJ
G4Z+4b9nsGhVLtYDEPbV1thecp09uBIQYnC3AfXd2t14JLYMSAf3GrXcKwXq
+oe1KbIAIz6itRweTUWZQmdkBXcoU7gzKYM7b5Zxpxl3UFU57gTT689Uy65h
E4u4oy90jHRwp/+LLlbGIJhuJuEOjxXjqVibBpu6uvRvbbmQH/VQOSqaCk/W
hjXEMRpUbrft1xTQwHu5U/rD0UnMXomiOrtIRzt2NIyp8Pqw70v+W/RvTJjT
M3rco1eCHmrxz5bUTyNHM3z/9dM1hYkF1einCtxZPYQ73tG4Yyh0ciVwJ4Vo
kywe0YPRd+EOa+3abOf5EfYJoSOtjzvcA7hzyhjfX/t33CELO60WdnpSBO/U
iYx3KhaKd8pn3O+VnPqExQk7zRXe8dMQ3un5YrzTWGGn5nR+C29GxNQnHO/0
P5gOCEg=
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0., 0., 0., 0., 0., 0.18181818181818182`, 
                    0.09999999999999999, 0.09090909090909091, 
                    0.045454545454545456`, 0.06363636363636363, 
                    0.14545454545454545`, 0.08181818181818182, 
                    0.03636363636363636, 0.00909090909090909, 
                    0.07272727272727272, 0.07272727272727272, 
                    0.01818181818181818, 0.01818181818181818, 
                    0.06363636363636363}, 
                    "StandardDeviation" -> {1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 13, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0134081, "MaxTrainingMemory" -> 103480, 
                  "DataMemory" -> 17520, "FunctionMemory" -> 25528, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 5, 15, 12, 22, 27.6960321`9.19499246940025}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 19, "Output" -> 
             Association[
              "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 19.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             180590310318619752]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 19.]], 
             "Mean" -> {0., 0., 0., 0., 0., 0.18181818181818182`, 
              0.09999999999999999, 0.09090909090909091, 0.045454545454545456`,
               0.06363636363636363, 0.14545454545454545`, 0.08181818181818182,
               0.03636363636363636, 0.00909090909090909, 0.07272727272727272, 
              0.07272727272727272, 0.01818181818181818, 0.01818181818181818, 
              0.06363636363636363}, 
             "StandardDeviation" -> {1., 1., 1., 1., 1., 0.38569460791993504`,
               0.3, 0.28747978728803447`, 0.20829889522526546`, 
              0.24410402876541004`, 0.35255853508482393`, 
              0.27408751693966066`, 0.18719327529067273`, 0.09491187735373227,
               0.25968830649246727`, 0.25968830649246727`, 0.133608531424537, 
              0.133608531424537, 0.24410402876541004`}, "Output" -> 
             Association[
              "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 19.]], 
             "Version" -> {12.1, 0}, "ID" -> 7036010646520752688]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 3186011288446369599]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 4924642535523007246, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 7497669506253064584]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.3482142857142857, True -> 0.6517857142857143]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 8, 2, 9, 5, 11, 10, 3, 12, 2}], 
          "NumericalThresholds" -> {-0.2715703547000885, \
-0.32334011793136597`, -0.0029993795324116945`, -0.21132001280784607`, 
           0.003982825670391321, 2.416477918624878, -0.2548723518848419, 
           0.0018007045146077871`, -0.295020192861557, \
-0.0007337110582739115}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {-1, 3}, {4, 6}, {5, -4}, {-2, -3}, {
            7, -8}, {-5, 8}, {-6, -7}, {-9, 10}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 10, 11, 17, 3, 13, 18, 8, 18, 8, 8}], 
          "NumericalThresholds" -> {-0.21569444239139557`, \
-0.25182095170021057`, -0.4187859892845154, -0.13523705303668976`, 
           0.0007719151908531785, -0.18732818961143494`, \
-0.13572366535663605`, -0.3085845112800598, -0.14194455742835999`, \
-0.3209700584411621, -0.32231828570365906`}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, -5}, {-1, 4}, {-2, 5}, {-3, -4}, {
            7, -12}, {8, 11}, {9, -9}, {-6, 10}, {-7, -8}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 6, 7, 16, 6, 12, 9, 7, 6, 3}], 
          "NumericalThresholds" -> {-0.13523705303668976`, \
-0.4792872369289398, -0.3305588662624359, -0.28632959723472595`, \
-0.47451967000961304`, -0.29233014583587646`, -0.2154368907213211, \
-0.3337160348892212, -0.47296303510665894`, -0.005095733795315027}, 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 5}, {-2, -3}, {-4, -5}, {
            7, 10}, {8, 9}, {-6, -7}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 18, 8, 6, 17, 18, 17, 7, 16, 11, 5, 11, 
            15}], "NumericalThresholds" -> {
           0.008172948844730854, -0.14395952224731445`, \
-0.31763139367103577`, -0.47524404525756836`, -0.13244786858558655`, \
-0.13858073949813843`, -0.13523705303668976`, -0.32358720898628235`, \
-0.28851187229156494`, -0.41020840406417847`, -0.001009804429486394, \
-0.40338295698165894`, -0.2783467173576355}, "Children" -> 
          RawArray["Integer16",{{2, 13}, {3, 4}, {-1, -2}, {5, 7}, {
            6, -5}, {-3, -4}, {8, 10}, {9, -8}, {-6, -7}, {11, 
            12}, {-9, -10}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 3, 14, 11, 7, 10, 2, 18, 14, 11}], 
          "NumericalThresholds" -> {-0.20958980917930603`, 
           0.0018470213981345296`, -0.10213284194469452`, 
           2.416477918624878, -0.3305588662624359, -0.2627016603946686, \
-0.004811207298189402, -0.13355015218257904`, -0.09028792381286621, \
-0.4144848585128784}, "Children" -> 
          RawArray["Integer16",{{2, -11}, {3, 9}, {-1, 4}, {5, 8}, {6, 
            7}, {-2, -3}, {-4, -5}, {-6, -7}, {-8, 10}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 8, 3, 1, 18, 8, 9, 9, 9, 5}], 
          "NumericalThresholds" -> {-0.3289954960346222, \
-0.30782440304756165`, -0.0007520833751186728, 
           0.00120677356608212, -0.1438295841217041, -0.3117400109767914, \
-0.2114259898662567, -0.21252022683620453`, -0.21709874272346497`, 
           0.0020151191856712103`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, -7}, {4, 5}, {-1, -2}, {-3, 6}, {
            7, -6}, {-4, -5}, {9, -11}, {10, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 4, 19, 5, 4, 14, 14, 15, 15, 1, 10}], 
          "NumericalThresholds" -> {-0.21556055545806885`, 
           0.007203663233667612, -0.26779574155807495`, 
           0.008172948844730854, -0.0077972570434212685`, \
-0.09085723757743835, -0.0875091627240181, -0.2717759311199188, \
-0.27511855959892273`, -0.0007554744952358305, -0.2579798400402069}, 
          "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 6}, {-1, 4}, {
            5, -4}, {-2, -3}, {-5, -6}, {8, -12}, {9, -11}, {10, -10}, {
            11, -9}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 15, 16, 15, 19, 5, 6, 7, 9, 10, 7, 18, 5}],
           "NumericalThresholds" -> {-0.3246670067310333, \
-0.2795698046684265, -0.27114394307136536`, -0.2801978290081024, \
-0.251475065946579, 
           0.005913801025599241, -0.47069305181503296`, -0.3386918306350708, \
-0.2134515345096588, -0.2629888951778412, -0.3366096317768097, \
-0.1281946748495102, -0.007356557529419661}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 9}, {4, -8}, {5, -7}, {6, -6}, {
            7, 8}, {-2, -3}, {-4, -5}, {10, 13}, {11, 
            12}, {-9, -10}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 13, 4, 4, 2, 7, 18, 3, 17, 19, 5, 16}], 
          "NumericalThresholds" -> {-0.008782957680523396, \
-0.19247089326381683`, -0.0027935602702200413`, -0.007190017029643059, 
           0.0036373131442815065`, -0.3318294882774353, \
-0.13249121606349945`, -0.0058530704118311405`, -0.1319698840379715, \
-0.2669828236103058, 0.0012394008226692677`, -0.2828098237514496}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 9}, {4, 6}, {
            5, -4}, {-2, -3}, {-5, 7}, {-6, 8}, {-7, -8}, {10, 12}, {-9, 
            11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 17, 14, 14, 12, 4, 5, 14, 16, 1, 8, 5}], 
          "NumericalThresholds" -> {-0.2579798400402069, \
-0.13314713537693024`, -0.09933740645647049, -0.09549691528081894, \
-0.2977772355079651, -0.005656115245074034, 
           0.003982825670391321, -0.09085723757743835, -0.2853267192840576, 
           0.002349249552935362, -0.3085845112800598, -0.005787888076156378}, 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
            7}, {-4, -5}, {-6, -7}, {9, 12}, {-8, 10}, {
            11, -11}, {-9, -10}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 5, 7, 16, 13, 6, 5, 7, 16, 18}], 
          "NumericalThresholds" -> {
           0.0023652040399610996`, -0.00875809881836176, \
-0.34108877182006836`, -0.27623286843299866`, -0.18956953287124634`, \
-0.4618500769138336, 
           0.005913801025599241, -0.33213022351264954`, \
-0.27365756034851074`, -0.13674940168857574`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {-1, 3}, {-2, 4}, {5, -6}, {
            6, -5}, {-3, -4}, {8, 9}, {-7, -8}, {10, -11}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 17, 8, 14, 4, 15, 13, 1, 18, 13}], 
          "NumericalThresholds" -> {-0.14394575357437134`, \
-0.14155903458595276`, -0.32334011793136597`, -0.10365784913301468`, \
-0.0023580449633300304`, -0.2732234299182892, -0.1923959106206894, \
-0.007832483388483524, -0.1297684758901596, -0.18856306374073029`}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {6, 8}, {
            7, -7}, {-5, -6}, {-8, 9}, {10, -11}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 3, 13, 11, 14, 19, 9, 7, 9, 8}], 
          "NumericalThresholds" -> {
           3.5666821002960205`, -0.006056526210159063, -0.19525951147079468`, \
-0.42070451378822327`, -0.09830816835165024, -0.2543383836746216, \
-0.2152034342288971, -0.3313581347465515, -0.22179284691810608`, \
-0.32036709785461426`}, "Children" -> 
          RawArray["Integer16",{{2, -11}, {3, 4}, {-1, -2}, {-3, 5}, {6, 
            7}, {-4, -5}, {8, 10}, {-6, 9}, {-7, -8}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 18, 9, 6, 2, 14, 5, 3, 11, 16}], 
          "NumericalThresholds" -> {-0.08958203345537186, \
-0.14394575357437134`, -0.21787671744823456`, -0.46434518694877625`, \
-0.004013458266854286, -0.0993613749742508, 0.0023652040399610996`, 
           0.003000908764079213, -0.40519002079963684`, -0.2833082377910614}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {-1, 3}, {4, 6}, {5, -4}, {-2, -3}, {
            7, 8}, {-5, -6}, {9, -9}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 10, 11, 12, 6, 12, 15, 15, 11, 13, 15}], 
          "NumericalThresholds" -> {-0.32930055260658264`, \
-0.25813454389572144`, -0.41674184799194336`, -0.3003373146057129, \
-0.47524404525756836`, -0.30363088846206665`, -0.2732103168964386, \
-0.27693018317222595`, -0.4064537584781647, -0.20270633697509766`, \
-0.2720682621002197}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {4, -3}, {-1, -2}, {-4, 
            6}, {-5, 7}, {-6, -7}, {9, 10}, {-8, -9}, {-10, 11}, {-11, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 9, 13, 17, 18, 2, 19, 6, 2, 12, 9, 9}], 
          "NumericalThresholds" -> {-0.32358720898628235`, \
-0.21609735488891602`, -0.19099409878253937`, -0.13039182126522064`, \
-0.14312098920345306`, 
           0.0038002135697752237`, -0.2595062553882599, \
-0.46965500712394714`, -0.0020582217257469893`, -0.29869991540908813`, \
-0.20944364368915558`, -0.22146837413311005`}, "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 7}, {4, 6}, {
            5, -3}, {-1, -2}, {-4, -5}, {8, 10}, {9, -8}, {-6, -7}, {-9, 
            11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 19, 9, 8, 5, 3, 7, 2, 15, 2, 16, 1}], 
          "NumericalThresholds" -> {-0.13523705303668976`, \
-0.26935067772865295`, -0.21263451874256134`, -0.32378414273262024`, \
-0.004857543855905533, -0.006615388207137585, -0.3242017328739166, \
-0.008782957680523396, -0.2747209370136261, -0.00248750695027411, \
-0.274574875831604, 0.0011258533922955394`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {-1, 3}, {4, -6}, {-2, 5}, {-3, 
            6}, {-4, -5}, {8, -13}, {-7, 9}, {10, -12}, {11, 
            12}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 11, 9, 19, 4, 13, 18, 15, 17, 7, 7, 12}], 
          "NumericalThresholds" -> {-0.3073534071445465, \
-0.41858869791030884`, -0.2220386415719986, -0.26820898056030273`, 
           0.00019537120533641428`, -0.19251559674739838`, \
-0.1311671882867813, -0.27644962072372437`, -0.14222119748592377`, \
-0.3331534266471863, -0.3271414637565613, -0.29847028851509094`}, "Children" -> 
          RawArray["Integer16",{{2, -13}, {3, 4}, {-1, -2}, {5, 
            6}, {-3, -4}, {7, 11}, {8, 10}, {-5, 9}, {-6, -7}, {-8, -9}, {
            12, -12}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 8, 12, 19, 8, 12, 7, 6, 9, 2, 7, 6, 19}], 
          "NumericalThresholds" -> {-0.20958980917930603`, \
-0.3161776661872864, -0.29494065046310425`, -0.26779574155807495`, \
-0.31813472509384155`, -0.3072349429130554, -0.3317843973636627, \
-0.4688481092453003, -0.21569444239139557`, -0.003626209916546941, \
-0.33296021819114685`, -0.4617141783237457, -0.2515661418437958}, "Children" -> 
          RawArray["Integer16",{{2, 13}, {3, 8}, {4, 7}, {-1, 5}, {
            6, -4}, {-2, -3}, {-5, -6}, {9, 11}, {-7, 10}, {-8, -9}, {
            12, -12}, {-10, -11}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 17, 10, 6, 1, 3, 5, 12, 7, 7, 7, 15}], 
          "NumericalThresholds" -> {-0.13672958314418793`, \
-0.1448172926902771, -0.2528364956378937, -0.4703752398490906, \
-0.008313395082950592, 
           0.0067053548991680145`, -0.003525448963046074, \
-0.30292218923568726`, -0.33524200320243835`, -0.3386918306350708, \
-0.32600730657577515`, -0.2743384540081024}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, -5}, {5, -4}, {-2, -3}, {
            7, 12}, {8, 10}, {-6, 9}, {-7, -8}, {-9, 
            11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 6, 10, 1, 3, 14, 6, 13, 10, 2}], 
          "NumericalThresholds" -> {-0.32334011793136597`, \
-0.46538782119750977`, -0.25813454389572144`, 
           0.0069449348375201225`, -0.006176789291203022, \
-0.09386337548494339, -0.4732072353363037, -0.20072312653064728`, \
-0.25550276041030884`, -0.003626209916546941}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 7}, {5, -6}, {
            6, -5}, {-3, -4}, {8, 9}, {-7, -8}, {-9, 10}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{13, 16, 5, 17, 18, 16, 10, 7, 2, 2, 5, 4}], 
          "NumericalThresholds" -> {-0.19099409878253937`, \
-0.2825176417827606, -0.008681902661919594, -0.13669727742671967`, \
-0.1423209309577942, -0.2701126039028168, -0.2595786154270172, \
-0.33456575870513916`, 
           0.0016272988868877292`, -0.005177837330847979, \
-0.0026370901614427567`, -0.002483831951394677}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 5}, {-1, 4}, {-2, -3}, {-4, 6}, {
            7, -8}, {-5, 8}, {-6, -7}, {10, 12}, {-9, 
            11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 7, 8, 17, 19, 14, 19, 14, 2, 8}], 
          "NumericalThresholds" -> {-0.2709991931915283, 
           3.0018389225006104`, -0.32246577739715576`, -0.1402854174375534, \
-0.2543383836746216, -0.09830816835165024, -0.26121461391448975`, \
-0.09386337548494339, 0.0036373131442815065`, -0.3183864653110504}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, -9}, {-1, 4}, {5, 6}, {-2, -3}, {
            7, 8}, {-4, -5}, {-6, 9}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 9, 6, 15, 17, 17, 11, 14, 3, 7, 13}], 
          "NumericalThresholds" -> {-0.090939000248909, \
-0.21556055545806885`, -0.46434518694877625`, -0.28477126359939575`, \
-0.1279267966747284, -0.13672958314418793`, -0.41464486718177795`, \
-0.09961516410112381, -0.0011033606715500355`, -0.340715616941452, \
-0.2032889425754547}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 7}, {4, 6}, {-1, 
            5}, {-2, -3}, {-4, -5}, {-6, 8}, {-7, 9}, {-8, -9}, {-10, 
            11}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 14, 5, 2, 19, 18, 15, 7, 10, 17, 5}], 
          "NumericalThresholds" -> {
           0.003390297759324312, -0.09107477962970734, -0.007667116820812225, 
           0.00681775389239192, -0.2601056396961212, -0.13564077019691467`, \
-0.2849577069282532, -0.3313581347465515, -0.2570018172264099, \
-0.13807064294815063`, 0.007371423300355673}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 7}, {-1, 4}, {5, -5}, {-2, 
            6}, {-3, -4}, {-6, -7}, {9, 11}, {
            10, -10}, {-8, -9}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{19, 11, 18, 7, 18, 10, 14, 5, 2, 1, 4, 5}], 
          "NumericalThresholds" -> {-0.26779574155807495`, \
-0.4141300618648529, -0.13930347561836243`, -0.32552507519721985`, \
-0.13036079704761505`, -0.25280100107192993`, -0.09580438584089279, 
           0.0038124555721879005`, 
           0.002411020454019308, -0.004069495014846325, 
           0.0018779494566842914`, 0.0020151191856712103`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 12}, {6, 10}, {
            7, -8}, {-4, 8}, {9, -7}, {-5, -6}, {-9, 
            11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 1, 14, 19, 15, 9, 15, 17, 2, 3, 19}], 
          "NumericalThresholds" -> {-0.28851187229156494`, \
-0.002631046809256077, -0.09136366844177246, -0.2661273777484894, \
-0.280651330947876, -0.21802392601966858`, -0.2800707221031189, \
-0.13244786858558655`, -0.007139100227504969, 
           0.0011791458819061518`, -0.26779574155807495`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 11}, {5, 
            6}, {-3, -4}, {-5, 7}, {8, 9}, {-6, -7}, {-8, 
            10}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 2, 17, 2, 1, 1, 8, 6, 19, 7}], 
          "NumericalThresholds" -> {0.00826007965952158, 
           0.0031323579605668783`, -0.0040666572749614716`, \
-0.13457126915454865`, -0.007485238369554281, -0.006168426014482975, \
-0.00827109906822443, -0.3130425810813904, -0.46325981616973877`, \
-0.2519894540309906, -0.3289954960346222}, "Children" -> 
          RawArray["Integer16",{{2, -12}, {3, 10}, {4, 6}, {-1, 
            5}, {-2, -3}, {7, 8}, {-4, -5}, {9, -8}, {-6, -7}, {
            11, -11}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 8, 13, 5, 10, 5, 16, 15, 12, 12}], 
          
          "NumericalThresholds" -> {-0.22146837413311005`, \
-0.3161776661872864, -0.2000819593667984, 
           0.0038124555721879005`, -0.2534521222114563, \
-0.007356557529419661, -0.28470468521118164`, -0.280651330947876, \
-0.3006957769393921, -0.3059462904930115}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 10}, {6, 
            9}, {-4, 7}, {8, -7}, {-5, -6}, {-8, -9}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 7, 18, 1, 6, 1, 14, 9, 18, 14, 7, 3}], 
          "NumericalThresholds" -> {-0.3064438998699188, \
-0.33213022351264954`, -0.1423679143190384, 
           0.00120677356608212, -0.4728109538555145, -0.00635518366470933, \
-0.09787049889564514, -0.2133709192276001, -0.12961478531360626`, \
-0.09136366844177246, -0.3242017328739166, 0.0018007045146077871`}, 
          "Children" -> 
          RawArray["Integer16",{{2, -13}, {3, 7}, {-1, 4}, {5, -5}, {-2, 
            6}, {-3, -4}, {8, 9}, {-6, -7}, {10, 12}, {-8, 
            11}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 7, 18, 16, 10, 15, 4, 18, 1, 11, 3, 10}], 
          "NumericalThresholds" -> {-0.009195348247885704, \
-0.3295416533946991, -0.14014160633087158`, -0.2736896872520447, \
-0.2576560080051422, -0.27239367365837097`, -0.00754576688632369, \
-0.14113275706768036`, -0.0006761900149285793, -0.4062678813934326, \
-0.0058530704118311405`, -0.26450034976005554`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 8}, {4, 6}, {5, -4}, {-2, -3}, {
            7, -7}, {-5, -6}, {-8, 9}, {10, 11}, {-9, -10}, {-11, 
            12}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 11, 15, 8, 16, 5, 5, 7}], 
          "NumericalThresholds" -> {-0.2528364956378937, -0.4027223587036133, \
-0.28948646783828735`, -0.31056642532348633`, -0.2825176417827606, \
-0.0072648669593036175`, 0.003982825670391321, -0.3331534266471863}, 
          "Children" -> 
          RawArray["Integer16",{{2, -9}, {3, 8}, {4, 5}, {-1, -2}, {
            6, -6}, {-3, 7}, {-4, -5}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 13, 7, 13, 6, 14, 16, 4}], 
          "NumericalThresholds" -> {-0.13457126915454865`, \
-0.18498317897319794`, -0.3238738477230072, -0.201542466878891, \
-0.4702746868133545, -0.0987996831536293, -0.2844953238964081, \
-0.0014851849991828203`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {6, 
            8}, {-5, 7}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 19, 9, 7, 3, 3, 5, 17, 10}], 
          "NumericalThresholds" -> {-0.1279267966747284, \
-0.26935067772865295`, -0.21064938604831696`, -0.3248125910758972, \
-0.005146038718521595, -0.007684651296585798, 
           0.0020151191856712103`, -0.13702580332756042`, \
-0.26646900177001953`}, "Children" -> 
          RawArray["Integer16",{{2, -10}, {-1, 3}, {4, 9}, {5, 7}, {
            6, -4}, {-2, -3}, {8, -7}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 19, 19, 13, 1, 3, 13, 15, 6, 19, 18}], 
          "NumericalThresholds" -> {-0.25182095170021057`, \
-0.27033668756484985`, -0.251475065946579, -0.20085278153419495`, \
-0.005687431897968054, 
           0.0018007045146077871`, -0.18739967048168182`, \
-0.27021437883377075`, -0.46979379653930664`, -0.26428934931755066`, \
-0.14395952224731445`}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {-1, 3}, {4, -10}, {5, 7}, {-2, 
            6}, {-3, -4}, {8, 9}, {-5, -6}, {10, -9}, {-7, -8}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 6, 5, 17, 16, 2, 8, 17, 14, 17, 5}], 
          "NumericalThresholds" -> {-0.005095733795315027, \
-0.4685590863227844, 
           0.0013536482583731413`, -0.13041511178016663`, -0.2709991931915283,
            0.007354853209108114, -0.32426807284355164`, \
-0.13672958314418793`, -0.09637074917554855, -0.13123086094856262`, 
           0.004948009736835957}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 4}, {-2, -3}, {6, 11}, {
            7, -10}, {-5, 8}, {-6, 9}, {10, -9}, {-7, -8}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 7, 17, 9, 15, 19, 16, 9, 16, 7, 17}], 
          "NumericalThresholds" -> {-0.47296303510665894`, \
-0.3248125910758972, -0.13413475453853607`, -0.21387608349323273`, \
-0.28414398431777954`, -0.266326367855072, -0.2728526294231415, \
-0.21111971139907837`, -0.2878967523574829, -0.32930055260658264`, \
-0.1330052614212036}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, -6}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {8, 11}, {9, -10}, {-7, 10}, {-8, -9}, {-11, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 16, 10, 1, 7, 10, 5, 14, 7, 3, 5}], 
          "NumericalThresholds" -> {
           0.0031323579605668783`, -0.2800602912902832, \
-0.25859126448631287`, -0.006037640385329723, -0.33078533411026, \
-0.2528804540634155, 
           0.0017940800171345472`, -0.0879983901977539, -0.34013625979423523`,
            0.008581068366765976, 0.0053139496594667435`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, -8}, {8, -7}, {-5, -6}, {-9, 10}, {11, -12}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 2, 3, 13, 17, 4, 4, 1, 13, 5}], 
          "NumericalThresholds" -> {-0.3265853524208069, 0.008322521112859249,
            0.0018470213981345296`, -0.19062279164791107`, \
-0.1330052614212036, 0.000035593191569205374`, 
           0.0036230129189789295`, -0.008420128375291824, \
-0.1957092434167862, -0.0020382043439894915`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, -8}, {4, 7}, {5, 
            6}, {-1, -2}, {-3, -4}, {-5, 8}, {-6, -7}, {-9, 10}, {-10, -11}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 9, 17, 4, 3, 7, 18, 3, 8, 11}], 
          "NumericalThresholds" -> {-0.3243512213230133, \
-0.22179284691810608`, -0.13314713537693024`, 
           0.008223110809922218, -0.005146038718521595, -0.3286060094833374, \
-0.12912581861019135`, 
           0.0018470213981345296`, -0.3182317316532135, -0.4165949821472168}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 8}, {5, -7}, {6, 
            7}, {-3, -4}, {-5, -6}, {9, 10}, {-8, -9}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 11, 1, 6, 12, 2, 5, 16, 5, 7}], 
          "NumericalThresholds" -> {
           0.008423975668847561, -0.4186595678329468, \
-0.0074109905399382114`, -0.4755062162876129, -0.29493215680122375`, \
-0.00248750695027411, 
           0.0038124555721879005`, -0.2851901948451996, \
-0.002419739728793502, -0.34093716740608215`}, "Children" -> 
          RawArray["Integer16",{{2, -11}, {3, 4}, {-1, -2}, {5, 7}, {
            6, -5}, {-3, -4}, {8, 10}, {9, -8}, {-6, -7}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 13, 7, 19, 5, 7, 2, 18, 12, 13, 16, 18, 
            15}], "NumericalThresholds" -> {-0.006037640385329723, \
-0.18956953287124634`, -0.341989666223526, -0.2560315728187561, \
-0.008681902661919594, -0.32678136229515076`, -0.00248750695027411, \
-0.13199374079704285`, -0.3000278174877167, -0.19426584243774414`, \
-0.28851187229156494`, -0.1385762095451355, -0.28414398431777954`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 11}, {-4, 6}, {
            7, 10}, {-5, 8}, {9, -8}, {-6, -7}, {-9, -10}, {-11, 12}, {-12, 
            13}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 10, 5, 10, 4, 1, 3, 17}], 
          "NumericalThresholds" -> {-0.09085723757743835, \
-0.25830739736557007`, -0.004857543855905533, -0.2664608955383301, 
           0.0070381020195782185`, 0.0009736558422446251, 
           0.004026802256703377, -0.144359290599823}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {
            6, -7}, {-4, 7}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 6, 10, 2, 8, 11, 4, 10, 18, 11, 1}], 
          "NumericalThresholds" -> {-0.006037640385329723, \
-0.4771600663661957, -0.2578401267528534, -0.006014655809849501, \
-0.3073534071445465, 
           2.4195666313171387`, -0.0053983815014362335`, -0.2664608955383301, \
-0.14113275706768036`, -0.41046175360679626`, 0.00120677356608212}, 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {
            6, -12}, {7, -11}, {8, 9}, {-5, -6}, {-7, 10}, {
            11, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 8, 19, 16, 7, 18, 13, 14, 13, 13, 12, 16, 
            17}], "NumericalThresholds" -> {-0.009195348247885704, \
-0.3243512213230133, -0.2529448866844177, -0.2715703547000885, \
-0.3248125910758972, -0.13199374079704285`, -0.1996268779039383, \
-0.0983128622174263, -0.1894095093011856, -0.20085278153419495`, \
-0.2990473806858063, -0.28466323018074036`, -0.13244786858558655`}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 12}, {5, 11}, {6, 
            10}, {-3, 7}, {-4, 8}, {
            9, -7}, {-5, -6}, {-8, -9}, {-10, -11}, {-12, 13}, {-13, -14}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 7, 17, 4, 6, 2, 4, 8, 8, 12, 17}], 
          "NumericalThresholds" -> {-0.30782440304756165`, \
-0.3238738477230072, -0.13457126915454865`, 
           0.006727296859025955, -0.4755062162876129, -0.00416998565196991, \
-0.008393581956624985, -0.32231828570365906`, -0.3243512213230133, \
-0.2962047755718231, -0.13782718777656555`}, "Children" -> 
          RawArray["Integer16",{{2, -12}, {3, 11}, {4, 7}, {5, -4}, {-1, 
            6}, {-2, -3}, {-5, 8}, {9, 10}, {-6, -7}, {-8, -9}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 1, 13, 10, 17, 17, 10, 2, 1, 3, 8}], 
          "NumericalThresholds" -> {-0.2579798400402069, \
-0.005687431897968054, -0.19010762870311737`, -0.2629888951778412, \
-0.13457126915454865`, -0.14456745982170105`, -0.2650909721851349, 
           0.004702106583863497, 0.00032816268503665924`, 
           0.0010470194974914193`, -0.31640252470970154`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, -7}, {6, 
            7}, {-3, -4}, {-5, -6}, {9, 11}, {-8, 
            10}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 12, 14, 8, 6, 19, 5, 14, 5, 5, 13, 7}], 
          
          "NumericalThresholds" -> {-0.14394575357437134`, \
-0.2941164970397949, -0.090939000248909, -0.3243512213230133, \
-0.4775868058204651, -0.26820898056030273`, 
           0.0023652040399610996`, -0.09961516410112381, 0.008087347261607647,
            0.006095238495618105, -0.20120872557163239`, -0.3238738477230072},
           "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 12}, {-3, 5}, {-4, 
            6}, {-5, 7}, {8, 9}, {-6, -7}, {10, -11}, {
            11, -10}, {-8, -9}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 8, 9, 12, 1, 18, 6, 4, 10, 12}], 
          "NumericalThresholds" -> {-0.009195348247885704, \
-0.0007520833751186728, -0.3064438998699188, -0.2181510627269745, \
-0.295020192861557, 
           0.002410583198070526, -0.12912581861019135`, -0.4736388623714447, \
-0.001585523714311421, -0.25280100107192993`, -0.3002009987831116}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 7}, {4, -6}, {5, 
            6}, {-2, -3}, {-4, -5}, {8, 11}, {9, 
            10}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 11, 10, 6, 16, 7, 2, 3, 4, 5, 5}], 
          "NumericalThresholds" -> {-0.28275564312934875`, \
-0.4086364805698395, -0.2570018172264099, -0.4776628315448761, \
-0.28703972697257996`, -0.336175799369812, -0.007139100227504969, 
           0.007468902971595526, 0.008223110809922218, -0.0062205302529037, 
           0.006402565166354179}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 6}, {4, 
            5}, {-1, -2}, {-3, -4}, {-5, 7}, {-6, -7}, {9, 11}, {
            10, -10}, {-8, -9}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]]},
       "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 19.], 
         "Key" -> "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "OOBConfusionMatrix" -> {{0.5714285618492535, 0.4285714381507465}, {
       0.4285714381507465, 0.5714285618492535}}, "Method" -> "RandomForest", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "FeatureFraction" -> 
        Association[
         "Value" -> 19^Rational[-1, 2], "Options" -> Association[]], 
        "LeafSize" -> Association["Value" -> 5, "Options" -> Association[]], 
        "TreeNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "Implementation" -> 
        Association["Value" -> "DAAL", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[15617], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.2152368`6.784461520112051, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.6758621164569781, 0.01602696294905062],
          "Accuracy" -> Around[0.6408746146367451, 0.06985175830050416], 
         "EvaluationTime" -> 0.00006641656257686242, "TestSize" -> 95, 
         "ModelMemory" -> 97352, "ModelUtility" -> -0.30615397751322415`, 
         "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
         "TrainingMemory" -> 154032, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.6758621164569781, 0.011332774183099243`]}, 
         "AccuracyHistory" -> {
           Around[0.6408746146367451, 0.0493926519720902]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 110], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 269213046091525]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.798597276238172, 0.9323221284064459], "Accuracy" -> 
              Around[0.6825412813034117, 0.06787906465042513], 
              "EvaluationTime" -> 0.00016683086236432773`, "TestSize" -> 95, 
              "ModelMemory" -> 27856, "ModelUtility" -> -2.075725424938202, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 90248, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.798597276238172, 0.659251299246473]}, 
              "AccuracyHistory" -> {
                Around[0.6825412813034117, 0.04799774691491567]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4394111655303024`, 0.5102188406137524], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 39440, "ModelUtility" -> -1.1259021788819232`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 253744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4394111655303024`, 0.3607792020871226]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
             Around[1.4394111655303024`, 0.5102188406137524], "ModelMemory" -> 
             39440, "TrainingMemory" -> 253744, "TrainingTime" -> 
             0.04190050861434645], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 95, 
              "ModelMemory" -> 19952, "ModelUtility" -> -0.32703300476737984`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 58592, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916370843501094, 0.0062588525193839105`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9852269824100339, 0.2250083837205245], "Accuracy" -> 
              Around[0.5445201306577209, 0.1504707520532654], 
              "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 118552, "ModelUtility" -> -0.7229745838444618, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 323376, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9852269824100339, 0.15910495395260763`]}, 
              "AccuracyHistory" -> {
                Around[0.5445201306577209, 0.10639888914710359`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.9852269824100339, 0.2250083837205245], "ModelMemory" -> 
             118552, "TrainingMemory" -> 323376, "TrainingTime" -> 
             0.09996535993761262], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9008297368171003, 0.16826411064785146`], "Accuracy" -> 
              Around[0.6929579479700785, 0.06729293745364194], 
              "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 95, 
              "ModelMemory" -> 8608, "ModelUtility" -> -0.6254056756698182, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 60688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9008297368171003, 0.11898069366941932`]}, 
              "AccuracyHistory" -> {
                Around[0.6929579479700785, 0.04758329239943242]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6913666686014149, 0.11152309426788003`], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 20960, "ModelUtility" -> -0.3558380811551872, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 224160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6913666686014149, 0.07885873621572455]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.6913666686014149, 0.11152309426788003`], "ModelMemory" -> 
             20960, "TrainingMemory" -> 224160, "TrainingTime" -> 
             0.041094627706654105`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9960820401873928, 0.16681712541591465`], "Accuracy" -> 
              Around[0.6200412813034117, 0.0706257160069098], 
              "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
              "ModelMemory" -> 5840, "ModelUtility" -> -0.7221876237230754, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 68520, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9960820401873928, 0.11795752059964]}, 
              "AccuracyHistory" -> {
                Around[0.6200412813034117, 0.049939922714641205`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.36857175477252, 0.38960247262831954`], "Accuracy" -> 
              Around[0.4575636089185905, 0.14942705635897574`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 6160, "ModelUtility" -> -1.0623089268025168`, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 109032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.36857175477252, 0.275490550362531]}, 
              "AccuracyHistory" -> {
                Around[0.4575636089185905, 0.10566088484417616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[1.36857175477252, 0.38960247262831954`], "ModelMemory" -> 
             6160, "TrainingMemory" -> 109032, "TrainingTime" -> 
             0.021791461876978648`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6758621164569781, 0.01602696294905062], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 0.00006641656257686242, "TestSize" -> 95, 
              "ModelMemory" -> 97352, "ModelUtility" -> -0.30615397751322415`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 154032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6758621164569781, 0.011332774183099243`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6796673723096738, 0.03800381184164786], "Accuracy" -> 
              Around[0.6749549132664163, 0.14368460052805063`], 
              "EvaluationTime" -> 0.00018095780479704407`, "TestSize" -> 22, 
              "ModelMemory" -> 99632, "ModelUtility" -> -0.318158590075885, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 185336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6796673723096738, 0.026872753064166817`]}, 
              "AccuracyHistory" -> {
                Around[0.6749549132664163, 0.10160035538546477`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00018095780479704407`, "MeanCrossEntropy" -> 
             Around[0.6796673723096738, 0.03800381184164786], "ModelMemory" -> 
             99632, "TrainingMemory" -> 185336, "TrainingTime" -> 
             0.03738644826676103], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[111.77046597324602`, 32.25899962272599], "Accuracy" -> 
              Around[0.6512912813034117, 0.06941271239287487], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9240, "ModelUtility" -> -5.465734598429471, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 86840, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[111.77046597324602`, 22.810557387523822`]}, 
              "AccuracyHistory" -> {
                Around[0.6512912813034117, 0.04908219963355333]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
             Around[111.77046597324602`, 32.25899962272599], "ModelMemory" -> 
             9240, "TrainingMemory" -> 86840, "TrainingTime" -> 
             0.06640783086353597], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.1061991836999634`, 0.5425389180169052], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9240, "ModelUtility" -> -1.4882882347824822`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 86816, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.1061991836999634`, 0.383632947987366]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6688233442207225, 0.12479115151593738`], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.3275700546165822, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 112376, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6688233442207225, 0.08824066946899722]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
             Around[0.6688233442207225, 0.12479115151593738`], "ModelMemory" -> 
             9240, "TrainingMemory" -> 112376, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7820212903089474, 0.12129448348956279`], "Accuracy" -> 
              Around[0.6304579479700784, 0.07025589306900139], 
              "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.4778441643840293, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 86456, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7820212903089474, 0.08576815179598957]}, 
              "AccuracyHistory" -> {
                Around[0.6304579479700784, 0.04967841840740784]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6665919931574977, 0.12220331934696975`], "Accuracy" -> 
              Around[0.5879983915272861, 0.14934795303195378`], 
              "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 22, 
              "ModelMemory" -> 9240, "ModelUtility" -> -0.3235999550476, 
              "TrainingSize" -> 88, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 112192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6665919931574977, 0.08641079579374752]}, 
              "AccuracyHistory" -> {
                Around[0.5879983915272861, 0.10560495034522452`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022781237892148727`, "MeanCrossEntropy" -> 
             Around[0.6665919931574977, 0.12220331934696975`], "ModelMemory" -> 
             9240, "TrainingMemory" -> 112192, "TrainingTime" -> 
             0.07541456536256848], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[36.7928645890991, 10.606687345962293`], "Accuracy" -> 
              Around[0.6408746146367451, 0.06985175830050416], 
              "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
              "ModelMemory" -> 9240, "ModelUtility" -> -4.354527411895482, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 86840, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[36.7928645890991, 7.5000605482554805`]}, 
              "AccuracyHistory" -> {
                Around[0.6408746146367451, 0.0493926519720902]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
             Around[36.7928645890991, 10.606687345962293`], "ModelMemory" -> 
             9240, "TrainingMemory" -> 86840, "TrainingTime" -> 
             0.08360250581623441], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 269208751124229]], "MaxTrainingSize" -> 110, 
      "PreprocessorEvaluationTime" -> 7.64990234375`2.*^-6, 
      "PreprocessorMemory" -> 80696, "InputDimension" -> 19, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6463341980550162,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7985341484963461`17.332191024187967*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
          0.2732667, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.40290729999999997`, "ExperimentCounts" -> 7]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 269221636026117]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4869778399966775971], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8439739875550784788], "f3" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6892765211121496287], "f4" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8670523944609455772], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           961776746376773328], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3359436405362434027], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           614585445462127573], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           74088328326475879], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           376480359494444711], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8346919285784899518], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3357160760172900656], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1055275395412797153], "f13" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2946416844719020710], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3325317170655667180], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6322690734059999389], "f16" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6638076199220299846], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5833514859980486730], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5012713163464086837], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4969056570514489789]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 1.112549, 
      "MaxTrainingMemory" -> 723288, "DataMemory" -> 315568, "FunctionMemory" -> 
      351248, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 5, 15, 12, 22, 28.7423618`9.211097364637569}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7948850266238203`*^9, 3.7953467891402173`*^9, 
  3.7953471056839666`*^9, 3.7977289540001364`*^9, 3.7985485488426037`*^9},
 CellLabel->
  "Out[186]=",ExpressionUUID->"9f6c490e-1b8f-46df-80c9-ada509b1c714"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cmclassOhOnlyEr", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classOhOnlyEr", ",", 
    RowBox[{"mLOHonly", "@", "allDataErOHTest"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7948850292701225`*^9, 3.7948850462369432`*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"445a62e1-c739-4b74-82f0-7bc342b94562"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["27", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   TemplateBox[{"0.59", "0.10"}, "Around"], 
                   Around[0.5925925925925926, 0.09636202008710988]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "NCCN" -> Association["Type" -> "Boolean"], "NCCCN" -> 
              Association["Type" -> "Numerical"], "NCCCCN" -> 
              Association["Type" -> "Boolean"], "NCCCCCN" -> 
              Association["Type" -> "Boolean"], "NCCCCCCCN" -> 
              Association["Type" -> "Numerical"], "NCCCNCCCCNCCCN" -> 
              Association["Type" -> "Numerical"], "CN(C)CCN(C)C" -> 
              Association["Type" -> "Boolean"], "CNCCNC" -> 
              Association["Type" -> "Boolean"], "C1CNCCN1" -> 
              Association["Type" -> "Boolean"], "CC1CNCCN1" -> 
              Association["Type" -> "Boolean"], "CC1CNC(C)CN1" -> 
              Association["Type" -> "Boolean"], "C1CN2CCN1CC2" -> 
              Association["Type" -> "Boolean"], "Cl.Cl.NC1CN2CCC1CC2" -> 
              Association["Type" -> "Numerical"], "Cl.Cl.NC1CCNC1" -> 
              Association["Type" -> "Boolean"], "NCC1CCCCN1" -> 
              Association["Type" -> "Boolean"], "CC1=NC=CN=C1" -> 
              Association["Type" -> "Numerical"], "NCCNCCN" -> 
              Association["Type" -> "Boolean"], "C1CC(CCN1)C2CCNCC2" -> 
              Association["Type" -> "Boolean"], "C(CN)CN" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Boolean", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "NCCN", "NCCCN", "NCCCCN", "NCCCCCN", "NCCCCCCCN", 
                    "NCCCNCCCCNCCCN", "CN(C)CCN(C)C", "CNCCNC", "C1CNCCN1", 
                    "CC1CNCCN1", "CC1CNC(C)CN1", "C1CN2CCN1CC2", 
                    "Cl.Cl.NC1CN2CCC1CC2", "Cl.Cl.NC1CCNC1", "NCC1CCCCN1", 
                    "CC1=NC=CN=C1", "NCCNCCN", "C1CC(CCN1)C2CCNCC2", 
                    "C(CN)CN"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 19]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Boolean", "Numerical", "Boolean", "Boolean", "Numerical",
                     "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f1" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 19.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                 "Output" -> 
                Association[
                 "(f2f5f6f13f16)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                "Version" -> {12.1, 0}, "ID" -> 6945678714693038801]], 
              MachineLearning`MLProcessor["NumericalVectorStandardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f2f5f6f13f16)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                "Mean" -> {0., 0., 0., 0., 0.}, 
                "StandardDeviation" -> {1., 1., 1., 1., 1.}, 
                "Version" -> {12.1, 0}, "ID" -> 912111237495088376, "Output" -> 
                Association[
                 "(f2f5f6f13f16)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 5]]]], 
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 4598506453767151831]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 2588259279539323703, "Output" -> 
                Association[
                 "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 14]], 
                "Version" -> {12.1, 0}, "ID" -> 4702548804648667413, "Output" -> 
                Association[
                 "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 14]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f2f5f6f13f16)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 5], 
                  "(f1f3f4f7f8f9f10f11f12f14f15f17f18f19)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 14]], 
                "Spans" -> {
                  Span[1, 5], 
                  Span[6, 19]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
                160504210633110758]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 110, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0., 0., 0., 0., 0., 0.18181818181818182`, 
                    0.09999999999999999, 0.09090909090909091, 
                    0.045454545454545456`, 0.06363636363636363, 
                    0.14545454545454545`, 0.08181818181818182, 
                    0.03636363636363636, 0.00909090909090909, 
                    0.07272727272727272, 0.07272727272727272, 
                    0.01818181818181818, 0.01818181818181818, 
                    0.06363636363636363}, "Method" -> "Naive", "VectorLength" -> 
                    19, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0., 0., 0., 0., 0., 0.18181818181818182`, 
                    0.09999999999999999, 0.09090909090909091, 
                    0.045454545454545456`, 0.06363636363636363, 
                    0.14545454545454545`, 0.08181818181818182, 
                    0.03636363636363636, 0.00909090909090909, 
                    0.07272727272727272, 0.07272727272727272, 
                    0.01818181818181818, 0.01818181818181818, 
                    0.06363636363636363}, 
                    "StandardDeviation" -> {1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 19, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 19]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 13]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                   Association["Matrix" -> CompressedData["
1:eJzt0/k/1HkcwPERQsZdD7FWoW0TaqOHyJdPj6h2XQm5SuaR62E7bMoVIjU0
62hozIOEHFMm9zhjeI9jsBSWkuMh97jPiqlR7T4e3/kzej8en5+fj/f783hp
XPa3995GIBCU/n8yhB/zY/Cxyp9WOLaxgNxKrIoHCT1o8aPN8LtlBhK8qrcD
PQYqlz8Y8pmWjRycuhdF6AWY5c5LBQ7YE1BgLV8ixzRhBguBU411T9GXtMTm
QWIadJLeOR8ozIKOrgFWufdHzMQqrogjH4dUDx155hgJoEHmqrlLv4EtLG3G
vWMeBXDbM2o2X6OYF4arsTYcxHIL1taY/cR2t7jCkvq1HNzMIJ90uh8baJab
MeGUImLl7sGLOc/AdeucWo0EE0gujrpyxnxMldShJytHQ1G+OhNhxbXw1m+H
wLPtNVimKf3THf8eSo83nFl6OYNkVQIczMY6UEnXB1/O0fdscu1gRKv7S6gO
k+cqlo+zu62cNU/cKkdO3YFSpdeYMElLupupXAACPvOGeuxHjEeKV7LzSEEe
FPk/y0PywXhpJnXcrgI8bgpo6nW5cPD2Ha8+zRcQbT2Wk7BaBMOnpqVkEJ/t
Lz1qoXa4AjH1bQ0sxzbYUvKr452hS+D5OWPCuqgHvl7R680aqgOa52yIb5aM
6R4vvqX6o2wUWLUvLrGrFMxvGMbHGzTAO8L1trqVMtgVK3FK9EQdVAcfUJh9
3gysV+TTC2yiqYvb3XP63hNowyTSJ/MpDxaHW68XF7ei24WMSNaFKniQUR85
382CqnAr2+sqfCw7DFQUz6Wj5CvallpzQzBobB+0qT2POqk+ukXhZSheY4/0
z94l6N8/2nY2c/NR1/3FqSXlSTbLeruP0XQO2IuRt1IL+7AKUvXwbhEGig1Z
n3+VnwnUlfWr+1g5QAyUzBU1+YK5WgU8D3J/iKRGrNfdO6tAf1luQO1QG/Sa
O1zsDmiFFGXFBHmncVhrmpMQmeUhCerffr72lVhEg4SocnIzEARJM5Ycgunr
52jClVKN9i8c89K0KoKjt4bQzcIi+Cvru1lyiwBrf+txOX2NjoiNoY0j4Xmw
31l8LCG6FPI4eztK1DJBzJUQk2WRC2Id33S8FBngoGX2i1HjFNuw87L/bAIT
MY8vT3JHVzEs6MHkrrNt4EuCWKPfllHN5vcJm45m8A3gWcwVSpq+jAoyStdh
IGtq1gWiaRJQ1GfIDNHHkMQNPyYlTobKVC0/Ny8KPJKgn4mYokAINeSe+d5G
dnvfndC54DhkZz54lZXHxq5ZOMpSbJ8ArVGZtfNmJhp2JuSlbNWi0dx9ei6M
bfV3Tvo1cdNXQHUje82YWg6qq296vBKb4ATvcLuPSy0wZRV6t3PagLii6MmJ
G4Z+4b9nsGhVLtYDEPbV1thecp09uBIQYnC3AfXd2t14JLYMSAf3GrXcKwXq
+oe1KbIAIz6itRweTUWZQmdkBXcoU7gzKYM7b5Zxpxl3UFU57gTT689Uy65h
E4u4oy90jHRwp/+LLlbGIJhuJuEOjxXjqVibBpu6uvRvbbmQH/VQOSqaCk/W
hjXEMRpUbrft1xTQwHu5U/rD0UnMXomiOrtIRzt2NIyp8Pqw70v+W/RvTJjT
M3rco1eCHmrxz5bUTyNHM3z/9dM1hYkF1einCtxZPYQ73tG4Yyh0ciVwJ4Vo
kywe0YPRd+EOa+3abOf5EfYJoSOtjzvcA7hzyhjfX/t33CELO60WdnpSBO/U
iYx3KhaKd8pn3O+VnPqExQk7zRXe8dMQ3un5YrzTWGGn5nR+C29GxNQnHO/0
P5gOCEg=
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0., 0., 0., 0., 0., 0.18181818181818182`, 
                    0.09999999999999999, 0.09090909090909091, 
                    0.045454545454545456`, 0.06363636363636363, 
                    0.14545454545454545`, 0.08181818181818182, 
                    0.03636363636363636, 0.00909090909090909, 
                    0.07272727272727272, 0.07272727272727272, 
                    0.01818181818181818, 0.01818181818181818, 
                    0.06363636363636363}, 
                    "StandardDeviation" -> {1., 1., 1., 1., 1., 
                    0.38569460791993504`, 0.3, 0.28747978728803447`, 
                    0.20829889522526546`, 0.24410402876541004`, 
                    0.35255853508482393`, 0.27408751693966066`, 
                    0.18719327529067273`, 0.09491187735373227, 
                    0.25968830649246727`, 0.25968830649246727`, 
                    0.133608531424537, 0.133608531424537, 
                    0.24410402876541004`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 13, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0134081, "MaxTrainingMemory" -> 
                    103480, "DataMemory" -> 17520, "FunctionMemory" -> 25528, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 5, 15, 12, 22, 27.6960321`9.19499246940025}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 19, "Output" -> 
                Association[
                 "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 19.]], 
                "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                180590310318619752]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 19.]], 
                "Mean" -> {0., 0., 0., 0., 0., 0.18181818181818182`, 
                 0.09999999999999999, 0.09090909090909091, 
                 0.045454545454545456`, 0.06363636363636363, 
                 0.14545454545454545`, 0.08181818181818182, 
                 0.03636363636363636, 0.00909090909090909, 
                 0.07272727272727272, 0.07272727272727272, 
                 0.01818181818181818, 0.01818181818181818, 
                 0.06363636363636363}, 
                "StandardDeviation" -> {1., 1., 1., 1., 1., 
                 0.38569460791993504`, 0.3, 0.28747978728803447`, 
                 0.20829889522526546`, 0.24410402876541004`, 
                 0.35255853508482393`, 0.27408751693966066`, 
                 0.18719327529067273`, 0.09491187735373227, 
                 0.25968830649246727`, 0.25968830649246727`, 
                 0.133608531424537, 0.133608531424537, 0.24410402876541004`}, 
                "Output" -> 
                Association[
                 "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 19.]], 
                "Version" -> {12.1, 0}, "ID" -> 7036010646520752688]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 3186011288446369599]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 0}, "ID" -> 4924642535523007246, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 0}, "ID" -> 7497669506253064584]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          False -> 0.3482142857142857, True -> 0.6517857142857143]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{16, 8, 2, 9, 5, 11, 10, 3, 12, 2}], 
             "NumericalThresholds" -> {-0.2715703547000885, \
-0.32334011793136597`, -0.0029993795324116945`, -0.21132001280784607`, 
              0.003982825670391321, 2.416477918624878, -0.2548723518848419, 
              0.0018007045146077871`, -0.295020192861557, \
-0.0007337110582739115}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {-1, 3}, {4, 6}, {
               5, -4}, {-2, -3}, {7, -8}, {-5, 8}, {-6, -7}, {-9, 
               10}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 10, 11, 17, 3, 13, 18, 8, 18, 8, 8}], 
             "NumericalThresholds" -> {-0.21569444239139557`, \
-0.25182095170021057`, -0.4187859892845154, -0.13523705303668976`, 
              0.0007719151908531785, -0.18732818961143494`, \
-0.13572366535663605`, -0.3085845112800598, -0.14194455742835999`, \
-0.3209700584411621, -0.32231828570365906`}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, -5}, {-1, 4}, {-2, 
               5}, {-3, -4}, {7, -12}, {8, 11}, {9, -9}, {-6, 
               10}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 6, 7, 16, 6, 12, 9, 7, 6, 3}], 
             "NumericalThresholds" -> {-0.13523705303668976`, \
-0.4792872369289398, -0.3305588662624359, -0.28632959723472595`, \
-0.47451967000961304`, -0.29233014583587646`, -0.2154368907213211, \
-0.3337160348892212, -0.47296303510665894`, -0.005095733795315027}, 
             "Children" -> 
             RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 
               5}, {-2, -3}, {-4, -5}, {7, 10}, {8, 
               9}, {-6, -7}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 18, 8, 6, 17, 18, 17, 7, 16, 11, 5, 11, 
               15}], "NumericalThresholds" -> {
              0.008172948844730854, -0.14395952224731445`, \
-0.31763139367103577`, -0.47524404525756836`, -0.13244786858558655`, \
-0.13858073949813843`, -0.13523705303668976`, -0.32358720898628235`, \
-0.28851187229156494`, -0.41020840406417847`, -0.001009804429486394, \
-0.40338295698165894`, -0.2783467173576355}, "Children" -> 
             RawArray["Integer16",{{2, 13}, {3, 4}, {-1, -2}, {5, 7}, {
               6, -5}, {-3, -4}, {8, 10}, {9, -8}, {-6, -7}, {11, 
               12}, {-9, -10}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 
               1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 3, 14, 11, 7, 10, 2, 18, 14, 11}], 
             "NumericalThresholds" -> {-0.20958980917930603`, 
              0.0018470213981345296`, -0.10213284194469452`, 
              2.416477918624878, -0.3305588662624359, -0.2627016603946686, \
-0.004811207298189402, -0.13355015218257904`, -0.09028792381286621, \
-0.4144848585128784}, "Children" -> 
             RawArray["Integer16",{{2, -11}, {3, 9}, {-1, 4}, {5, 8}, {6, 
               7}, {-2, -3}, {-4, -5}, {-6, -7}, {-8, 10}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 8, 3, 1, 18, 8, 9, 9, 9, 5}], 
             "NumericalThresholds" -> {-0.3289954960346222, \
-0.30782440304756165`, -0.0007520833751186728, 
              0.00120677356608212, -0.1438295841217041, -0.3117400109767914, \
-0.2114259898662567, -0.21252022683620453`, -0.21709874272346497`, 
              0.0020151191856712103`}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, -7}, {4, 5}, {-1, -2}, {-3, 
               6}, {7, -6}, {-4, -5}, {9, -11}, {10, -10}, {-8, -9}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 4, 19, 5, 4, 14, 14, 15, 15, 1, 10}], 
             "NumericalThresholds" -> {-0.21556055545806885`, 
              0.007203663233667612, -0.26779574155807495`, 
              0.008172948844730854, -0.0077972570434212685`, \
-0.09085723757743835, -0.0875091627240181, -0.2717759311199188, \
-0.27511855959892273`, -0.0007554744952358305, -0.2579798400402069}, 
             "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 6}, {-1, 4}, {
               5, -4}, {-2, -3}, {-5, -6}, {8, -12}, {9, -11}, {10, -10}, {
               11, -9}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 15, 16, 15, 19, 5, 6, 7, 9, 10, 7, 18, 
               5}], "NumericalThresholds" -> {-0.3246670067310333, \
-0.2795698046684265, -0.27114394307136536`, -0.2801978290081024, \
-0.251475065946579, 
              0.005913801025599241, -0.47069305181503296`, \
-0.3386918306350708, -0.2134515345096588, -0.2629888951778412, \
-0.3366096317768097, -0.1281946748495102, -0.007356557529419661}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 9}, {4, -8}, {5, -7}, {
               6, -6}, {7, 8}, {-2, -3}, {-4, -5}, {10, 13}, {11, 
               12}, {-9, -10}, {-11, -12}, {-13, -14}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 
               2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 13, 4, 4, 2, 7, 18, 3, 17, 19, 5, 16}], 
             "NumericalThresholds" -> {-0.008782957680523396, \
-0.19247089326381683`, -0.0027935602702200413`, -0.007190017029643059, 
              0.0036373131442815065`, -0.3318294882774353, \
-0.13249121606349945`, -0.0058530704118311405`, -0.1319698840379715, \
-0.2669828236103058, 0.0012394008226692677`, -0.2828098237514496}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 9}, {4, 6}, {
               5, -4}, {-2, -3}, {-5, 7}, {-6, 8}, {-7, -8}, {10, 12}, {-9, 
               11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 17, 14, 14, 12, 4, 5, 14, 16, 1, 8, 
               5}], "NumericalThresholds" -> {-0.2579798400402069, \
-0.13314713537693024`, -0.09933740645647049, -0.09549691528081894, \
-0.2977772355079651, -0.005656115245074034, 
              0.003982825670391321, -0.09085723757743835, -0.2853267192840576,
               0.002349249552935362, -0.3085845112800598, \
-0.005787888076156378}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
               7}, {-4, -5}, {-6, -7}, {9, 12}, {-8, 10}, {
               11, -11}, {-9, -10}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 5, 7, 16, 13, 6, 5, 7, 16, 18}], 
             "NumericalThresholds" -> {
              0.0023652040399610996`, -0.00875809881836176, \
-0.34108877182006836`, -0.27623286843299866`, -0.18956953287124634`, \
-0.4618500769138336, 
              0.005913801025599241, -0.33213022351264954`, \
-0.27365756034851074`, -0.13674940168857574`}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {-1, 3}, {-2, 4}, {5, -6}, {
               6, -5}, {-3, -4}, {8, 9}, {-7, -8}, {10, -11}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{18, 17, 8, 14, 4, 15, 13, 1, 18, 13}], 
             "NumericalThresholds" -> {-0.14394575357437134`, \
-0.14155903458595276`, -0.32334011793136597`, -0.10365784913301468`, \
-0.0023580449633300304`, -0.2732234299182892, -0.1923959106206894, \
-0.007832483388483524, -0.1297684758901596, -0.18856306374073029`}, 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {6, 
               8}, {7, -7}, {-5, -6}, {-8, 9}, {10, -11}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{16, 3, 13, 11, 14, 19, 9, 7, 9, 8}], 
             "NumericalThresholds" -> {
              3.5666821002960205`, -0.006056526210159063, \
-0.19525951147079468`, -0.42070451378822327`, -0.09830816835165024, \
-0.2543383836746216, -0.2152034342288971, -0.3313581347465515, \
-0.22179284691810608`, -0.32036709785461426`}, "Children" -> 
             RawArray["Integer16",{{2, -11}, {3, 4}, {-1, -2}, {-3, 5}, {6, 
               7}, {-4, -5}, {8, 10}, {-6, 9}, {-7, -8}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{14, 18, 9, 6, 2, 14, 5, 3, 11, 16}], 
             "NumericalThresholds" -> {-0.08958203345537186, \
-0.14394575357437134`, -0.21787671744823456`, -0.46434518694877625`, \
-0.004013458266854286, -0.0993613749742508, 0.0023652040399610996`, 
              0.003000908764079213, -0.40519002079963684`, \
-0.2833082377910614}, "Children" -> 
             RawArray["Integer16",{{2, 10}, {-1, 3}, {4, 6}, {
               5, -4}, {-2, -3}, {7, 8}, {-5, -6}, {
               9, -9}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 10, 11, 12, 6, 12, 15, 15, 11, 13, 15}],
              "NumericalThresholds" -> {-0.32930055260658264`, \
-0.25813454389572144`, -0.41674184799194336`, -0.3003373146057129, \
-0.47524404525756836`, -0.30363088846206665`, -0.2732103168964386, \
-0.27693018317222595`, -0.4064537584781647, -0.20270633697509766`, \
-0.2720682621002197}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 5}, {4, -3}, {-1, -2}, {-4, 
               6}, {-5, 7}, {-6, -7}, {9, 10}, {-8, -9}, {-10, 
               11}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 9, 13, 17, 18, 2, 19, 6, 2, 12, 9, 9}], 
             "NumericalThresholds" -> {-0.32358720898628235`, \
-0.21609735488891602`, -0.19099409878253937`, -0.13039182126522064`, \
-0.14312098920345306`, 
              0.0038002135697752237`, -0.2595062553882599, \
-0.46965500712394714`, -0.0020582217257469893`, -0.29869991540908813`, \
-0.20944364368915558`, -0.22146837413311005`}, "Children" -> 
             RawArray["Integer16",{{2, 12}, {3, 7}, {4, 6}, {
               5, -3}, {-1, -2}, {-4, -5}, {8, 10}, {9, -8}, {-6, -7}, {-9, 
               11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 19, 9, 8, 5, 3, 7, 2, 15, 2, 16, 1}], 
             "NumericalThresholds" -> {-0.13523705303668976`, \
-0.26935067772865295`, -0.21263451874256134`, -0.32378414273262024`, \
-0.004857543855905533, -0.006615388207137585, -0.3242017328739166, \
-0.008782957680523396, -0.2747209370136261, -0.00248750695027411, \
-0.274574875831604, 0.0011258533922955394`}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {-1, 3}, {4, -6}, {-2, 5}, {-3, 
               6}, {-4, -5}, {8, -13}, {-7, 9}, {10, -12}, {11, 
               12}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 11, 9, 19, 4, 13, 18, 15, 17, 7, 7, 
               12}], "NumericalThresholds" -> {-0.3073534071445465, \
-0.41858869791030884`, -0.2220386415719986, -0.26820898056030273`, 
              0.00019537120533641428`, -0.19251559674739838`, \
-0.1311671882867813, -0.27644962072372437`, -0.14222119748592377`, \
-0.3331534266471863, -0.3271414637565613, -0.29847028851509094`}, "Children" -> 
             RawArray["Integer16",{{2, -13}, {3, 4}, {-1, -2}, {5, 
               6}, {-3, -4}, {7, 11}, {8, 10}, {-5, 9}, {-6, -7}, {-8, -9}, {
               12, -12}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 8, 12, 19, 8, 12, 7, 6, 9, 2, 7, 6, 
               19}], "NumericalThresholds" -> {-0.20958980917930603`, \
-0.3161776661872864, -0.29494065046310425`, -0.26779574155807495`, \
-0.31813472509384155`, -0.3072349429130554, -0.3317843973636627, \
-0.4688481092453003, -0.21569444239139557`, -0.003626209916546941, \
-0.33296021819114685`, -0.4617141783237457, -0.2515661418437958}, "Children" -> 
             RawArray["Integer16",{{2, 13}, {3, 8}, {4, 7}, {-1, 5}, {
               6, -4}, {-2, -3}, {-5, -6}, {9, 11}, {-7, 10}, {-8, -9}, {
               12, -12}, {-10, -11}, {-13, -14}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 
               1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 17, 10, 6, 1, 3, 5, 12, 7, 7, 7, 15}], 
             "NumericalThresholds" -> {-0.13672958314418793`, \
-0.1448172926902771, -0.2528364956378937, -0.4703752398490906, \
-0.008313395082950592, 
              0.0067053548991680145`, -0.003525448963046074, \
-0.30292218923568726`, -0.33524200320243835`, -0.3386918306350708, \
-0.32600730657577515`, -0.2743384540081024}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {-1, 3}, {4, -5}, {
               5, -4}, {-2, -3}, {7, 12}, {8, 10}, {-6, 9}, {-7, -8}, {-9, 
               11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 6, 10, 1, 3, 14, 6, 13, 10, 2}], 
             "NumericalThresholds" -> {-0.32334011793136597`, \
-0.46538782119750977`, -0.25813454389572144`, 
              0.0069449348375201225`, -0.006176789291203022, \
-0.09386337548494339, -0.4732072353363037, -0.20072312653064728`, \
-0.25550276041030884`, -0.003626209916546941}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 7}, {5, -6}, {
               6, -5}, {-3, -4}, {8, 9}, {-7, -8}, {-9, 10}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{13, 16, 5, 17, 18, 16, 10, 7, 2, 2, 5, 4}],
              "NumericalThresholds" -> {-0.19099409878253937`, \
-0.2825176417827606, -0.008681902661919594, -0.13669727742671967`, \
-0.1423209309577942, -0.2701126039028168, -0.2595786154270172, \
-0.33456575870513916`, 
              0.0016272988868877292`, -0.005177837330847979, \
-0.0026370901614427567`, -0.002483831951394677}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 5}, {-1, 4}, {-2, -3}, {-4, 
               6}, {7, -8}, {-5, 8}, {-6, -7}, {10, 12}, {-9, 
               11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{16, 7, 8, 17, 19, 14, 19, 14, 2, 8}], 
             "NumericalThresholds" -> {-0.2709991931915283, 
              3.0018389225006104`, -0.32246577739715576`, \
-0.1402854174375534, -0.2543383836746216, -0.09830816835165024, \
-0.26121461391448975`, -0.09386337548494339, 
              0.0036373131442815065`, -0.3183864653110504}, "Children" -> 
             RawArray["Integer16",{{2, 10}, {3, -9}, {-1, 4}, {5, 
               6}, {-2, -3}, {7, 8}, {-4, -5}, {-6, 
               9}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{14, 9, 6, 15, 17, 17, 11, 14, 3, 7, 13}], 
             "NumericalThresholds" -> {-0.090939000248909, \
-0.21556055545806885`, -0.46434518694877625`, -0.28477126359939575`, \
-0.1279267966747284, -0.13672958314418793`, -0.41464486718177795`, \
-0.09961516410112381, -0.0011033606715500355`, -0.340715616941452, \
-0.2032889425754547}, "Children" -> 
             RawArray["Integer16",{{2, 10}, {3, 7}, {4, 6}, {-1, 
               5}, {-2, -3}, {-4, -5}, {-6, 8}, {-7, 9}, {-8, -9}, {-10, 
               11}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 14, 5, 2, 19, 18, 15, 7, 10, 17, 5}], 
             "NumericalThresholds" -> {
              0.003390297759324312, -0.09107477962970734, \
-0.007667116820812225, 
              0.00681775389239192, -0.2601056396961212, \
-0.13564077019691467`, -0.2849577069282532, -0.3313581347465515, \
-0.2570018172264099, -0.13807064294815063`, 0.007371423300355673}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 7}, {-1, 4}, {5, -5}, {-2, 
               6}, {-3, -4}, {-6, -7}, {9, 11}, {
               10, -10}, {-8, -9}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{19, 11, 18, 7, 18, 10, 14, 5, 2, 1, 4, 5}],
              "NumericalThresholds" -> {-0.26779574155807495`, \
-0.4141300618648529, -0.13930347561836243`, -0.32552507519721985`, \
-0.13036079704761505`, -0.25280100107192993`, -0.09580438584089279, 
              0.0038124555721879005`, 
              0.002411020454019308, -0.004069495014846325, 
              0.0018779494566842914`, 0.0020151191856712103`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 12}, {6, 
               10}, {7, -8}, {-4, 8}, {9, -7}, {-5, -6}, {-9, 
               11}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{16, 1, 14, 19, 15, 9, 15, 17, 2, 3, 19}], 
             "NumericalThresholds" -> {-0.28851187229156494`, \
-0.002631046809256077, -0.09136366844177246, -0.2661273777484894, \
-0.280651330947876, -0.21802392601966858`, -0.2800707221031189, \
-0.13244786858558655`, -0.007139100227504969, 
              0.0011791458819061518`, -0.26779574155807495`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 11}, {5, 
               6}, {-3, -4}, {-5, 7}, {8, 9}, {-6, -7}, {-8, 
               10}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 3, 2, 17, 2, 1, 1, 8, 6, 19, 7}], 
             "NumericalThresholds" -> {0.00826007965952158, 
              0.0031323579605668783`, -0.0040666572749614716`, \
-0.13457126915454865`, -0.007485238369554281, -0.006168426014482975, \
-0.00827109906822443, -0.3130425810813904, -0.46325981616973877`, \
-0.2519894540309906, -0.3289954960346222}, "Children" -> 
             RawArray["Integer16",{{2, -12}, {3, 10}, {4, 6}, {-1, 
               5}, {-2, -3}, {7, 8}, {-4, -5}, {9, -8}, {-6, -7}, {
               11, -11}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 8, 13, 5, 10, 5, 16, 15, 12, 12}], 
             "NumericalThresholds" -> {-0.22146837413311005`, \
-0.3161776661872864, -0.2000819593667984, 
              0.0038124555721879005`, -0.2534521222114563, \
-0.007356557529419661, -0.28470468521118164`, -0.280651330947876, \
-0.3006957769393921, -0.3059462904930115}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 10}, {6, 
               9}, {-4, 7}, {8, -7}, {-5, -6}, {-8, -9}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 7, 18, 1, 6, 1, 14, 9, 18, 14, 7, 3}], 
             "NumericalThresholds" -> {-0.3064438998699188, \
-0.33213022351264954`, -0.1423679143190384, 
              0.00120677356608212, -0.4728109538555145, -0.00635518366470933, \
-0.09787049889564514, -0.2133709192276001, -0.12961478531360626`, \
-0.09136366844177246, -0.3242017328739166, 0.0018007045146077871`}, 
             "Children" -> 
             RawArray["Integer16",{{2, -13}, {3, 7}, {-1, 4}, {5, -5}, {-2, 
               6}, {-3, -4}, {8, 9}, {-6, -7}, {10, 12}, {-8, 
               11}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 7, 18, 16, 10, 15, 4, 18, 1, 11, 3, 
               10}], 
             "NumericalThresholds" -> {-0.009195348247885704, \
-0.3295416533946991, -0.14014160633087158`, -0.2736896872520447, \
-0.2576560080051422, -0.27239367365837097`, -0.00754576688632369, \
-0.14113275706768036`, -0.0006761900149285793, -0.4062678813934326, \
-0.0058530704118311405`, -0.26450034976005554`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 8}, {4, 6}, {
               5, -4}, {-2, -3}, {7, -7}, {-5, -6}, {-8, 9}, {10, 
               11}, {-9, -10}, {-11, 12}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 11, 15, 8, 16, 5, 5, 7}], 
             "NumericalThresholds" -> {-0.2528364956378937, \
-0.4027223587036133, -0.28948646783828735`, -0.31056642532348633`, \
-0.2825176417827606, -0.0072648669593036175`, 
              0.003982825670391321, -0.3331534266471863}, "Children" -> 
             RawArray["Integer16",{{2, -9}, {3, 8}, {4, 5}, {-1, -2}, {
               6, -6}, {-3, 7}, {-4, -5}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 13, 7, 13, 6, 14, 16, 4}], 
             "NumericalThresholds" -> {-0.13457126915454865`, \
-0.18498317897319794`, -0.3238738477230072, -0.201542466878891, \
-0.4702746868133545, -0.0987996831536293, -0.2844953238964081, \
-0.0014851849991828203`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {6, 
               8}, {-5, 7}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{17, 19, 9, 7, 3, 3, 5, 17, 10}], 
             "NumericalThresholds" -> {-0.1279267966747284, \
-0.26935067772865295`, -0.21064938604831696`, -0.3248125910758972, \
-0.005146038718521595, -0.007684651296585798, 
              0.0020151191856712103`, -0.13702580332756042`, \
-0.26646900177001953`}, "Children" -> 
             RawArray["Integer16",{{2, -10}, {-1, 3}, {4, 9}, {5, 7}, {
               6, -4}, {-2, -3}, {8, -7}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 1, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 19, 19, 13, 1, 3, 13, 15, 6, 19, 18}], 
             "NumericalThresholds" -> {-0.25182095170021057`, \
-0.27033668756484985`, -0.251475065946579, -0.20085278153419495`, \
-0.005687431897968054, 
              0.0018007045146077871`, -0.18739967048168182`, \
-0.27021437883377075`, -0.46979379653930664`, -0.26428934931755066`, \
-0.14395952224731445`}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {-1, 3}, {4, -10}, {5, 7}, {-2, 
               6}, {-3, -4}, {8, 9}, {-5, -6}, {
               10, -9}, {-7, -8}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 6, 5, 17, 16, 2, 8, 17, 14, 17, 5}], 
             "NumericalThresholds" -> {-0.005095733795315027, \
-0.4685590863227844, 
              0.0013536482583731413`, -0.13041511178016663`, \
-0.2709991931915283, 
              0.007354853209108114, -0.32426807284355164`, \
-0.13672958314418793`, -0.09637074917554855, -0.13123086094856262`, 
              0.004948009736835957}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 4}, {-2, -3}, {6, 
               11}, {7, -10}, {-5, 8}, {-6, 9}, {
               10, -9}, {-7, -8}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 7, 17, 9, 15, 19, 16, 9, 16, 7, 17}], 
             "NumericalThresholds" -> {-0.47296303510665894`, \
-0.3248125910758972, -0.13413475453853607`, -0.21387608349323273`, \
-0.28414398431777954`, -0.266326367855072, -0.2728526294231415, \
-0.21111971139907837`, -0.2878967523574829, -0.32930055260658264`, \
-0.1330052614212036}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, -6}, {4, 5}, {-1, -2}, {-3, 
               6}, {-4, -5}, {8, 11}, {9, -10}, {-7, 
               10}, {-8, -9}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 16, 10, 1, 7, 10, 5, 14, 7, 3, 5}], 
             "NumericalThresholds" -> {
              0.0031323579605668783`, -0.2800602912902832, \
-0.25859126448631287`, -0.006037640385329723, -0.33078533411026, \
-0.2528804540634155, 
              0.0017940800171345472`, -0.0879983901977539, \
-0.34013625979423523`, 0.008581068366765976, 0.0053139496594667435`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 6}, {4, 
               5}, {-1, -2}, {-3, -4}, {7, -8}, {8, -7}, {-5, -6}, {-9, 10}, {
               11, -12}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 2, 3, 13, 17, 4, 4, 1, 13, 5}], 
             "NumericalThresholds" -> {-0.3265853524208069, 
              0.008322521112859249, 
              0.0018470213981345296`, -0.19062279164791107`, \
-0.1330052614212036, 0.000035593191569205374`, 
              
              0.0036230129189789295`, -0.008420128375291824, \
-0.1957092434167862, -0.0020382043439894915`}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, -8}, {4, 7}, {5, 
               6}, {-1, -2}, {-3, -4}, {-5, 8}, {-6, -7}, {-9, 
               10}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 9, 17, 4, 3, 7, 18, 3, 8, 11}], 
             "NumericalThresholds" -> {-0.3243512213230133, \
-0.22179284691810608`, -0.13314713537693024`, 
              0.008223110809922218, -0.005146038718521595, \
-0.3286060094833374, -0.12912581861019135`, 
              0.0018470213981345296`, -0.3182317316532135, \
-0.4165949821472168}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 8}, {5, -7}, {6, 
               7}, {-3, -4}, {-5, -6}, {9, 10}, {-8, -9}, {-10, -11}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 11, 1, 6, 12, 2, 5, 16, 5, 7}], 
             "NumericalThresholds" -> {
              0.008423975668847561, -0.4186595678329468, \
-0.0074109905399382114`, -0.4755062162876129, -0.29493215680122375`, \
-0.00248750695027411, 
              0.0038124555721879005`, -0.2851901948451996, \
-0.002419739728793502, -0.34093716740608215`}, "Children" -> 
             RawArray["Integer16",{{2, -11}, {3, 4}, {-1, -2}, {5, 7}, {
               6, -5}, {-3, -4}, {8, 10}, {9, -8}, {-6, -7}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 13, 7, 19, 5, 7, 2, 18, 12, 13, 16, 18, 
               15}], 
             "NumericalThresholds" -> {-0.006037640385329723, \
-0.18956953287124634`, -0.341989666223526, -0.2560315728187561, \
-0.008681902661919594, -0.32678136229515076`, -0.00248750695027411, \
-0.13199374079704285`, -0.3000278174877167, -0.19426584243774414`, \
-0.28851187229156494`, -0.1385762095451355, -0.28414398431777954`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 11}, {-4, 
               6}, {7, 10}, {-5, 8}, {9, -8}, {-6, -7}, {-9, -10}, {-11, 
               12}, {-12, 13}, {-13, -14}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 
               1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{14, 10, 5, 10, 4, 1, 3, 17}], 
             "NumericalThresholds" -> {-0.09085723757743835, \
-0.25830739736557007`, -0.004857543855905533, -0.2664608955383301, 
              0.0070381020195782185`, 0.0009736558422446251, 
              0.004026802256703377, -0.144359290599823}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {
               6, -7}, {-4, 7}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 6, 10, 2, 8, 11, 4, 10, 18, 11, 1}], 
             "NumericalThresholds" -> {-0.006037640385329723, \
-0.4771600663661957, -0.2578401267528534, -0.006014655809849501, \
-0.3073534071445465, 
              2.4195666313171387`, -0.0053983815014362335`, \
-0.2664608955383301, -0.14113275706768036`, -0.41046175360679626`, 
              0.00120677356608212}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {
               6, -12}, {7, -11}, {8, 9}, {-5, -6}, {-7, 10}, {
               11, -10}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 8, 19, 16, 7, 18, 13, 14, 13, 13, 12, 
               16, 17}], 
             "NumericalThresholds" -> {-0.009195348247885704, \
-0.3243512213230133, -0.2529448866844177, -0.2715703547000885, \
-0.3248125910758972, -0.13199374079704285`, -0.1996268779039383, \
-0.0983128622174263, -0.1894095093011856, -0.20085278153419495`, \
-0.2990473806858063, -0.28466323018074036`, -0.13244786858558655`}, 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 12}, {5, 11}, {6, 
               10}, {-3, 7}, {-4, 8}, {
               9, -7}, {-5, -6}, {-8, -9}, {-10, -11}, {-12, 
               13}, {-13, -14}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 
               1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 7, 17, 4, 6, 2, 4, 8, 8, 12, 17}], 
             "NumericalThresholds" -> {-0.30782440304756165`, \
-0.3238738477230072, -0.13457126915454865`, 
              0.006727296859025955, -0.4755062162876129, \
-0.00416998565196991, -0.008393581956624985, -0.32231828570365906`, \
-0.3243512213230133, -0.2962047755718231, -0.13782718777656555`}, "Children" -> 
             RawArray["Integer16",{{2, -12}, {3, 11}, {4, 7}, {5, -4}, {-1, 
               6}, {-2, -3}, {-5, 8}, {9, 
               10}, {-6, -7}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 1, 13, 10, 17, 17, 10, 2, 1, 3, 8}], 
             "NumericalThresholds" -> {-0.2579798400402069, \
-0.005687431897968054, -0.19010762870311737`, -0.2629888951778412, \
-0.13457126915454865`, -0.14456745982170105`, -0.2650909721851349, 
              0.004702106583863497, 0.00032816268503665924`, 
              0.0010470194974914193`, -0.31640252470970154`}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, -7}, {6, 
               7}, {-3, -4}, {-5, -6}, {9, 11}, {-8, 
               10}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{18, 12, 14, 8, 6, 19, 5, 14, 5, 5, 13, 7}],
              "NumericalThresholds" -> {-0.14394575357437134`, \
-0.2941164970397949, -0.090939000248909, -0.3243512213230133, \
-0.4775868058204651, -0.26820898056030273`, 
              0.0023652040399610996`, -0.09961516410112381, 
              0.008087347261607647, 
              0.006095238495618105, -0.20120872557163239`, \
-0.3238738477230072}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 12}, {-3, 5}, {-4, 
               6}, {-5, 7}, {8, 9}, {-6, -7}, {10, -11}, {
               11, -10}, {-8, -9}, {-12, -13}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 3, 8, 9, 12, 1, 18, 6, 4, 10, 12}], 
             "NumericalThresholds" -> {-0.009195348247885704, \
-0.0007520833751186728, -0.3064438998699188, -0.2181510627269745, \
-0.295020192861557, 
              0.002410583198070526, -0.12912581861019135`, \
-0.4736388623714447, -0.001585523714311421, -0.25280100107192993`, \
-0.3002009987831116}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 7}, {4, -6}, {5, 
               6}, {-2, -3}, {-4, -5}, {8, 11}, {9, 
               10}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{16, 11, 10, 6, 16, 7, 2, 3, 4, 5, 5}], 
             "NumericalThresholds" -> {-0.28275564312934875`, \
-0.4086364805698395, -0.2570018172264099, -0.4776628315448761, \
-0.28703972697257996`, -0.336175799369812, -0.007139100227504969, 
              0.007468902971595526, 0.008223110809922218, -0.0062205302529037,
               0.006402565166354179}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 6}, {4, 
               5}, {-1, -2}, {-3, -4}, {-5, 7}, {-6, -7}, {9, 11}, {
               10, -10}, {-8, -9}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 
               1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]]}, "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 19.], "Key" -> 
            "((f2f5f6f13f16)(f1f3f4f7f8f9f10f11f12f14f15f17f18f19))", 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], 
         "OOBConfusionMatrix" -> {{0.5714285618492535, 0.4285714381507465}, {
          0.4285714381507465, 0.5714285618492535}}, "Method" -> 
         "RandomForest", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "FeatureFraction" -> 
           Association[
            "Value" -> 19^Rational[-1, 2], "Options" -> Association[]], 
           "LeafSize" -> 
           Association["Value" -> 5, "Options" -> Association[]], 
           "TreeNumber" -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "Implementation" -> 
           Association["Value" -> "DAAL", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[15617], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.2152368`6.784461520112051, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.6758621164569781, 0.01602696294905062], "Accuracy" -> 
            Around[0.6408746146367451, 0.06985175830050416], "EvaluationTime" -> 
            0.00006641656257686242, "TestSize" -> 95, "ModelMemory" -> 97352, 
            "ModelUtility" -> -0.30615397751322415`, "TrainingSize" -> 15, 
            "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 154032,
             "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.6758621164569781, 0.011332774183099243`]}, 
            "AccuracyHistory" -> {
              Around[0.6408746146367451, 0.0493926519720902]}, 
            "Configuration" -> {
             "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
              Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
              0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 
            110], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 269213046091525]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.798597276238172, 0.9323221284064459], "Accuracy" -> 
                 Around[0.6825412813034117, 0.06787906465042513], 
                 "EvaluationTime" -> 0.00016683086236432773`, "TestSize" -> 
                 95, "ModelMemory" -> 27856, 
                 "ModelUtility" -> -2.075725424938202, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 90248, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.798597276238172, 0.659251299246473]}, 
                 "AccuracyHistory" -> {
                   Around[0.6825412813034117, 0.04799774691491567]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.4394111655303024`, 0.5102188406137524], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
                 "ModelMemory" -> 39440, 
                 "ModelUtility" -> -1.1259021788819232`, "TrainingSize" -> 88,
                  "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 253744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.4394111655303024`, 0.3607792020871226]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
                Around[1.4394111655303024`, 0.5102188406137524], 
                "ModelMemory" -> 39440, "TrainingMemory" -> 253744, 
                "TrainingTime" -> 0.04190050861434645], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 
                 95, "ModelMemory" -> 19952, 
                 "ModelUtility" -> -0.32703300476737984`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 58592, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6916370843501094, 0.0062588525193839105`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9852269824100339, 0.2250083837205245], "Accuracy" -> 
                 Around[0.5445201306577209, 0.1504707520532654], 
                 "EvaluationTime" -> 0.00022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 118552, 
                 "ModelUtility" -> -0.7229745838444618, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 323376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9852269824100339, 0.15910495395260763`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5445201306577209, 0.10639888914710359`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.9852269824100339, 0.2250083837205245], "ModelMemory" -> 
                118552, "TrainingMemory" -> 323376, "TrainingTime" -> 
                0.09996535993761262], "Index" -> 2], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9008297368171003, 0.16826411064785146`], "Accuracy" -> 
                 Around[0.6929579479700785, 0.06729293745364194], 
                 "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 
                 95, "ModelMemory" -> 8608, 
                 "ModelUtility" -> -0.6254056756698182, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 60688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9008297368171003, 0.11898069366941932`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6929579479700785, 0.04758329239943242]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6913666686014149, 0.11152309426788003`], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 20960, 
                 "ModelUtility" -> -0.3558380811551872, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 224160, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6913666686014149, 0.07885873621572455]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.6913666686014149, 0.11152309426788003`], 
                "ModelMemory" -> 20960, "TrainingMemory" -> 224160, 
                "TrainingTime" -> 0.041094627706654105`], "Index" -> 3], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9960820401873928, 0.16681712541591465`], "Accuracy" -> 
                 Around[0.6200412813034117, 0.0706257160069098], 
                 "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95,
                  "ModelMemory" -> 5840, 
                 "ModelUtility" -> -0.7221876237230754, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 68520, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9960820401873928, 0.11795752059964]}, 
                 "AccuracyHistory" -> {
                   Around[0.6200412813034117, 0.049939922714641205`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.36857175477252, 0.38960247262831954`], "Accuracy" -> 
                 Around[0.4575636089185905, 0.14942705635897574`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 6160, 
                 "ModelUtility" -> -1.0623089268025168`, "TrainingSize" -> 88,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 109032, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.36857175477252, 0.275490550362531]}, 
                 "AccuracyHistory" -> {
                   Around[0.4575636089185905, 0.10566088484417616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[1.36857175477252, 0.38960247262831954`], "ModelMemory" -> 
                6160, "TrainingMemory" -> 109032, "TrainingTime" -> 
                0.021791461876978648`], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6758621164569781, 0.01602696294905062], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 0.00006641656257686242, "TestSize" -> 95,
                  "ModelMemory" -> 97352, 
                 "ModelUtility" -> -0.30615397751322415`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 154032, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6758621164569781, 0.011332774183099243`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6796673723096738, 0.03800381184164786], "Accuracy" -> 
                 Around[0.6749549132664163, 0.14368460052805063`], 
                 "EvaluationTime" -> 0.00018095780479704407`, "TestSize" -> 
                 22, "ModelMemory" -> 99632, 
                 "ModelUtility" -> -0.318158590075885, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 185336, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6796673723096738, 0.026872753064166817`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6749549132664163, 0.10160035538546477`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00018095780479704407`, 
                "MeanCrossEntropy" -> 
                Around[0.6796673723096738, 0.03800381184164786], 
                "ModelMemory" -> 99632, "TrainingMemory" -> 185336, 
                "TrainingTime" -> 0.03738644826676103], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[111.77046597324602`, 32.25899962272599], "Accuracy" -> 
                 Around[0.6512912813034117, 0.06941271239287487], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9240, "ModelUtility" -> -5.465734598429471, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
                 "TrainingMemory" -> 86840, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[111.77046597324602`, 22.810557387523822`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6512912813034117, 0.04908219963355333]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
                Around[111.77046597324602`, 32.25899962272599], "ModelMemory" -> 
                9240, "TrainingMemory" -> 86840, "TrainingTime" -> 
                0.06640783086353597], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.1061991836999634`, 0.5425389180169052], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9240, 
                 "ModelUtility" -> -1.4882882347824822`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 86816, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.1061991836999634`, 0.383632947987366]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6688233442207225, 0.12479115151593738`], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.00002867987929455423, "TestSize" -> 22,
                  "ModelMemory" -> 9240, 
                 "ModelUtility" -> -0.3275700546165822, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 112376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6688233442207225, 0.08824066946899722]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002867987929455423, "MeanCrossEntropy" -> 
                Around[0.6688233442207225, 0.12479115151593738`], 
                "ModelMemory" -> 9240, "TrainingMemory" -> 112376, 
                "TrainingTime" -> 0.07541456536256848], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7820212903089474, 0.12129448348956279`], "Accuracy" -> 
                 Around[0.6304579479700784, 0.07025589306900139], 
                 "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9240, "ModelUtility" -> -0.4778441643840293,
                  "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379,
                  "TrainingMemory" -> 86456, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7820212903089474, 0.08576815179598957]}, 
                 "AccuracyHistory" -> {
                   Around[0.6304579479700784, 0.04967841840740784]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6665919931574977, 0.12220331934696975`], "Accuracy" -> 
                 Around[0.5879983915272861, 0.14934795303195378`], 
                 "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                 22, "ModelMemory" -> 9240, 
                 "ModelUtility" -> -0.3235999550476, "TrainingSize" -> 88, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 112192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6665919931574977, 0.08641079579374752]}, 
                 "AccuracyHistory" -> {
                   Around[0.5879983915272861, 0.10560495034522452`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000022781237892148727`, 
                "MeanCrossEntropy" -> 
                Around[0.6665919931574977, 0.12220331934696975`], 
                "ModelMemory" -> 9240, "TrainingMemory" -> 112192, 
                "TrainingTime" -> 0.07541456536256848], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[36.7928645890991, 10.606687345962293`], "Accuracy" -> 
                 Around[0.6408746146367451, 0.06985175830050416], 
                 "EvaluationTime" -> 8.361349839202961*^-6, "TestSize" -> 95, 
                 "ModelMemory" -> 9240, "ModelUtility" -> -4.354527411895482, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
                 "TrainingMemory" -> 86840, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[36.7928645890991, 7.5000605482554805`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6408746146367451, 0.0493926519720902]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 8.361349839202961*^-6, "MeanCrossEntropy" -> 
                Around[36.7928645890991, 10.606687345962293`], "ModelMemory" -> 
                9240, "TrainingMemory" -> 86840, "TrainingTime" -> 
                0.08360250581623441], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 269208751124229]], "MaxTrainingSize" -> 110, 
         "PreprocessorEvaluationTime" -> 7.64990234375`2.*^-6, 
         "PreprocessorMemory" -> 80696, "InputDimension" -> 19, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6463341980550162, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.7985341484963461`17.332191024187967*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
             0.2732667, "ExperimentCounts" -> 9], 
            Association[
            "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.40290729999999997`, "ExperimentCounts" -> 7]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association["ID" -> 269221636026117]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4869778399966775971], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8439739875550784788], "f3" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6892765211121496287], "f4" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8670523944609455772], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              961776746376773328], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3359436405362434027], "f7" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              614585445462127573], "f8" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              74088328326475879], "f9" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              376480359494444711], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              8346919285784899518], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3357160760172900656], "f12" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              1055275395412797153], "f13" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              2946416844719020710], "f14" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              3325317170655667180], "f15" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6322690734059999389], "f16" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              6638076199220299846], "f17" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5833514859980486730], "f18" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5012713163464086837], "f19" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              4969056570514489789]], 
           Association[
           "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1,
             "LogDensityRatios" -> 0]], "TrainingTime" -> 1.112549, 
         "MaxTrainingMemory" -> 723288, "DataMemory" -> 315568, 
         "FunctionMemory" -> 351248, "LanguageVersion" -> {12.1, 0}, "Date" -> 
         DateObject[{2020, 5, 15, 12, 22, 28.7423618`9.211097364637569}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association["Input" -> CompressedData["
1:eJxTTMoPSmJiYGCQBmJhBmyAEYOBwsQjRI4cIyH1yLIY6ohzF27jGfGrIk4j
bgmsqnBoZSSoCFOMAlfAJQHk3gHy
       "], 
      "Output" -> {
       True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, False, False, False, False, False, False, 
        False, False, False, False, False}], 
    "Predictions" -> {
     True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True}, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmViYGCQBmIQHfl8mmcsz8v9F7XuWE7sebz/XPznuTvtX+4PXbGz
fULi4/3o8uh8b917zzKKX+7ffdA26KQZpvzSa2oPg26+2H9p43fmM9sx5Z92
W086cvvl/se7//5+8vDR/lu70l+uqXm+//r7Labf3zwhaD86v5qvrdhD4MV+
cVvjaRzphPWjqy9bzmyUs/zlfp89jQzWPJjy6P5FV48efujq0eXRw4dQ+AMA
rS77FA==
     "], "CountMatrix" -> {{0, 11, 0}, {0, 16, 0}}, 
    "IndicesMatrix" -> {{{}, {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
       27}, {}}, {{}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
       16}, {}}}, "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {27}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0003277851851851852, "SingleEvaluationTime" -> 
    0.0088371749999999992`3., "Version" -> {12.1, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7948850474045515`*^9, 3.795346789369602*^9, 
  3.7953471060188913`*^9, 3.7977289542227507`*^9, 3.7985485491208906`*^9},
 CellLabel->
  "Out[187]=",ExpressionUUID->"bfabb54a-dead-4998-a048-f8b0a3d129a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classMeasures", "[", "cmclassOhOnlyEr", "]"}]], "Input",
 CellChangeTimes->{{3.794885048103201*^9, 3.7948850542694483`*^9}},
 CellLabel->
  "In[188]:=",ExpressionUUID->"2be6cf63-bdcc-4c02-8fb0-25af57962b96"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy\"\>", "0.5925925925925926`"},
    {"\<\"Recall\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"MCC\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "Indeterminate"}], ",", 
       RowBox[{"True", "\[Rule]", "Indeterminate"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"Sensitivity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]},
    {"\<\"Specificity\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "1.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}]},
    {"\<\"AreaUnderROCCurve\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.409090909090909`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.30681818181818177`"}]}], 
      "\[RightAssociation]"}]},
    {"\<\"F1Score\"\>", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"False", "\[Rule]", "0.`"}], ",", 
       RowBox[{"True", "\[Rule]", "0.7441860465116279`"}]}], 
      "\[RightAssociation]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7948850546062493`*^9, 3.7953467894803057`*^9, 
  3.7953471061909437`*^9, 3.7977289543008614`*^9, 3.7985485491677637`*^9},
 CellLabel->
  "Out[188]//TableForm=",ExpressionUUID->"cb727027-4456-4c94-baea-\
514d4b83b5d6"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Classifier Metrics", "Section",
 CellChangeTimes->{{3.7977290577946053`*^9, 
  3.7977290619682074`*^9}},ExpressionUUID->"63aff88a-5e05-4855-a92e-\
c7197d887eb1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modelCMsEr", "=", 
   RowBox[{"{", 
    RowBox[{
    "cmclass2Der", ",", "cmclass2DerRed", ",", "cmclass2DerRedpH", ",", 
     "cmclassErAllMaccs", ",", "cmclassErRedMaccs", ",", 
     "cmclassErRedpHMaccs", ",", "cmclassOhEr", ",", "cmclassOhErRed", ",", 
     "cmclassOhErRedpH", ",", "cmclassOhOnlyEr"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7946823776547585`*^9, 3.794682421534455*^9}, {
  3.794885269712126*^9, 3.7948852866998444`*^9}, {3.795377583146908*^9, 
  3.795377601614505*^9}},
 CellLabel->
  "In[189]:=",ExpressionUUID->"3fc7539f-6e44-41ab-b135-4a4cf4ecb40e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modelsNamesEr", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<All/Er/2DPCs\>\"", ",", "\"\<Red/Er/2DPCs\>\"", ",", 
     "\"\<RedpH/Er/2DPCs\>\"", ",", "\"\<All/Er/MACCs\>\"", ",", 
     "\"\<Red/Er/MACCs\>\"", ",", "\"\<RedpH/Er/MACCs\>\"", ",", 
     "\"\<All/Er/OHE\>\"", ",", "\"\<Red/Er/OHE\>\"", ",", 
     "\"\<RedpH/Er/OHE\>\"", ",", "\"\<NA/Er/OHE\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.794682426102247*^9, 3.7946824970555687`*^9}, {
  3.7948852914162073`*^9, 3.794885338523549*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"692d5b41-e69a-43a3-bdcf-cdc7fe2a1bdc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"allClassMetricsEr", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Join", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Accuracy\>\"", "\[Rule]", " ", 
         RowBox[{"#", "[", "\"\<Accuracy\>\"", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Error\>\"", "\[Rule]", " ", 
         RowBox[{"#", "[", "\"\<Error\>\"", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Recall False\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<Recall\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Recall True\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<Recall\>\"", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Precision False\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<Precision\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Precision True\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<Precision\>\"", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<MCC False\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<MCC\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<MCC True\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<MCC\>\"", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Sensitivity False\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<Sensitivity\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Sensitivity True\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<Sensitivity\>\"", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Specificity False\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<Specificity\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<Specificity True\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<Specificity\>\"", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<AU ROC Curve False\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<AreaUnderROCCurve\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<AU ROC True\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<AreaUnderROCCurve\>\"", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<F1 Score False\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<F1Score\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<F1 Score True\>\"", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"#", "[", "\"\<F1Score\>\"", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
      "]"}], "&"}], "/@", "modelCMsEr"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelNameAssocEr", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", "\[IndentingNewLine]", 
      RowBox[{"\"\<Model Cols/Lanths/Descs\>\"", "\[Rule]", " ", "#"}], "]"}],
      "&"}], "/@", "modelsNamesEr"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classMetricsDataEr", "=", 
   RowBox[{
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"modelNameAssocEr", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", 
        RowBox[{"allClassMetricsEr", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Length", "[", "modelNameAssocEr", "]"}]}], "}"}]}], "]"}], "//",
     "Dataset"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7921925772496357`*^9, 3.7921925926126184`*^9}, {
  3.7921926930273046`*^9, 3.792192960793022*^9}, {3.7921931507740064`*^9, 
  3.792193192160818*^9}, {3.7922441656619635`*^9, 3.7922441975699997`*^9}, {
  3.7922442634258804`*^9, 3.7922442658799596`*^9}, {3.7922444654571595`*^9, 
  3.7922444727697783`*^9}, {3.7923259451630363`*^9, 3.7923259993986197`*^9}, {
  3.7923260440996094`*^9, 3.7923260676966243`*^9}, {3.7923261189417257`*^9, 
  3.7923261295077996`*^9}, {3.7941349749375486`*^9, 3.7941349815018635`*^9}, {
  3.7943052931112757`*^9, 3.7943053020077615`*^9}, {3.794682550292033*^9, 
  3.794682631399211*^9}, {3.7953476003096037`*^9, 3.795347637238635*^9}},
 CellLabel->
  "In[191]:=",ExpressionUUID->"a4de37b7-6e2b-47de-a7cb-b57033729a52"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"2\\\"}]\\) of \
\\!\\(\\*RowBox[{\\\"cmclass2Der\\\", \\\"[\\\", \\\"\\\\\\\"Recall\\\\\\\"\\\
\", \\\"]\\\"}]\\) does not exist.\"", 2, 191, 1, 16866382083633017803, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485493766775`*^9},
 CellLabel->
  "During evaluation of \
In[191]:=",ExpressionUUID->"712e80fb-1c13-4f11-8bf8-60b109505bf2"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"2\\\"}]\\) of \
\\!\\(\\*RowBox[{\\\"cmclass2Der\\\", \\\"[\\\", \
\\\"\\\\\\\"Precision\\\\\\\"\\\", \\\"]\\\"}]\\) does not exist.\"", 2, 191, 
   2, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548549426544*^9},
 CellLabel->
  "During evaluation of \
In[191]:=",ExpressionUUID->"1b7a3b28-9254-4f15-b7c7-6cb1c44addac"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"2\\\"}]\\) of \
\\!\\(\\*RowBox[{\\\"cmclass2Der\\\", \\\"[\\\", \\\"\\\\\\\"MCC\\\\\\\"\\\", \
\\\"]\\\"}]\\) does not exist.\"", 2, 191, 3, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548549592619*^9},
 CellLabel->
  "During evaluation of \
In[191]:=",ExpressionUUID->"3a852a36-3873-4774-a140-ad29f2d0ab09"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \
\\\"partw\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 191, 4, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548549610571*^9},
 CellLabel->
  "During evaluation of \
In[191]:=",ExpressionUUID->"f488bcb7-0e5b-4746-9008-f9b02c0055be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["classMetricsDataEr"], "Input",
 CellChangeTimes->{{3.7977291092688565`*^9, 3.797729112602003*^9}},
 CellLabel->
  "In[194]:=",ExpressionUUID->"a0be6905-1c91-4307-97ba-99eecd84f533"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association[
       "Model Cols/Lanths/Descs" -> "All/Er/2DPCs", 
        "Accuracy" -> $CellContext`cmclass2Der["Accuracy"], 
        "Error" -> $CellContext`cmclass2Der["Error"], "Recall False" -> 
        "Recall", "Recall True" -> Part[
          $CellContext`cmclass2Der["Recall"], 2], "Precision False" -> 
        "Precision", "Precision True" -> Part[
          $CellContext`cmclass2Der["Precision"], 2], "MCC False" -> "MCC", 
        "MCC True" -> Part[
          $CellContext`cmclass2Der["MCC"], 2], "Sensitivity False" -> 
        "Sensitivity", "Sensitivity True" -> Part[
          $CellContext`cmclass2Der["Sensitivity"], 2], "Specificity False" -> 
        "Specificity", "Specificity True" -> Part[
          $CellContext`cmclass2Der["Specificity"], 2], "AU ROC Curve False" -> 
        "AreaUnderROCCurve", "AU ROC True" -> Part[
          $CellContext`cmclass2Der["AreaUnderROCCurve"], 2], "F1 Score False" -> 
        "F1Score", "F1 Score True" -> Part[
          $CellContext`cmclass2Der["F1Score"], 2]], 
       Association[
       "Model Cols/Lanths/Descs" -> "Red/Er/2DPCs", 
        "Accuracy" -> $CellContext`cmclass2DerRed["Accuracy"], 
        "Error" -> $CellContext`cmclass2DerRed["Error"], "Recall False" -> 
        "Recall", "Recall True" -> Part[
          $CellContext`cmclass2DerRed["Recall"], 2], "Precision False" -> 
        "Precision", "Precision True" -> Part[
          $CellContext`cmclass2DerRed["Precision"], 2], "MCC False" -> "MCC", 
        "MCC True" -> Part[
          $CellContext`cmclass2DerRed["MCC"], 2], "Sensitivity False" -> 
        "Sensitivity", "Sensitivity True" -> Part[
          $CellContext`cmclass2DerRed["Sensitivity"], 2], "Specificity False" -> 
        "Specificity", "Specificity True" -> Part[
          $CellContext`cmclass2DerRed["Specificity"], 2], 
        "AU ROC Curve False" -> "AreaUnderROCCurve", "AU ROC True" -> Part[
          $CellContext`cmclass2DerRed["AreaUnderROCCurve"], 2], 
        "F1 Score False" -> "F1Score", "F1 Score True" -> Part[
          $CellContext`cmclass2DerRed["F1Score"], 2]], 
       Association[
       "Model Cols/Lanths/Descs" -> "RedpH/Er/2DPCs", 
        "Accuracy" -> $CellContext`cmclass2DerRedpH["Accuracy"], 
        "Error" -> $CellContext`cmclass2DerRedpH["Error"], "Recall False" -> 
        "Recall", "Recall True" -> Part[
          $CellContext`cmclass2DerRedpH["Recall"], 2], "Precision False" -> 
        "Precision", "Precision True" -> Part[
          $CellContext`cmclass2DerRedpH["Precision"], 2], "MCC False" -> 
        "MCC", "MCC True" -> Part[
          $CellContext`cmclass2DerRedpH["MCC"], 2], "Sensitivity False" -> 
        "Sensitivity", "Sensitivity True" -> Part[
          $CellContext`cmclass2DerRedpH["Sensitivity"], 2], 
        "Specificity False" -> "Specificity", "Specificity True" -> Part[
          $CellContext`cmclass2DerRedpH["Specificity"], 2], 
        "AU ROC Curve False" -> "AreaUnderROCCurve", "AU ROC True" -> Part[
          $CellContext`cmclass2DerRedpH["AreaUnderROCCurve"], 2], 
        "F1 Score False" -> "F1Score", "F1 Score True" -> Part[
          $CellContext`cmclass2DerRedpH["F1Score"], 2]], 
       Association[
       "Model Cols/Lanths/Descs" -> "All/Er/MACCs", "Accuracy" -> 
        0.7407407407407407, "Error" -> 0.2592592592592593, "Recall False" -> 
        0.5454545454545454, "Recall True" -> 0.875, "Precision False" -> 0.75,
         "Precision True" -> 0.7368421052631579, "MCC False" -> 
        0.4524322889411796, "MCC True" -> 0.4524322889411796, 
        "Sensitivity False" -> 0.5454545454545454, "Sensitivity True" -> 
        0.875, "Specificity False" -> 0.875, "Specificity True" -> 
        0.5454545454545454, "AU ROC Curve False" -> 0.8749999999999998, 
        "AU ROC True" -> 0.6704545454545454, "F1 Score False" -> 
        0.631578947368421, "F1 Score True" -> 0.8], 
       Association[
       "Model Cols/Lanths/Descs" -> "Red/Er/MACCs", "Accuracy" -> 
        0.5185185185185185, "Error" -> 0.4814814814814815, "Recall False" -> 
        0.09090909090909091, "Recall True" -> 0.8125, "Precision False" -> 
        0.25, "Precision True" -> 0.5652173913043478, 
        "MCC False" -> -0.13359760536066043`, 
        "MCC True" -> -0.13359760536066043`, "Sensitivity False" -> 
        0.09090909090909091, "Sensitivity True" -> 0.8125, 
        "Specificity False" -> 0.8125, "Specificity True" -> 
        0.09090909090909091, "AU ROC Curve False" -> 0.721590909090909, 
        "AU ROC True" -> 0.5625, "F1 Score False" -> 0.13333333333333333`, 
        "F1 Score True" -> 0.6666666666666666], 
       Association[
       "Model Cols/Lanths/Descs" -> "RedpH/Er/MACCs", "Accuracy" -> 
        0.5925925925925926, "Error" -> 0.40740740740740744`, "Recall False" -> 
        0., "Recall True" -> 1., "Precision False" -> Indeterminate, 
        "Precision True" -> 0.5925925925925926, "MCC False" -> Indeterminate, 
        "MCC True" -> Indeterminate, "Sensitivity False" -> 0., 
        "Sensitivity True" -> 1., "Specificity False" -> 1., 
        "Specificity True" -> 0., "AU ROC Curve False" -> 0.7670454545454545, 
        "AU ROC True" -> 0.7102272727272727, "F1 Score False" -> 0., 
        "F1 Score True" -> 0.7441860465116279], 
       Association[
       "Model Cols/Lanths/Descs" -> "All/Er/OHE", "Accuracy" -> 
        0.5185185185185185, "Error" -> 0.4814814814814815, "Recall False" -> 
        0.6363636363636364, "Recall True" -> 0.4375, "Precision False" -> 
        0.4375, "Precision True" -> 0.6363636363636364, "MCC False" -> 
        0.07386363636363624, "MCC True" -> 0.07386363636363624, 
        "Sensitivity False" -> 0.6363636363636364, "Sensitivity True" -> 
        0.4375, "Specificity False" -> 0.4375, "Specificity True" -> 
        0.6363636363636364, "AU ROC Curve False" -> 0.49431818181818177`, 
        "AU ROC True" -> 0.4943181818181818, "F1 Score False" -> 
        0.5185185185185185, "F1 Score True" -> 0.5185185185185185], 
       Association[
       "Model Cols/Lanths/Descs" -> "Red/Er/OHE", "Accuracy" -> 
        0.5925925925925926, "Error" -> 0.40740740740740744`, "Recall False" -> 
        0., "Recall True" -> 1., "Precision False" -> Indeterminate, 
        "Precision True" -> 0.5925925925925926, "MCC False" -> Indeterminate, 
        "MCC True" -> Indeterminate, "Sensitivity False" -> 0., 
        "Sensitivity True" -> 1., "Specificity False" -> 1., 
        "Specificity True" -> 0., "AU ROC Curve False" -> 0.7613636363636361, 
        "AU ROC True" -> 0.7045454545454545, "F1 Score False" -> 0., 
        "F1 Score True" -> 0.7441860465116279], 
       Association[
       "Model Cols/Lanths/Descs" -> "RedpH/Er/OHE", "Accuracy" -> 
        0.7037037037037037, "Error" -> 0.2962962962962963, "Recall False" -> 
        0.9090909090909091, "Recall True" -> 0.5625, "Precision False" -> 
        0.5882352941176471, "Precision True" -> 0.9, "MCC False" -> 
        0.47984093844023834`, "MCC True" -> 0.47984093844023834`, 
        "Sensitivity False" -> 0.9090909090909091, "Sensitivity True" -> 
        0.5625, "Specificity False" -> 0.5625, "Specificity True" -> 
        0.9090909090909091, "AU ROC Curve False" -> 0.8125, "AU ROC True" -> 
        0.8125000000000001, "F1 Score False" -> 0.7142857142857143, 
        "F1 Score True" -> 0.6923076923076923], 
       Association[
       "Model Cols/Lanths/Descs" -> "NA/Er/OHE", "Accuracy" -> 
        0.5925925925925926, "Error" -> 0.40740740740740744`, "Recall False" -> 
        0., "Recall True" -> 1., "Precision False" -> Indeterminate, 
        "Precision True" -> 0.5925925925925926, "MCC False" -> Indeterminate, 
        "MCC True" -> Indeterminate, "Sensitivity False" -> 0., 
        "Sensitivity True" -> 1., "Specificity False" -> 1., 
        "Specificity True" -> 0., "AU ROC Curve False" -> 0.409090909090909, 
        "AU ROC True" -> 0.30681818181818177`, "F1 Score False" -> 0., 
        "F1 Score True" -> 0.7441860465116279]}, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Model Cols/Lanths/Descs"} -> 1, {All, "Accuracy"} -> 
        1, {All, "Error"} -> 1, {All, "Recall False"} -> 
        1, {All, "Recall True"} -> 1, {All, "Precision False"} -> 
        1, {All, "Precision True"} -> 1, {All, "MCC False"} -> 
        1, {All, "MCC True"} -> 1, {All, "Sensitivity False"} -> 
        1, {All, "Sensitivity True"} -> 1, {All, "Specificity False"} -> 
        1, {All, "Specificity True"} -> 1, {All, "AU ROC Curve False"} -> 
        1, {All, "AU ROC True"} -> 1, {All, "F1 Score False"} -> 
        1, {All, "F1 Score True"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Model Cols/Lanths/Descs" -> 
            TypeSystem`PackageScope`AtomShape[134.40000000000003`], 
            "Accuracy" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Error" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Recall False" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Recall True" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Precision False" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Precision True" -> TypeSystem`PackageScope`UnknownShape[False], 
            "MCC False" -> TypeSystem`PackageScope`UnknownShape[False], 
            "MCC True" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Sensitivity False" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Sensitivity True" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Specificity False" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Specificity True" -> 
            TypeSystem`PackageScope`UnknownShape[False], "AU ROC Curve False" -> 
            TypeSystem`PackageScope`UnknownShape[False], "AU ROC True" -> 
            TypeSystem`PackageScope`UnknownShape[False], "F1 Score False" -> 
            TypeSystem`PackageScope`UnknownShape[False], "F1 Score True" -> 
            TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 10, {All}]], 10, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Model Cols/Lanths/Descs", "Accuracy", "Error", "Recall False", 
         "Recall True", "Precision False", "Precision True", "MCC False", 
         "MCC True", "Sensitivity False", "Sensitivity True", 
         "Specificity False", "Specificity True", "AU ROC Curve False", 
         "AU ROC True", "F1 Score False", "F1 Score True"}, {
         TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType}], 10], "Meta" -> 
     Association["ID" -> 146789298286342], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Model Cols/Lanths/Descs"} -> 1, {All, "Accuracy"} -> 
        1, {All, "Error"} -> 1, {All, "Recall False"} -> 
        1, {All, "Recall True"} -> 1, {All, "Precision False"} -> 
        1, {All, "Precision True"} -> 1, {All, "MCC False"} -> 
        1, {All, "MCC True"} -> 1, {All, "Sensitivity False"} -> 
        1, {All, "Sensitivity True"} -> 1, {All, "Specificity False"} -> 
        1, {All, "Specificity True"} -> 1, {All, "AU ROC Curve False"} -> 
        1, {All, "AU ROC True"} -> 1, {All, "F1 Score False"} -> 
        1, {All, "F1 Score True"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Model Cols/Lanths/Descs" -> 
            TypeSystem`PackageScope`AtomShape[134.40000000000003`], 
            "Accuracy" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Error" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Recall False" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Recall True" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Precision False" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Precision True" -> TypeSystem`PackageScope`UnknownShape[False], 
            "MCC False" -> TypeSystem`PackageScope`UnknownShape[False], 
            "MCC True" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Sensitivity False" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Sensitivity True" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Specificity False" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Specificity True" -> 
            TypeSystem`PackageScope`UnknownShape[False], "AU ROC Curve False" -> 
            TypeSystem`PackageScope`UnknownShape[False], "AU ROC True" -> 
            TypeSystem`PackageScope`UnknownShape[False], "F1 Score False" -> 
            TypeSystem`PackageScope`UnknownShape[False], "F1 Score True" -> 
            TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 10, {All}]], 10, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Model Cols/Lanths/Descs", "Accuracy", "Error", "Recall False", 
         "Recall True", "Precision False", "Precision True", "MCC False", 
         "MCC True", "Sensitivity False", "Sensitivity True", 
         "Specificity False", "Specificity True", "AU ROC Curve False", 
         "AU ROC True", "F1 Score False", "F1 Score True"}, {
         TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, TypeSystem`AnyType}], 10], "Path" -> {}, 
     "BaseIndices" -> {}, "DisplayedRowCount" -> 10, "DisplayedColumnCount" -> 
     10, "DataRowCount" -> 10, "DataColumnCount" -> 17, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Model Cols/Lanths/Descs", 
                    Style[
                    "Model Cols/Lanths/Descs", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Model Cols/Lanths/Descs"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Model Cols/Lanths/Descs"}, "ColumnHeader", True], 
                 "Mouse"], " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Accuracy", 
                    Style[
                    "Accuracy", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Accuracy"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Accuracy"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Error", 
                    Style[
                    "Error", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Error"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Error"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Recall False", 
                    Style[
                    "Recall False", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Recall False"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Recall False"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Recall True", 
                    Style[
                    "Recall True", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Recall True"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Recall True"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Precision False", 
                    Style[
                    "Precision False", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Precision False"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Precision False"}, "ColumnHeader", True], "Mouse"], 
                " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Precision True", 
                    Style[
                    "Precision True", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Precision True"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Precision True"}, "ColumnHeader", True], "Mouse"], 
                " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["MCC False", 
                    Style[
                    "MCC False", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MCC False"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "MCC False"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["MCC True", 
                    Style[
                    "MCC True", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MCC True"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "MCC True"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Sensitivity False", 
                    Style[
                    "Sensitivity False", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Sensitivity False"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Sensitivity False"}, "ColumnHeader", True], "Mouse"], 
                " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["All/Er/2DPCs", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cmclass2Der", "[", "\"Accuracy\"", "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cmclass2Der", "[", "\"Error\"", "]"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Recall", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{57.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2Der", "[", "\"Recall\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Precision", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{86.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2Der", "[", "\"Precision\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MCC", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2Der", "[", "\"MCC\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Sensitivity", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{105.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Red/Er/2DPCs", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cmclass2DerRed", "[", "\"Accuracy\"", "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cmclass2DerRed", "[", "\"Error\"", "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Recall", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{57.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2DerRed", "[", "\"Recall\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Precision", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{86.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2DerRed", "[", "\"Precision\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MCC", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2DerRed", "[", "\"MCC\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Sensitivity", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{105.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["RedpH/Er/2DPCs", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cmclass2DerRedpH", "[", "\"Accuracy\"", "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cmclass2DerRedpH", "[", "\"Error\"", "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Recall", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{57.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2DerRedpH", "[", "\"Recall\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Precision", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{86.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2DerRedpH", "[", "\"Precision\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MCC", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"cmclass2DerRedpH", "[", "\"MCC\"", "]"}], 
                   "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Sensitivity", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{105.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["All/Er/MACCs", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.740741"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.259259"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.545455"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.875"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.75"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.736842"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.452432"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.452432"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.545455"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Red/Er/MACCs", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.518519"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.481481"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0909091"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.8125"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.25"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.565217"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.133598"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.133598"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0909091"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["RedpH/Er/MACCs", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.592593"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.407407"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.592593"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["All/Er/OHE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.518519"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.481481"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.636364"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.4375"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.4375"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.636364"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0738636"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0738636"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.636364"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Red/Er/OHE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.592593"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.407407"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.592593"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["RedpH/Er/OHE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.703704"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.296296"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.909091"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.5625"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.588235"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.479841"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.479841"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.909091"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["NA/Er/OHE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Model Cols/Lanths/Descs"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.592593"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Accuracy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.407407"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Error"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Recall False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Recall True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Precision False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.592593"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Precision True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["MCC False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "Indeterminate", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["MCC True"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Sensitivity False"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ - 10 
                    If[True, 17, 1], {1, 17 - -10 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ - 10 
                    If[False, 17, 1], {1, 17 - -10 + 1}], Appearance -> None],
                     " ", 
                    Style[
                    Mouseover[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[
                    17, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[
                    17, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 17, 1], {1, 17 - 10 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 17, 1], {1, 17 - 10 + 1}], Appearance -> 
                    None]}], ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[
               TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{1159., {128.9, 133.1}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1159., {128.9, 133.1}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7977291129330378`*^9, 3.798548549921935*^9},
 CellLabel->
  "Out[194]=",ExpressionUUID->"c28e43f5-5572-4143-a5c6-c1e987482d94"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Make Sampling Datasets", "Section",
 CellChangeTimes->{{3.7977291888355694`*^9, 
  3.7977291931138754`*^9}},ExpressionUUID->"4c106b5a-d242-44d2-aef7-\
fd1ae864d8f4"],

Cell[CellGroupData[{

Cell["MACCs Keys", "Subsection",
 CellChangeTimes->{{3.7977292038482203`*^9, 
  3.797729205434863*^9}},ExpressionUUID->"23332509-ff6c-4315-8fad-\
667c7e788a1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataRaw", "=", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"genData2Dv2", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", 
        "10", ",", "11", ",", "12", ",", "13"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977292091355968`*^9, 3.797729218862091*^9}, {
  3.7977293185267353`*^9, 3.7977293460560913`*^9}, {3.7977296240994773`*^9, 
  3.79772963654508*^9}},
 CellLabel->
  "In[195]:=",ExpressionUUID->"b46005ab-6ef7-4134-b3ce-72eddf670489"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"get", " ", "all", " ", "the", " ", "maccs", " ", "keys"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.797730156260543*^9, 3.797730161618863*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"8af1b154-aafd-4da1-a915-735582c8e64e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccs", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{
     InterpretationBox[
      TagBox[
       StyleBox[
        StyleBox[
         FrameBox[GridBox[{
            {
             StyleBox[
              StyleBox[
               AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                BoxBaselineShift->-0.25,
                BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
               
               FontColor->RGBColor[
                0.8745098039215686, 0.2784313725490196, 0.03137254901960784]],
              ShowStringCharacters->False,
              FontFamily->"Source Sans Pro Black",
              FontSize->Rational[10, 13] Inherited,
              FontWeight->"Heavy",
              PrivateFontOptions->{"OperatorSubstitution"->False}], 
             StyleBox[
              StyleBox["\<\"MACCSKeys\"\>", "ResourceFunctionLabel"],
              ShowStringCharacters->False,
              FontSize->Rational[12, 13] Inherited]}
           }]], "ResourceFunctionFrame"],
        FrameBoxOptions->{Background->GrayLevel[0.5, 0.15],
        BaseStyle->{
         "StandardForm", LineSpacing -> {0, 0}, LineBreakWithin -> False},
        FrameMargins->{{3, 3}, {0, 0}},
        FrameStyle->Directive[
          GrayLevel[0.5, 0.35], 
          AbsoluteThickness[0.5]],
        RoundingRadius->4},
        GridBoxOptions->{FrameStyle->GrayLevel[1, 0],
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
        GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{0.25}}, "Rows" -> {-0.1, {}, 0}}}],
       {"FunctionResourceBox", 
        RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784],
         "\"MACCSKeys\""}],
      ResourceFunction[
       ResourceObject[
        Association[
        "Name" -> "MACCSKeys", "ShortName" -> "MACCSKeys", "UUID" -> 
         "f8b0f1a9-223b-4eda-9d8c-9e4928b1b029", "ResourceType" -> "Function",
          "Version" -> "1.0.0", "Description" -> 
         "Compute the 166-bit MACCS (Molecular ACCess System) key", 
         "RepositoryLocation" -> 
         URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
         "SymbolName" -> 
         "FunctionRepository`$9d04496dd1d74429862dbd9de474c06d`MACCSKeys", 
         "FunctionLocation" -> 
         CloudObject[
          "https://www.wolframcloud.com/obj/e49eb676-b131-43dc-a539-\
cec4e5e85b7c"]], {ResourceSystemBase -> Automatic}]],
      Selectable->False], "/@", "smiles"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7954098603627405`*^9, 3.7954099252933607`*^9}, {
  3.795409968908456*^9, 3.795410083911524*^9}, {3.7954102185602927`*^9, 
  3.795410368181925*^9}, {3.7959231644070606`*^9, 3.795923172071984*^9}},
 CellLabel->
  "In[197]:=",ExpressionUUID->"35837fde-3a49-4a07-81aa-129e50401642"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "make", " ", "an", " ", "assoc", " ", "of", " ", "each", " ", "maccs", " ", 
   "key", " ", "\"\<name\>\"", " ", "and", " ", "the", " ", "value"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.797730163349805*^9, 3.7977301747219367`*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"39600ed8-1fa7-4470-b743-773392234ace"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsAssoc", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<maccs\>\"", "<>", 
        RowBox[{"ToString", "[", "j", "]"}]}], "->", 
       RowBox[{
        RowBox[{"maccs", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "j", "]"}], "]"}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "maccs", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"maccs", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.795924457764222*^9, 3.7959246559957795`*^9}, {
  3.795924689825609*^9, 3.7959247935113134`*^9}, {3.797730774950071*^9, 
  3.797730823417225*^9}, {3.797730879059975*^9, 3.797730882277068*^9}},
 CellLabel->
  "In[199]:=",ExpressionUUID->"a80e9338-e661-4dd7-9807-6ed18401700c"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "get", " ", "only", " ", "the", " ", "maccs", " ", "keys", " ", "that", " ",
    "vary", " ", 
   RowBox[{"(", 
    RowBox[{
    "from", " ", "maccs", " ", "dataset", " ", "where", " ", "this", " ", 
     "was", " ", "already", " ", "computed"}], ")"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977301764903917`*^9, 3.797730194751487*^9}},
 CellLabel->
  "In[200]:=",ExpressionUUID->"9b0e9740-fc50-4f74-89c0-2b8e238257bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsRed", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Lookup", "[", 
      RowBox[{
       RowBox[{"Association", "[", 
        RowBox[{"maccsAssoc", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"First", "[", 
           RowBox[{"allDataMACCs", "[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"10", ";;"}], "}"}]}], "]"}], "]"}], "]"}], "]"}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "maccsAssoc", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797731037699054*^9, 3.797731163269812*^9}},
 CellLabel->
  "In[201]:=",ExpressionUUID->"1dd14319-e3b2-499c-8813-5d75e6a56053"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsAssocRed", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"First", "[", 
           RowBox[{"allDataMACCs", "[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"10", ";;"}], "}"}]}], "]"}], "]"}], "]"}], "]"}], 
        "]"}], ",", "#"}], "]"}], "&"}], "/@", "maccsRed"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797731387177384*^9, 3.797731469646494*^9}, {
  3.7977315006404223`*^9, 3.7977315151608515`*^9}, {3.7977315517990856`*^9, 
  3.797731581658821*^9}, {3.797731625682429*^9, 3.797731738263607*^9}, {
  3.797731801638977*^9, 3.797731804044848*^9}},
 CellLabel->
  "In[202]:=",ExpressionUUID->"4c33a966-c724-449a-b34c-5b9d5da4899c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"genDataRaw", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "#"}], "]"}], 
            "&"}], "/@", "maccsAssocRed"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"genDataRaw", "[", 
                RowBox[{"[", 
                 RowBox[{"i", "+", "1"}], "]"}], "]"}], "]"}], ",", "#"}], 
             "]"}], "&"}], "/@", "maccsAssocRed"}]}], "\[IndentingNewLine]", 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "20"}], "}"}]}], "]"}], "//", 
      "Flatten"}], "//", "DeleteDuplicates"}], "//", "Dataset"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977685099254184`*^9, 3.7977685301862717`*^9}, {
  3.797768654874099*^9, 3.797768812541133*^9}, {3.7977688550559883`*^9, 
  3.797768880494068*^9}, {3.797768914142953*^9, 3.797768924494399*^9}, {
  3.7977692894126697`*^9, 3.7977693049402647`*^9}, {3.7977734762860675`*^9, 
  3.797773481886305*^9}, {3.7977766008410673`*^9, 3.7977766009557905`*^9}, {
  3.797776930812009*^9, 3.7977769643033924`*^9}, {3.797781826838252*^9, 
  3.7977818300175962`*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"0141f667-b1cc-48d6-85b0-335dbec3d60c"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "amine", " ", "SMILES", " ", "to", " ", 
   "their", " ", "reduced", " ", "MACCS", " ", "keys"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797778366426738*^9, 3.797778376915882*^9}},
 CellLabel->
  "In[204]:=",ExpressionUUID->"1eb38862-8365-43ee-88ec-931d5f63a553"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineRedMACCsAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "maccsAssocRed"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797778190938843*^9, 3.79777836057209*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"9d87fc65-3c64-4178-be6c-9eafd11b85c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositionIndex", "[", "smiles", "]"}]], "Input",
 CellChangeTimes->{{3.7977895686983175`*^9, 3.797789573105955*^9}},
 CellLabel->
  "In[206]:=",ExpressionUUID->"4a529569-624c-418f-87d3-ad364888eeea"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NCCN\"\>", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"\<\"NCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{"\<\"NCCCNCCCCNCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{"\<\"CN(C)CCN(C)C\"\>", "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{"\<\"CNCCNC\"\>", "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{"\<\"C1CNCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{"\<\"CC1CNCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{"\<\"CC1CNC(C)CN1\"\>", "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{"\<\"C1CN2CCN1CC2\"\>", "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{"\<\"Cl.Cl.NC1CN2CCC1CC2\"\>", "\[Rule]", 
    RowBox[{"{", "13", "}"}]}], ",", 
   RowBox[{"\<\"Cl.Cl.NC1CCNC1\"\>", "\[Rule]", 
    RowBox[{"{", "14", "}"}]}], ",", 
   RowBox[{"\<\"NCC1CCCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "15", "}"}]}], ",", 
   RowBox[{"\<\"CC1=NC=CN=C1\"\>", "\[Rule]", 
    RowBox[{"{", "16", "}"}]}], ",", 
   RowBox[{"\<\"NCCNCCN\"\>", "\[Rule]", 
    RowBox[{"{", "17", "}"}]}], ",", 
   RowBox[{"\<\"C1CC(CCN1)C2CCNCC2\"\>", "\[Rule]", 
    RowBox[{"{", "18", "}"}]}], ",", 
   RowBox[{"\<\"C(CN)CN\"\>", "\[Rule]", 
    RowBox[{"{", "19", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.797789573440578*^9, 3.7977976271469975`*^9, 
  3.7985485558891315`*^9},
 CellLabel->
  "Out[206]=",ExpressionUUID->"e53127c7-c202-4b4a-8ad2-7a0375ccd965"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "list", " ", "of", " ", "the", " ", "names", " ", "of", " ", "gen", " ", 
   "data", " ", "MACCs", " ", "key", " ", "datasets"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977902116394377`*^9, 3.7977902223723288`*^9}},
 CellLabel->
  "In[207]:=",ExpressionUUID->"557c8722-697c-427c-aa27-07ba47410cc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCsList", "=", 
   RowBox[{"{", 
    RowBox[{
    "genDataMACCsA1", ",", "genDataMACCsA2", ",", "genDataMACCsA3", ",", 
     "genDataMACCsA4", ",", "genDataMACCsA5", ",", "genDataMACCsA6", ",", 
     "genDataMACCsA7", ",", "genDataMACCsA8", ",", "genDataMACCsA9", ",", 
     "genDataMACCsA10", ",", "genDataMACCsA11", ",", "genDataMACCsA12", ",", 
     "genDataMACCsA13", ",", "genDataMACCsA14", ",", "genDataMACCsA15", ",", 
     "genDataMACCsA16", ",", "genDataMACCsA17", ",", "genDataMACCsA18", ",", 
     "genDataMACCsA19"}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797789827905715*^9, 3.797789876863767*^9}, {
  3.7977900907871294`*^9, 3.7977900914457607`*^9}},
 CellLabel->
  "In[208]:=",ExpressionUUID->"82afd135-4a83-4857-828e-fd28c53de20f"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "generates", " ", "separate", " ", "generated", " ", "sampling", " ", 
   "datasets", " ", "for", " ", "each", " ", "amine", " ", "with", " ", 
   "MACCs", " ", "descriptors"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.79779017762912*^9, 3.7977902016774435`*^9}},
 CellLabel->
  "In[209]:=",ExpressionUUID->"aa3a9ec9-504a-4476-bf4d-1bf8feac45a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "genDataMACCsA1", ",", "genDataMACCsA2", ",", "genDataMACCsA3", ",", 
     "genDataMACCsA4", ",", "genDataMACCsA5", ",", "genDataMACCsA6", ",", 
     "genDataMACCsA7", ",", "genDataMACCsA8", ",", "genDataMACCsA9", ",", 
     "genDataMACCsA10", ",", "genDataMACCsA11", ",", "genDataMACCsA12", ",", 
     "genDataMACCsA13", ",", "genDataMACCsA14", ",", "genDataMACCsA15", ",", 
     "genDataMACCsA16", ",", "genDataMACCsA17", ",", "genDataMACCsA18", ",", 
     "genDataMACCsA19"}], "}"}], "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"amineRedMACCsAssoc", "[", 
           RowBox[{"smiles", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
       RowBox[{"Normal", "[", "genDataRaw", "]"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "smiles", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977893833120947`*^9, 3.797789409895822*^9}, {
  3.7977899980614743`*^9, 3.797789999643379*^9}, {3.797790893144055*^9, 
  3.7977909191332893`*^9}},
 CellLabel->
  "In[210]:=",ExpressionUUID->"d1cb9733-c2bd-4c7c-9938-a5b27f4e3d8e"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "each", " ", "smiles", " ", "string", " ", 
   "and", " ", "its", " ", "generated", " ", "sampling", " ", "dataset", " ", 
   "with", " ", "maccs", " ", "decriptors"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977901550150166`*^9, 3.7977901688104553`*^9}, {
  3.797791210847643*^9, 3.797791212053918*^9}, {3.7977977439748707`*^9, 
  3.7977977463800936`*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"228ce5b7-5d48-4080-afc7-1c9b25994f2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCsSAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "genDataMACCsList"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977899026079407`*^9, 3.7977899181563168`*^9}, 
   3.7977899684040127`*^9, {3.797790102989602*^9, 3.7977901304155207`*^9}, {
   3.7977912140535975`*^9, 3.797791225082279*^9}, {3.797797748981144*^9, 
   3.797797764176195*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"17240a08-b2ec-450f-8a42-5a3ce7ff3fe0"]
}, Closed]],

Cell[CellGroupData[{

Cell["One Hot Encoding", "Subsection",
 CellChangeTimes->{{3.7977905195781918`*^9, 
  3.7977905234438753`*^9}},ExpressionUUID->"7b2fe8b0-802f-4e04-aa8c-\
e92cb2d16398"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "one", " ", "hot", " ", "encode", " ", "for", " ", "each", " ", "amine"}], 
   ";", " ", 
   RowBox[{
   "enc", " ", "turns", " ", "True", " ", "or", " ", "False", " ", "to", " ", 
    "1", " ", "or", " ", "0"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948659943854885`*^9, 3.794866015501851*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"68dce3e4-2c01-4d8e-98dd-564d7b3a9d7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"enc", "=", 
  RowBox[{"NetEncoder", "[", "\"\<Boolean\>\"", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948651781564693`*^9, 3.794865179126934*^9}, {
  3.7948653553328924`*^9, 3.7948653589806294`*^9}, {3.7948654716834154`*^9, 
  3.794865521904889*^9}, {3.7948655533867555`*^9, 3.794865554374774*^9}, {
  3.7948655907751646`*^9, 3.79486559244794*^9}, {3.7948657221804185`*^9, 
  3.7948657249116125`*^9}, {3.79486576204962*^9, 3.7948657656069517`*^9}, {
  3.7948658033034306`*^9, 3.794865854323888*^9}},
 CellLabel->
  "In[214]:=",ExpressionUUID->"8d831da0-e5a6-4230-a51d-0abba4de9060"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Boolean\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Boolean\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7948658545894423`*^9, 3.7953467863934927`*^9, 
  3.797790576212371*^9, 3.797797635194351*^9, 3.7978055627008457`*^9, 
  3.798548185981921*^9, 3.798548564766074*^9},
 CellLabel->
  "Out[214]=",ExpressionUUID->"fe33f2f1-430c-4010-96b0-f632572bc41d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "create", " ", "True", " ", "and", " ", "False", " ", "lists", " ", "for", 
   " ", "each", " ", "amine"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948661471398582`*^9, 3.794866156451421*^9}},
 CellLabel->
  "In[215]:=",ExpressionUUID->"6ccf8bea-1093-41d0-8370-88b2da0b6c8b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"amineTandF", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"smiles", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", 
      RowBox[{"smiles", "[", 
       RowBox[{"[", "j", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "19"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1and0", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"enc", "[", "#", "]"}], "&"}], "/@", "amineTandF"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1and0Assoc", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"smiles", "[", 
         RowBox[{"[", "m", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{
        RowBox[{"amine1and0", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "[", 
        RowBox[{"[", "m", "]"}], "]"}]}], " ", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "19"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1HotAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"smiles", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{"amine1and0Assoc", "[", 
        RowBox[{"[", "n", "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "19"}], "}"}]}], "]"}], "|>"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794866185026414*^9, 3.794866559763882*^9}, {
  3.7948666019431486`*^9, 3.794866639807707*^9}, {3.794867330970943*^9, 
  3.7948673631276274`*^9}},
 CellLabel->
  "In[216]:=",ExpressionUUID->"08f31828-b0c0-43dc-9ca3-4e6566084fc4"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "list", " ", "of", " ", "gen", " ", "data", " ", "one", " ", "hot", " ", 
   "encoded", " ", "for", " ", "each", " ", "amine"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977911593124084`*^9, 3.7977911683431816`*^9}},
 CellLabel->
  "In[220]:=",ExpressionUUID->"687d7e27-83ff-4feb-b532-30d6051698d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataOheList", "=", 
   RowBox[{"{", 
    RowBox[{
    "genDataOheA1", ",", "genDataOheA2", ",", "genDataOheA3", ",", 
     "genDataOheA4", ",", "genDataOheA5", ",", "genDataOheA6", ",", 
     "genDataOheA7", ",", "genDataOheA8", ",", "genDataOheA9", ",", 
     "genDataOheA10", ",", "genDataOheA11", ",", "genDataOheA12", ",", 
     "genDataOheA13", ",", "genDataOheA14", ",", "genDataOheA15", ",", 
     "genDataOheA16", ",", "genDataOheA17", ",", "genDataOheA18", ",", 
     "genDataOheA19"}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977911030695877`*^9, 3.7977911077625537`*^9}},
 CellLabel->
  "In[221]:=",ExpressionUUID->"495ada73-b4b2-4074-96e0-ac1ea1878382"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "generated", " ", "sampling", " ", "datasets", " ", "for", " ", "each", " ",
    "amine", " ", "one", " ", "hot", " ", "encoded"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977911708534155`*^9, 3.797791182773553*^9}},
 CellLabel->
  "In[222]:=",ExpressionUUID->"a91e01e7-1c47-4cd4-8122-c62d0c725195"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "genDataOheA1", ",", "genDataOheA2", ",", "genDataOheA3", ",", 
     "genDataOheA4", ",", "genDataOheA5", ",", "genDataOheA6", ",", 
     "genDataOheA7", ",", "genDataOheA8", ",", "genDataOheA9", ",", 
     "genDataOheA10", ",", "genDataOheA11", ",", "genDataOheA12", ",", 
     "genDataOheA13", ",", "genDataOheA14", ",", "genDataOheA15", ",", 
     "genDataOheA16", ",", "genDataOheA17", ",", "genDataOheA18", ",", 
     "genDataOheA19"}], "}"}], "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"Association", "@", 
           RowBox[{"amine1HotAssoc", "[", 
            RowBox[{"smiles", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", "#"}], "]"}], 
        "&"}], "/@", 
       RowBox[{"Normal", "[", "genDataRaw", "]"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "smiles", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797790761633565*^9, 3.797790770993244*^9}, {
  3.797790993063525*^9, 3.797791094142624*^9}},
 CellLabel->
  "In[223]:=",ExpressionUUID->"c2c309de-3ed7-42df-ae31-aa1ed03d6420"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "each", " ", "smiles", " ", "string", " ", 
   "and", " ", "its", " ", "generated", " ", "sampling", " ", "dataset", " ", 
   "with", " ", "one", " ", "hot", " ", "encoded", " ", "decriptors"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7977901550150166`*^9, 3.7977901688104553`*^9}, {
  3.797791210847643*^9, 3.797791212053918*^9}},
 CellLabel->
  "In[224]:=",ExpressionUUID->"46a6ac43-4d17-4beb-b091-9a9d330167c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataOheSAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "genDataOheList"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977899026079407`*^9, 3.7977899181563168`*^9}, 
   3.7977899684040127`*^9, {3.797790102989602*^9, 3.7977901304155207`*^9}, {
   3.7977912140535975`*^9, 3.797791225082279*^9}},
 CellLabel->
  "In[225]:=",ExpressionUUID->"1b44e745-fb8b-4e3f-9978-ce4dfd58ef64"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Active Learning Sampling ", "Section",
 CellChangeTimes->{{3.7943150232371006`*^9, 
  3.794315027733412*^9}},ExpressionUUID->"454ece5d-f957-46cb-aff4-\
3b547c157af0"],

Cell[CellGroupData[{

Cell["Generate Sampling Weights", "Subsection",
 CellChangeTimes->{{3.7977913003127413`*^9, 
  3.797791304101512*^9}},ExpressionUUID->"5b61132a-d710-46a5-9fc9-\
7bb41765530e"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "this", " ", "is", " ", "now", " ", "done", " ", "in", " ", "the", " ", 
   "sampling", " ", "function"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797785710807466*^9, 3.797785715563291*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"55a66179-076c-4da0-8539-12ed2817dae7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"classErAllMaccsProbs", "=", 
   RowBox[{"classErAllMaccs", "[", 
    RowBox[{"genDataMACCsNCCN", ",", "\"\<Probabilities\>\""}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7977774063856726`*^9, {3.7977890923931127`*^9, 3.797789103294172*^9}},
 CellLabel->
  "In[227]:=",ExpressionUUID->"784fb4b9-0244-4c94-9d36-4442997f99e1"],

Cell[BoxData[
 TemplateBox[{
  "ClassifierFunction", "mlbddataev", 
   "\"The data being evaluated is not formatted correctly.\"", 2, 227, 5, 
   16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548575410512*^9},
 CellLabel->
  "During evaluation of \
In[227]:=",ExpressionUUID->"1578a690-c962-4523-a275-a76e1db4c7e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"classErAllMaccsProbsValues", "=", 
   RowBox[{"classErAllMaccsProbs", "//", "Values"}]}], ";"}]], "Input",
 CellChangeTimes->{3.797777441552047*^9},
 CellLabel->
  "In[228]:=",ExpressionUUID->"cf926b16-b06d-4a49-9a6c-c9ce310a9e3b"],

Cell[BoxData[
 TemplateBox[{
  "Values", "invrl", 
   "\"The argument \
\\!\\(\\*RowBox[{InterpretationBox[RowBox[{TagBox[\\\"ClassifierFunction\\\", \
\\\"SummaryHead\\\"], \\\"[\\\", DynamicModuleBox[{Typeset`open$$ = False, \
Set[Typeset`embedState$$, \\\"Ready\\\"]}, \
TemplateBox[List[PaneSelectorBox[List[Rule[False, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SquarePlusIconMedium\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, True]], Rule[Appearance, None], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], Rule[Alignment, List[Center, \
Center]], Rule[ImageSize, Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\
\"FontCapHeight\\\"], Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
GraphicsBox[List[List[PointSize[0.13`], GrayLevel[0.45`], \
PointBox[List[List[0.9821769431797024`, -0.440194219686987`], \
List[1.1339776261519132`, 0.8056918676854272`], List[0.5279892326667741`, \
0.6574306661126254`], List[0.022147046479890797`, 1.4937877187998898`]]], \
GrayLevel[0.7`], PointBox[List[List[-0.9815166384819979`, \
0.15045697525228735`], List[-0.5923526886966953`, -0.33441771553094035`], \
List[-0.005656646679640442`, -1.462421365651345`], List[-1.0734370436522753`, \
-1.3729645043477454`]]]], List[GrayLevel[0.55`], AbsoluteThickness[1.5`], \
LineBox[List[List[-1.`, 1.5`], List[1, -1.6`]]]]], List[Rule[Axes, \
List[False, False]], Rule[AxesLabel, List[None, None]], Rule[AxesOrigin, \
List[0, 0]], Rule[BaseStyle, List[Rule[FontFamily, \\\"Arial\\\"], \
AbsoluteThickness[1.5`]]], Rule[DisplayFunction, Identity], Rule[Frame, \
List[List[True, True], List[True, True]]], Rule[FrameLabel, List[List[None, \
None], List[None, None]]], Rule[FrameStyle, Directive[Thickness[Tiny], \
GrayLevel[0.7`]]], Rule[FrameTicks, List[List[None, None], List[None, \
None]]], Rule[GridLines, List[None, None]], Rule[LabelStyle, \
List[Rule[FontFamily, \\\"Arial\\\"]]], Rule[Method, \
List[Rule[\\\"ScalingFunctions\\\", None]]], Rule[PlotRange, List[List[-1.`, \
1], List[-1.3`, 1.1`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[0.7`, 0.7`], List[0.7`, 0.7`]]], Rule[Ticks, \
List[None, None]]], Rule[Axes, False], Rule[AspectRatio, 1], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]], Rule[Frame, True], \
Rule[FrameTicks, None], Rule[FrameStyle, Directive[Opacity[0.5`], \
Thickness[Tiny], RGBColor[0.368417`, 0.506779`, 0.709798`]]], \
Rule[Background, GrayLevel[0.94`]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Input type: \\\\\\\"\\\", \\\
\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TagBox[TooltipBox[TemplateBox[List[\\\"\\\\\\\"Mixed\\\\\\\"\\\", \
StyleBox[TemplateBox[List[\\\"\\\\\\\" (number: \\\\\\\"\\\", \\\"57\\\", \
\\\"\\\\\\\")\\\\\\\"\\\"], \\\"RowDefault\\\"], GrayLevel[0.5`], \
Rule[StripOnInput, False]]], \\\"RowDefault\\\"], RowBox[List[\\\"{\\\", \
RowBox[List[\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\"]], \\\"}\\\"]]], \
Function[Annotation[Slot[1], Short[List[\\\"Numerical\\\", \\\"Numerical\\\", \
\\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\"], 10], \\\"Tooltip\\\"]]], \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"Classes: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\",\\\", \\\"\\\\\\\",\\\\\\\"\\\", \\\"False\\\", \
\\\"True\\\"], \\\"RowWithSeparators\\\"], \\\"SummaryItem\\\"]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\
\\\"Columns\\\", List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaseStyle, List[Rule[ShowStringCharacters, False], Rule[NumberMarks, \
False], Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Rows\\\", List[List[Top]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaselinePosition, List[1, 1]]]], Rule[True, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SquareMinusIconMedium\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, False]], Rule[Appearance, None], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], Rule[Alignment, List[Center, \
Center]], Rule[ImageSize, Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\
\"FontCapHeight\\\"], Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
GraphicsBox[List[List[PointSize[0.13`], GrayLevel[0.45`], \
PointBox[List[List[0.9821769431797024`, -0.440194219686987`], \
List[1.1339776261519132`, 0.8056918676854272`], List[0.5279892326667741`, \
0.6574306661126254`], List[0.022147046479890797`, 1.4937877187998898`]]], \
GrayLevel[0.7`], PointBox[List[List[-0.9815166384819979`, \
0.15045697525228735`], List[-0.5923526886966953`, -0.33441771553094035`], \
List[-0.005656646679640442`, -1.462421365651345`], List[-1.0734370436522753`, \
-1.3729645043477454`]]]], List[GrayLevel[0.55`], AbsoluteThickness[1.5`], \
LineBox[List[List[-1.`, 1.5`], List[1, -1.6`]]]]], List[Rule[Axes, \
List[False, False]], Rule[AxesLabel, List[None, None]], Rule[AxesOrigin, \
List[0, 0]], Rule[BaseStyle, List[Rule[FontFamily, \\\"Arial\\\"], \
AbsoluteThickness[1.5`]]], Rule[DisplayFunction, Identity], Rule[Frame, \
List[List[True, True], List[True, True]]], Rule[FrameLabel, List[List[None, \
None], List[None, None]]], Rule[FrameStyle, Directive[Thickness[Tiny], \
GrayLevel[0.7`]]], Rule[FrameTicks, List[List[None, None], List[None, \
None]]], Rule[GridLines, List[None, None]], Rule[LabelStyle, \
List[Rule[FontFamily, \\\"Arial\\\"]]], Rule[Method, \
List[Rule[\\\"ScalingFunctions\\\", None]]], Rule[PlotRange, List[List[-1.`, \
1], List[-1.3`, 1.1`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[0.7`, 0.7`], List[0.7`, 0.7`]]], Rule[Ticks, \
List[None, None]]], Rule[Axes, False], Rule[AspectRatio, 1], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]], Rule[Frame, True], \
Rule[FrameTicks, None], Rule[FrameStyle, Directive[Opacity[0.5`], \
Thickness[Tiny], RGBColor[0.368417`, 0.506779`, 0.709798`]]], \
Rule[Background, GrayLevel[0.94`]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Input type: \\\\\\\"\\\", \\\
\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TagBox[TooltipBox[TemplateBox[List[\\\"\\\\\\\"Mixed\\\\\\\"\\\", \
StyleBox[TemplateBox[List[\\\"\\\\\\\" (number: \\\\\\\"\\\", \\\"57\\\", \
\\\"\\\\\\\")\\\\\\\"\\\"], \\\"RowDefault\\\"], GrayLevel[0.5`], \
Rule[StripOnInput, False]]], \\\"RowDefault\\\"], RowBox[List[\\\"{\\\", \
RowBox[List[\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\"]], \\\"}\\\"]]], \
Function[Annotation[Slot[1], Short[List[\\\"Numerical\\\", \\\"Numerical\\\", \
\\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\"], 10], \\\"Tooltip\\\"]]], \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"Classes: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\",\\\", \\\"\\\\\\\",\\\\\\\"\\\", \\\"False\\\", \
\\\"True\\\"], \\\"RowWithSeparators\\\"], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Method: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"NearestNeighbors\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Number of training examples: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"110\\\", \\\"SummaryItem\\\"]]]]], Rule[GridBoxAlignment, \
List[Rule[\\\"Columns\\\", List[List[Left]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[AutoDelete, False], Rule[GridBoxItemSize, \
List[Rule[\\\"Columns\\\", List[List[Automatic]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\\\"Columns\\\", \
List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaseStyle, \
List[Rule[ShowStringCharacters, False], Rule[NumberMarks, False], \
Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Rows\\\", List[List[Top]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaselinePosition, List[1, 1]]]]], Dynamic[Typeset`open$$], \
Rule[ImageSize, Automatic]]], \\\"SummaryPanel\\\"], \
RuleDelayed[DynamicModuleValues, List[]]], \\\"]\\\"}], \
ClassifierFunction[Association[Rule[\\\"ExampleNumber\\\", 110], \
Rule[\\\"ClassNumber\\\", 2], Rule[\\\"Input\\\", \
Association[Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"ToMLDataset\\\", Association[Rule[\\\"Input\\\
\", Association[Rule[\\\"Ln Mole Fraction\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"]]], Rule[\\\"H2SeO4 Mole Fraction\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"Sodium Oxalate \
Mole Fraction\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\
\\\"Amine Mole Fraction\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"]]], Rule[\\\"H2O Mole Fraction\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"pH\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs53\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs54\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs62\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs65\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs74\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs79\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs80\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs82\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs83\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs84\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs85\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs86\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs90\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs91\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs93\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs96\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs98\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs100\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs103\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs104\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs105\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs108\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs111\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs115\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs116\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs118\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs120\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs121\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs122\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs128\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs129\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs131\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs133\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs134\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs137\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs138\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs141\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs145\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs147\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs148\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs149\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs151\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs153\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs155\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs156\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs158\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs160\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs162\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs163\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs165\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs166\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f2\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f3\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f4\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f5\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f6\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f7\\\", Association[Rule[\\\"Type\\\", \\\
\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f8\\\", Association[Rule[\
\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f9\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f10\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f11\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f12\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f13\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f14\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f15\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f16\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f17\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f18\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f19\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f20\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f21\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f22\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f23\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f24\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f25\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f26\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f27\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f28\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f29\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f30\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f31\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f32\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f33\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f34\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f35\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f36\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f37\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f38\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f39\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f40\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f41\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f42\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f43\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f44\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f45\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f46\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f47\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f48\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f49\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f50\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f51\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f52\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f53\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f54\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f55\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f56\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f57\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Preprocessor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"FromNamedFeatures\\\", Association[Rule[\
\\\"FeatureNames\\\", List[\\\"Ln Mole Fraction\\\", \\\"H2SeO4 Mole Fraction\
\\\", \\\"Sodium Oxalate Mole Fraction\\\", \\\"Amine Mole Fraction\\\", \
\\\"H2O Mole Fraction\\\", \\\"pH\\\", \\\"maccs53\\\", \\\"maccs54\\\", \
\\\"maccs62\\\", \\\"maccs65\\\", \\\"maccs74\\\", \\\"maccs79\\\", \
\\\"maccs80\\\", \\\"maccs82\\\", \\\"maccs83\\\", \\\"maccs84\\\", \
\\\"maccs85\\\", \\\"maccs86\\\", \\\"maccs90\\\", \\\"maccs91\\\", \
\\\"maccs93\\\", \\\"maccs96\\\", \\\"maccs98\\\", \\\"maccs100\\\", \
\\\"maccs103\\\", \\\"maccs104\\\", \\\"maccs105\\\", \\\"maccs108\\\", \
\\\"maccs111\\\", \\\"maccs115\\\", \\\"maccs116\\\", \\\"maccs118\\\", \
\\\"maccs120\\\", \\\"maccs121\\\", \\\"maccs122\\\", \\\"maccs128\\\", \
\\\"maccs129\\\", \\\"maccs131\\\", \\\"maccs133\\\", \\\"maccs134\\\", \
\\\"maccs137\\\", \\\"maccs138\\\", \\\"maccs141\\\", \\\"maccs145\\\", \
\\\"maccs147\\\", \\\"maccs148\\\", \\\"maccs149\\\", \\\"maccs151\\\", \
\\\"maccs153\\\", \\\"maccs155\\\", \\\"maccs156\\\", \\\"maccs158\\\", \
\\\"maccs160\\\", \\\"maccs162\\\", \\\"maccs163\\\", \\\"maccs165\\\", \
\\\"maccs166\\\"]]]], MachineLearning`MLProcessor[\\\"Transpose\\\", \
Association[Rule[\\\"FeatureNumber\\\", 57]]], MachineLearning`MLProcessor[\\\
\"WrapMLDataset\\\", Association[Rule[\\\"FeatureTypes\\\", \
List[\\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\
\", \\\"Numerical\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\"]], Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\", \\\"f2\\\", \
\\\"f3\\\", \\\"f4\\\", \\\"f5\\\", \\\"f6\\\", \\\"f7\\\", \\\"f8\\\", \
\\\"f9\\\", \\\"f10\\\", \\\"f11\\\", \\\"f12\\\", \\\"f13\\\", \\\"f14\\\", \
\\\"f15\\\", \\\"f16\\\", \\\"f17\\\", \\\"f18\\\", \\\"f19\\\", \\\"f20\\\", \
\\\"f21\\\", \\\"f22\\\", \\\"f23\\\", \\\"f24\\\", \\\"f25\\\", \\\"f26\\\", \
\\\"f27\\\", \\\"f28\\\", \\\"f29\\\", \\\"f30\\\", \\\"f31\\\", \\\"f32\\\", \
\\\"f33\\\", \\\"f34\\\", \\\"f35\\\", \\\"f36\\\", \\\"f37\\\", \\\"f38\\\", \
\\\"f39\\\", \\\"f40\\\", \\\"f41\\\", \\\"f42\\\", \\\"f43\\\", \\\"f44\\\", \
\\\"f45\\\", \\\"f46\\\", \\\"f47\\\", \\\"f48\\\", \\\"f49\\\", \\\"f50\\\", \
\\\"f51\\\", \\\"f52\\\", \\\"f53\\\", \\\"f54\\\", \\\"f55\\\", \\\"f56\\\", \
\\\"f57\\\"]], Rule[\\\"FeatureWeights\\\", Automatic], \
Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]], Rule[\\\"StructurePreserving\
\\\", False]]]]]]]], Rule[\\\"ScalarFeature\\\", False], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"Processor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f2\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f3\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f4\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f5\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f6\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f10\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f24\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f29\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f42\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f49\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f52\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f54\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f7\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f8\\\", Association[Rule[\\\"Type\\\", \\\
\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f9\\\", Association[Rule[\
\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f11\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f12\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f13\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f14\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f15\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f16\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f17\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f18\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f19\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f20\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f21\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f22\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f23\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f25\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f26\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f27\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f28\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f30\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f31\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f32\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f33\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f34\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f35\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f36\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f37\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f38\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f39\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f40\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f41\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f43\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f44\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f45\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f46\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f47\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f48\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f50\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f51\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f53\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f55\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f56\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f57\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
57.`]]]]], Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f2\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f3\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f4\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f5\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f6\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f10\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f24\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f29\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f42\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f49\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f52\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f54\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"(f1f2f3f4f5f6f10f24f29f42f49f52f54)\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
13]]]]], Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
3843819132712164175]]], \
MachineLearning`MLProcessor[\\\"NumericalVectorStandardize\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"(f1f2f3f4f5f6f10f24f29f42f49f52f54)\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
13]]]]], Rule[\\\"Mean\\\", List[0.0027125744939508526`, \
0.03661327540196216`, 0.0013702662912860152`, 0.005885270631865775`, \
0.9534186131809349`, 2.436363636363636`, 0.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.`]], \
Rule[\\\"StandardDeviation\\\", List[0.0008922678396605211`, \
0.007732101328696449`, 0.0011033857541175838`, 0.0028718051216307847`, \
0.006045733366698505`, 1.8267072847427503`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`]], Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
841287822409083141], Rule[\\\"Output\\\", \
Association[Rule[\\\"(f1f2f3f4f5f6f10f24f29f42f49f52f54)\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
13]]]]]]], MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f7\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f8\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f9\\\", Association[Rule[\\\"Type\\\", \\\
\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f11\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f12\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f13\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f14\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f15\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f16\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f17\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f18\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f19\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f20\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f21\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f22\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f23\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f25\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f26\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f27\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f28\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f30\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f31\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f32\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f33\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f34\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f35\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f36\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f37\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f38\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f39\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f40\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f41\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f43\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f44\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f45\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f46\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f47\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f48\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f50\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f51\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f53\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f55\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f56\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f57\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"BooleanVector\\\"], Rule[\\\"Weight\\\", 44]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
7898357694074848566]]], \
MachineLearning`MLProcessor[\\\"ConformBooleanVector\\\", Association[Rule[\\\
\"Invertibility\\\", \\\"Perfect\\\"], Rule[\\\"Missing\\\", \
\\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", True], \
Rule[\\\"Input\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"BooleanVector\\\"], Rule[\\\"Weight\\\", 44]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", 8596124423182320670], \
Rule[\\\"Output\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"BooleanVector\\\"], Rule[\\\"Weight\\\", 44]]]]]]], \
MachineLearning`MLProcessor[\\\"BooleanVectorToNumericalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"BooleanVector\\\"], Rule[\\\"Weight\\\", 44]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", 8693524375696191030], \
Rule[\\\"Output\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 44]]]]]]], \
MachineLearning`MLProcessor[\\\"MergeVectors\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"(f1f2f3f4f5f6f10f24f29f42f49f52f54)\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
13]]], Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 44]]]]], \
Rule[\\\"Spans\\\", List[Span[1, 13], Span[14, 57]]], Rule[\\\"Wrappers\\\", \
List[Identity, Identity]], Rule[\\\"Output\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Weight\\\", List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`]], Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
102437435096265169]]], MachineLearning`MLProcessor[\\\"ImputeMissing\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Imputed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Weight\\\", List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`]], Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]]]], \
Rule[\\\"Imputer\\\", \
Function[DimensionReducerFunction[Association[Rule[\\\"ExampleNumber\\\", \
110], Rule[\\\"Imputer\\\", \
MachineLearning`MLProcessor[\\\"ImputeMissing\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Imputed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Fill\\\", List[1.1556412392689129`*^-15, \
6.207156001313375`*^-16, -4.289498049688105`*^-17, 5.752973854875811`*^-16, \
4.703863561287976`*^-14, 1.8066356491627547`*^-16, 0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.13636363636363635`, 0.6727272727272727`, 0.01818181818181818`, \
0.045454545454545456`, 0.7272727272727273`, 0.13636363636363635`, \
0.9454545454545454`, 0.07272727272727272`, 0.6`, 0.05454545454545454`, \
0.45454545454545453`, 0.39999999999999997`, 0.6363636363636364`, \
0.10909090909090909`, 0.07272727272727272`, 0.36363636363636365`, \
0.07272727272727272`, 0.9454545454545454`, 0.00909090909090909`, \
0.08181818181818182`, 0.22727272727272727`, 0.22727272727272727`, \
0.9636363636363636`, 0.2909090909090909`, 0.43636363636363634`, \
0.05454545454545454`, 0.43636363636363634`, 0.6454545454545454`, \
0.9454545454545454`, 0.07272727272727272`, 0.07272727272727272`, \
0.43636363636363634`, 0.045454545454545456`, 0.00909090909090909`, \
0.9636363636363636`, 0.05454545454545454`, 0.14545454545454545`, \
0.9454545454545454`, 0.6363636363636364`, 0.2636363636363636`, \
0.22727272727272727`, 0.36363636363636365`, 0.43636363636363634`, \
0.07272727272727272`]], Rule[\\\"Method\\\", \\\"Naive\\\"], \
Rule[\\\"VectorLength\\\", 57], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"]]]], Rule[\\\"RandomImputer\\\", \
MachineLearning`MLProcessor[\\\"ImputeMissing\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Imputed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Mean\\\", List[1.1556412392689129`*^-15, \
6.207156001313375`*^-16, -4.289498049688105`*^-17, 5.752973854875811`*^-16, \
4.703863561287976`*^-14, 1.8066356491627547`*^-16, 0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.13636363636363635`, 0.6727272727272727`, 0.01818181818181818`, \
0.045454545454545456`, 0.7272727272727273`, 0.13636363636363635`, \
0.9454545454545454`, 0.07272727272727272`, 0.6`, 0.05454545454545454`, \
0.45454545454545453`, 0.39999999999999997`, 0.6363636363636364`, \
0.10909090909090909`, 0.07272727272727272`, 0.36363636363636365`, \
0.07272727272727272`, 0.9454545454545454`, 0.00909090909090909`, \
0.08181818181818182`, 0.22727272727272727`, 0.22727272727272727`, \
0.9636363636363636`, 0.2909090909090909`, 0.43636363636363634`, \
0.05454545454545454`, 0.43636363636363634`, 0.6454545454545454`, \
0.9454545454545454`, 0.07272727272727272`, 0.07272727272727272`, \
0.43636363636363634`, 0.045454545454545456`, 0.00909090909090909`, \
0.9636363636363636`, 0.05454545454545454`, 0.14545454545454545`, \
0.9454545454545454`, 0.6363636363636364`, 0.2636363636363636`, \
0.22727272727272727`, 0.36363636363636365`, 0.43636363636363634`, \
0.07272727272727272`]], Rule[\\\"StandardDeviation\\\", \
List[0.9999999999999958`, 0.999999999999997`, 1.0000000000000004`, \
0.9999999999999991`, 0.9999999999846566`, 0.9999999999999999`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 0.3431742925123068`, 0.4692177418386887`, \
0.133608531424537`, 0.20829889522526546`, 0.4453617714151233`, \
0.3431742925123068`, 0.22709083630539634`, 0.25968830649246727`, \
0.4898979485566356`, 0.22709083630539628`, 0.4979295977319692`, \
0.4898979485566356`, 0.48104569292083466`, 0.3117532399905863`, \
0.25968830649246727`, 0.48104569292083466`, 0.25968830649246727`, \
0.22709083630539634`, 0.09491187735373227`, 0.27408751693966066`, \
0.4190702026042222`, 0.4190702026042222`, 0.18719327529067264`, \
0.45418167261079256`, 0.4959338798903947`, 0.22709083630539628`, \
0.4959338798903947`, 0.47837534970628615`, 0.22709083630539634`, \
0.25968830649246727`, 0.25968830649246727`, 0.4959338798903947`, \
0.20829889522526546`, 0.09491187735373227`, 0.18719327529067264`, \
0.22709083630539628`, 0.35255853508482393`, 0.22709083630539634`, \
0.48104569292083466`, 0.44060439331100487`, 0.4190702026042222`, \
0.48104569292083466`, 0.4959338798903947`, 0.25968830649246727`]], \
Rule[\\\"Method\\\", \\\"NaiveSampler\\\"], Rule[\\\"VectorLength\\\", 57], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"]]]], Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"ToMLDataset\\\", Association[Rule[\\\"Input\\\
\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Length\\\", 57]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Preprocessor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"NumericalVector\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
Automatic], Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]], Rule[\\\"StructurePreserving\
\\\", False]]]]]]]], Rule[\\\"ScalarFeature\\\", True], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"Processor\\\", \
MachineLearning`MLProcessor[\\\"Identity\\\"]], Rule[\\\"Padder\\\", \
MachineLearning`MLProcessor[\\\"Identity\\\"]], Rule[\\\"PostProcessor\\\", \
MachineLearning`MLProcessor[\\\"FromMLDataset\\\", \
Association[Rule[\\\"DatasetFormat\\\", Automatic], Rule[\\\"Input\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Length\\\", 14]]]]], \
Rule[\\\"InversePreprocessor\\\", \
MachineLearning`MLProcessor[\\\"Sequence\\\", Association[Rule[\\\"Processors\
\\\", List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"NumericalVector\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
List[1]], Rule[\\\"ExampleWeights\\\", 1], Rule[\\\"StructurePreserving\\\", \
False]]]]]]]], Rule[\\\"ScalarFeature\\\", True], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"StructurePreserving\\\", False], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], Rule[\\\"Model\\\", \
Association[Rule[\\\"Matrix\\\", List[List[0.03245165611395223`, \
-0.09952799612084376`, 0.03135605008943762`, -0.07799892104580645`, \
0.024545501141558155`, 0.34270135403492974`, 0.2224247353052048`, \
-0.14003328534080667`, -0.3223983535600037`, 0.03570145826604417`, \
0.20206973496783212`, 0.1015869172290205`, -0.31969023506963834`, \
-0.19613168953242963`], List[0.016144543937139193`, 0.014957068956911231`, \
-0.08486631555729944`, 0.18664025034266918`, -0.32310783361848816`, \
-0.23730486168564088`, -0.3532860535371953`, 0.06929370770266648`, \
0.11363025657953939`, 0.02372574191594997`, -0.024395450760975816`, \
-0.11746423207867229`, -0.046488061096974606`, -0.16822578434760097`], \
List[-0.007265742494575896`, 0.053492522893529654`, 0.05707674758624638`, \
-0.21401016673746992`, 0.28907278137735853`, 0.04986948248396654`, \
-0.17658776210473118`, -0.144302667464534`, 0.021876411815031332`, \
0.13705921460527792`, 0.19588189169755998`, -0.17386332161586918`, \
-0.02973929339672264`, -0.34723275849803265`], List[0.00873580928010474`, \
-0.12230356795071623`, 0.07790540549755934`, -0.1310163852209612`, \
0.06844977379280613`, 0.3613871983543503`, 0.0811346740595157`, \
-0.18383912900825877`, -0.23829162337020476`, 0.09424289488320571`, \
0.0401134815031544`, -0.17550684217450813`, -0.08642557919298334`, \
-0.27380657304379663`], List[-0.02826083014776961`, 0.04389296820749298`, \
0.0564877944181755`, -0.1258964061796123`, 0.32433917105247473`, \
0.07215418368892416`, 0.4126914673810231`, 0.045707091371820545`, \
0.011455021856108139`, -0.10539358553601419`, -0.053426705986982834`, \
0.25033561264682813`, 0.15311807383594256`, 0.43753031221773175`], \
List[0.02457041008794963`, -0.07367378601736649`, -0.0138241401863818`, \
0.05492022942988034`, -0.16703061483597537`, 0.07075045332091506`, \
-0.08404547280980118`, -0.17058562483662987`, 0.01564583525476264`, \
0.37146514425859156`, 0.5625013373150635`, 0.30391682471726544`, \
0.6056688360972544`, 0.031441926288713465`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[-0.08774094123535738`, \
-0.06519644547577128`, -0.2563403590375448`, -0.04761978670783118`, \
0.04358371266502659`, -0.03262229607513306`, 0.030062685299220057`, \
0.15601537782487712`, 0.02634474233237486`, 0.438803720598793`, \
-0.07584763230416341`, 0.1202611484992328`, -0.2096326383179573`, \
0.1214415055284201`], List[-0.10776429103799448`, 0.12921480553030734`, \
0.01736756595046111`, -0.17819764427276438`, -0.24419777512059868`, \
0.28931689507347585`, -0.1664287134587439`, -0.11955008201938577`, \
0.05005851459667067`, -0.15752499695493213`, -0.12823133299588016`, \
0.09572650524436747`, 0.04325356114689656`, 0.11920075474002827`], \
List[-0.021602465969270596`, 0.03955672291826634`, 0.033090999495653514`, \
0.0707500760438793`, 0.11612607173880629`, -0.03663571273656884`, \
0.4088769122050876`, 0.07156376663781844`, 0.3313850530211541`, \
0.02511400072725179`, -0.3312793949738888`, 0.11051440459546436`, \
0.3577340072380851`, -0.5720800067468559`], List[0.24441332085536543`, \
0.057387460504625135`, -0.11088192762799663`, 0.028884902732674227`, \
0.003715666824803957`, -0.08339882456495762`, 0.06461229507905568`, \
-0.2668568429454949`, -0.0023458198296804067`, 0.0674309762368342`, \
-0.07916164794151394`, -0.05420246948533662`, -0.006375256911595344`, \
0.04991981987027299`], List[0.014452356909368512`, 0.17543031609447504`, \
-0.04108350357866972`, -0.1304575391611399`, -0.21708719598717066`, \
0.32188855077446044`, -0.18296817378584052`, -0.15502393424323138`, \
0.035992025749324724`, -0.15892926896111914`, -0.15199869336288782`, \
0.09095620020862612`, 0.05463217676594171`, 0.13525794409248118`], \
List[-0.08774094123535736`, -0.06519644547577126`, -0.25634035903754476`, \
-0.04761978670783112`, 0.04358371266502661`, -0.032622296075133124`, \
0.030062685299220085`, 0.15601537782487712`, 0.026344742332374875`, \
0.43880372059879325`, -0.07584763230416333`, 0.12026114849923275`, \
-0.20963263831795736`, 0.12144150552842015`], List[-0.2510072422707461`, \
-0.07706201341017506`, 0.11645644728121209`, -0.11234577284777522`, \
-0.07882128023721373`, -0.03348543302195212`, 0.0149531568022209`, \
0.05701117075076439`, 0.03284531844464206`, -0.013794051098972415`, \
0.03314088296133147`, 0.019411440155343816`, -0.01777149971603439`, \
-0.018968658905368398`], List[-0.11657742208957561`, 0.015007408325123194`, \
-0.3145531337361862`, -0.061385783432568536`, 0.0025001604380474433`, \
0.03657457625565273`, 0.035114132518880584`, -0.014692565841128716`, \
0.004425426618041083`, -0.09270647710556838`, 0.041606871831112335`, \
-0.0543839216149718`, 0.05365230052425651`, -0.03437400492025116`], \
List[-0.07766403628328286`, -0.2630769362703717`, -0.07046844463944014`, \
0.043070601765481276`, 0.08764859474490103`, -0.008557655771896818`, \
-0.13055684868768114`, -0.0991481452809158`, -0.1772819843048149`, \
-0.08590356136784202`, -0.202430459346256`, 0.06232553014680138`, \
0.15692228061498045`, 0.03282789799900144`], List[0.25100724227074617`, \
0.07706201341017505`, -0.11645644728121209`, 0.11234577284777522`, \
0.07882128023721371`, 0.0334854330219521`, -0.014953156802220901`, \
-0.05701117075076436`, -0.0328453184446421`, 0.013794051098972405`, \
-0.033140882961331476`, -0.019411440155343747`, 0.01777149971603442`, \
0.01896865890536832`], List[0.018654488875125903`, 0.22089151709243104`, \
-0.1110552454721333`, 0.026735153050250027`, -0.21269578128122374`, \
0.05207134190027181`, 0.25617432181017097`, 0.10437734329478753`, \
0.15011082801124165`, -0.049466737574846126`, 0.20013195226031152`, \
-0.07354606976783358`, -0.11376439102457905`, 0.06093548908436362`], \
List[-0.09417885184638751`, -0.14812732776888304`, -0.12355499528948648`, \
0.12258317390487708`, 0.16351504440154818`, -0.2948161657918956`, \
-0.05934622843141386`, -0.02401159338486699`, -0.21424022702830478`, \
0.011142015663092777`, 0.08531145669202476`, 0.27000589013152076`, \
-0.1729921357255514`, -0.11152914003460382`], List[-0.16946096430124183`, \
0.13219143478275014`, 0.007584097888372817`, 0.14284882947940233`, \
0.12279298339507395`, -0.24835062213179374`, 0.06951247942265046`, \
-0.17144260331302835`, -0.10044147788264077`, -0.20811636525478985`, \
0.21939278569311588`, -0.11192555058983573`, -0.00778909356916728`, \
0.013833745480516389`], List[0.2134157267458405`, 0.036902474387511076`, \
-0.056846767148217216`, -0.15140696117744712`, -0.1692819588555343`, \
-0.0826859576735042`, 0.08943917875058502`, 0.06662316638792964`, \
0.12172056430336949`, -0.16817219382892176`, 0.1767528739122658`, \
0.2900847900053981`, -0.19192596792839445`, -0.1570768089991252`], \
List[-0.11657742208957562`, 0.015007408325123206`, -0.31455313373618615`, \
-0.061385783432568536`, 0.0025001604380474503`, 0.036574576255652726`, \
0.035114132518880584`, -0.01469256584112872`, 0.004425426618041068`, \
-0.09270647710556824`, 0.04160687183111226`, -0.054383921614971686`, \
0.05365230052425639`, -0.034374004920251146`], List[-0.08481433740049159`, \
0.2584514045296462`, 0.12374117672421343`, 0.11110761541315085`, \
0.016889976637183717`, 0.030151356161037774`, -0.060229897553370895`, \
-0.08237359275598959`, 0.006451702050157871`, 0.11770164099008973`, \
-0.07670806775476186`, 0.16776838581755685`, -0.09062825166129203`, \
-0.06032802692400287`], List[-0.11657742208957562`, 0.015007408325123206`, \
-0.31455313373618615`, -0.06138578343256855`, 0.0025001604380474572`, \
0.036574576255652726`, 0.03511413251888057`, -0.01469256584112871`, \
0.004425426618041061`, -0.09270647710556826`, 0.04160687183111225`, \
-0.05438392161497168`, 0.053652300524256395`, -0.03437400492025114`], \
List[-0.2510072422707461`, -0.07706201341017499`, 0.11645644728121203`, \
-0.11234577284777524`, -0.07882128023721373`, -0.03348543302195207`, \
0.01495315680222098`, 0.0570111707507644`, 0.032845318444642155`, \
-0.01379405109897244`, 0.03314088296133154`, 0.01941144015534365`, \
-0.01777149971603444`, -0.018968658905368224`], List[0.06416920646048685`, \
0.05843665307690034`, -0.035291778798162324`, 0.20541161682864434`, \
0.1804370710029542`, 0.26315060564954307`, -0.177579403510718`, \
0.4492511613208646`, -0.07343906105042251`, -0.11498345157914433`, \
0.09443805383213298`, 0.07251099151540374`, 0.056512460336103215`, \
-0.06417147025456651`], List[-0.029886501615090977`, 0.15689387870136248`, \
0.05642274554109648`, -0.03656585746547356`, -0.1718146094710993`, \
-0.08657753804065306`, 0.1255443292512412`, 0.18505962274171175`, \
-0.4887344350676738`, 0.16919127865159267`, -0.14693783073526528`, \
-0.25772107464176963`, 0.2409858757702798`, 0.029594446914944436`], \
List[0.1340717922436073`, 0.17981031237603745`, 0.01951162886009206`, \
-0.25275002976723204`, -0.08515836023461336`, -0.1490683241839124`, \
0.04436937879960147`, 0.15692163732805442`, -0.17681420525131566`, \
0.000593330078514467`, 0.040469345954648066`, 0.021209895033254225`, \
0.04165303768988679`, -0.05557778769213943`], List[0.1340717922436073`, \
0.17981031237603745`, 0.01951162886009206`, -0.25275002976723204`, \
-0.08515836023461339`, -0.1490683241839124`, 0.044369378799601455`, \
0.15692163732805445`, -0.1768142052513157`, 0.0005933300785144497`, \
0.04046934595464814`, 0.021209895033254232`, 0.04165303768988675`, \
-0.05557778769213949`], List[0.0115176900338988`, -0.11136096857710286`, \
-0.05573990764628049`, 0.26013835339695135`, -0.3428494290323051`, \
0.0692474404689198`, 0.23344429759611546`, 0.030617222258553504`, \
-0.1170536847734027`, -0.033674584706400335`, -0.0113788332198358`, \
0.05827297331514547`, -0.060033507928811056`, -0.09384279903764252`], \
List[-0.06271849778175333`, 0.25843487863066733`, 0.11502998350410369`, \
0.057469098447211854`, 0.021655062233643628`, 0.06598679563899547`, \
0.0794320439597254`, 0.06121445816302653`, 0.10767343352013183`, \
0.20809339189540027`, 0.0970250194949517`, -0.2663428090843659`, \
-0.03752322483233665`, 0.07240909581110377`], List[-0.14331217911115118`, \
0.2585509654219578`, -0.044684606961330614`, 0.07562836745731699`, \
0.017692102315949577`, 0.048397923107822524`, -0.04003477882922613`, \
-0.08759423646675688`, 0.00857532667081095`, 0.06562382754483737`, \
-0.052618440843776274`, 0.1342545722343479`, -0.059813326451092656`, \
-0.07651637885214438`], List[0.2510072422707461`, 0.07706201341017507`, \
-0.11645644728121203`, 0.1123457728477753`, 0.07882128023721373`, \
0.03348543302195209`, -0.014953156802221017`, -0.05701117075076436`, \
-0.0328453184446421`, 0.013794051098972682`, -0.033140882961331664`, \
-0.019411440155343462`, 0.01777149971603431`, 0.01896865890536807`], \
List[-0.08421645461063865`, 0.15196603616806081`, 0.12802443139526884`, \
0.2598931479503307`, -0.0314383929254725`, -0.038859247084265976`, \
0.1342299746429942`, -0.08528704791918451`, -0.12583297710945346`, \
-0.08904402926852073`, 0.0952568072374092`, 0.18018304145478828`, \
-0.07932927773782275`, 0.11096083713349329`], List[-0.15767544709017947`, \
0.14452344343309767`, 0.0006243813423682204`, 0.18440084004638316`, \
0.15927797488516338`, -0.19752664755772964`, 0.03466793235508131`, \
-0.08326611061171163`, -0.1155728018080027`, -0.23209134094035785`, \
0.23935440584202244`, -0.09816381578682506`, 0.0033797598311984117`, \
0.0011790510658659416`], List[-0.25100724227074606`, -0.07706201341017506`, \
0.11645644728121203`, -0.11234577284777529`, -0.07882128023721373`, \
-0.03348543302195209`, 0.014953156802221005`, 0.05701117075076441`, \
0.032845318444642224`, -0.013794051098972627`, 0.033140882961331664`, \
0.01941144015534356`, -0.017771499716034162`, -0.01896865890536835`], \
List[-0.11657742208957564`, 0.015007408325123204`, -0.31455313373618615`, \
-0.06138578343256852`, 0.0025001604380474537`, 0.036574576255652705`, \
0.03511413251888054`, -0.014692565841128678`, 0.004425426618041153`, \
-0.0927064771055683`, 0.04160687183111224`, -0.05438392161497156`, \
0.05365230052425646`, -0.03437400492025103`], List[-0.11657742208957562`, \
0.015007408325123206`, -0.31455313373618615`, -0.061385783432568536`, \
0.0025001604380474607`, 0.03657457625565275`, 0.03511413251888062`, \
-0.01469256584112872`, 0.004425426618041047`, -0.09270647710556829`, \
0.041606871831112065`, -0.0543839216149717`, 0.05365230052425643`, \
-0.03437400492025118`], List[-0.14331217911115113`, 0.25855096542195777`, \
-0.04468460696133062`, 0.07562836745731692`, 0.017692102315949577`, \
0.04839792310782243`, -0.04003477882922615`, -0.08759423646675667`, \
0.008575326670810804`, 0.06562382754483706`, -0.05261844084377623`, \
0.1342545722343479`, -0.0598133264510923`, -0.07651637885214452`], \
List[0.24441332085536546`, 0.05738746050462514`, -0.11088192762799667`, \
0.028884902732674172`, 0.003715666824804089`, -0.08339882456495758`, \
0.06461229507905582`, -0.26685684294549494`, -0.002345819829680268`, \
0.06743097623683406`, -0.07916164794151381`, -0.054202469485337045`, \
-0.006375256911595205`, 0.04991981987027298`], List[0.06416920646048684`, \
0.05843665307690035`, -0.03529177879816232`, 0.2054116168286443`, \
0.18043707100295442`, 0.26315060564954307`, -0.1775794035107181`, \
0.4492511613208644`, -0.07343906105042247`, -0.11498345157914441`, \
0.09443805383213293`, 0.0725109915154035`, 0.05651246033610363`, \
-0.06417147025456657`], List[0.011517690033898796`, -0.11136096857710286`, \
-0.0557399076462805`, 0.2601383533969514`, -0.342849429032305`, \
0.0692474404689199`, 0.23344429759611554`, 0.030617222258553442`, \
-0.11705368477340275`, -0.0336745847064001`, -0.011378833219835863`, \
0.05827297331514555`, -0.060033507928811264`, -0.09384279903764255`], \
List[0.25100724227074606`, 0.07706201341017509`, -0.11645644728121207`, \
0.11234577284777529`, 0.07882128023721377`, 0.03348543302195206`, \
-0.014953156802220868`, -0.05701117075076431`, -0.0328453184446422`, \
0.013794051098972568`, -0.03314088296133147`, -0.01941144015534324`, \
0.017771499716034173`, 0.01896865890536845`], List[0.1825994941272499`, \
0.09175920359914806`, -0.020671823936943792`, -0.2720052177497937`, \
0.03234897831698891`, -0.10988322941605055`, -0.04486134168770034`, \
0.042655753210937494`, 0.1697829919738901`, -0.1308281204599106`, \
0.16233707734641462`, 0.2255698175091682`, -0.13783717745460722`, \
-0.08907021130832588`], List[-0.251007242270746`, -0.07706201341017505`, \
0.11645644728121203`, -0.1123457728477752`, -0.07882128023721378`, \
-0.033485433021951894`, 0.014953156802221423`, 0.057011170750764256`, \
0.032845318444642196`, -0.013794051098972374`, 0.0331408829613314`, \
0.0194114401553436`, -0.017771499716034478`, -0.01896865890536792`], \
List[0.12214928105285511`, -0.25210418817780367`, 0.06120262737371222`, \
-0.021121155980382146`, -0.021795423948652894`, -0.08204622463702438`, \
-0.09395221463866246`, -0.04986428068712066`, -0.1040494331670554`, \
-0.14642562606099557`, -0.11406775807597255`, 0.2808275658849673`, \
0.006464013708660427`, -0.04980890064129903`], List[-0.1201425240840578`, \
0.16953184582689415`, -0.1100901748720714`, -0.10738235421653641`, \
0.03637196694062708`, -0.09682223256706972`, -0.14802451351963108`, \
-0.05958233865527321`, -0.3556361502441131`, -0.02108524623238056`, \
-0.2458124315515436`, 0.24058537972136274`, 0.14677110856269154`, \
-0.10248590388143385`], List[0.13407179224360719`, 0.1798103123760376`, \
0.01951162886009211`, -0.2527500297672326`, -0.08515836023461333`, \
-0.14906832418391225`, 0.04436937879960151`, 0.15692163732805442`, \
-0.17681420525131575`, 0.0005933300785143647`, 0.04046934595464802`, \
0.02120989503325424`, 0.04165303768988696`, -0.05557778769213957`], \
List[-0.0848143374004916`, 0.2584514045296463`, 0.12374117672421348`, \
0.11110761541315076`, 0.01688997663718374`, 0.030151356161037743`, \
-0.060229897553371034`, -0.08237359275598975`, 0.006451702050157936`, \
0.11770164099008984`, -0.07670806775476222`, 0.16776838581755726`, \
-0.0906282516612924`, -0.060328026924002964`], List[-0.14331217911115113`, \
0.25855096542195777`, -0.044684606961330475`, 0.07562836745731702`, \
0.017692102315949608`, 0.048397923107822344`, -0.0400347788292263`, \
-0.08759423646675685`, 0.008575326670810684`, 0.06562382754483738`, \
-0.05261844084377615`, 0.13425457223434825`, -0.05981332645109238`, \
-0.0765163788521448`], List[-0.11657742208957561`, 0.015007408325123242`, \
-0.31455313373618654`, -0.061385783432568654`, 0.002500160438047429`, \
0.03657457625565281`, 0.035114132518880556`, -0.01469256584112883`, \
0.004425426618041064`, -0.0927064771055681`, 0.04160687183111201`, \
-0.05438392161497143`, 0.0536523005242562`, -0.03437400492025096`]]], Rule[\\\
\"Processor\\\", MachineLearning`MLProcessor[\\\"Standardize\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Mean\\\", List[1.1556412392689129`*^-15, \
6.207156001313375`*^-16, -4.289498049688105`*^-17, 5.752973854875811`*^-16, \
4.703863561287976`*^-14, 1.8066356491627547`*^-16, 0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.13636363636363635`, 0.6727272727272727`, 0.01818181818181818`, \
0.045454545454545456`, 0.7272727272727273`, 0.13636363636363635`, \
0.9454545454545454`, 0.07272727272727272`, 0.6`, 0.05454545454545454`, \
0.45454545454545453`, 0.39999999999999997`, 0.6363636363636364`, \
0.10909090909090909`, 0.07272727272727272`, 0.36363636363636365`, \
0.07272727272727272`, 0.9454545454545454`, 0.00909090909090909`, \
0.08181818181818182`, 0.22727272727272727`, 0.22727272727272727`, \
0.9636363636363636`, 0.2909090909090909`, 0.43636363636363634`, \
0.05454545454545454`, 0.43636363636363634`, 0.6454545454545454`, \
0.9454545454545454`, 0.07272727272727272`, 0.07272727272727272`, \
0.43636363636363634`, 0.045454545454545456`, 0.00909090909090909`, \
0.9636363636363636`, 0.05454545454545454`, 0.14545454545454545`, \
0.9454545454545454`, 0.6363636363636364`, 0.2636363636363636`, \
0.22727272727272727`, 0.36363636363636365`, 0.43636363636363634`, \
0.07272727272727272`]], Rule[\\\"StandardDeviation\\\", \
List[0.9999999999999958`, 0.999999999999997`, 1.0000000000000004`, \
0.9999999999999991`, 0.9999999999846566`, 0.9999999999999999`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 0.3431742925123068`, 0.4692177418386887`, \
0.133608531424537`, 0.20829889522526546`, 0.4453617714151233`, \
0.3431742925123068`, 0.22709083630539634`, 0.25968830649246727`, \
0.4898979485566356`, 0.22709083630539628`, 0.4979295977319692`, \
0.4898979485566356`, 0.48104569292083466`, 0.3117532399905863`, \
0.25968830649246727`, 0.48104569292083466`, 0.25968830649246727`, \
0.22709083630539634`, 0.09491187735373227`, 0.27408751693966066`, \
0.4190702026042222`, 0.4190702026042222`, 0.18719327529067264`, \
0.45418167261079256`, 0.4959338798903947`, 0.22709083630539628`, \
0.4959338798903947`, 0.47837534970628615`, 0.22709083630539634`, \
0.25968830649246727`, 0.25968830649246727`, 0.4959338798903947`, \
0.20829889522526546`, 0.09491187735373227`, 0.18719327529067264`, \
0.22709083630539628`, 0.35255853508482393`, 0.22709083630539634`, \
0.48104569292083466`, 0.44060439331100487`, 0.4190702026042222`, \
0.48104569292083466`, 0.4959338798903947`, 0.25968830649246727`]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]]]]], \
Rule[\\\"FinalDimension\\\", 14], Rule[\\\"Method\\\", \\\"Linear\\\"]]], \
Rule[\\\"PerformanceGoal\\\", Automatic], Rule[\\\"Invertibility\\\", \
\\\"Approximate\\\"], Rule[\\\"Log\\\", \
Association[Rule[\\\"TrainingTime\\\", 0.0146322`], \
Rule[\\\"MaxTrainingMemory\\\", 205424], Rule[\\\"DataMemory\\\", 51312], \
Rule[\\\"FunctionMemory\\\", 33208], Rule[\\\"LanguageVersion\\\", \
List[12.1`, 0]], Rule[\\\"Date\\\", DateObject[List[2020, 5, 15, 12, 22, \
10.7008827`8.781994565357499], \\\"Instant\\\", \\\"Gregorian\\\", -4.`]], \
Rule[\\\"ProcessorCount\\\", 2], Rule[\\\"ProcessorType\\\", \\\"x86-64\\\"], \
Rule[\\\"OperatingSystem\\\", \\\"Windows\\\"], \
Rule[\\\"SystemWordLength\\\", 64], Rule[\\\"Evaluations\\\", \
List[]]]]]][Slot[1], \\\"ImputedVectors\\\", Rule[PerformanceGoal, \
\\\"Quality\\\"]]]], Rule[\\\"Method\\\", \\\"DimensionReduction\\\"], \
Rule[\\\"VectorLength\\\", 57], Rule[\\\"Output\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
57.`]]]]], Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Version\\\", \
List[12.1`, 0]], Rule[\\\"ID\\\", 7259735455847470961]]], \
MachineLearning`MLProcessor[\\\"Standardize\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
57.`]]]]], Rule[\\\"Mean\\\", List[1.1556412392689129`*^-15, \
6.207156001313375`*^-16, -4.289498049688105`*^-17, 5.752973854875811`*^-16, \
4.703863561287976`*^-14, 1.8066356491627547`*^-16, 0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.13636363636363635`, 0.6727272727272727`, 0.01818181818181818`, \
0.045454545454545456`, 0.7272727272727273`, 0.13636363636363635`, \
0.9454545454545454`, 0.07272727272727272`, 0.6`, 0.05454545454545454`, \
0.45454545454545453`, 0.39999999999999997`, 0.6363636363636364`, \
0.10909090909090909`, 0.07272727272727272`, 0.36363636363636365`, \
0.07272727272727272`, 0.9454545454545454`, 0.00909090909090909`, \
0.08181818181818182`, 0.22727272727272727`, 0.22727272727272727`, \
0.9636363636363636`, 0.2909090909090909`, 0.43636363636363634`, \
0.05454545454545454`, 0.43636363636363634`, 0.6454545454545454`, \
0.9454545454545454`, 0.07272727272727272`, 0.07272727272727272`, \
0.43636363636363634`, 0.045454545454545456`, 0.00909090909090909`, \
0.9636363636363636`, 0.05454545454545454`, 0.14545454545454545`, \
0.9454545454545454`, 0.6363636363636364`, 0.2636363636363636`, \
0.22727272727272727`, 0.36363636363636365`, 0.43636363636363634`, \
0.07272727272727272`]], Rule[\\\"StandardDeviation\\\", \
List[0.9999999999999958`, 0.999999999999997`, 1.0000000000000004`, \
0.9999999999999991`, 0.9999999999846566`, 0.9999999999999999`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 0.3431742925123068`, 0.4692177418386887`, \
0.133608531424537`, 0.20829889522526546`, 0.4453617714151233`, \
0.3431742925123068`, 0.22709083630539634`, 0.25968830649246727`, \
0.4898979485566356`, 0.22709083630539628`, 0.4979295977319692`, \
0.4898979485566356`, 0.48104569292083466`, 0.3117532399905863`, \
0.25968830649246727`, 0.48104569292083466`, 0.25968830649246727`, \
0.22709083630539634`, 0.09491187735373227`, 0.27408751693966066`, \
0.4190702026042222`, 0.4190702026042222`, 0.18719327529067264`, \
0.45418167261079256`, 0.4959338798903947`, 0.22709083630539628`, \
0.4959338798903947`, 0.47837534970628615`, 0.22709083630539634`, \
0.25968830649246727`, 0.25968830649246727`, 0.4959338798903947`, \
0.20829889522526546`, 0.09491187735373227`, 0.18719327529067264`, \
0.22709083630539628`, 0.35255853508482393`, 0.22709083630539634`, \
0.48104569292083466`, 0.44060439331100487`, 0.4190702026042222`, \
0.48104569292083466`, 0.4959338798903947`, 0.25968830649246727`]], \
Rule[\\\"Output\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
57.`]]]]], Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
2367778904976982516]]]]], Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], Rule[\
\\\"StructurePreserving\\\", True], Rule[\\\"Missing\\\", \
\\\"Imputed\\\"]]]]]], Rule[\\\"Output\\\", Association[Rule[\\\"Preprocessor\
\\\", MachineLearning`MLProcessor[\\\"ToMLDataset\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"Sequence\\\", Association[Rule[\\\"Processors\
\\\", List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"Nominal\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
Automatic], Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]], Rule[\\\"StructurePreserving\
\\\", False]]]]]]]], Rule[\\\"ScalarFeature\\\", True], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"Processor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
6995767557603505475]]], \
MachineLearning`MLProcessor[\\\"IntegerEncodeNominalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Index\\\", List[Association[Rule[False, 1], Rule[True, \
2]]]], Rule[\\\"MissingCode\\\", 0], Rule[\\\"Version\\\", List[12.1`, 0]], \
Rule[\\\"ID\\\", 2734911975669049395], Rule[\\\"Output\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]]]], \
MachineLearning`MLProcessor[\\\"FromVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", \
1], Rule[\\\"SetSize\\\", List[2]]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Version\\\", List[12.1`, 0]], \
Rule[\\\"ID\\\", 2109313300824996630]]], \
MachineLearning`MLProcessor[\\\"FirstValues\\\", \
Association[Rule[\\\"Info\\\", Association[Rule[\\\"Type\\\", \
\\\"Nominal\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"SetSize\\\", 2]]], \
Rule[\\\"Key\\\", \\\"f1\\\"], Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]]], Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"ProbabilityPostprocessor\\\", Identity], Rule[\\\"Name\\\", \
\\\"class\\\"], Rule[\\\"Marginal\\\", Association[Rule[False, \
0.3482142857142857`], Rule[True, 0.6517857142857143`]]]]], \
Rule[\\\"Prior\\\", Automatic], Rule[\\\"Utility\\\", SparseArray[Automatic, \
List[2, 3], 0.`, List[1, List[List[0, 1, 2], List[List[2], List[3]]], \
List[1.`, 1.`]]]], Rule[\\\"Threshold\\\", 0], Rule[\\\"TieBreaker\\\", \
RandomChoice], Rule[\\\"PerformanceGoal\\\", Automatic], \
Rule[\\\"BatchProcessing\\\", Automatic], Rule[\\\"Model\\\", \
Association[Rule[\\\"NeighborsFunction\\\", \
MachineLearning`PackageScope`NeighborsFunction[\\\"BruteForce\\\", \
List[List[List[-1.8307194732935237`, -0.9217510889781271`, \
0.08647039971797803`, -0.7711876130222947`, 1.0306199793865183`, \
-0.5709248233646096`, -0.6154289824916891`, -1.098764664407406`, \
0.1968908287386338`, -3.393120054226287`, -1.755756146912054`, \
-0.49912587470435876`, 0.9798662415421798`, -0.11193551242211013`, \
-3.2500105866211753`, -0.8033248103356307`, 1.221210962485528`, \
0.4310023511543483`, 0.0870042670635484`, 1.1264838191885191`, \
-3.0887198930564734`, -2.0669987889370347`, -0.5283997642607533`, \
0.6064600290685411`, 0.030792459264583807`, 0.41839852987898196`, \
0.8769937231104086`, 0.816778609822226`, 0.7991100473102223`, \
-0.2075246034487424`, 0.08126348469854305`, 0.8491810434682532`, \
-0.19367769017717493`, 0.3741412704093312`, 1.0005340770421023`, \
0.47378061006002725`, 1.1074881293540293`, 0.549749218521683`, \
0.6064798219936834`, 0.004280788229238275`, 1.1802846241950316`, \
-0.6630213893913667`, 0.2372001185481162`, 0.06578495979601642`, \
0.8455877154754972`, 1.1037372868957338`, -0.5604582397436415`, \
0.3664228557815234`, 0.11740225487696326`, -1.4727507697726394`, \
-0.5741585387472619`, -0.18239672854193828`, -0.3596027089372736`, \
-0.2264699293993382`, -1.1729385261277947`, 0.17440811003155016`, \
-0.20908895387210702`, 0.009050026303547728`, 0.19058636655791356`, \
0.7141832800490083`, 1.4137239095727592`, 1.6254578604594518`, \
0.35544755156754054`, -0.986343770718811`, -0.8320936988559584`, \
0.6850918274630816`, -0.47877600310190965`, -0.3702418049883669`, \
-0.3429840964565866`, -2.008423197194354`, -0.3081718124934457`, \
0.3362690970415524`, 0.5981898036481598`, 0.6777414580762328`, \
-0.9983553836719558`, -0.08641154505181692`, 0.5878868541742819`, \
1.2147919090677697`, 0.33800287138005974`, -0.9072949103655357`, \
0.09763537659376947`, -1.3386757534655294`, -3.378570586804508`, \
0.8417515608013472`, 0.6192712508741711`, 0.3452918035012055`, \
1.4603957362406286`, 0.20736287405517906`, 0.1576339391987967`, \
0.6602278632173794`, 0.8285888177605205`, -0.5737965296843507`, \
0.7625820884527825`, 0.7206728343986296`, 0.6001018818226428`, \
0.30375735475286036`, -0.5917231879829312`, -0.2666200957927299`, \
-0.34249121131034704`, 0.3160825220005457`, 0.870167920973804`, \
0.6258476828613723`, 0.9613331793795435`, 0.22636021994714373`, \
1.2501373271858631`, 0.3129653614494367`, 1.15509749013162`, \
0.9254388377814277`, 0.05640445973709472`, 0.0538129702952008`], \
List[2.6998182989199426`, 0.48938655058825775`, -0.6431239852363061`, \
-0.16538649668085778`, 1.4553955751195333`, -0.38913533364086744`, \
-0.04506288343098372`, -0.036258028571629006`, -0.6550081863215058`, \
2.958174871304069`, 0.8802683022070854`, -0.4869197687365433`, \
0.8039022509259783`, 0.5757568317887488`, 3.036559109825868`, \
0.6051233034575123`, 0.7282899507359014`, -1.02171531395818`, \
-0.17057061587023958`, -0.9492073500930048`, 2.438248425174516`, \
1.034672525011798`, 0.0786547996755499`, -0.7713781499981571`, \
0.2946879172609394`, -0.37912659435288154`, 1.7060096856863363`, \
-0.7153243546910679`, -0.8395095349053489`, 0.155576567256345`, \
0.3395730480642706`, 0.8943267494007334`, -0.06714435936461827`, \
-0.48797617623151807`, -0.6916464112727368`, -0.2805538710347638`, \
0.8282044366173306`, -0.08675346715409077`, -0.828886901271925`, \
-0.33985310964479576`, -0.046673791747060926`, -0.04006115084722026`, \
-0.46092761281179334`, -0.7932700892459768`, 1.7085907678671028`, \
-1.2402903831939711`, 0.37672374088768357`, -0.6477147346172222`, \
-0.37128067660696784`, 0.8914296747204732`, -0.5660037899897832`, \
-1.1111857612893064`, 0.9310288857346753`, -0.0062850553850599365`, \
-0.30485036709238866`, 0.027872449334556543`, -1.238643386227492`, \
1.2338420035378075`, -0.4602116003940259`, 0.7366057162339347`, \
-0.9916765492916999`, -0.8825857389587886`, 0.018517603820057713`, \
0.3288871639948425`, -0.5028242007076348`, -1.0824676165085187`, \
1.425213612946044`, -0.7980185093172769`, -0.46178691301524455`, \
0.8722948197505542`, 0.03683411123892971`, -0.8791996669036564`, \
-0.18659910558247667`, -0.6631576722166026`, -0.38223794008354633`, \
-0.17299060803686875`, -0.8124739318457964`, 2.1375894291045543`, \
-0.28967832057757925`, -0.3370217773414963`, 0.3313896489247039`, \
1.9051294073784555`, 3.062791491659532`, -0.8235839006203045`, \
-1.2470125748621634`, -0.9666794463798841`, -0.7839448023934134`, \
-0.9388691399865025`, -0.5232309183209288`, -0.10612489216459747`, \
-0.1542227815746762`, -0.2903595501935502`, -0.17830305411008485`, \
-1.236333175990556`, -0.9510736340559699`, -0.6435561356380621`, \
-0.2752203386330748`, -1.2056594432091223`, -0.32065826915974255`, \
-0.7181603368722155`, 1.843167027326342`, -1.0729580878432665`, \
1.6002966811938137`, -0.2576822906119274`, 0.927980055015762`, \
-0.8126447218241674`, -1.0459064809212182`, -0.8901809176556077`, \
-0.6564725696838344`, -0.4481447353875831`], List[-1.049878661780966`, \
-0.2735773112799399`, -0.026971502977935113`, 0.41259257973157004`, \
0.4573720689410896`, 0.22650180942804765`, 0.08925393725377939`, \
-0.18126565168466682`, 0.030511878002128776`, -0.6497632585120456`, \
0.37179621404419716`, 0.5090658139103809`, 0.5622837804083051`, \
0.5429165369504143`, -0.6342989288020671`, -0.3277285616654632`, \
0.5315731293449856`, 0.22066251730785988`, 0.03996702419376735`, \
0.12579404778487005`, -0.6853656519601528`, -0.3117187193367907`, \
0.1791950084092031`, 0.5725918887644794`, -0.15479409894669005`, \
0.49269708299678383`, -6.924685425149935`, 0.3464465700791851`, \
0.240568007642957`, -0.12479671651047906`, 0.14335490120930663`, \
0.4530185494365561`, -0.005592874459614566`, -0.007182319064174297`, \
0.49693967905412845`, 0.2515419570949051`, 0.48882087482228326`, \
0.07502013415880819`, 0.1581061666490977`, 0.35607768114792976`, \
0.15401893141093215`, -0.2144477332791851`, 0.4724927140274886`, \
0.05406085987666189`, 0.3666075688961185`, 0.3151952868460369`, \
0.02796000401828353`, 0.5726964855657106`, 0.05209711305788653`, \
0.4262480602256384`, 0.34564120333247866`, 0.486730496394814`, \
-0.126722343524293`, -0.3484346476668785`, 0.0711289217700513`, \
0.5132527094580747`, 0.3033162990210421`, 0.2229426258268039`, \
-0.0858695159238423`, -0.2548713773042426`, 0.23516732341060803`, \
0.2488441243097775`, 0.15800603471389496`, -0.07066010928612623`, \
0.24446794167338204`, 0.4174314238026806`, -0.14995612640088263`, \
0.35610803140617525`, 0.0897711622049481`, -1.1340209632875375`, \
0.1562072336400787`, 0.49623801958821184`, -0.34790774464674307`, \
0.10358539565162025`, -0.10685591934621338`, 0.3444507667244387`, \
0.3497146094642711`, -6.954512735866635`, -0.008504182009845904`, \
0.061471748968520076`, 0.3319457485145148`, -0.10200100560183678`, \
-0.6423880012610846`, 0.28222284454952107`, 0.19057821000800362`, \
0.5663064081914485`, 0.01662476598467897`, 0.025587916711186175`, \
0.11838501467066845`, 0.10780059648402107`, 0.496536505041987`, \
0.4866710974779255`, -0.09926669400886734`, 0.7215995694729037`, \
0.30773763998468406`, 0.10588881869511024`, 0.15329071314125448`, \
0.25082855814503996`, -0.2972122843199976`, -0.047104636616557116`, \
0.1849742774406905`, 0.2207121569129356`, 0.24726743818372077`, \
0.10861911535472826`, 0.5359763322777112`, -0.0385957376812522`, \
0.15854529299405706`, 0.602487996005076`, 0.09631516092085451`, \
-0.0530003209049364`], List[-0.6723040205451787`, -0.2463610253938253`, \
0.8374277003435084`, 0.30520622706437506`, 0.8499876926961555`, \
-0.17482174424431654`, -0.03655704001111771`, -0.5037289361827427`, \
0.14873111168320435`, -3.670324880166607`, -1.1404853746156394`, \
0.6538845209203209`, 0.7898296968137419`, 0.3887737527594907`, \
-3.4801801462922795`, 0.21720886859219415`, -2.183605286886712`, \
0.07653688631423021`, 0.7416214338129853`, 0.13177629085375248`, \
-3.179013020732714`, -2.3018672084049396`, 0.2574465213540433`, \
0.3814022001081858`, 0.38798727483760087`, 0.2515401068678659`, \
-0.7841620824389033`, 0.5191213638690622`, 0.21180817593087417`, \
0.08338449416395609`, -0.006347321090378272`, 0.8212060584199368`, \
0.1825726674245603`, 0.20941820576931616`, 0.13626078150697277`, \
-0.10623520145303735`, 0.8237929149663391`, 0.13414535875728723`, \
0.698036493273946`, 0.7904664745772336`, 0.6360439185991892`, \
0.31371949192340526`, 0.7593540650906834`, 0.8847188801486788`, \
0.4044756721212195`, 0.2545686793429685`, 0.2524483839275453`, \
0.8365680453421444`, -0.7608715054020153`, -0.35628369407455257`, \
-0.37823512625190586`, 0.9804678722932869`, -0.05966193160417512`, \
-0.010387303138967666`, -0.1440558223213252`, 0.4530924926280302`, \
-0.9242190327425888`, -0.6655298298088165`, 0.7795082062166018`, \
-0.04778199753776386`, 1.2988312849696688`, 0.8190713171292754`, \
-0.09517549001016314`, 0.6499755255418026`, -0.03874664200325847`, \
0.5213775480882837`, -0.6765531605813494`, 0.5021161025504501`, \
-0.2012086086626429`, -2.2531177178140096`, -1.1773272645402377`, \
0.6829090508382835`, 0.8792410651056455`, 0.2455149170295358`, \
0.8951804444809605`, 0.625302772740203`, 0.42434221934389094`, \
-0.26308067387946915`, 0.02220164728904153`, -1.4648164509332813`, \
-0.540839101695769`, -0.728145070075237`, -3.703527713637896`, \
0.49378685487597274`, 0.6938124129036085`, 0.8364734606834128`, \
0.38269475796628577`, 0.6008284977779195`, -0.2565465526236843`, \
0.005871536998602671`, -0.14384301032196237`, 0.8683244345338476`, \
-0.12221292058302807`, 0.1301276914767409`, 0.39507246352294634`, \
0.35332973175749494`, -2.90976208213428`, -0.7650552533527701`, \
0.6926754104960977`, 0.8117672590698592`, 0.8199560250442607`, \
0.7696591580990644`, 0.8381585683907048`, -0.42557238399918196`, \
0.930445416158577`, 1.043136166373257`, 0.19836754982931173`, \
0.6776689019765401`, 0.6106979696642728`, 0.27137477448278063`], \
List[-2.670390842151875`, -0.32300541177710346`, 0.4248133534445146`, \
0.10292826384738107`, -2.5058501843848466`, 0.6231615923420084`, \
0.14905913835103143`, 0.4736787628240748`, 0.7294447084695007`, \
-1.4340229988769717`, -0.3831258456344744`, 0.288969051596385`, \
-1.631282455768187`, -1.010680644303031`, -1.6505930496459345`, \
-0.6920826593557645`, -0.15980470705897493`, 1.1703305168897071`, \
-0.1573081324115268`, 0.9544160437050038`, -1.028670900755191`, \
0.13952144639077474`, -0.1715707143533245`, 0.6042813650914786`, \
-0.5302117645185218`, 0.21150499440109435`, -0.6750710589452278`, \
0.4783479595930912`, 0.8108782266102953`, -0.1913623586434743`, \
-0.46767392143497943`, -1.7333191850447687`, 0.02992887539490877`, \
0.4716238955612652`, 0.5765887184734403`, 0.29084100132207386`, \
-1.7172858171514183`, -0.0344991783062672`, 0.6130886411279047`, \
-0.023265771554570505`, -0.4516542901484711`, 0.0449769919002595`, \
0.12244495445334276`, 0.5838430014417697`, -2.5704845714127873`, \
1.248793156075384`, -0.5268250382224121`, 0.2644603361852568`, \
0.8133598216801554`, -0.8337535494978946`, 0.9242058611154886`, \
0.9201633398108738`, -1.0791271462325664`, 0.0966910214100391`, \
0.6068889308664972`, -0.3794478273760722`, 2.0026126009120873`, \
-1.3175273109650396`, 0.22068883967843073`, -0.9820324410889248`, \
0.3879595362487455`, 0.46489482639004703`, -0.07077015763597762`, \
-0.5654062154023227`, 0.7408010794558335`, 0.9591779141212726`, \
-1.4127638720643778`, 0.7637592868012532`, 0.7202965855118365`, \
0.46463202573881474`, 0.520921086060253`, 0.6408814234839598`, \
-0.21169734239335236`, 0.6220094457817752`, 0.2283533683747125`, \
-0.10568554510471181`, 0.6920962505949528`, -1.5146312112938882`, \
0.32504447169236794`, 1.2317697648107282`, -0.2353716044838946`, \
-1.8578571864441524`, -1.545035916587873`, 0.6507789175155483`, \
1.1547998913689344`, 0.6771346935156723`, 0.6021182531967686`, \
0.8793216497130689`, 0.7402066101783763`, 0.009112279925564478`, \
0.056793278171914395`, -0.04259625363686581`, 0.1850018367195468`, \
1.2798907263361392`, 0.8822715463268016`, 0.5866635289017634`, \
1.7770720475076784`, 1.9026755067016574`, 0.19051358933799878`, \
0.5025592955781286`, -2.893666117817922`, 0.8819465829572948`, \
-2.6396637710332196`, 0.46655886571964755`, -1.9009292804629563`, \
0.5043110262799908`, 1.021314551659512`, 0.5682860746600046`, \
0.5100934911021356`, 0.4531329300521822`], List[-0.30373705225462355`, \
0.23281404843856918`, -0.3024152615113337`, 0.7865139412489055`, \
1.3372810621769675`, 0.7785656312128211`, -0.8495739163947507`, \
0.7917576832971793`, 0.23363333460055566`, -2.4947034343701593`, \
1.3243715298660725`, 0.7876118056756031`, 1.3380019488729842`, \
0.7918205162194004`, 0.7845072546697176`, -1.4010963839508925`, \
1.3243624411649055`, 0.236698557346136`, -0.315260935984721`, \
0.7926443631421887`, -1.404556322871473`, 0.7774815815828351`, \
-0.854410293694594`, -1.405873416149615`, -1.4005500443359056`, \
0.2322733195840188`, 1.3323941943669688`, -1.4100522208716055`, \
-0.30766425269709646`, 0.24171106992469016`, 0.2373568386021839`, \
1.335814288933075`, -1.4058230155047027`, 0.7901133797759256`, \
-0.8613933618308491`, -0.30940220445672295`, 0.7837243379076466`, \
-1.3964547683443653`, -1.4067792227245106`, 1.3252765507020312`, \
-0.8553243890405804`, 0.7887548950855758`, 0.7864338968957115`, \
-0.8520218815326003`, 1.3395441848956886`, 0.2422284724464688`, \
-0.3086528157174423`, 0.7867629316869011`, 1.3359019804077645`, \
0.7845475058434905`, 0.7917865753925899`, 0.24243751739377878`, \
-0.30811722565803384`, -0.855140386967907`, 0.23463513640675165`, \
0.7926918411999696`, -1.3936351389772028`, 0.7776525662695623`, \
-1.4105939136044876`, 0.23578604104423315`, -0.3057826526543087`, \
-0.30118436585510133`, 0.7845113957889693`, -0.3150034764604782`, \
0.7779599582963792`, -0.302203410548127`, 0.7867044074454396`, \
-0.8522639291589529`, -1.3940894206404675`, -0.3082422777733949`, \
-1.4094521678762417`, 0.22966431699481515`, 0.23693136919794186`, \
-1.9482727545547145`, 0.23356176182269062`, 0.7903488990009792`, \
0.23504089083984409`, 1.3385051060417636`, -1.407385824571243`, \
-2.501475582149255`, 0.24517797061071347`, -0.862591180034596`, \
-0.30125261755549676`, -1.4040382340709638`, -0.8580070286474895`, \
0.2359097878449344`, 1.327067809671762`, 0.7793970969799779`, \
1.3407512447452319`, -0.31733809503771515`, -0.31492898235090405`, \
0.23838746406216418`, -1.3993756968558522`, 0.23610446414292968`, \
-1.4049705489182762`, -0.3006256446999584`, -0.3038650939292995`, \
0.7834003776740867`, 0.7878138548799324`, -2.489711372483243`, \
1.326636936554785`, -1.3984113998559957`, 1.3245638591242759`, \
1.3343687451144712`, 0.7912808122104514`, 0.7823228978127386`, \
-0.3043173708606314`, 0.24252855671455345`, 0.2401390022865576`, \
1.328374683169829`], List[-0.001696396625894707`, -0.002420097349954249`, \
0.000562664214745906`, -0.003495818080243296`, 0.008230225720838254`, \
0.002589280406925635`, -0.0004984728111703078`, 0.005004208446746674`, \
0.0096068147991866`, -0.003232805719341543`, -0.004204096985290298`, \
0.008127786246746371`, -0.005290099945989606`, -0.00626648786643326`, \
-0.006198965399997869`, -0.0016006826004012834`, -0.009066512618831499`, \
-0.004340469984521374`, -0.004865535139663327`, 0.005856960260669786`, \
-0.00559761694446928`, 0.008055114278409332`, -0.007569787761024738`, \
0.005718712565099763`, -0.006082358967301998`, 0.00594755311091338`, \
-0.0019509766683078536`, 0.004086107937279721`, 0.000693262188846102`, \
0.004103395269351259`, -0.009070718220565044`, 0.005117355407184682`, \
-0.009749857399431523`, 0.007161657905108535`, -0.002847387090762009`, \
0.003681457456723696`, 0.004540677127237481`, 0.0031303578831295004`, \
-0.00784785779245592`, 0.00809191476182754`, 0.00602309258552992`, \
0.005556480771447256`, -0.00425963336239954`, -0.009366567980178368`, \
-0.006978400752867625`, -0.004310194514391415`, -0.0031418634264442635`, \
0.0076683834387280166`, -0.004536331224122024`, -0.009457913196983109`, \
0.00043441144586793545`, -0.005621521241569338`, 0.0024093576889028905`, \
-0.0036886619707970567`, -0.0025486455298138824`, -0.006777387342887145`, \
-0.004744258345683497`, 0.005992308290854131`, -0.004120718654187776`, \
0.007620800620376723`, 0.00004042621323919332`, 0.00810701997753488`, \
-0.005820962137844443`, 0.0026171574860449007`, 0.006447156927517048`, \
0.0036813111670895744`, -0.0005299615206490783`, -0.0029591158884124252`, \
0.0005631321448263324`, 0.004569338483633202`, -0.0048947111216662495`, \
-0.002556325099909884`, 0.007370448517810858`, 0.003823100656467255`, \
-0.00609366235385822`, 0.0003753209635151411`, 0.0008046900701592641`, \
-0.006094152497768075`, 0.007216847321445376`, -0.0077095026229575744`, \
0.006342191911956403`, -0.00946978912333183`, 0.007289379519217477`, \
0.0005271064004749963`, -0.0017976150849981776`, 0.00875377281163603`, \
-0.005682893192849425`, 0.006099984958115187`, 0.002855453974816586`, \
-0.0022262591988252145`, 0.009354292624116092`, 0.001839527006435946`, \
-0.0072778046750043845`, 0.0010237772530115284`, -0.001462147202816455`, \
0.006262369591994485`, 0.009368446594201475`, -0.005654790457421129`, \
0.004345072169772368`, 0.0022945039230828114`, 0.00972751566637976`, \
0.003929723169407467`, -0.00572086869435786`, -0.003536275330196459`, \
-0.008341510759254968`, -0.0021224356243037604`, 0.002362115700452673`, \
-0.002794746827092784`, -0.007758095657801202`, 0.003526625093414705`], \
List[0.0003942490126629464`, 0.00795204439280879`, -0.004573030664673662`, \
-0.005729934219374969`, -0.009036037469656817`, 0.0044400890628717785`, \
0.00038819953504307114`, -0.0070228923651812145`, -0.005088414884818801`, \
-0.0020651359129593982`, -0.009463280237068578`, 0.0020186254895662586`, \
-0.005816608674739231`, -0.0022803272304978833`, -0.00878953643902488`, \
0.00025474087301625287`, -0.006581805953100331`, -0.0013792203699505914`, \
0.0016058366301138285`, 0.005933718623265638`, -0.007523855043178242`, \
0.0038234313743167707`, -0.0021672416957501037`, 0.002726895703147214`, \
-0.007568802867328271`, 0.006708324953468483`, 0.0007984710377870463`, \
-0.005116412635674514`, -0.0002068738795701179`, 0.0031204711325367347`, \
0.001245720171468928`, 0.00011327507815041618`, -0.004987828538152675`, \
-0.0021026228040533362`, -0.007999091274813762`, 0.003917580446959723`, \
0.009020973771220322`, 0.0038734208292804002`, -0.0025550973743804217`, \
0.006175534961781016`, 0.0077036655227933695`, 0.001826536462792381`, \
-0.003942707292622374`, 0.007757236334485038`, -0.009343931486326763`, \
-0.0018804394927783297`, -0.004237322129818574`, 0.009575015631495234`, \
-0.008236228306998675`, -0.008702162818503514`, 0.0054252276623595365`, \
0.0019239325332088067`, 0.002990279687853814`, 0.008075469273946877`, \
0.00029548660784616335`, 0.003228536006103712`, -0.004726884792619353`, \
-0.000773347929283557`, 0.009429032544598662`, -0.008572851939464304`, \
0.008702308184566847`, -0.008933349179720364`, -0.0011942912322826411`, \
0.005981706095572716`, 0.0014495821875529155`, 0.006457266714964719`, \
0.005916095514273783`, 0.007485780009280685`, -0.00730945271009753`, \
-0.007530042827479079`, -0.0077308361250666285`, 0.0057869269073359715`, \
-0.0034621420846738665`, 0.00957205603230557`, -0.008004555432495258`, \
0.0016555408255219083`, 0.006942033343351913`, 2.119488621912108`*^-6, \
0.000846675661526821`, 0.005571354230653632`, -0.000762140035266444`, \
0.009293155298709149`, 0.00548942949321779`, -0.00733294620534513`, \
-0.0025344160866776974`, 0.003420095190397217`, -0.0059746085358280965`, \
0.006821157763256924`, -0.007522721996670777`, 0.0028646938467393537`, \
0.006730767356645035`, -0.009858254367787062`, -0.0035615575625602552`, \
0.0026080028572785206`, -0.007779855768895637`, 0.008428556134691356`, \
0.00020523307136757415`, -0.0009089215699134533`, 0.008779785483821016`, \
-0.0018170926552302166`, -0.001558044861710725`, -0.004853167588382182`, \
-0.001901612565800237`, -0.009267613051939419`, -0.0036668685521788966`, \
-0.009677575659282796`, 0.0036785763521231182`, 0.006128668817033438`, \
-0.007293841608042473`, -0.0017490623746475378`], List[0.008853914110966494`, \
-0.006507434221941437`, 0.006008140223720895`, -0.00004017944631540607`, \
0.002147202477756134`, 0.00265003928391579`, -0.008418237535921066`, \
-0.0039026647794887515`, -0.008671949933091144`, -0.0096084554658942`, \
0.001562220634011062`, 0.0013210716566437845`, 0.00859501723136109`, \
-0.006015059838684764`, -0.0030733711535752134`, -0.0025153286030204086`, \
0.004443291700465018`, 0.00821790136278237`, -0.00903497398343793`, \
-0.002623890246687459`, -0.002310006568727617`, 0.00794785745418555`, \
0.004619376044317693`, 0.006492542454331042`, -0.0004186486826412185`, \
0.0028039443455555486`, -0.009755176874408182`, 0.006011295446901051`, \
-0.00383928422453185`, -0.0034798645463543776`, -0.0041214242151664665`, \
-0.008549285245042788`, -0.003012861295254979`, -0.0050298937482912975`, \
-0.008978112458895592`, 0.006197473617974982`, 0.0015092088078420517`, \
-0.001429468673023189`, 0.007059433403171472`, -0.0005122905896397661`, \
-0.007294871582825789`, -0.003921298094986189`, -0.0006029896743881616`, \
0.008500107179168343`, -0.008508924602392179`, -0.002222954864019931`, \
-0.003096117180435752`, 0.0008939425500465448`, 0.0003898128440304495`, \
0.0013002150056984907`, -0.005227582504770373`, 0.0004342236666626184`, \
-0.008365653732221867`, 0.007236212360830805`, -0.001814887253296947`, \
-0.004303802932158651`, -0.008032688720354862`, -0.0026583491068481735`, \
0.004342990273323882`, 0.004644108160625191`, 0.005219699492818631`, \
0.004686246091035497`, 0.0012171412469215055`, -0.005758124379072603`, \
-0.007412745447482147`, 0.0010125646761198481`, -0.00023609401226292945`, \
-0.004092109274874724`, -0.008541079514543089`, -0.001669071039214813`, \
-0.005898444741175846`, -0.007553595857755099`, -0.004276518528026546`, \
-0.006030343031653479`, -0.009038290537479399`, -0.007559541058756461`, \
0.0037977451894413046`, 0.009557593374575905`, 0.004727619528647645`, \
-0.005205771562892231`, 0.005851208678326267`, -0.0012243857569749841`, \
-0.00020243205851827248`, -0.009807928713911104`, 0.007365451817380957`, \
0.00681063363843008`, 0.005617139213908252`, 0.007914832064530909`, \
-2.0246895187196745`*^-6, -0.002927958749490256`, 0.005554614529084609`, \
0.0013103427032056143`, -0.007269508215209081`, -0.0018055765080532554`, \
-0.006807915689819123`, 0.001511695012157796`, -0.006000283097387406`, \
0.004229243048620882`, -0.008286574392603469`, -0.007324993982289613`, \
0.006288252281068555`, 0.0018106446434938972`, 0.003031289998696878`, \
-0.006940401596843573`, -0.007494326182303612`, 0.0052891656385496005`, \
-0.005067300885239462`, 0.009915835814522347`, 0.008068588626158089`, \
0.003754066461718889`], List[0.008327917853691233`, -0.004705146665871539`, \
0.009900514696169292`, -0.0062952148605895306`, 0.006031534567672428`, \
-0.006281951129472878`, 0.002860919681538534`, -0.004042487516571137`, \
0.002636860647371675`, 0.004887231988505748`, -0.004859418651027868`, \
0.007456152563929525`, 0.0035680460879803227`, -0.007509014782711661`, \
0.0010458016631450864`, -0.005047332053689714`, 0.009959396398994538`, \
0.0006890172149535724`, 0.007480585094691225`, 0.0010563314208060469`, \
0.001037018574553062`, 0.00396337949772619`, -0.0014077931317505801`, \
0.00649399922569233`, 0.004453958810617192`, 0.0020140295405714215`, \
0.0009962349496742094`, 0.00980215552478728`, -0.0006885461450030356`, \
0.004786984958646594`, -0.0034181879284409036`, -0.0015523358211626537`, \
0.009068548524553792`, -0.005449416363279842`, 0.006483550604836068`, \
-0.009971385188237626`, 0.002340644573421896`, -0.002343848823601856`, \
0.0003860379358763995`, -0.0047128126639062184`, -0.0057194588357393356`, \
-0.0023944963099541416`, -0.004266311589310082`, -0.006525975142860324`, \
0.00549322638287341`, -0.006208350910877777`, 0.00007695847704295572`, \
-0.00838357497036113`, -0.00893397857268062`, -0.0025544840110001688`, \
0.0038452861152630177`, 0.008357988816530625`, 0.001337196237991129`, \
0.005743750302899028`, 0.004128098652757026`, -0.005908928883397634`, \
-0.003970068566733195`, 0.002628607103019872`, 0.006123786038439605`, \
0.006235399130831598`, -0.0000884465671560225`, 0.008043110877825436`, \
0.005171585731490586`, 0.0039861573899624796`, 0.007452377362995824`, \
0.007772822632273121`, -0.0010875894184312132`, 0.00601933173664785`, \
-0.00002153459551193157`, 0.00811875465556642`, -0.006629315215109233`, \
0.0015569527327026732`, 0.006255746950354604`, 0.004514801746616646`, \
0.00829109804479733`, 0.006330472566131264`, -0.00984178040382986`, \
0.001147457692663785`, 0.0027385678908229683`, -0.009294027876595626`, \
-0.0016407686803972601`, -0.009177752249979347`, -0.006062276432007185`, \
0.004180787677571504`, -0.004302521766906167`, 0.008232049759282066`, \
-0.0038763668436825674`, 0.005626745705254871`, -0.008902254096589436`, \
-0.00791809115119814`, 0.0025357486488689074`, -0.002456335701434033`, \
-0.00813050773828404`, 0.00040662427447469077`, -0.004625317774933184`, \
-0.006643410462770109`, -0.00013045869881280966`, 0.008563634108619284`, \
-0.009022971985006206`, -0.00017297985308681318`, 0.003543569230917594`, \
-0.005320996297347821`, 0.00652826723830726`, 0.0019080733001579087`, \
0.0024509728637091208`, 0.0028356632612735883`, 0.0008652363421517983`, \
0.0076902210912261175`, 0.009440523223567737`, 0.0008896425185332575`], \
List[-0.005620205127975383`, 0.009329537528843669`, 0.0035256476004460746`, \
-0.008606260890986123`, -0.00823662876527377`, 0.0063865883316651245`, \
-0.0053757785021947765`, -0.007364829850113663`, -0.0009475874196381955`, \
0.0065277996776791705`, 0.0024416386274444674`, -0.007819909428132925`, \
-0.00029811582801938033`, -0.006002158048737702`, -0.003127356054170888`, \
0.0000614299729676561`, 0.0035842979355387647`, -0.0041963551574777935`, \
0.007782045010588632`, -0.0009949020955062095`, -0.0021982936156574664`, \
-0.004019171853869692`, -0.006405947521161602`, 0.008627236925429053`, \
-0.00555504317342706`, -0.006678581650818`, -0.0015915703374622808`, \
0.007307228767174056`, -0.00734788617348562`, 0.00036058982564241004`, \
0.008528150524612553`, -0.006194891944916965`, 0.005186036256900929`, \
-0.0077011132375297345`, -0.0026494931086400234`, -0.005507605545369297`, \
-0.007353051177886219`, 0.007924472666644478`, 0.007528634768184824`, \
-0.0040421341922269455`, 0.004562120001161806`, 0.003206793090383568`, \
0.006842332035943206`, 0.005356958953173709`, -0.0072722037817589125`, \
-0.008621215524074882`, 0.004644375057296032`, -0.004105719713710022`, \
0.008836612065426509`, 0.002741339381107124`, 0.005772283106087593`, \
-0.00260234253700712`, 0.008669894681682704`, -0.00759296656025403`, \
0.002642562865659153`, -0.008812846279800633`, -0.0049238167886951345`, \
0.0038968023452342557`, -0.00909497207873209`, 0.004382901341266038`, \
0.0037229389861413095`, -0.005498768440784424`, -0.0019466221653444207`, \
-0.009500597479684063`, -0.0048432265837493604`, 0.003966690098095634`, \
0.00006095183777286156`, -0.004710364646753666`, 0.0029875113186202396`, \
-0.004541159995874365`, 0.0052505861318850565`, 0.003501074569641313`, \
-0.007667432510287342`, -0.0029869997680540203`, 0.005999164331943734`, \
-0.006983607290838523`, -0.006037331095537661`, 0.006652470842526039`, \
0.00807194380237266`, -0.0019581200245131075`, -0.005509119709596534`, \
-0.00992024396398137`, 0.00913461233467728`, 0.0036640234884219025`, \
-0.006243153896371534`, 0.004578995887760812`, -0.00036383506706957197`, \
0.0063530146299806065`, -0.00786464685987772`, 0.0033844473294387077`, \
-0.0033122967418597674`, -0.004135573978789532`, 0.00034199913455687167`, \
-0.009541195651247357`, -0.009427525108951104`, 0.000055124222580495846`, \
-0.004035920429467342`, -0.0004534322231095761`, 0.0017685639330554427`, \
-0.0059262374446458835`, 0.00898492675999419`, -0.007659573284320244`, \
-0.008578515522325546`, 0.005709026938305335`, -0.0008392333142827162`, \
0.009878243456155577`, -0.009308597946525159`, -0.009914713987762967`, \
0.00825367461023532`, 0.0029946099610929262`], List[0.0045629654020886146`, \
-0.0013708571756156154`, 0.0006179568835100457`, -0.009755154224388232`, \
-0.006881742269176726`, -0.009101257180671403`, -0.004026173525823559`, \
0.0066303835128266216`, -0.006978101925165792`, -0.004449027626047167`, \
0.005250703087284286`, 0.002110212143382372`, -0.0003439669745732947`, \
0.00001585656111723413`, -0.00932505105592761`, 0.0006030013916072073`, \
-0.008171620928708823`, 0.0040773239768003115`, -0.0008362163511835483`, \
0.007335903795594175`, -0.009047725464913406`, 0.0041378960294698765`, \
0.0059594839324609225`, -0.0001262964458571339`, 0.0018264134686000223`, \
0.001865635089027786`, 0.000524187328104192`, 0.009687781826969142`, \
-0.009202402745429744`, -0.0028595660724188843`, 0.0003576668727248815`, \
-0.0018534554791043434`, 0.00868734922936015`, -0.0025167699423982934`, \
0.007930327859119391`, 0.0067792514649694866`, -0.005183029450586775`, \
-0.002429900929721736`, 0.0032807939990214703`, 0.006858512400648997`, \
0.009201442446530851`, -0.0016013996246698192`, -0.0014293961685142645`, \
-0.0056654997555044065`, -0.002158401862360826`, -0.008559467616277745`, \
-0.006135197651419656`, 0.0018635848381661838`, 0.007449094824672323`, \
0.0006907969445831934`, 0.00008806800695074224`, -0.008450982405871152`, \
-0.008266127038788075`, 0.004084955570277066`, -0.0045792649234269595`, \
-0.0028806958083862563`, 0.008006872444152508`, -0.0028578610246746752`, \
-0.008242642469237886`, -0.0015963855557793172`, -0.003760429173081191`, \
-5.656438275686293`*^-6, 0.009348138902735136`, -0.004858566996971035`, \
-0.005849439115731721`, -0.00870658414439495`, -0.003322239895990342`, \
0.0015043346342661218`, 0.0002379756524510182`, -0.000358609055027756`, \
0.00936987574573988`, -0.009045069568014652`, -0.009720480880983089`, \
0.006897612287591406`, 0.005523350128584601`, 0.005452801542150481`, \
0.00482463881929384`, -0.0007406521055816663`, -0.0031710986464240573`, \
0.002802263528403043`, 0.0001035156996842014`, -0.007295240056439188`, \
-0.006983629110958442`, 0.002446326428345802`, -0.0007983379847319068`, \
0.00029913698357433155`, 0.0027554847960504954`, -0.004724417712923881`, \
-0.009592666389694596`, 0.0015311215401586885`, -6.524997910178909`*^-6, \
0.0025738414803078043`, 0.0005011884236413716`, 0.003943682659160081`, \
-0.0036665967098317223`, 0.007287612614852727`, 0.006277980847446379`, \
-0.0017467763831460412`, 0.006105376670025572`, 0.0036666696873932196`, \
0.004259144709637671`, -0.0033131957948653312`, 0.005773446246424396`, \
0.0018740757406862443`, 0.009685838089004188`, 0.0008538148353703055`, \
-0.0023416563566713774`, 0.0032535790724715317`, -0.005326296845472311`, \
-0.0017900124029037803`], List[0.003500616781015896`, -0.008397068760398897`, \
-0.004739974170821219`, -0.007092539063114349`, -0.00025712692933725287`, \
0.001289518219159902`, -0.005866994366472152`, 0.002906662351862613`, \
-0.002277809596831118`, 0.009244828686222666`, 0.00017509497427555323`, \
0.005714185837563862`, -0.008976241411198314`, 0.0012073777883834617`, \
0.004602461346032139`, 0.0034908046554899333`, 0.006360999231993611`, \
0.002809766939045541`, -0.008703472315423337`, -0.0037762005533121326`, \
0.00350518521237227`, 0.005568550939985754`, 0.004118457299943878`, \
-0.004078985767325703`, -0.006528343427215165`, 0.008175115593456413`, \
-0.008625919316386371`, -0.004120915486167241`, 0.007402640384047084`, \
0.00017650135281067209`, -0.005435921002237713`, -0.004549252399317499`, \
0.006679942451819645`, -0.00004999114806364738`, 0.0030033932615069585`, \
-0.005464421787198699`, 0.0007784600032699623`, 0.005799370372177991`, \
0.006943253738987125`, 0.0019206253964576155`, 0.0037748623355233074`, \
0.0031702514815559885`, 0.00004319174396610545`, -0.00556309099796673`, \
0.005955703102959977`, -0.00023219032669355086`, 0.008465544313725107`, \
-0.00022850323779085094`, 0.0033790122696117225`, 0.003558308201237089`, \
0.009006616215388945`, 0.001059322906222876`, -0.0015162446723473097`, \
-0.0017969361250111046`, 0.006084137398447716`, -0.003008655144035685`, \
-0.003145770033928713`, 0.00007958983228563768`, 0.0001993066773296505`, \
-0.007065155723277296`, 0.0011665712546542369`, 0.0075008309741602455`, \
0.00439061819231262`, 0.006482911435275265`, -0.009926086598174781`, \
0.0012528343923499524`, -0.0043706028433560945`, -0.003943349548862871`, \
-0.003727032520358907`, 0.0006020716173884035`, 0.00556359797698365`, \
0.00531385397899849`, -0.002605248522736199`, -0.00024119482275881954`, \
-0.0035254339838537777`, -0.0036959043064249755`, -0.0012315532315510073`, \
-0.00792737804011999`, -0.007280568263498988`, 0.005020464488260826`, \
0.005381448443589027`, -0.00692150542887187`, 0.0006971174296314907`, \
-0.0007891476631072848`, 0.003395506217876456`, 0.009763572034116031`, \
0.0029639494878680728`, -0.00039521296212616935`, 0.0003310315955032256`, \
-0.003511141103035506`, 0.007301117513201262`, -0.0008581459397828915`, \
0.008351790108972818`, 0.001760483743217297`, 0.005543800604368789`, \
0.007723590943003504`, 0.003315786342788323`, 0.00818222662496279`, \
0.0064967487534463506`, 0.0019721994092693`, -0.008128854577259509`, \
0.0000884108909131702`, -0.0010471161622664857`, -0.007312018167087965`, \
-0.004321850288021026`, -0.0054352522927591865`, 0.0025109903869481517`, \
-0.009630769888177314`, -0.0015664346393478856`, 0.005869430878244947`], \
List[0.40664230344167396`, 0.39316339081339513`, 0.4004812980019041`, \
-2.5067722182973844`, 0.40439853756414856`, 0.4024998913951789`, \
0.39930415265565317`, 0.3957782776322513`, -2.5209834628241237`, \
0.39821753109233893`, 0.3877426415842897`, 0.3884559093090243`, \
0.4052133245031956`, 0.39402973091414856`, 0.39748410995641253`, \
-2.508271696563252`, 0.39772821814378073`, 0.39162762034309`, \
0.4009340171092339`, 0.4053292046918408`, 0.4008689426378664`, \
0.40402197051383093`, 0.38994691813613047`, 0.4072326867983018`, \
0.3899411726295097`, 0.4011218522299328`, 0.3985535296431014`, \
0.3977821438652859`, 0.38790125918011387`, 0.40048090112486917`, \
0.4060587165897212`, 0.3953279280082199`, 0.4012416712791111`, \
0.3969549301792225`, 0.39493296197111716`, 0.40600976132905325`, \
0.40210518868387785`, -2.507096062264557`, 0.3908276777897913`, \
-2.5084994151304403`, 0.3916056451961711`, 0.3907719892705976`, \
0.3968610541107751`, 0.39809831235576826`, 0.3873814862580247`, \
0.39071275401532585`, 0.3896697645752416`, 0.4000161853772076`, \
0.3898820587942574`, 0.38781605915085665`, 0.3874491385809012`, \
0.3893638511107523`, -2.5144760036933502`, 0.38872099965201096`, \
0.39437710999570424`, -2.514989152342818`, 0.3981124706233186`, \
0.3881966214623517`, -2.5124126630022228`, 0.3974139488033199`, \
0.38998866917486524`, 0.3996104315664716`, 0.39138254533109884`, \
0.3930110864962133`, 0.3881711399507722`, 0.395743304590386`, \
0.3918386859768788`, 0.4001789593759557`, -2.5217088727666934`, \
0.4015220253940408`, 0.387485500015025`, -2.509091227368456`, \
0.3966822391173458`, 0.40377151057886757`, 0.3989139194282101`, \
0.40072108707908904`, 0.394830274984141`, 0.397837605840308`, \
0.4042265781779489`, 0.3913093514714434`, -2.5088650174806646`, \
0.38942695250496284`, 0.39682875646897836`, 0.400324211987584`, \
0.40646587987597144`, 0.39686026525572604`, 0.4050479154068088`, \
0.40184348954026855`, 0.39061856503882136`, -2.5235595044471397`, \
-2.5156595691236956`, 0.40688311965764523`, 0.3977287126948908`, \
0.40376589959219117`, 0.3894742097744494`, 0.4023253799014179`, \
0.39425842956215806`, 0.4028923429242918`, 0.3915858121172992`, \
0.4070459333633925`, 0.40339075078968023`, 0.400738201042113`, \
0.39855673162470473`, 0.3971407407202529`, 0.3893448863345079`, \
-2.5176708098870404`, 0.3912841593289427`, -2.5230561907142377`, \
0.4054386773740162`, 0.3881461897106063`], List[-0.6947686522022981`, \
-0.6935329412436451`, -0.7071690740488504`, -0.6920999337593359`, \
1.433135484133577`, -0.6944373302649884`, -0.6986319517239808`, \
1.4254891421221048`, 1.4380751552372129`, -0.7047534872409968`, \
1.4397744042530383`, -0.6928992629657401`, -0.6984777218758262`, \
-0.7042271256147984`, -0.6886160906831456`, 1.4273836610477826`, \
1.4313084527976259`, -0.6928808758208784`, -0.7019653803713335`, \
-0.7037519156245485`, -0.6979089027356186`, -0.700096357587538`, \
1.4433447250526332`, -0.6950876409077291`, 1.430109427909849`, \
-0.6930045106785199`, -0.6889127048824055`, -0.6951320410892805`, \
1.4390968839787404`, 1.4415165490573234`, -0.6950759391602325`, \
-0.6962968048205217`, 1.4428430899445446`, -0.6962232095234484`, \
-0.6915311941044459`, -0.7063614629119409`, -0.6924317692994341`, \
-0.6878381852663658`, 1.4393327922595076`, -0.6941247378319003`, \
-0.6936799312422084`, -0.7000535000772738`, -0.694060719993294`, \
1.4408490251583363`, -0.6936235439317526`, -0.694413291645048`, \
-0.6883556094883545`, -0.6981002491409606`, -0.7036058432004269`, \
1.4240627445153076`, 1.43400373110076`, -0.7058846771967001`, \
1.440676154508633`, -0.6921661799677443`, -0.696579946898238`, \
-0.7013236214661001`, -0.7042993329988715`, -0.7030750543315187`, \
-0.7068831331531549`, 1.4335982598570516`, -0.7074077367976239`, \
-0.7047829389443697`, -0.7013060699347581`, 1.4355684693621884`, \
-0.6943699963802195`, 1.4403023636618975`, 1.4408252500122622`, \
1.4324423080543989`, 1.4409909071384541`, -0.6960591456585165`, \
-0.7053471710050201`, 1.4338121355650912`, 1.4240201562528443`, \
-0.6898471102026736`, 1.4329953896317795`, 1.4263445258114689`, \
1.4398160589825701`, -0.7006860203235727`, -0.6892170705710987`, \
-0.7029793483745542`, 1.4243047849888053`, 1.4286281065290773`, \
-0.6991964071738295`, -0.6881378330109531`, -0.6899897835388334`, \
1.4368116908512159`, 1.4368604078356404`, -0.699897036300952`, \
-0.6913868455604696`, -0.6960283841507996`, 1.4269459653450394`, \
-0.6987053206778864`, -0.697946231587894`, -0.6984784566061436`, \
1.4260754587713056`, 1.4369341745511193`, -0.6911338699141516`, \
-0.7019778841115051`, -0.6975505045761574`, -0.6993765847342506`, \
-0.6933978649848443`, -0.7057517929193184`, 1.4286404761147902`, \
-0.7034321119177737`, -0.6992975081400697`, -0.701352146957802`, \
1.4300676551238447`, -0.6987257649339622`, -0.6963004860847832`, \
-0.7003469940258998`], List[0.1294309652344794`, 0.13749910045493013`, \
0.13754042698498828`, 0.1287303398524321`, -7.338795392451464`, \
0.12938419950216615`, 0.1287909800978199`, 0.13183653421660965`, \
0.14411369228912918`, 0.14079030893107722`, 0.12782240490448532`, \
0.14592322156426304`, 0.13508876831742023`, 0.12839030669088786`, \
0.12777388453542732`, 0.14170181000684368`, 0.1302449161591234`, \
0.12617745339204148`, 0.13763206337125902`, 0.12729417250908426`, \
0.137398334976387`, 0.14579159776133194`, 0.14542372581945787`, \
0.1315563624494281`, 0.12704580778090457`, 0.14062036341076123`, \
0.13815669339920061`, 0.12719450640565072`, 0.13348540700859177`, \
0.14320124187875372`, 0.13505250674947866`, 0.12923431645115308`, \
0.13182158921335027`, 0.13076639800913892`, 0.1305466797019349`, \
0.14568828734243217`, 0.1340904803337799`, 0.14295929382109954`, \
0.13259866603351936`, 0.12939923166304748`, 0.1271347497793447`, \
0.12952584101420728`, 0.13918145784112804`, 0.13092558920213376`, \
0.13383947281653502`, 0.14448021427372545`, 0.1298144864433166`, \
0.1292703433376779`, 0.13192222691797723`, 0.13245365998390718`, \
0.13495886160019793`, 0.13333140149959727`, 0.14469721156305132`, \
0.13317570183688562`, 0.13630700602124657`, 0.1368468135942342`, \
0.12888631756554852`, 0.14411879370460318`, 0.13965188688648753`, \
0.1294440795925884`, 0.1302105800770055`, 0.14528994590610692`, \
0.14156165819141`, 0.1265233193617407`, 0.14215576337246563`, \
0.13419535782941067`, 0.1343290276721107`, 0.13331390040790764`, \
0.14374195848650348`, 0.14428275549692887`, 0.13511333055935565`, \
0.14196217515720097`, 0.12966198666351847`, 0.13237429357732938`, \
0.13673291203485988`, 0.14111515883464398`, 0.13096488478316284`, \
0.13209940432771627`, 0.14330746693924884`, 0.13832627031201555`, \
0.1403098347395912`, 0.13612931278941526`, 0.12713703122947745`, \
0.14067239877304066`, 0.13699740053222345`, 0.1339102057882178`, \
0.13800839550317734`, 0.14414776191259784`, 0.13533707409933202`, \
0.13727860694420013`, 0.13763555463973204`, 0.14225913966392745`, \
0.12932074563114068`, 0.14024838707817391`, 0.13877394534556306`, \
0.1305360715408738`, 0.14372798929214486`, 0.13662194701087663`, \
0.1406681704982491`, 0.12815777866951278`, 0.12677721813498916`, \
0.14518159749715426`, -7.354228081804466`, 0.14242755862487425`, \
0.13193597526464396`, 0.1400080493929681`, 0.1275477914778022`, \
0.1434683395783469`, 0.1341789868060031`, 0.1448269651181843`], \
List[0.21998731210025205`, 0.21686065496907858`, 0.20921856301204395`, \
0.22751685356894133`, 0.20961330285317264`, 0.22336277704416516`, \
0.20957268549180993`, 0.20959337914618376`, 0.22057412585222508`, \
0.2091788360154206`, 0.22274069306214103`, 0.21755731342694887`, \
0.2115613635686349`, 0.2172103775563101`, 0.2105798151906258`, \
0.2150004960628256`, 0.2243060694972145`, 0.22315882373251456`, \
0.22277967258510584`, 0.21000009090331234`, 0.21486557712144685`, \
0.2273169090708636`, 0.22721043548201791`, 0.2118847489864315`, \
0.21848475356070654`, 0.2126229791795478`, 0.2215440842079362`, \
0.21395211879236373`, 0.2203014349521571`, -4.5820613759254085`, \
0.21209064176744472`, 0.2146890230820437`, 0.20945652147471333`, \
0.2195990759672006`, 0.21567083632129389`, 0.21646920894688307`, \
0.2227394829379041`, 0.22140697112096472`, 0.2131343427743589`, \
0.21341582327953953`, 0.22327252441933174`, 0.2202401705812731`, \
0.21292268801201022`, -4.588038596726772`, 0.22390636223462296`, \
0.22140922303350008`, 0.2275995029541959`, 0.2158870820294263`, \
0.22691985163241585`, 0.21420422095747987`, 0.22561947827598028`, \
0.21694626016465363`, 0.21236715732056438`, 0.2166719115041214`, \
0.21667506884485846`, 0.21077653963705395`, 0.21626558629511847`, \
0.22572946635181543`, 0.2279473618700682`, 0.21480870929897689`, \
0.2244631930757953`, 0.22355449580525272`, 0.21063334497720132`, \
0.22000820907042423`, 0.21858499913634039`, 0.2170856416007545`, \
0.21110996590465045`, -4.584981679413386`, 0.22815728030251867`, \
0.21926437899012025`, 0.2167876837206994`, 0.22497370441991094`, \
0.2127792752137236`, 0.21150509937680706`, 0.21660686187086628`, \
0.21963458171712125`, 0.2106263264741843`, 0.21996959624809473`, \
0.21763508057868053`, 0.21751969857822834`, 0.21070237762259555`, \
0.22270003346875844`, 0.2188014003067259`, 0.2274837370637315`, \
0.21141569247132613`, -4.579503636109623`, 0.21261174270681304`, \
0.22146389826264948`, 0.21313500561348458`, 0.21861682346573427`, \
0.21225164950004866`, 0.21334061661879708`, 0.22415112616159605`, \
0.2171199431669356`, 0.21639454660947516`, -4.590809143369839`, \
0.2120280829919883`, 0.2265333683511512`, 0.2217564035010245`, \
0.2132159296337088`, 0.2121722106210715`, 0.21235751278302628`, \
0.21410998398845293`, 0.22779835274714977`, 0.22632228971233245`, \
0.21173560336864908`, 0.21055083744196929`, 0.20978586898311666`, \
0.22722477216039255`, 0.22754765621739748`], List[-0.6176373647930907`, \
-0.6120703401256471`, -0.6076353542825996`, -0.6219838567144872`, \
1.6233948185070972`, -0.6210519804807763`, -0.6187683736453116`, \
1.6279799563174762`, 1.6396754101281086`, -0.6213568811935908`, \
1.641519240719224`, -0.6062058069871824`, -0.6084722193725289`, \
-0.6049605501867024`, -0.6034527708305056`, 1.6336890194203681`, \
1.640271548629565`, -0.617348380256721`, -0.6056708251813987`, \
-0.6188988900903187`, -0.6038648697292731`, -0.6215701597235368`, \
1.6385616495522348`, -0.6068445829408811`, 1.6400803137166753`, \
-0.6146244828777159`, -0.6189314478503661`, -0.6054647058224678`, \
1.634379952534125`, -0.6093418004968946`, -0.6174427417845136`, \
-0.6085803384588595`, 1.6311216690577706`, -0.6141777941638523`, \
-0.6203625666709562`, -0.608288517928633`, -0.6150970457197988`, \
-0.6214345197757434`, 1.6428980305607195`, -0.6173843562848937`, \
-0.6189256403699865`, -0.6212757041846867`, -0.6176011581326033`, \
-0.6196772373394682`, -0.6166346829774224`, -0.6180224091728792`, \
-0.6080377385847753`, -0.6077957407802229`, -0.6175764523140647`, \
1.623733565604781`, 1.6284803266050742`, -0.6121375279899703`, \
1.6278732082381462`, -0.6028629574850021`, -0.6172186611996742`, \
-0.6125074427005316`, -0.6113065511457961`, -0.6126081193526874`, \
-0.613874877162614`, 1.6416984957970608`, -0.6162464028379637`, \
-0.6154400289049556`, -0.6085882408127408`, 1.6334085157630467`, \
-0.6092587768757985`, 1.6350923867566762`, 1.6263614467596295`, \
-0.6067992913072224`, 1.6373154589621126`, -0.6167159126042233`, \
-0.6151606821654414`, 1.625695773757232`, 1.6256241814985284`, \
-0.6059046777952799`, 1.6337147987211762`, -0.6122056397802116`, \
1.6393783869617469`, -0.6070118805803432`, -0.6127518831527381`, \
-0.6055275451633781`, 1.6246026634190431`, 1.628158057296395`, \
-0.604596503229919`, -0.6106119017506854`, -0.6157741414046556`, \
-0.6199307958245374`, 1.626387623991765`, -0.60771442520467`, \
-0.6188511912362376`, -0.6024773331435188`, 1.6399728725995084`, \
-0.6117773154114317`, -0.6027531174013825`, -0.6023760652913813`, \
1.639821132747901`, -0.6058425181614624`, -0.613470309801816`, \
-0.6110026128911241`, -0.6113506348422392`, -0.6112534716016136`, \
-0.61275871863419`, -0.6180456902697005`, 1.6237857456302707`, \
-0.6064363932374768`, -0.6094130067394817`, -0.6028908452246807`, \
1.6292197466692633`, -0.6183613336803814`, -0.6101112742586934`, \
-0.6191949830021696`], List[0.3938177421366493`, 0.3910893135795384`, \
0.3902246903608575`, -2.5251063319379035`, 0.40086807265507496`, \
0.3883400239883768`, 0.3906967125296082`, 0.39124318469229924`, \
-2.507642250457231`, 0.40321152483142325`, 0.4039218206851326`, \
0.40627226283965023`, 0.3917922687936688`, 0.40178625582272626`, \
0.394812372509329`, -2.509256852488892`, 0.3927292188652028`, \
0.3985074459911015`, 0.40368011784901436`, 0.38865891250433054`, \
0.39300538105838256`, 0.4020239048496674`, 0.3889847039903784`, \
0.3959088635522943`, 0.39109119987621904`, 0.3984221005750334`, \
0.399853582094824`, 0.39195531026239533`, 0.396874282788869`, \
0.39802052162332335`, 0.4057424380836044`, 0.39005253432568165`, \
0.39374630285581214`, 0.39292689359039296`, 0.3928192696068059`, \
0.39488855117468175`, 0.40669849800077457`, -2.5190204423413785`, \
0.4067270273612543`, -2.517881638351036`, 0.40441927713866493`, \
0.3923782068652345`, 0.39216216123924996`, 0.4057262513550937`, \
0.395627813787681`, 0.4054132350556754`, 0.39065233605510086`, \
0.3928345590165029`, 0.3967866835599614`, 0.39846911584915173`, \
0.3992521893955651`, 0.40211798969080886`, -2.5178190206706796`, \
0.39183834225763076`, 0.3894087148788915`, -2.517891389730466`, \
0.38811985725740217`, 0.4069540204831458`, -2.5147628293941406`, \
0.39186229892482716`, 0.3897817251313407`, 0.3901568972079036`, \
0.39362545344337757`, 0.3893458862566219`, 0.3899301052238839`, \
0.40096294640977254`, 0.4003421713679007`, 0.39409128315805775`, \
-2.5239961561086686`, 0.40010235775454894`, 0.4024101482271547`, \
-2.5170704634771806`, 0.40258238330112295`, 0.40214328593635384`, \
0.4050310423735562`, 0.4012877163946259`, 0.3958091639885022`, \
0.38940549849565614`, 0.4019714712466943`, 0.4030151009773093`, \
-2.510981989681659`, 0.3929983317573165`, 0.40627430555533284`, \
0.4022595870162123`, 0.39840538853028706`, 0.3902303827625274`, \
0.39523249529099336`, 0.39629023411420294`, 0.40172164881270167`, \
-2.520959370733511`, -2.515650870342592`, 0.4023406625836022`, \
0.39952088394539853`, 0.39297685518610115`, 0.40587334175620116`, \
0.38915392021210593`, 0.39662613298748933`, 0.3940257806359952`, \
0.3981630064657748`, 0.40496008286534096`, 0.39088814537181404`, \
0.38836688189649543`, 0.4007721544645719`, 0.3929742581817982`, \
0.4022382563561974`, -2.508961100844488`, 0.3930216533888223`, \
-2.518040215141066`, 0.3887021501221299`, 0.3925088490654925`], \
List[-0.23751403497658133`, -0.23807215604107476`, -0.2412831266493446`, \
-0.241549215526009`, -0.23836024074436768`, -0.23213633250009585`, \
-0.24551204757344913`, -0.24077118180286972`, -0.2304967900226647`, \
-0.2436119119161811`, -0.23185513688625276`, -0.24553307847667635`, \
-0.24371424027757171`, -0.2409378053435629`, -0.23413082757035572`, \
-0.24776309429806326`, -0.24983900215638227`, -0.23670625492872627`, \
-0.23679313760384926`, -0.24925767760660564`, -0.2350032748941061`, \
-0.23566235075956996`, -0.23848206442600808`, -0.23305042216576938`, \
-0.23050778232581848`, -0.23819904553076898`, -0.23589241296592647`, \
-0.23602274073276272`, -0.23517456810514048`, 4.165816801861433`, \
-0.2386743967416578`, -0.2346688128730211`, -0.2468492624423294`, \
-0.2442501398860652`, -0.23714308500420972`, -0.23729889113019495`, \
-0.23264112160976275`, -0.24852403795584163`, -0.2425712337933016`, \
-0.23641809583500822`, -0.23420903367940032`, -0.23719028636698192`, \
-0.2494950975727385`, 4.173257601246203`, -0.24772908460467297`, \
-0.24865904976189918`, -0.24267368020833943`, -0.2430929998108117`, \
-0.2392836368937523`, -0.24381270854814233`, -0.24160732920582584`, \
-0.2356678907586509`, -0.24332999760155222`, -0.24804048633807133`, \
-0.24225007469396742`, -0.24497012132655085`, -0.2438946100215913`, \
-0.2309504162433447`, -0.246513266213768`, -0.24278037904667618`, \
-0.24180236433577032`, -0.2408803969957764`, -0.24612058779467236`, \
-0.23096808496913024`, -0.2430447251335226`, -0.23401148113373826`, \
-0.236461015472013`, 4.164702102691021`, -0.2400470286888035`, \
-0.24772168619162793`, -0.24643333689617286`, -0.24429943963452116`, \
-0.23953008931919756`, -0.2430832481118767`, -0.24637319425000978`, \
4.171651371713325`, -0.23893520816526462`, -0.24784695171329274`, \
-0.2372300981402678`, -0.2479491925970454`, -0.2487312398350212`, \
-0.23879938867202707`, -0.23902843135055735`, -0.2379206482805102`, \
-0.23883299525620225`, 4.155726831571205`, -0.24920098323817785`, \
-0.2325314663822213`, -0.2394991629241219`, -0.24496108431272212`, \
-0.23024268050223368`, -0.24151849454801866`, -0.2483783161709125`, \
-0.2331057357999529`, -0.2312443899752275`, 4.170196589906303`, \
-0.2332667977442904`, -0.23728601995561413`, -0.2476883700375442`, \
-0.2326450259158373`, -0.23547034155591962`, -0.23129678428728792`, \
-0.24603795741715573`, -0.24090439544399245`, -0.24997966573973554`, \
-0.24573716636338047`, -0.23996274914125945`, -0.24448789004411628`, \
-0.24089778195086556`, -0.2344580097814369`], List[0.28313273007132994`, \
0.2817105329608804`, 0.27607496734246095`, -3.5764960086572666`, \
0.273804796785154`, 0.2834290798615129`, 0.2801647649031048`, \
0.28701090778800314`, 0.2873738402396083`, 0.2710933415209473`, \
0.2722122349259268`, 0.2864587279620793`, 0.28936431697212567`, \
0.2849031824608057`, 0.28397748866719746`, 0.28211707677381453`, \
0.2745329705513962`, 0.27624404658156654`, 0.2747950522925291`, \
0.2701863949765928`, 0.27614903675874664`, 0.2884627621587727`, \
0.287498913504187`, 0.2726530476991989`, 0.2886680718124378`, \
0.27925475075329526`, 0.2815392357566`, 0.27128461294737316`, \
0.27216175197776493`, 0.277392176952568`, 0.2837550682259799`, \
0.28807756420535185`, 0.2892925260568349`, 0.28240471586702126`, \
0.2872339908471669`, 0.28118308365870426`, 0.2788326513158203`, \
-3.566799363886262`, 0.2814164019104369`, -3.5793740378812076`, \
0.28297532092370514`, 0.28664753322095005`, 0.2782508484049598`, \
0.2788033244360974`, 0.2861795446797749`, 0.27581222482225554`, \
0.28879012588647834`, 0.2822235239583168`, 0.2789349938702236`, \
0.28035072390928645`, 0.281564692557036`, 0.27973241066333`, \
0.2812846574994497`, 0.2894087420691745`, 0.28461061681499356`, \
-3.561245785741723`, 0.275456792069158`, 0.2780421122389904`, \
-3.56832353761558`, 0.2852829291069568`, 0.27852329987781466`, \
0.27285310189479517`, 0.27821407779353446`, 0.28677089722248383`, \
0.28164657498060264`, 0.28420538450353117`, 0.27152030221477913`, \
0.27307707581201623`, 0.2753169194337618`, 0.2877888068976094`, \
0.2731575094807093`, 0.2874902164548041`, 0.28590164538589746`, \
0.28176290712299795`, 0.27262164678465833`, 0.273359021216154`, \
0.2710576160089288`, 0.2717343541718401`, 0.2850860845746931`, \
0.28621686320846884`, 0.2795699720897607`, 0.2740463610911975`, \
0.27678235507636506`, 0.2780359231165642`, 0.28822854733287373`, \
0.28122813501540517`, 0.2810900256469993`, 0.27808821850955107`, \
0.28205380213902403`, -3.560891178671863`, 0.28686911664012266`, \
0.2879701214695455`, 0.2854669890174893`, 0.2891905511270076`, \
0.2795133063281654`, 0.2847365106040187`, 0.279819755221764`, \
0.277017198867769`, 0.27355125958710585`, 0.28661682563768887`, \
0.2846897066825828`, 0.2787803417556712`, 0.2778907401630251`, \
0.27759330371961827`, 0.2760450317134315`, -3.5677378675478697`, \
0.27748367807446656`, -3.5698394885283373`, 0.2854804416789024`, \
0.277717554377358`], List[1.2197551747816135`, 1.231918134259013`, \
1.2152077884902464`, -0.8065804670810672`, 1.2285271802529476`, \
1.2162089010817594`, 1.21508432361694`, -0.8095350197803804`, \
-0.8083632201081303`, -0.8176023756647169`, -0.8132719291428063`, \
-0.8132669551541463`, 1.2169892111256404`, -0.8126129249720206`, \
-0.8171297429452538`, -0.8091795001747124`, -0.8123881037540449`, \
-0.8159817289592277`, 1.2318447777108537`, 1.2310672263754816`, \
-0.8086104218843243`, -0.8153274066196191`, -0.81268609838327`, \
-0.8160930667766642`, -0.8258799873403637`, 1.23068676880102`, \
1.2293316695932777`, 1.2249463953225388`, -0.8066938599022165`, \
1.2316739253619635`, 1.2210308048020706`, 1.2157357967589582`, \
-0.8114706317476669`, 1.217899793412398`, -0.8167031264514079`, \
1.2212338861915994`, -0.8179824171757758`, -0.8245011289783434`, \
-0.8069221210744822`, -0.8182542455137497`, -0.8213242490567165`, \
-0.8161623880726595`, 1.2253044489343947`, 1.2285118827406276`, \
1.2291597361121505`, 1.2227977405459929`, 1.224167211166128`, \
1.23004419104301`, -0.817334122798542`, -0.8158999630524204`, \
-0.8112393760753602`, -0.8066521803993031`, -0.8226822217423515`, \
-0.8170483390695602`, 1.222621078701263`, -0.8081130425740759`, \
-0.8217323064899036`, 1.2311640499866738`, -0.8262570903450897`, \
-0.8254521628863238`, -0.8085535255893379`, -0.8079592230994492`, \
-0.8093177310408813`, -0.8250240240140697`, 1.2166668245727381`, \
-0.8075730559461867`, -0.8214459242662525`, 1.2272191217447537`, \
-0.8217810265179862`, -0.810151584670442`, -0.8139525231961613`, \
-0.8201297051649802`, -0.8217877104126884`, 1.221927035666223`, \
-0.8156419005051684`, 1.218002705442711`, -0.8158148276542524`, \
1.2149001255330574`, 1.2256481517419666`, -0.8185058925587798`, \
-0.8150646158603939`, -0.8221318501570274`, -0.8089459087601847`, \
1.218213459974587`, 1.2296701840328335`, 1.2327299110429866`, \
-0.8132357501637841`, -0.8072807473271412`, -0.8119970169002682`, \
-0.8121916614144534`, -0.8187176536724846`, 1.2339350513522882`, \
-0.8100380189001543`, 1.2186638143314508`, -0.8196479849002746`, \
1.2214626036925047`, -0.8153352739950608`, -0.8224075990071967`, \
1.2188257079064198`, 1.2298559602108194`, 1.220398157989583`, \
1.2234254748433175`, 1.2150503494054818`, -0.8089239475833232`, \
-0.8164910717738095`, -0.8151549462875921`, -0.813007739817243`, \
-0.8066202280797818`, 1.231526411385555`, 1.2190167543468784`], \
List[0.24136541463058905`, 0.2424721672974832`, 0.24912007917993126`, \
0.23114124027847688`, 0.23465462315462393`, 0.24323789638411725`, \
0.2387208612726193`, 0.2429930896164256`, 0.23107368647235366`, \
0.2438171485641331`, 0.2370006027200326`, 0.2394756452657445`, \
0.23332350157623039`, 0.23220115188522145`, 0.2333342503863889`, \
0.2497924851536654`, 0.2455225525645711`, 0.23970154532866209`, \
0.24056290407318934`, 0.238724709281025`, 0.2456412627042722`, \
0.23685822029825224`, 0.23916836456758347`, 0.2452715715577603`, \
0.23361932031904487`, 0.2479137068534313`, 0.2353840244685824`, \
0.23802779173087132`, 0.2349649495264326`, -4.164588429006551`, \
0.24856846194183618`, 0.23741707660496517`, 0.23067118060543967`, \
0.2464657581994496`, 0.23671310495783726`, 0.23036870162729034`, \
0.24807735418484328`, 0.23525320622432955`, 0.231108531930137`, \
0.23901162431207654`, 0.23529906745479573`, 0.242583775318158`, \
0.2466064631188866`, -4.172807395882889`, 0.2429707228413669`, \
0.23722015782519784`, 0.24114947104070222`, 0.24089879244734538`, \
0.2319619697987539`, 0.24702770030338272`, 0.2395135602323398`, \
0.2452983466034858`, 0.23029218359668344`, 0.23911110867862667`, \
0.24934674853743907`, 0.23760781765225444`, 0.24196186234071107`, \
0.24610375178176325`, 0.2339290547388158`, 0.250102913558795`, \
0.23807822024448277`, 0.24540553186390004`, 0.23280716546411268`, \
0.24945752147411288`, 0.23718143544755735`, 0.23233715949113493`, \
0.23300754042909705`, -4.158123796987969`, 0.24068788044139303`, \
0.2311655136753655`, 0.24302382283986956`, 0.2407876477083954`, \
0.2477692914848639`, 0.24591248343628797`, 0.2307843644520054`, \
-4.156267739254991`, 0.24088289916781`, 0.24561711851862567`, \
0.24440211693633368`, 0.24653168881517523`, 0.2359759727161052`, \
0.2333227801101984`, 0.24633944225963733`, 0.23972491034068844`, \
0.24960451025213806`, -4.17248826095096`, 0.24916568199411313`, \
0.2495338638039852`, 0.23422033899984787`, 0.24155209718847753`, \
0.23798218095044454`, 0.2343066519192781`, 0.2326135692976984`, \
0.24237133736187863`, 0.2439080956098609`, -4.158598780601571`, \
0.24550843254596721`, 0.23893066125735907`, 0.23428823769527873`, \
0.23362952550735577`, 0.2501218708737831`, 0.235317014176255`, \
0.24940094126986728`, 0.23969465169248855`, 0.23253015756187678`, \
0.23683642316357537`, 0.23874944437241832`, 0.2478762283957134`, \
0.24865295324177283`, 0.2313852478682209`], List[-1.0922722189894745`, \
-1.0859157495661722`, -1.0921345859890912`, -1.095806665190952`, \
-1.0968041782143299`, -1.0963416906788432`, -1.090300198832636`, \
0.9134608854781219`, 0.9171536033714859`, 0.9072316643682109`, \
0.9034802369163187`, 0.9118706240746228`, -1.1021534246868006`, \
0.9217166103955159`, 0.9136722217004958`, 0.9094996879485655`, \
0.9050804982990602`, 0.9110514202374893`, -1.100481722703815`, \
-1.0893180603814732`, 0.92135154234084`, 0.9045798980675703`, \
0.9040512477785142`, 0.9055467879471575`, 0.9117723954317093`, \
-1.1030409398407366`, 0.9160883741794192`, -1.0963688446279445`, \
0.9139904425134037`, -1.1044350277646724`, -1.098497396706919`, \
-1.0916484818817742`, 0.9040395487211585`, -1.0897241084439289`, \
0.9167961135263764`, -1.0937313286655246`, -1.0980619076464357`, \
-1.089050453204302`, 0.9228689759159461`, -1.1026016569080646`, \
0.9102723839540323`, 0.9166454095234025`, -1.09059421461213`, \
-1.1014357818803409`, 0.9120781562513822`, -1.0915829982601082`, \
-1.0903326752764197`, -1.088497934102514`, 0.9156814593219189`, \
0.9200483871885823`, 0.9090514442792801`, 0.9185138355069792`, \
0.9033483151234547`, 0.9085642667320034`, -1.1041956599072817`, \
-1.0988159647649096`, 0.9060558349022633`, -1.0927070249622313`, \
-1.0892979003675094`, 0.9033865221124485`, 0.9178989415575505`, \
0.9157897474150292`, 0.921270217008779`, 0.9153577789414272`, \
-1.0866545824166323`, 0.9145053648506131`, 0.9216219109941919`, \
-1.1048274917500918`, 0.9219939038172607`, 0.9115770277057706`, \
0.9049271388505145`, 0.9064313783731339`, 0.9053031784104109`, \
-1.1003419613709722`, 0.9155309809418123`, -1.1020432825535569`, \
0.9073159278552213`, 0.9190799971690607`, -1.088706503512269`, \
0.9115382734330216`, 0.9173207054354918`, 0.9029056252839386`, \
0.9175402885917517`, -1.091155275532633`, -1.0886135396083532`, \
-1.095848738304073`, 0.9034803021292114`, 0.9057745695577174`, \
0.9120443426153758`, -1.1034440534001189`, 0.9084006330481715`, \
-1.0937064911661873`, 0.9058808121238405`, -1.0994432713847693`, \
0.9104447396758749`, -1.0972427289205438`, 0.9052696061307484`, \
0.9172764692881555`, -1.1018458789057448`, -1.0858768464825563`, \
0.9074929835899057`, -1.0931433292886903`, -1.0970870752288133`, \
0.9055073664345145`, -1.0921599636622834`, -1.0883750362022029`, \
0.9153914334895349`, -1.0913476649122047`, -1.0902159625590848`, \
-1.1002815334797598`], List[0.8226267987018725`, 0.8094854305288989`, \
0.8173150014738874`, -1.2158984488230216`, 0.8249120869501877`, \
0.8087122242409266`, 0.8076656037680296`, -1.2293011541241077`, \
-1.2329564528981571`, 0.8091652964998498`, -1.2324810779607784`, \
0.8086104489029827`, 0.8241447746475322`, 0.8213011024646016`, \
0.8066972472615566`, -1.222354738926484`, -1.230729462954115`, \
-1.2154440829818172`, 0.8194253263447794`, 0.8130698829484313`, \
0.8206212382922224`, 0.8256855427832979`, -1.2294636875783675`, \
-1.2241585594597226`, -1.2300710775108639`, 0.8116337000969001`, \
0.8158709841636068`, 0.8137174999570368`, -1.2314191130988967`, \
0.8139697686808399`, 0.8181446793736527`, 0.8234594197124897`, \
-1.2147626483871095`, 0.8259571054834384`, 0.8177887532350231`, \
0.8166471724859052`, 0.8151540495969772`, -1.2215792202117521`, \
-1.2344483638106312`, -1.228594007695622`, 0.8065408662392867`, \
-1.222139150702659`, 0.8175683651157641`, 0.8175014586103485`, \
0.8205094934840412`, 0.8236776299995252`, 0.8124198207520761`, \
0.8075704535663384`, 0.8108463749357165`, -1.220248330217017`, \
-1.2151951466679263`, -1.2336151247321046`, -1.2153939776304188`, \
-1.2182433524363914`, 0.8070107619024566`, -1.2235137849738693`, \
0.8259766317260172`, 0.8090077626356601`, -1.2277294710544204`, \
-1.2195472527630518`, 0.807828091028913`, -1.218559014800138`, \
-1.2179884163709116`, -1.2187863774236805`, 0.8127448930525663`, \
-1.2342256068252684`, -1.2186943530968397`, 0.8155330160740931`, \
-1.2300273620487674`, 0.8200903286740228`, 0.8108024692170435`, \
-1.229977626630911`, -1.2160356776473424`, 0.823161700126089`, \
-1.227071408919517`, 0.8165987433125761`, -1.232595817051498`, \
0.8244662099480664`, 0.8158653608177525`, 0.8255812545070992`, \
-1.2303137822471417`, -1.2148494618464067`, 0.8209479356615066`, \
0.8262049853913266`, 0.8100059931222231`, 0.8233913402803714`, \
-1.2194147178384955`, -1.2184264519444994`, 0.8129925148713708`, \
-1.225469638018426`, -1.217365451812288`, 0.8114510854324064`, \
0.8067950201758533`, 0.8200382128508582`, -1.226144831883701`, \
0.8139416910262772`, 0.8254225282239335`, 0.8226942836099772`, \
0.8259003729963273`, 0.8220263752400532`, 0.8157160870741039`, \
0.8253750552897869`, 0.8147821065275419`, 0.8142954986737627`, \
0.8228685228876168`, -1.2267512914437828`, -1.2293667934243842`, \
-1.2153785531419015`, 0.8212539419376327`, 0.8088490650699882`], \
List[-0.7575414525278162`, 1.3141397436476097`, -0.7467324268568153`, \
-0.7522069400896928`, -0.7511474126648431`, -0.7554354171457025`, \
-0.755847602215838`, -0.7555098893767265`, 1.3227664667051198`, \
1.3273659513047311`, -0.7519549333378821`, 1.3240888886371438`, \
-0.7564314273567952`, 1.3142193876022432`, 1.3220420261987553`, \
1.3313577274237542`, -0.7475572264970705`, -0.7597854818463693`, \
-0.7618879578657864`, -0.7584323356330327`, 1.3276029548245702`, \
1.3249018585776764`, -0.764270347325922`, -0.7646283935359478`, \
-0.7644563540170479`, -0.7575411877164153`, -0.7512763735613086`, \
-0.7526148867712262`, -0.7572225484605957`, 1.3291462793799478`, \
-0.7565783201211748`, -0.7532592474249759`, -0.7527661323839898`, \
-0.7492099463699443`, 1.3177121163935412`, 1.3300760641822602`, \
-0.7542303387086121`, -0.758194263623309`, -0.7480651497646524`, \
-0.7621116355869026`, 1.3184262278159031`, -0.7538881212448313`, \
-0.7611303155634729`, 1.324628977025374`, -0.7533615762864307`, \
-0.7519803329693723`, 1.3165056532388923`, 1.3208152558119652`, \
1.313424407913704`, -0.7610461920608446`, -0.762533798158447`, \
-0.746878660532154`, 1.3316137248869409`, -0.7509085905983419`, \
1.3230196215901069`, -0.7503148458542809`, 1.327924194728236`, \
-0.7529896772902127`, -0.7471366298228823`, -0.7476825631491674`, \
1.312987782637202`, -0.7503514218098475`, -0.7622986078907281`, \
-0.7557584439223006`, -0.7553353939874637`, -0.7572766263319328`, \
-0.7573139235692682`, 1.3140410185279838`, 1.3221570866550452`, \
1.322911328324592`, 1.3165593167963618`, 1.3249897510454347`, \
-0.7573070176901411`, -0.7609508209702187`, -0.7642165113662863`, \
1.3175102374515553`, -0.759524109673782`, -0.7584083641852442`, \
-0.7629372559832701`, 1.3267157480989618`, 1.332078498421634`, \
-0.7487991772768192`, 1.321931472107222`, 1.32224316537514`, \
-0.7603280883162326`, 1.3184500412533262`, -0.7552589040373148`, \
-0.7507291027754527`, 1.327285127437217`, -0.7529860000040702`, \
1.3150615302562632`, 1.3309339834821234`, 1.314421199968907`, \
-0.7538810475211746`, -0.7654401473414786`, 1.3131909349090063`, \
1.3327678065251405`, 1.3161041295918372`, -0.7562735581385922`, \
-0.7647938106129135`, -0.7618172581977207`, -0.7552751323841093`, \
-0.747270206604528`, 1.3179015046157183`, -0.7572361736882229`, \
-0.7532729968968678`, -0.7476970673740826`, -0.7484115571937467`, \
-0.7574027322162382`, -0.7551885499119572`], List[0.3568616757236018`, \
-2.8591678335244737`, 0.3598322233136734`, 0.34862063684553496`, \
0.3592504254849084`, 0.34146136743496636`, 0.35559976424452155`, \
0.3456541091761449`, 0.35446178263567163`, 0.34354929799536743`, \
0.3509422745118186`, 0.34760739822162734`, 0.3499150048204824`, \
0.3443229980207163`, 0.35250525568489527`, 0.33994416026999014`, \
0.34452954126641566`, 0.3505365754425548`, 0.3561656832293768`, \
0.3496817707234127`, 0.35940232011388146`, 0.3590780462113459`, \
0.34182190545972446`, 0.3435466324262564`, 0.3515996663100485`, \
0.3533416148715399`, 0.35482518564878435`, 0.3518867420706974`, \
0.35610399525710384`, -2.8594538826028644`, 0.35153239626847965`, \
0.34437738636261966`, 0.35015647784211756`, 0.34967477339030956`, \
0.3474972154983921`, -2.854230767247289`, 0.34049869451092585`, \
0.35378554353831726`, 0.34163513045672467`, 0.3449177220952819`, \
0.3544716822779737`, 0.3401534899738427`, 0.3488713089654764`, \
-2.8544327490988257`, 0.35943111857234783`, 0.34340546765315433`, \
-2.8675201202095577`, -2.8564577960891744`, 0.3579181148003626`, \
0.3505640329452176`, 0.35577147240532336`, 0.34515469589760306`, \
0.34069248087910187`, 0.35873845669332033`, -2.8547290929107856`, \
0.34085471431057573`, 0.3420588273544478`, 0.34696782937899096`, \
0.35230489226994466`, 0.342948721360315`, 0.3531231467981833`, \
0.34831083221809606`, 0.3445023933207438`, 0.3444066161603311`, \
0.3598960197293951`, 0.3411502814266659`, 0.34823722484126823`, \
-2.849886099215486`, 0.3545016261907652`, 0.3484723086252626`, \
0.3516658316481843`, 0.35132132749049116`, 0.34590860053192257`, \
0.35805148017615473`, 0.3412209110604968`, 0.34462317390982905`, \
0.35886206179853286`, 0.3555034249383502`, 0.34449423035779053`, \
0.35515816510394693`, 0.34775869376980223`, 0.3590864577017353`, \
0.3577747219072539`, -2.852614283883145`, 0.3471276465078279`, \
-2.851257859460198`, 0.351113542476151`, 0.34812131612224656`, \
0.3576786785422531`, 0.3442626057159365`, 0.35732598916117847`, \
-2.863864777508747`, 0.3450213705927498`, 0.35331906800505586`, \
0.3415601996750743`, -2.8539623024055687`, 0.34676580131507795`, \
0.35907157072101026`, 0.34502412666515225`, 0.3542792183821745`, \
0.3455929532015919`, 0.35299991557686294`, 0.3532106558376431`, \
0.3540089432448087`, 0.34351345303974695`, 0.3572265586958205`, \
0.357252829818508`, 0.3436998188660272`, 0.3489017070326607`, \
0.3510648871012396`], List[0.2784996362360309`, 0.27462689457937156`, \
0.2863051266465701`, -3.564328337400391`, 0.27673882556764406`, \
0.2898002684602767`, 0.2846879375772796`, 0.2722647732220412`, \
0.2806774885351921`, 0.2866732004018723`, 0.272911460430897`, \
0.28770691038192986`, 0.27521959676197827`, 0.2802474500669608`, \
0.28762597920511274`, 0.27088787225451677`, 0.2870374590512979`, \
0.2755183714815359`, 0.28167317071267817`, 0.28353433851145743`, \
0.2706990164673804`, 0.2706717517627124`, 0.2849696427437252`, \
0.28012394916614547`, 0.28861698334989194`, 0.286316166880355`, \
0.2801356688196787`, 0.27559362697097245`, 0.27426062776340066`, \
0.28405284634332745`, 0.27196110889540226`, 0.2812936410723578`, \
0.2725899431084399`, 0.2767558629820092`, 0.2757419241507783`, \
0.2709923809253253`, 0.28745917445423297`, -3.564418176690796`, \
0.2880890478046615`, -3.564075278303957`, 0.27417017641189956`, \
0.27703372990653347`, 0.2775547163715596`, 0.28146568766100255`, \
0.2828458081988551`, 0.2775092308249125`, 0.27043906324980377`, \
0.28998746894275956`, 0.28226396524222813`, 0.2828063151211104`, \
0.28653573143142524`, 0.28159403222258306`, 0.2723941189768081`, \
0.27440074525009517`, 0.274319145529406`, -3.5642165447722127`, \
0.28066891901900654`, 0.2833872527224171`, -3.5711833975368`, \
0.2806022101174963`, 0.2768549087967031`, 0.2856951528122109`, \
0.2711181569395217`, 0.2706483959149786`, 0.27958114706860726`, \
0.2840100236483037`, 0.2770138298486997`, 0.2868343431101876`, \
0.2767342252476238`, 0.2881413128206602`, 0.27360448460248454`, \
0.2889404913113531`, 0.288690459469256`, 0.28822978277274597`, \
0.2836933652501159`, 0.27229835046593687`, 0.28756244655268426`, \
0.2701825415081245`, 0.2753839212053805`, 0.2878079357739485`, \
0.28214113228643434`, 0.28325495258926636`, 0.27050333938412413`, \
0.27971396484738403`, 0.27147896436972235`, 0.273828159150863`, \
0.28920453524098744`, 0.2889329594609435`, 0.2707105035805662`, \
-3.574670324630918`, 0.27737975616693744`, 0.2767567178828548`, \
0.2703846136814477`, 0.2894049467332152`, 0.27945185582609233`, \
0.2811771934521927`, 0.2890823640446064`, 0.2821442170035851`, \
0.2854627863484751`, 0.27891604335409664`, 0.2833031671750381`, \
0.277523623017401`, 0.2822106900678125`, 0.28660755402394383`, \
0.2875864246227872`, -3.579969158390455`, 0.2744049755429006`, \
-3.5771076628859557`, 0.2727345669001113`, 0.2702705522681936`], \
List[-1.319791113094094`, 0.7476984317421526`, -1.3143954664273745`, \
0.7488437957973884`, -1.3276399137927848`, -1.3193669073788754`, \
-1.3294027234788455`, 0.7463013724657941`, 0.7485499241586232`, \
0.7532029129599446`, 0.7552837962411876`, 0.7533151328669905`, \
-1.3158851078455311`, 0.7625943249489335`, 0.7489037382976288`, \
0.7493761354754629`, 0.7550236547805825`, -1.3260556827805243`, \
-1.3168703880515917`, -1.3214602869382994`, 0.7609560597765564`, \
0.7574359658459809`, 0.7541530136803413`, -1.3201596031279657`, \
0.7582929318341255`, -1.3132997501380654`, -1.3179312931748417`, \
-1.3233969902255136`, 0.7625918007470693`, 0.7657980939097243`, \
-1.3200274211281997`, -1.3292317543900314`, 0.7460604840443122`, \
-1.3197713215445825`, 0.7612053763325007`, 0.7577671693454907`, \
0.7573593787460111`, 0.7637791353403482`, 0.7502558925883738`, \
0.7621498476103875`, 0.7636127596678709`, -1.3187378104634255`, \
-1.325229599533303`, 0.7461347547253233`, -1.3133627313396157`, \
-1.3141091225614463`, 0.7534018134576438`, 0.765185570961471`, \
0.7559027233724046`, 0.7508577980524326`, 0.7617353677685023`, \
-1.3252801708975894`, 0.7607159590897725`, -1.3235447625768375`, \
0.7483441730945211`, 0.7593775038428391`, 0.7600013112297166`, \
-1.3235948326737577`, 0.7518992689649997`, 0.7571051539451209`, \
0.7525539941500634`, -1.3172800807702714`, -1.3238875761109141`, \
0.7612083995544611`, -1.3319318757992775`, 0.749300392514968`, \
0.7561289697364201`, 0.7563499852553306`, 0.747508719787536`, \
0.7590800516486755`, 0.7598646570124087`, 0.7511768848935465`, \
0.7625325106596422`, -1.326364506775967`, 0.7551741800503408`, \
-1.313142806448846`, 0.7527981883318967`, -1.3204156985748858`, \
-1.3251109580129359`, 0.7523686507376528`, 0.7539014674359577`, \
0.7521907941555454`, 0.75496617650491`, 0.7507279157917162`, \
-1.3223461622419679`, 0.7461688695264388`, 0.7499443215538479`, \
-1.3218883505630852`, 0.7657412154615857`, 0.7561527147387768`, \
0.7643484551905675`, 0.7604091402023202`, 0.7643425720924178`, \
-1.3259685864488029`, 0.764115288067673`, 0.7548668250539604`, \
0.7470424915960516`, 0.7643911544243019`, -1.3174374656552736`, \
-1.3196773271744549`, -1.3325614018065493`, -1.3187084097862605`, \
-1.3323511904841454`, 0.763927154293881`, 0.7519717781574524`, \
0.7653388462799421`, 0.7623331486355188`, 0.7540818720710194`, \
-1.3302091131032077`, -1.3325379297299726`], List[0.2769575197144409`, \
0.2763208357125533`, 0.28754772843055043`, -3.570810795308`, \
0.27766256228039116`, 0.28653112530207403`, 0.2859939609964154`, \
0.2757472855971372`, 0.27084185707154523`, 0.28330811564661135`, \
0.28050283346776234`, 0.2781463075529329`, 0.28716456260524215`, \
0.28527542381024024`, 0.27292449078174935`, 0.2853692671142766`, \
0.28885341984988605`, 0.2732567795563074`, 0.2720475092748023`, \
0.2780582889628989`, 0.2877040768741231`, 0.2717341088282721`, \
0.2730147901308517`, 0.27744176056249253`, 0.27109638351691356`, \
0.2876887530538443`, 0.2898127566621445`, 0.28753581133713585`, \
0.2748208645593523`, 0.2715620614877125`, 0.2804747758132164`, \
0.2714077951359465`, 0.2845464066318118`, 0.28816604187598394`, \
0.2768073466873455`, 0.2840978837607274`, 0.2822925043646281`, \
-3.566734350904004`, 0.2782298726666845`, -3.5779033594463434`, \
0.27211364996930976`, 0.2777370371659829`, 0.2897567304664914`, \
0.28072420830173944`, 0.2806231481929734`, 0.27506803063116547`, \
0.28277926639792744`, 0.2848199946573266`, 0.27692181333675864`, \
0.2804575175900508`, 0.2754366812420996`, 0.27802332524492285`, \
0.2775014156232357`, 0.2836202727564411`, 0.27135926885930656`, \
-3.576992265653604`, 0.2815673890593268`, 0.281273820772431`, \
-3.5627654979652843`, 0.28912592738776194`, 0.27300709030589526`, \
0.2738832087861057`, 0.27497748211349815`, 0.2721399474499232`, \
0.2766133209821678`, 0.27371755907933704`, 0.2756755162332568`, \
0.2731208168518078`, 0.27194492106981405`, 0.2716323597273385`, \
0.28422632746596327`, 0.2737817589312084`, 0.2754831253585124`, \
0.28441948584396276`, 0.28108633885595824`, 0.2833235184379857`, \
0.2892545087026491`, 0.2872832439095354`, 0.2858895775139666`, \
0.27848775174906565`, 0.2728535871318814`, 0.27022650664222664`, \
0.2820099338350937`, 0.2708293862701927`, 0.27210048055226255`, \
0.27265651019497705`, 0.2728881485591441`, 0.277064445557766`, \
0.2712703186734505`, -3.579580740886866`, 0.2866163127995475`, \
0.2730420834472972`, 0.2874702410539206`, 0.2831841028222273`, \
0.2881285693052292`, 0.2870537321754322`, 0.27544921173021447`, \
0.271234791473049`, 0.2840493600191219`, 0.2845813052650848`, \
0.2824689268325785`, 0.27859093591424944`, 0.2734633298931204`, \
0.2887299607709715`, 0.2818279163141927`, -3.5758196717448247`, \
0.2752013786716422`, -3.5706980487108675`, 0.28419215975373024`, \
0.2709719362992194`], List[-0.24595300934558642`, -0.2358283577132787`, \
-0.24717482887989534`, -0.2400744964792624`, -0.23489201723667374`, \
-0.2368079119596298`, -0.2397597462406012`, -0.248286535421895`, \
-0.23310007503783092`, -0.24261624450812397`, -0.247132624799186`, \
-0.23121508076790237`, -0.24139352254577773`, -0.24879216032504706`, \
-0.24573476810306194`, -0.2347605074072494`, -0.23129714519587538`, \
-0.2484906693357958`, -0.23802035978704483`, -0.2303543336299651`, \
-0.23477374388971703`, -0.23779817622405425`, -0.24163616331211324`, \
-0.24826212416167517`, -0.23186036376619185`, -0.24969608079275515`, \
-0.2470113380595243`, -0.23898768053985495`, -0.24830114288187488`, \
4.153619707129034`, -0.24229135491678105`, -0.23200368225539159`, \
-0.23349282618059342`, -0.2479513064832338`, -0.23930126104196514`, \
-0.23671587817636178`, -0.24777821623635898`, -0.24347339112910843`, \
-0.24139613494969586`, -0.23588522132918735`, -0.23229124843563642`, \
-0.2422293195344679`, -0.23716026609808988`, 4.167229819474385`, \
-0.23622586163477396`, -0.23739534569111548`, -0.24991723682196745`, \
-0.23858095041272182`, -0.2388622971277416`, -0.2306732680783733`, \
-0.24306391482757195`, -0.23787970689296278`, -0.24313108262340732`, \
-0.23528186866022174`, -0.23651171760870499`, -0.2404270835212975`, \
-0.2468610252065727`, -0.24613608433297898`, -0.2330608783853239`, \
-0.24352134409746948`, -0.24133154755531075`, -0.24153479113236076`, \
-0.23495070857240824`, -0.23629273399935513`, -0.2474425026307221`, \
-0.24518301305022072`, -0.24980345720072855`, 4.1579629897114065`, \
-0.2484837295882813`, -0.23805877586887922`, -0.2414895422660947`, \
-0.23219157817700237`, -0.2318000139160669`, -0.2308519561765598`, \
-0.2304265893894236`, 4.167631039452716`, -0.24240366609091507`, \
-0.24208761601073644`, -0.23391385891134184`, -0.23068592974335392`, \
-0.24761657519820246`, -0.24512319805458493`, -0.24483842810872847`, \
-0.24643220351336492`, -0.24338625197282943`, 4.1615689949634245`, \
-0.237839698438499`, -0.23810854520589955`, -0.24259210093602104`, \
-0.23676030406666748`, -0.2473942210422258`, -0.23979866415551457`, \
-0.23492380924627398`, -0.23597414843870906`, -0.2309038835874363`, \
4.155936781383501`, -0.23988955881088028`, -0.23657921815508468`, \
-0.23743261353141354`, -0.23367543338396363`, -0.2475618783984715`, \
-0.2412618883556662`, -0.2444784512966952`, -0.2454813846661916`, \
-0.23067421189500897`, -0.25000645204229144`, -0.24991561769179105`, \
-0.2434504517100068`, -0.24752147306805292`, -0.2348075311688883`], \
List[0.10476035415426305`, 0.09186244705715255`, 0.08693880381401194`, \
0.09730815751137206`, 0.09107926317641864`, 0.09187633083167651`, \
0.09682614305216487`, 0.08988554391930625`, 0.09636321617258929`, \
0.09207593139060771`, 0.09146747176600656`, 0.09392503926875546`, \
0.10060973000967899`, 0.09059722550464619`, 0.09239588897067744`, \
0.10183646126781147`, 0.09165448939283913`, 0.09160142603310283`, \
0.08860224237316641`, 0.08659958841931029`, 0.08916406442808401`, \
0.09005891496183913`, 0.10128170126527482`, 0.08780423715855366`, \
0.08971637648338798`, 0.09969916470930908`, 0.09778014695282497`, \
0.0955930897228293`, 0.10488782527538508`, 0.10243347495996692`, \
0.09357107297079502`, 0.09114446039818686`, 0.09601980771067288`, \
0.09153445533875301`, 0.0958764534710779`, 0.10559103405835633`, \
0.0939630658827183`, 0.10228613182025718`, 0.09582761962594974`, \
0.0935886639196459`, 0.08891435369444206`, 0.08609430959950917`, \
0.09050118692247142`, 0.10425430885157368`, 0.10449467545566861`, \
0.09153674936210413`, 0.08739179530439846`, 0.09305254477012198`, \
0.10360769087945561`, 0.10070182194466923`, 0.09533592294117416`, \
0.10577690420612759`, 0.09332737624750104`, 0.10378906455242957`, \
0.0978166118079668`, 0.09859829763289696`, 0.09684795132850142`, \
0.10208574440587437`, 0.0978267741469486`, 0.10560116084126003`, \
0.1046553188925525`, 0.09763104101905709`, 0.08888003042008451`, \
0.09827830928392427`, 0.09573265662646609`, 0.10349966474115818`, \
0.09841373132299565`, 0.08745736953582794`, 0.09249255459221459`, \
0.09903808524757099`, 0.08682679233786555`, 0.09396121816295643`, \
0.09083511233381236`, 0.0876178033208897`, 0.09575643409669547`, \
-10.445522130123994`, 0.08739197805212555`, 0.09592241335332059`, \
0.10433519486832202`, 0.08987079703381073`, 0.10273781479556221`, \
0.10306082032462603`, 0.09864730543392339`, 0.09431530759975067`, \
0.0904021215887324`, 0.08649397799598627`, 0.08697420156098437`, \
0.08741747181855591`, 0.10276782346851335`, 0.08834781205680362`, \
0.09143037036583751`, 0.09220976842542947`, 0.10028746785852787`, \
0.0893682495824187`, 0.10016146307055121`, 0.09026294830347137`, \
0.08786309727949254`, 0.0985116133185768`, 0.10444432167531446`, \
0.10411084861576238`, 0.10253331670327567`, 0.10149879885071686`, \
0.09289890614365601`, 0.10486231577805637`, 0.10531475876036377`, \
0.08700334629667097`, 0.10366126926552144`, 0.0991677772189851`, \
0.08929621472413563`, 0.09189140717100178`], List[0.2954786411925324`, \
0.2926513484367903`, 0.29605305403974563`, 0.30567727176045595`, \
0.30522935458650274`, -3.3464095037660586`, 0.30730386634837675`, \
0.288982067905437`, 0.3036792355867786`, 0.29579463739405065`, \
0.2915194906759764`, 0.28910377724828196`, -3.340563111343526`, \
0.3023136768247477`, 0.2959947541917407`, 0.30215731866494144`, \
0.2978512599683611`, 0.2994997614699012`, 0.29346935285744347`, \
0.2962708327159277`, 0.30798606441658316`, 0.3013083388836689`, \
0.29581896929163143`, 0.29358293677182085`, 0.29657079129012986`, \
0.29182291656158876`, 0.2930408653700467`, 0.2972056120772442`, \
0.2910408806045762`, 0.30669221755855963`, -3.347251346945188`, \
-3.349834151757562`, 0.3005510138039033`, -3.3492768930085304`, \
0.29924187752259285`, 0.29902745944105685`, 0.3021591412305472`, \
0.2964467136741278`, 0.30808334632731266`, 0.3023376755031857`, \
0.2959194957304392`, 0.30145175939235386`, -3.3595948773918094`, \
0.30627350706993645`, 0.30730304258730357`, 0.30307461130273433`, \
0.29691046631891904`, 0.3004356858050116`, 0.30038349786829593`, \
0.2982418072750755`, 0.300235792092967`, 0.29446837658043173`, \
0.29441899349425604`, 0.3008303521744675`, 0.29388295765379485`, \
0.3081435706282472`, 0.30169812229789017`, 0.3062718029379722`, \
0.3033384530520971`, 0.2974631196413902`, 0.29322111888732205`, \
0.2999679980057542`, 0.29130470198624026`, 0.2900357880369344`, \
-3.3480399064576556`, 0.2906134611184319`, 0.3018496519670305`, \
0.2945114148375555`, 0.29807091126923807`, 0.30406367020047287`, \
0.3061287625773613`, 0.3058768485575757`, 0.2977154126038194`, \
0.3017255570636904`, 0.3054546254296483`, 0.294186885008173`, \
0.2969387085054304`, 0.291453387167498`, -3.356225815831478`, \
0.30236905395516966`, 0.30167368939154393`, 0.2939222710872338`, \
0.3021435935389632`, 0.29345518691828315`, -3.3501094304871386`, \
0.2935924027414798`, 0.3043230792397664`, 0.291817475030888`, \
0.30777108298585243`, 0.2972760118873821`, 0.29964048528881043`, \
0.30140328250073795`, 0.29497270947587856`, 0.30161623125268894`, \
0.3071802077887457`, 0.3041522071269382`, 0.2895302485021754`, \
0.29784661915273947`, 0.30112307129723`, 0.29475598480885845`, \
0.28999854857108653`, 0.2936752896571205`, 0.30204447347180036`, \
0.3073550571064085`, 0.2979868944766817`, 0.30257672658116`, \
0.30128048057467854`, 0.2924039472275211`, 0.2933415988814197`, \
0.30787872528621363`], List[0.5331805913448902`, -1.8370467072044967`, \
0.5390222555556492`, 0.5448277158164421`, 0.5323673602482092`, \
-1.834646664772409`, 0.5355390091700092`, 0.5326891148442896`, \
0.5460708577943332`, 0.5473354670404451`, 0.5474194721892505`, \
0.5435330404529376`, -1.841056248794783`, 0.5332462009645619`, \
0.5492328623998821`, 0.5393022765586362`, 0.5376365553367183`, \
0.5351594980787102`, 0.5496225295946695`, 0.5324946239461885`, \
0.5519202746444885`, 0.541733685329906`, 0.5344237864411517`, \
0.5487651968327328`, 0.538985847093344`, 0.5370738910536871`, \
-1.8474809498184444`, 0.5324585381743445`, 0.5353998784168522`, \
-1.85154285043005`, -1.8393190624750393`, -1.8459660920367855`, \
0.5421151139786651`, -1.8524412036147986`, 0.5347464962748796`, \
-1.8436094974249542`, 0.5450339021637146`, 0.5378576745852228`, \
0.5386762988283567`, 0.5333988707133662`, 0.5392972667913053`, \
0.5343890422036925`, -1.8409220029463031`, -1.8467620136356622`, \
-1.8427253391024772`, 0.5498158919704524`, -1.8499925469224443`, \
-1.850216051405761`, 0.5378221604222625`, 0.5505979154308628`, \
0.5395897874824735`, 0.5327819817634769`, 0.5465796754978627`, \
0.5468764581252464`, -1.8426439378311261`, 0.5479370021497502`, \
0.5324222838158901`, 0.548883244577157`, 0.5470487117055061`, \
0.539214666687352`, 0.5481274065805682`, 0.5450394798815835`, \
0.549318280065746`, 0.541596468151135`, -1.8513652338365858`, \
0.538668239342796`, 0.5506726899232384`, -1.8467735276794617`, \
0.5521538820464605`, 0.5422632006948078`, 0.5520999276883294`, \
0.5379188343752048`, 0.5446976341325609`, 0.5434167977786332`, \
0.5390195937699154`, 0.5458362400714356`, 0.5376075933957847`, \
-1.8351172892517225`, -1.8500487722310046`, 0.5415128408049128`, \
0.536368632299735`, 0.5417583240862457`, 0.5442117792525428`, \
-1.8372328493668229`, -1.84584901470116`, -1.8448518679007428`, \
0.5346528337664911`, 0.5404079853255542`, 0.5496886027768132`, \
0.5460141030949965`, 0.5352722319954383`, -1.8393674505487974`, \
0.5338109156552295`, 0.5397603436759202`, 0.5479017457000348`, \
-1.8457713338173651`, 0.5448143465538304`, 0.5492476758628154`, \
0.5478688506162699`, 0.5346250315601917`, -1.846147438482681`, \
0.5475457940932258`, 0.5401540965893107`, 0.5324904184618977`, \
0.5492298003089896`, 0.5406501657711633`, 0.5522201923768687`, \
0.5478192200737552`, 0.534717242598229`, 0.5354940808841007`], \
List[0.5438266590339179`, -1.8370059494169224`, 0.5332825219906382`, \
0.5380386620576803`, 0.5428723782510263`, -1.8364788205896214`, \
0.542815985250049`, 0.5330914356583119`, 0.5361358015975299`, \
0.5367034156018465`, 0.5428404513349621`, 0.5514696036574602`, \
-1.8489790120434568`, 0.548746490198334`, 0.5376381716753165`, \
0.5359211334486764`, 0.5335127250664498`, 0.5412066564975457`, \
0.5343868776451696`, 0.5451498243377481`, 0.5458282848878407`, \
0.5508217250934848`, 0.5461319762325567`, 0.5490547180292136`, \
0.5507773526980785`, 0.5482160082078503`, -1.853133901424146`, \
0.5353174450737838`, 0.5336023134454179`, -1.8376487111846398`, \
-1.8466006861023703`, -1.8491587138899295`, 0.5324605335301442`, \
-1.8395722599972013`, 0.5342122996640857`, -1.8441696583305052`, \
0.5363217504619288`, 0.5471646817692714`, 0.5455184384001276`, \
0.5483685249921224`, 0.5485632350850524`, 0.5397673620576569`, \
-1.8419201549913164`, -1.8444826616217802`, -1.8382359648635853`, \
0.5333902066786319`, -1.8530099533889004`, -1.8442509370400835`, \
0.5429946116092722`, 0.5371626912823692`, 0.5400121525013817`, \
0.535575979160404`, 0.5335495821451719`, 0.5399767558838428`, \
-1.8482572774580512`, 0.5472969262685502`, 0.5380687851537836`, \
0.5353477566151398`, 0.5369836704713968`, 0.5383449319970753`, \
0.5444476768383889`, 0.5453305860635257`, 0.5384068147747985`, \
0.5362569446635904`, -1.8469492093453281`, 0.5428745052716648`, \
0.5336930478479177`, -1.839665361532368`, 0.5392803949980272`, \
0.5464238590459546`, 0.5434481752677492`, 0.5373084389273294`, \
0.5425548906663704`, 0.5407963942166121`, 0.5380905284259537`, \
0.5438570339203722`, 0.5510796455632211`, -1.848539659858221`, \
-1.8390678663532953`, 0.5464317008986713`, 0.5406261189451809`, \
0.5424624259954344`, 0.5375383262517264`, -1.8523478038024142`, \
-1.8510687944059212`, -1.8498696737342302`, 0.5399713935100141`, \
0.5467753574910832`, 0.5482032557912934`, 0.5446427755416561`, \
0.5487440223743854`, -1.8475742297564886`, 0.5492986819872353`, \
0.5328105579977671`, 0.5383468755612948`, -1.8501659141005526`, \
0.5407280045247519`, 0.5387649534832892`, 0.5357427727466069`, \
0.5337972035774091`, -1.8500365650223187`, 0.5349046031445341`, \
0.5460514897114657`, 0.537902370593522`, 0.541320100940492`, \
0.5325698725743808`, 0.5466508920206855`, 0.5487367347675476`, \
0.5472350214685903`, 0.5424711207843437`], List[-0.18556601417943586`, \
-0.2016104814059474`, -0.19660530957784964`, -0.2015015743448139`, \
-0.18705309441004914`, -0.2029573345541902`, -0.18970497437337827`, \
-0.18757642320297546`, -0.190700039878142`, -0.19498361842247333`, \
-0.18510439302561743`, -0.2015135239959372`, -0.20253840540763138`, \
-0.1849200910474507`, -0.19381700684595654`, -0.19451298694655453`, \
-0.20389700263363103`, -0.19617769326806891`, -0.19305403214124037`, \
-0.19369740737400415`, -0.1982300058344979`, -0.1952267571802233`, \
-0.19015418615885643`, -0.19014340365827753`, -0.18988781507560282`, \
-0.2005067984962468`, 5.144049117604479`, -0.20161316121741552`, \
-0.1889967948023984`, -0.19236141814651017`, -0.1848983840147566`, \
-0.1978863774205276`, -0.1899167903418148`, -0.1889137043222169`, \
-0.19154207236882606`, -0.18572363933658811`, -0.18870275122235772`, \
-0.20158854493151399`, -0.1869891213324629`, -0.19043276527354133`, \
-0.18711618561294097`, -0.19718025033294342`, -0.1871824485538928`, \
-0.1944828145348864`, 5.152142219398206`, -0.18594564090348153`, \
-0.19826673051224475`, -0.18460531119630022`, -0.1907293568136984`, \
-0.1883629198540101`, -0.1923743298265704`, -0.18770584073088312`, \
-0.19816017282527554`, -0.19863147557757482`, -0.19843581990587428`, \
-0.1914944982827732`, -0.20002826319029138`, -0.20251593960714853`, \
-0.19127191033931387`, -0.20377675924830396`, -0.18702415158291802`, \
-0.19687749562658266`, -0.18974684909181266`, -0.20007494010397991`, \
-0.1866337433642618`, -0.1922383883535682`, -0.1873011359984721`, \
-0.19559832773768954`, -0.19822253663418835`, -0.19120968242235112`, \
-0.1927263258220901`, -0.1994524066297471`, -0.20102942668556234`, \
-0.1876162736972079`, -0.19287963037294403`, -0.18941158901710822`, \
-0.1888990372179329`, 5.140862260023851`, -0.1910968284304211`, \
-0.1857912480921619`, -0.2012938127635543`, -0.20123493770689016`, \
-0.20103636300851307`, -0.19740911211655715`, -0.18597898304300114`, \
-0.1973604281690401`, -0.19896757677632662`, -0.1968254453477497`, \
-0.19996803935801735`, -0.20044764412177296`, -0.20041246557438847`, \
-0.19615375431924675`, -0.18896160189573055`, -0.18991008240707585`, \
-0.18653368191826422`, -0.19999956356432347`, -0.18902366717523408`, \
-0.19500663178598823`, -0.19305569007245865`, -0.19820787257781552`, \
5.156610592080146`, -0.19591076176053526`, -0.19445019036785305`, \
-0.1883742529442481`, -0.1891490609743376`, -0.20171267883641428`, \
-0.18972601376544673`, -0.20140365675833807`, -0.18778304766955958`, \
-0.1901849284090712`], List[-1.5514387819549396`, 0.6391209789683131`, \
-1.5536933408745923`, 0.63090094779299`, -1.553561834494418`, \
-1.5523597757516088`, -1.5668783778706983`, 0.6351063988779768`, \
0.6446298970405221`, 0.6443168925554437`, 0.6332340225538693`, \
0.6489563513280296`, -1.5663253062287807`, 0.6450610982671096`, \
0.6313121665510899`, 0.6308580691393124`, 0.6327923084385314`, \
0.6393370695420671`, -1.5600829049835916`, -1.5624825254916122`, \
0.6458337673120847`, 0.6382808122436514`, 0.6358794641702227`, \
0.6499772873860493`, 0.638286578101829`, -1.5570061099367847`, \
-1.5556472538835098`, -1.5651865805756149`, 0.6395265604707234`, \
0.6345893270122884`, -1.569718689046938`, -1.5546532864519622`, \
0.6349877810440857`, -1.5611036422464502`, 0.6313524106520253`, \
0.6372338048122448`, 0.6425326038565313`, 0.6427947295499647`, \
0.6406035779572026`, 0.6351868937779214`, 0.6490265407018697`, \
0.6425585625960892`, -1.5560170149590644`, 0.6490504883508175`, \
-1.5657556583427235`, -1.5614491129262016`, 0.6482215151285059`, \
0.6318644797818371`, 0.6383580317856631`, 0.6384676695428737`, \
0.6419616637012886`, 0.6419677836267478`, 0.6348376705978915`, \
0.6472873592968179`, 0.6447086475871012`, 0.6421639034326503`, \
0.6412717111993554`, -1.5535436360014212`, 0.6495143799220909`, \
0.6368118964069958`, 0.6498830591197631`, 0.6366282460692243`, \
0.6501259136864364`, 0.6426228503866199`, -1.5686008213552562`, \
0.633713478794162`, 0.6331124884705196`, 0.647282969005661`, \
0.6320523023389197`, 0.6316810890026205`, 0.634129820956347`, \
0.6339755786118249`, 0.6455251786605034`, -1.5515280530032536`, \
0.6355780354334464`, -1.5653324521450986`, 0.6403205589001708`, \
-1.5607759731138142`, -1.5699986965976331`, 0.6435626063532295`, \
0.6333683827868181`, 0.6357093770777924`, 0.6432697433800642`, \
0.6481826946732803`, -1.5671342569050402`, 0.6389756153042521`, \
0.6481231278786391`, 0.6409580264492776`, 0.6367356798701699`, \
0.6494346787019604`, 0.6347479125182564`, 0.6398933030146025`, \
0.6320087371807125`, -1.5664460983853732`, 0.6420735634746212`, \
0.6366941039515507`, 0.6459671277392698`, 0.6457001557806986`, \
-1.5682334510624087`, -1.5580740106035127`, -1.5658248607895178`, \
-1.5606377251755357`, -1.5629066761743788`, 0.6436502976495923`, \
0.6349208423454534`, 0.6455076970107099`, 0.642671473890681`, \
0.6435461500184007`, -1.565406873951922`, -1.5524715447770312`], \
List[-1.1282528380021446`, 0.8706679751584904`, -1.135835639635714`, \
-1.1366296933807436`, -1.143808311407334`, -1.1343023209548848`, \
-1.1441932341723662`, 0.8824714486354795`, 0.8851714002052347`, \
0.8825461035787806`, 0.889380910151575`, 0.8706607439171365`, \
-1.1438839933746028`, 0.8819876344555974`, 0.8790613886294951`, \
0.8896822586117975`, 0.872209664580539`, -1.1438150350952005`, \
-1.1464534724166386`, -1.1348123291899572`, 0.8831773819936729`, \
0.8833743368796171`, 0.8736564037285025`, -1.129444684979284`, \
0.8805860841966604`, -1.1408563761963395`, -1.133066424468105`, \
-1.1427873047710304`, 0.8725494173337538`, 0.8812487769502411`, \
-1.137880296394023`, -1.1338489899831967`, 0.88363960362546`, \
-1.1464899471029457`, 0.8898780252280521`, 0.877335775808004`, \
0.8852268139600838`, -1.1395536970610185`, 0.8856237400842726`, \
-1.1451767750822808`, 0.8715483776487679`, -1.1421530752289042`, \
-1.1442589419652602`, 0.8710152588411073`, -1.1444782214613103`, \
-1.1349586583942066`, 0.8841852489986495`, 0.8885762411255972`, \
0.8831461120453792`, 0.8889064500725992`, 0.8767634997322123`, \
-1.1435268808905281`, 0.8876439301726925`, -1.1423138605789376`, \
0.8702086328709948`, -1.1441589166840245`, 0.8749029306666876`, \
-1.1441847417870614`, -1.1402189134813698`, 0.8748347110330746`, \
0.8752238615477606`, -1.1283117785335441`, -1.1452694860585562`, \
0.8741982984942637`, -1.1288571496336306`, 0.8897623655414238`, \
0.8735956687783535`, 0.8854081472425126`, 0.886523607501296`, \
0.8887229645525129`, 0.8853235311482552`, 0.8779395926366564`, \
0.8840140589029502`, -1.1284695884394804`, 0.8863278386447172`, \
-1.1365179024529544`, 0.8757984586436107`, -1.1332392273987577`, \
-1.1305360873843906`, 0.8725699035296051`, 0.8799942028075718`, \
0.8707472656051345`, 0.8749743458194197`, 0.8795559639504291`, \
-1.1449935375568476`, 0.8826789211166726`, 0.8857936997997023`, \
-1.1296081272352851`, 0.8703924987379636`, -1.1403266916385209`, \
0.8807031210875371`, 0.8882667181402853`, 0.8744060318273403`, \
-1.1457858279195416`, 0.8879201474970213`, 0.8731334851426632`, \
0.8801947322343573`, 0.8864400169623039`, -1.1271291661703615`, \
-1.1403345134411553`, -1.1402093848838026`, -1.1377166995539885`, \
-1.1432233955745819`, 0.8702498078354218`, 0.8803780911969115`, \
-1.1446488132398236`, 0.8740648163823643`, -1.1362896469406507`, \
-1.1367172439380309`, -1.1267578562979927`], List[0.23215390043456757`, \
0.23802630054403767`, 0.24583856521323832`, 0.24837328400982056`, \
0.24090965095951147`, 0.24525549084574416`, 0.24718361171042785`, \
0.23366114662987353`, 0.24296423708836784`, 0.23567989674549628`, \
0.24809096220335838`, 0.23349107912963535`, 0.23634180338303543`, \
0.24380414501648617`, 0.2333470084000023`, 0.23193444027887727`, \
0.24893431813027544`, 0.2325294260131252`, 0.24356675449119636`, \
0.24005288708380854`, 0.24179951146023002`, 0.24160775329605905`, \
0.24618404157946294`, 0.23130845883732304`, 0.24152095530839848`, \
0.23496849423469857`, 0.24433807126646206`, 0.2310544272348833`, \
0.24324448593251424`, -4.164884580243688`, 0.23956287836718249`, \
0.23991819593755018`, 0.2351321323840547`, 0.2310495522109226`, \
0.24861283867515005`, 0.23580629973581363`, 0.2347274910622332`, \
0.235516424156264`, 0.23332979351092206`, 0.23842339000575896`, \
0.23312199623412266`, 0.24730376811411095`, 0.24031432871065028`, \
-4.156315771071074`, 0.24631533348539003`, 0.24318412924712046`, \
0.2449961996057425`, 0.23799610661543044`, 0.24272941318624927`, \
0.24269157028778537`, 0.2455597276783613`, 0.24888402176646668`, \
0.2473227530071841`, 0.24389280524828694`, 0.2433808913868122`, \
0.24298213115744025`, 0.23621369813598117`, 0.24054818587238191`, \
0.24274412340915605`, 0.23769827292538273`, 0.23545103859538383`, \
0.2372986440946806`, 0.24436322107699213`, 0.24678725375274332`, \
0.24302461854931667`, 0.2488275258013223`, 0.2438289258525879`, \
-4.154880811573367`, 0.24047369473337316`, 0.23828877683012525`, \
0.2436697678249507`, 0.23073415367468947`, 0.24571665225037606`, \
0.2385206987785061`, 0.2410742761276235`, -4.157364787643888`, \
0.23080437450387836`, 0.233580783449711`, 0.23948912154689314`, \
0.24704872543425718`, 0.24565112295839028`, 0.23049748726549513`, \
0.2390084181628207`, 0.2355027298155618`, 0.23259247645603873`, \
-4.170740266308939`, 0.23272795914394917`, 0.23459515333898512`, \
0.23209982921072506`, 0.24211069209976788`, 0.23506572353515315`, \
0.24322206072522928`, 0.23909966835494156`, 0.2446413467212236`, \
0.24871576580044066`, -4.159919725529238`, 0.2498621328141147`, \
0.2364743513829745`, 0.2311841058309716`, 0.24203336666140052`, \
0.2462688255350464`, 0.24161418383998573`, 0.24877515996343783`, \
0.24740156061296134`, 0.2374716092973207`, 0.23131343720567177`, \
0.2413638274758877`, 0.23037997306122346`, 0.2397216888889694`, \
0.23996790889986458`], List[-1.1465049847012838`, 0.8752393918867661`, \
-1.133195605491783`, 0.8877187666983501`, -1.126534579200763`, \
-1.1407419165290755`, -1.1430285141886998`, 0.8746932364234516`, \
0.8839802017020904`, 0.8850110586323886`, -1.1412650900745762`, \
0.8793036049521175`, -1.1295636663761126`, 0.8863568587159306`, \
0.8769736799917164`, 0.870113235565618`, 0.8751069730782415`, \
-1.1326759281004406`, -1.1335771723739616`, -1.1373702647574628`, \
0.8780223322455015`, 0.8853417755563338`, -1.141603777088024`, \
-1.1340967070674635`, 0.8726898242405192`, -1.1277791370034693`, \
0.8878998386783724`, -1.1425788833896193`, 0.8898288604143137`, \
0.8858179326524696`, -1.1312678245973071`, -1.1369505336801375`, \
-1.1348390951191736`, -1.146438111907867`, 0.8790975836315302`, \
0.8840232705788615`, -1.1448544108096042`, 0.8770902024533196`, \
-1.138995356874468`, 0.888143581250609`, 0.8797911791245251`, \
-1.130975190959611`, -1.1283933479163397`, 0.8777866315204045`, \
0.8825181060247983`, -1.1319480962680473`, 0.8789491694230598`, \
0.8854811652439633`, 0.8726463477784137`, -1.1429750769846796`, \
0.8896249513623169`, -1.1447879270325219`, 0.8891017366861019`, \
-1.1274818739359356`, 0.8783121811340968`, 0.8803245320894502`, \
0.8869829556252512`, -1.1344834014395069`, 0.8773295145586965`, \
-1.1289256914330357`, 0.8750965251226628`, -1.1462439166957006`, \
-1.1445439141279694`, -1.135469736760127`, -1.128088895889578`, \
0.8716809452772337`, -1.1266665210504518`, 0.8852529684610863`, \
0.8768348977333912`, 0.8862525036539542`, 0.884643989200889`, \
0.8751429725650572`, 0.8815117954554473`, -1.1294201198332463`, \
0.8880740015883658`, -1.1398540359672622`, -1.1354421431472856`, \
0.8852327239449844`, -1.13497504659984`, 0.8713070425727563`, \
0.8796219338162712`, -1.1379290843974526`, 0.8790851315361599`, \
0.8794325858047741`, -1.1372605385397294`, 0.8803378444305503`, \
0.8777322688618201`, -1.1312772647060965`, 0.8817238627537712`, \
0.8842571476926653`, 0.8825096933789621`, 0.8719249857061118`, \
0.873653693949467`, -1.1333564852135012`, 0.8834270340591033`, \
0.8892855111869509`, 0.8743920146251212`, 0.880356710720525`, \
-1.1413614023378422`, -1.1352707415988033`, 0.8885644896616723`, \
-1.1419517910711054`, -1.1435813990417936`, 0.8860350253960654`, \
-1.1345551900939346`, 0.8865517633352445`, 0.8781400486457964`, \
0.8857422209671121`, -1.1407090292835727`, -1.1282604600582635`], \
List[-0.7314874826125287`, 1.3504166468443628`, -0.7416107003266837`, \
-0.7488300105625636`, -0.7459719608165668`, -0.7359723985239933`, \
-0.7390018836331779`, -0.7334532922020839`, 1.345134586576413`, \
1.3589484344318448`, -0.7379950369744727`, 1.3463317873834229`, \
-0.740118194035`, 1.3493802923604574`, 1.3534832955544707`, \
1.3476150198413768`, -0.7362117864881359`, -0.7367372760579357`, \
-0.7473417343751586`, -0.7363474132309447`, 1.3448775720650357`, \
1.3479103149798806`, -0.7470524594642948`, -0.7479068789006008`, \
-0.7467748596890217`, -0.7420090126307252`, -0.7406588736353104`, \
-0.7461692097600747`, -0.7434371054239933`, 1.3468159066777057`, \
-0.7443401836837592`, -0.7369810937776607`, -0.737148824510543`, \
-0.7459587617453218`, 1.3477882132155852`, 1.3500202894855466`, \
-0.7313120088153104`, -0.7484009661096803`, -0.7356113311617035`, \
-0.750681622757361`, 1.3466340664069911`, -0.7447470307171747`, \
-0.7437384130637746`, 1.3523089233643448`, -0.7449800583609603`, \
-0.735284915553914`, 1.3572064612411123`, 1.3448036432351615`, \
1.3527232336124004`, -0.7495008014565856`, -0.7407676853804445`, \
-0.7395166307655692`, 1.3461111919321316`, -0.7378296683731428`, \
1.3574302346108582`, -0.7488851871083122`, 1.3460945313840549`, \
-0.7364817597561508`, -0.7453286022114672`, -0.7344514755588932`, \
1.3536796150959853`, -0.7372566960309112`, -0.7472018046750614`, \
-0.7474957391098529`, -0.7340514345869139`, -0.7350389493242613`, \
-0.7323368326837059`, 1.3587693856077927`, 1.3535567606180205`, \
1.339500332320947`, 1.358863077700843`, 1.359199252133518`, \
-0.750879701907643`, -0.7421668118845873`, -0.7352045874545813`, \
-0.7356038754963548`, -0.7320982339697544`, -0.7451805002977916`, \
-0.7314218273202412`, 1.3503336352625186`, 1.3406425589001263`, \
-0.7493108743621574`, 1.3557650974883457`, 1.3420783216652445`, \
-0.7421472252604102`, 1.345510009356905`, -0.7407575144021736`, \
-0.7472019711426294`, 1.3514879896955907`, -0.7372834752809377`, \
1.3532471599271028`, 1.3474314730652213`, 1.3451711263500277`, \
-0.7447541343398634`, -0.7474850846872261`, 1.3543855656291575`, \
1.344033794703372`, 1.3517465823371373`, -0.7405204943533663`, \
-0.7373889241873937`, -0.7497533015761432`, -0.746602871445211`, \
-0.7322242124531397`, 1.3475692641971182`, -0.731397184714182`, \
-0.7479999426227205`, -0.7464315180352192`, -0.7388553111290687`, \
-0.7361502341685556`, -0.7395718854460422`], List[-0.23923211286062146`, \
-0.23633871660479266`, -0.2481021336404936`, -0.24078426675448825`, \
-0.24783615502453413`, -0.2493972075381261`, -0.23999538905039355`, \
-0.24979694486134985`, -0.24328649531422644`, -0.2335590286979149`, \
-0.24045167585613922`, -0.24720428474592543`, -0.23062429948469382`, \
-0.23549164409861684`, -0.24860688142724405`, -0.23203544274153162`, \
-0.2384874995898699`, -0.2391453070858919`, -0.23486529766204028`, \
-0.23697958978860864`, -0.24920519542178315`, -0.24587284106354332`, \
-0.24694308608568538`, -0.2448688830561555`, -0.2466886267080428`, \
-0.23409639352143116`, -0.24745775099767783`, -0.23191891177474172`, \
-0.24617314419603087`, 4.155156167346723`, -0.2317945821547695`, \
-0.2315587881822882`, -0.2356060288623827`, -0.2381338843979653`, \
-0.23554221145353332`, -0.2314083005650466`, -0.24283582273392101`, \
-0.24663181696735795`, -0.2433386833313346`, -0.23558347865500065`, \
-0.23130011049689767`, -0.24763342404559377`, -0.24074676448276713`, \
4.1554469192576216`, -0.25004927868482946`, -0.24908615557198954`, \
-0.23620675953198167`, -0.23033184600750636`, -0.24097485311413597`, \
-0.24420095043343237`, -0.2415186108486246`, -0.23714901432867858`, \
-0.24743214273279568`, -0.23913583189234588`, -0.23041089672718745`, \
-0.24064781565567983`, -0.2331488232513614`, -0.2327420927700287`, \
-0.23179817335167338`, -0.23574789384508088`, -0.24195928096577268`, \
-0.2379224188606442`, -0.24666834271548577`, -0.2452012652670911`, \
-0.23941772773807363`, -0.2487291661983204`, -0.24127375071844614`, \
4.157629891233154`, -0.24278435093735304`, -0.24251673558418135`, \
-0.23331923472498897`, -0.23574519536713784`, -0.231426044923842`, \
-0.23041313016740722`, -0.24261994827875466`, 4.160106289499654`, \
-0.2447646342661794`, -0.24185489038728786`, -0.2377907454735098`, \
-0.2475246098299305`, -0.2393503118891554`, -0.24126563336857593`, \
-0.23067580834162502`, -0.2485786162794771`, -0.23912289703609496`, \
4.173149278228338`, -0.24672590941916356`, -0.24651518867287453`, \
-0.23915014642324442`, -0.2329922776793925`, -0.23687063670576758`, \
-0.24166502628963088`, -0.23093103770611986`, -0.23769064271977958`, \
-0.24823238384968765`, 4.16886926867973`, -0.2383519000606604`, \
-0.24343285915453394`, -0.23201921404305895`, -0.24404361790374446`, \
-0.2492291894192243`, -0.2396894262531141`, -0.23126945776458507`, \
-0.2420035884056069`, -0.2411816699684223`, -0.2380137335240742`, \
-0.23278333527288475`, -0.2494372300047345`, -0.24666574807612685`, \
-0.24917560040557163`], List[0.2865032303469074`, 0.27129916660825265`, \
0.2858371964049677`, -3.5678795517381743`, 0.27015957846270644`, \
0.2760022843089985`, 0.27384835716367034`, 0.2888937138960661`, \
0.2703489117076676`, 0.2782974723399431`, 0.288932141437423`, \
0.28316189179247137`, 0.2750897349287349`, 0.28171828008991107`, \
0.27734742628203557`, 0.2753412004274318`, 0.27484978285833944`, \
0.28458921207894355`, 0.2754578355570314`, 0.28963696777362513`, \
0.2863540865113042`, 0.2866004802020178`, 0.27454197350590887`, \
0.2865224366383861`, 0.2817847229120987`, 0.27602125680662215`, \
0.2778622056648662`, 0.27955052048288676`, 0.274943716699767`, \
0.27816692584056113`, 0.2823801275657867`, 0.27451809401566285`, \
0.2758643178554675`, 0.28518300058457646`, 0.2873004419971422`, \
0.27274431664021653`, 0.2816480157529277`, -3.5723203623436786`, \
0.28731930932330907`, -3.5748389613452316`, 0.2866123519456463`, \
0.28973973484304627`, 0.2715292574208738`, 0.27334807965808783`, \
0.2834269789361351`, 0.27392079847587525`, 0.2830434021412162`, \
0.2891099458683903`, 0.27492530103897284`, 0.27386442864009575`, \
0.28654465804153156`, 0.28051088216108483`, 0.28493168357247284`, \
0.2890445173306222`, 0.28807432134602773`, -3.561066029054927`, \
0.28130939250657366`, 0.2834544019835003`, -3.574838283544036`, \
0.2721592082911129`, 0.27892858002170184`, 0.2723235699574184`, \
0.2774928813227864`, 0.2821562846980125`, 0.278219451536929`, \
0.28262598080751905`, 0.2735135745991419`, 0.2828923921843482`, \
0.2703835088011154`, 0.28931583673126854`, 0.2702086710824762`, \
0.2781776474476634`, 0.2864179289619669`, 0.28220584578546276`, \
0.2734331435009274`, 0.2775861978311635`, 0.28412880373679156`, \
0.2709753453491161`, 0.2712672329116711`, 0.2762348150020696`, \
0.28439350795925633`, 0.2810933848730675`, 0.27384414001063084`, \
0.27619742625989363`, 0.2864551725822934`, 0.28727959405095604`, \
0.2851392829150887`, 0.27603978565160187`, 0.27018512429841446`, \
-3.5665401599311264`, 0.2848228023834947`, 0.28521394843257003`, \
0.27517900321678035`, 0.28718487584263197`, 0.28872190008398385`, \
0.2763108540421668`, 0.28200433138895664`, 0.2892695946915503`, \
0.2733551439256271`, 0.28056258775791887`, 0.2723977370638479`, \
0.2820273664693763`, 0.2724395607285499`, 0.275258741663549`, \
0.273086635657933`, -3.5723481059321838`, 0.2770371831048627`, \
-3.5647335184049007`, 0.2708637517248068`, 0.28210344551754485`], \
List[0.27347770566669244`, 0.2809095777010382`, 0.27056529971385557`, \
-3.5702411297816`, 0.28169241302606873`, 0.27062316732075664`, \
0.28186512598650615`, 0.2767652017179621`, 0.27480893480169605`, \
0.27137292282988074`, 0.2845702182302201`, 0.28834345125327887`, \
0.28470798051762153`, 0.28180743842332184`, 0.2808548382519082`, \
0.28698811952165326`, 0.28626844780715416`, 0.28235048262160095`, \
0.2873311869151726`, 0.2842751344571114`, 0.2786318608907668`, \
0.2740447526512989`, 0.2878709058069483`, 0.2891509657706134`, \
0.2723182992952`, 0.2700898858382841`, 0.2752347491812089`, \
0.28594667427178483`, 0.28258161930116116`, 0.27984514158762935`, \
0.28717233210066506`, 0.28807719731583276`, 0.27545687130025615`, \
0.2774650758467698`, 0.2741523430702914`, 0.27574680302830634`, \
0.2757174988990818`, -3.5707187615843767`, 0.28627124251060243`, \
-3.5656861964252067`, 0.2888906720106206`, 0.27759309457695225`, \
0.27968325407764705`, 0.28437100087023065`, 0.27959593161460067`, \
0.2884312069202645`, 0.28706978629138735`, 0.2839825974770203`, \
0.28737005286331596`, 0.28368656858514035`, 0.2887747827527186`, \
0.29000103033455843`, 0.2749983374866424`, 0.28734724316653415`, \
0.28815807926950454`, -3.569443726521158`, 0.2785613410408538`, \
0.27219700509838984`, -3.568103080598601`, 0.2843647952889371`, \
0.2835821088702209`, 0.27228429439871754`, 0.2805942854838696`, \
0.2747408378575516`, 0.2701430375379117`, 0.28404765056428327`, \
0.2779008185694581`, 0.28249922513531744`, 0.28684737055455917`, \
0.2722954812826215`, 0.2812144234210907`, 0.280754207046718`, \
0.2818823889563988`, 0.27068070472670147`, 0.2722642030070619`, \
0.28643194627868734`, 0.2845809674475992`, 0.28503404831432055`, \
0.28056857050771483`, 0.28754347960422905`, 0.2849713853141242`, \
0.27840750557210164`, 0.2782959966182001`, 0.2753297228732888`, \
0.2809315241737759`, 0.27724003597214114`, 0.27772308042081395`, \
0.27563767717577264`, 0.27906693347042477`, -3.5774852556821872`, \
0.27944835301132975`, 0.2779026813772899`, 0.27238019104579336`, \
0.27480831456036214`, 0.27812052112638763`, 0.2775869644516699`, \
0.2710136119069091`, 0.285419971099821`, 0.2801353416733808`, \
0.2812373360697042`, 0.27140667566197446`, 0.2715889547597741`, \
0.2853186003992531`, 0.2889131770419002`, 0.2773261752006678`, \
-3.579134839892347`, 0.27689386407923955`, -3.569070740084344`, \
0.2890135310789787`, 0.27601883384943615`], List[-1.13275683520429`, \
0.8790554277062436`, -1.1414377438067334`, -1.1288067717245986`, \
-1.1270705304481305`, -1.1286112812807583`, -1.1461899909090618`, \
0.8799285704586909`, 0.8715070089844492`, 0.8778348422886263`, \
0.8780148387719342`, 0.8812121941078659`, -1.1385897752272087`, \
0.8896259342797468`, 0.8835907362109443`, 0.8827845559313109`, \
0.8760076025153815`, -1.1305305656979738`, -1.1275293642015738`, \
-1.1272560106056335`, 0.8767623428560218`, 0.8786458410900323`, \
0.8850741383113644`, -1.1393918946581352`, 0.8729725352486052`, \
-1.1377223514387917`, -1.1410167536834586`, -1.1389278660685602`, \
0.8819154688726076`, 0.8731258719962918`, -1.1278555162601451`, \
-1.1267675335995413`, 0.8785203729539927`, -1.1425994229404148`, \
0.8739412538918199`, 0.8870814210044876`, 0.8866213846510105`, \
-1.1410189507084425`, 0.8856830598063203`, -1.1344834180675016`, \
0.871195381380958`, -1.1379545398942683`, -1.1293220821651189`, \
0.8866605855225712`, -1.1321015959816503`, -1.1455642608765295`, \
0.8722670044185384`, 0.880441459471436`, 0.8751064921047237`, \
0.8833238349536029`, 0.886068001758512`, -1.1358813660887133`, \
0.8840543171269202`, -1.145557368415863`, 0.8782604296982874`, \
-1.14512243500421`, 0.8830687590618613`, -1.1428918773353167`, \
-1.1308898010435864`, 0.8876045361111684`, 0.8806013300881468`, \
-1.1365807889997224`, -1.136233690007959`, 0.8770568594673172`, \
-1.1459479163737005`, 0.8722639285504328`, 0.8715010605639677`, \
0.8883917513233042`, 0.8721066092598704`, 0.8725825775426714`, \
0.8887436521001477`, 0.882695243314748`, 0.8850618665479777`, \
-1.138301528015186`, 0.8738977104614917`, -1.130509625743623`, \
0.8862345550733967`, -1.13154006658348`, -1.1439651371755974`, \
0.8835617802586625`, 0.8871528719358291`, 0.8868197614193711`, \
0.8897635516469192`, 0.8716861819530698`, -1.1427127474722483`, \
0.8786111383501172`, 0.884451236924051`, -1.127533397797144`, \
0.8875492628682768`, -1.1378919250033996`, 0.8785220935641609`, \
0.8732998539304778`, 0.8699414776199528`, -1.1337201540802904`, \
0.8877071626220814`, 0.8707627189452879`, 0.877322095890184`, \
0.886638116527753`, -1.1384747590549291`, -1.1267852963434706`, \
-1.1415019081153086`, -1.1318721081966354`, -1.1406093531795445`, \
0.8853975294914036`, 0.8819102459763185`, -1.1284659360609934`, \
0.8807916366029849`, -1.1363326024143527`, -1.1431880570767476`, \
-1.136539090275197`], List[0.21705760146266695`, 0.21285448566722873`, \
0.2128233794243613`, 0.22267038756971275`, 0.2104297641575248`, \
0.20927758619457898`, 0.2141813926589927`, 0.21441520996746127`, \
0.21244410596949242`, 0.22803800079020745`, 0.21499634347485586`, \
0.21131298203203155`, 0.22095344116162854`, 0.2190778281351234`, \
0.2264264703291886`, 0.2180644047432584`, 0.2218262434324806`, \
0.21156274652537405`, 0.21306458437043496`, 0.2210568105156913`, \
0.21520489351283556`, 0.21958082904634715`, 0.21867390533594688`, \
0.22466988187115167`, 0.2213594980721273`, 0.2231757597738389`, \
0.2253705707740288`, 0.22536117744384374`, 0.2086621736563386`, \
-4.58283444132731`, 0.22357895054810242`, 0.22561436962070333`, \
0.22606711729774692`, 0.22280543640164535`, 0.2164861529002271`, \
0.21683408355140782`, 0.2084540495072821`, 0.22185728603929583`, \
0.21848900839659696`, 0.21118690726108436`, 0.21596929456251715`, \
0.21256958065302983`, 0.22459827306756347`, -4.586439898094261`, \
0.22067425963300996`, 0.2092919393222668`, 0.22180365531064247`, \
0.22655263030428616`, 0.22478931265415925`, 0.22368991858387444`, \
0.2226255113594035`, 0.22789799145793427`, 0.20923760629115937`, \
0.22262407942780288`, 0.2093006445418567`, 0.226475808299657`, \
0.22688047643553633`, 0.21397242714119744`, 0.21092285655920565`, \
0.2186678143415152`, 0.21028315060638667`, 0.221136753237588`, \
0.21052110835948173`, 0.22557339448616823`, 0.21167896638029005`, \
0.2199776649796198`, 0.21907153955824574`, -4.581761538123202`, \
0.21671551473767175`, 0.21571092046613924`, 0.21292530961928346`, \
0.22664893374695635`, 0.21548742898687712`, 0.20929628194697197`, \
0.21221114625336815`, 0.22632728822876358`, 0.22670688797528685`, \
0.22562672210539866`, 0.22335020947414524`, 0.2103478622398542`, \
0.2227122295149683`, 0.22681258635256782`, 0.22201415846433192`, \
0.22778929978929927`, 0.21990949879084173`, -4.579450981950618`, \
0.21011053936150884`, 0.21967030317940783`, 0.21925456557897108`, \
0.2243971673382787`, 0.21080237590838247`, 0.22263170221565576`, \
0.20865726554707711`, 0.21120583138405505`, 0.220288355699937`, \
-4.583341517361693`, 0.21728013530210363`, 0.21457937014406311`, \
0.2127265982791053`, 0.2117400118115641`, 0.22664419628148824`, \
0.2276956025453734`, 0.22387284773147031`, 0.21320105025566222`, \
0.21919974040870988`, 0.21249509823653148`, 0.20914761543610008`, \
0.2130229497054453`, 0.2188760123572694`, 0.22664679441450478`], \
List[0.10352100085806203`, 0.09783528005381609`, 0.1033110540707328`, \
0.09578674854243788`, 0.09974363826145052`, 0.0935994631480617`, \
0.10521077805977994`, 0.10266002092325927`, 0.09193805137641584`, \
0.09430895102001896`, 0.10483985122143662`, 0.0981288101489491`, \
0.10256362629391479`, 0.0889400908251382`, 0.08751734231219022`, \
0.1020851516450007`, 0.09992069559199135`, 0.09497557304288784`, \
0.10565118570903764`, 0.10019415333884381`, 0.09972142770498447`, \
0.10072077496002185`, 0.08896109589909984`, 0.09010414968856631`, \
0.09041280878465977`, 0.0979791879407922`, 0.09661139548031399`, \
0.08849513103385465`, 0.09639865962960205`, 0.08596773250568274`, \
0.09404009639284394`, 0.10027691208129631`, 0.0883849883831982`, \
0.08741226926879414`, 0.10354026036677855`, 0.09085799577037737`, \
0.10080470269883969`, 0.08975586005833167`, 0.10550653339789659`, \
0.1001066962266553`, 0.10496594114821758`, 0.09124306767579249`, \
0.10367406858533346`, 0.10574124587300965`, 0.09557108454025791`, \
0.08748797599930667`, 0.09663084769719821`, 0.09309238050810584`, \
0.08905192633331538`, 0.09322605968034589`, 0.09947506650011285`, \
0.08728184293594135`, 0.10184246732224295`, 0.09033637693091827`, \
0.09296219118589333`, 0.08894896287894316`, 0.09322378999002617`, \
0.0867793802884593`, 0.09340201331538939`, 0.10392139856339667`, \
0.0985518942685037`, 0.09628576621066255`, 0.1000521853484404`, \
0.09986941567779557`, 0.09429783609761999`, 0.09705994247673491`, \
0.09745616144591368`, 0.08900225088710592`, 0.10082659617763665`, \
0.10005198498397351`, 0.10550284817453123`, 0.10505907714561113`, \
0.0959281258475571`, 0.09261101175872613`, 0.10505934276785463`, \
-10.431091730666491`, 0.1031120271517335`, 0.09399691088974577`, \
0.08934040163723989`, 0.09019128809520155`, 0.09604627508287975`, \
0.10062798005406619`, 0.09959223584946982`, 0.09815619152830614`, \
0.08931565132963304`, 0.09249032040744043`, 0.09888870948758705`, \
0.09254387397543043`, 0.09042804700870913`, 0.0979522386315974`, \
0.08873954363971681`, 0.09018209045704778`, 0.08632612152315311`, \
0.09256742899276946`, 0.101746085415156`, 0.0940410674910829`, \
0.09591768819071228`, 0.10516010772712722`, 0.09339079380103821`, \
0.1035471630816903`, 0.10524321376984425`, 0.091453398457357`, \
0.09806403540179426`, 0.09743832860261796`, 0.10177198775568785`, \
0.10362733469944313`, 0.09332233567703001`, 0.0882257554755575`, \
0.08824068705066396`, 0.09373411717701224`], List[-0.1876583086231311`, \
-0.19862107388979536`, -0.1843777942022908`, -0.20371548963307284`, \
-0.1991512451137344`, -0.18950224419622086`, -0.20238244965840563`, \
-0.19242306457676278`, -0.2016173412837571`, -0.20378272900932182`, \
-0.1875952071730635`, -0.18910535819132474`, -0.19717900089572088`, \
-0.18916475553990728`, -0.20085868959397113`, -0.19293168085105877`, \
-0.1871814723826833`, -0.1978909419107408`, -0.1844172934573662`, \
-0.1986233495954571`, -0.18933896959983976`, -0.1932853965566588`, \
-0.20118207917192277`, -0.20073111543424807`, -0.1849437564520675`, \
-0.20063271464078725`, 5.153303103857935`, -0.20250828698443082`, \
-0.20083345168739`, -0.191837844429917`, -0.1966075189751027`, \
-0.2028034317738745`, -0.18525607028011742`, -0.19407824473928553`, \
-0.18509085395092004`, -0.19263596833926805`, -0.19141988207498528`, \
-0.18450132150386622`, -0.19441683974541968`, -0.19155680505553574`, \
-0.1929851696665255`, -0.18576307270782322`, -0.20405718955045266`, \
-0.19478712996873634`, 5.150020887740942`, -0.19321543229037996`, \
-0.19145210958574957`, -0.18544533353136528`, -0.19548898234222886`, \
-0.1935919683393697`, -0.19412139642335116`, -0.19901280266035723`, \
-0.1940762428707481`, -0.18467519936194313`, -0.18714503731276388`, \
-0.20008916542689129`, -0.20324739123626134`, -0.18533974713670612`, \
-0.19790382725120845`, -0.19280522493633295`, -0.19146632206980083`, \
-0.20351687498761337`, -0.18589653800757946`, -0.19137434464063643`, \
-0.2002789355466552`, -0.1983847160769162`, -0.19609619075002382`, \
-0.19634873607899017`, -0.18938984778251974`, -0.19059840372987788`, \
-0.19426526653571666`, -0.1980473935612811`, -0.19622889866198037`, \
-0.18614857629437806`, -0.18641348307063246`, -0.18984305420976366`, \
-0.1883237298759116`, 5.154612272418157`, -0.1912850507500578`, \
-0.18874946507744747`, -0.2016656029297999`, -0.1884737956199321`, \
-0.1994111027476591`, -0.1876429745369555`, -0.18433628518204645`, \
-0.19329186327823697`, -0.19558654764363298`, -0.19204665045192257`, \
-0.20204229607106583`, -0.19323423130158873`, -0.18941897061716081`, \
-0.19107369033420332`, -0.19222255870354743`, -0.19905123143193618`, \
-0.1911517840048294`, -0.19999573012220231`, -0.192084967795651`, \
-0.19866365574498823`, -0.18756520043435368`, -0.19232781776368524`, \
5.140348710201745`, -0.18911251499331672`, -0.1976048175865529`, \
-0.20064864873276927`, -0.19312504414020268`, -0.18551254221870167`, \
-0.1886993767026958`, -0.19090787349763544`, -0.19163268810827472`, \
-0.19845812519805006`], List[0.23531195601647845`, 0.24641514792757585`, \
0.24611676883877373`, 0.24194204441973727`, 0.24599224298343864`, \
0.2378812419951256`, 0.24231100455157256`, 0.2382630197649593`, \
0.23537554267564031`, 0.23251895554212057`, 0.24876446849961192`, \
0.2436192719717055`, 0.23845078908935496`, 0.24528903985204237`, \
0.24470381508289804`, 0.24918704972638558`, 0.2487191517872811`, \
0.23250181043872922`, 0.2403638962614189`, 0.23975553557004312`, \
0.23475557941029523`, 0.2448204014359913`, 0.23439692167675008`, \
0.24670541918031708`, 0.23168558891030844`, 0.2403508620448119`, \
0.25007838654582765`, 0.2333832291224376`, 0.23026838246445852`, \
-4.172469875229912`, 0.24562068461182804`, 0.2341309461304087`, \
0.23192729868305487`, 0.24217686276094244`, 0.24430808800968384`, \
0.23502068694887407`, 0.2318601959791684`, 0.23867300308075373`, \
0.23262860485598152`, 0.23057029008003965`, 0.2469971303355121`, \
0.23331804104690143`, 0.2365795890873841`, -4.170171701898062`, \
0.23537854055640747`, 0.24774355146583177`, 0.24553902325439914`, \
0.24490807365320486`, 0.24269264915578959`, 0.23579280725361748`, \
0.2319378319051698`, 0.2360867751234373`, 0.2475703859710063`, \
0.23951888381529396`, 0.24146052578857757`, 0.23437315313687287`, \
0.23182797923295345`, 0.2476109996272166`, 0.231773430303912`, \
0.2336822591621003`, 0.23762217192624802`, 0.2431098521061253`, \
0.2408969555277364`, 0.24367092323536135`, 0.23272320524079762`, \
0.23289814987743815`, 0.23380778777113242`, -4.166059825396026`, \
0.24815020459251677`, 0.24305204082347837`, 0.23242335940957815`, \
0.23107513753102119`, 0.23904175105601988`, 0.24102370491609743`, \
0.2371355446944312`, -4.171500152992536`, 0.2332509234669523`, \
0.24094943749162853`, 0.23318722808452613`, 0.2444894407303338`, \
0.23352113531519259`, 0.23496207948562223`, 0.23908904525266028`, \
0.24823036568353182`, 0.24694091251998332`, -4.155347223874801`, \
0.2490942229584072`, 0.23670536215331522`, 0.2500143542883727`, \
0.24854897063047235`, 0.23065894141324206`, 0.24799490486968867`, \
0.24272426414328863`, 0.24791427730131013`, 0.23716372316282325`, \
-4.155198706585365`, 0.23185590665200065`, 0.24687458491643047`, \
0.2322127154836163`, 0.23490428410342826`, 0.2445622719486984`, \
0.2375248996931883`, 0.24012920581164343`, 0.247185181512005`, \
0.23083224560988935`, 0.234555130730896`, 0.23691842472382846`, \
0.2437553357065998`, 0.2378372667042693`, 0.23186455691626498`], \
List[0.41447072071807206`, -2.4255930149682676`, 0.41692961873831574`, \
0.4222692912083557`, 0.41342584799757703`, 0.42060585230903225`, \
0.4179975187063812`, 0.41132458398948646`, 0.42083198313970654`, \
0.4193450630260671`, 0.4110756026791945`, 0.4191928690064088`, \
0.4070715888107792`, 0.4139666207293221`, 0.4027095115535399`, \
0.4177414044468936`, 0.40335149781136437`, 0.4088045299611019`, \
0.4146051686518506`, 0.4104698566715707`, 0.41183628548575424`, \
0.40631170854831516`, 0.42081411666986157`, 0.40933083831058537`, \
0.4134109091043091`, 0.415561260609112`, -2.4307198499350937`, \
0.4178079230571511`, 0.4169107143070822`, -2.4241342949828577`, \
0.41392019310002776`, 0.41169551931523723`, 0.4123067357233678`, \
0.4195866330712955`, 0.40332902444139024`, -2.42520927331785`, \
0.40273946290939344`, 0.42250111742796415`, 0.4039383608771172`, \
0.41100907210794657`, 0.4097807662164757`, 0.4095601437978087`, \
0.4060900210161585`, -2.4207555319729535`, -2.4155533351876417`, \
0.4117294693333712`, -2.422241615606141`, -2.419291093106096`, \
0.40841583685387056`, 0.4104845761592336`, 0.40695166762630364`, \
0.4188363971661469`, 0.41332051773086237`, 0.41894240231104457`, \
-2.4158441406599143`, 0.41688217216096746`, 0.4208789589810964`, \
0.41307067337358633`, 0.41947059329358966`, 0.41694753760520487`, \
0.4183745482700221`, 0.4065187365752687`, 0.4144691121881137`, \
0.41478875993646386`, 0.4180650851446986`, 0.4214856583764732`, \
0.4164649723741842`, -2.4199955735966387`, 0.403805222626882`, \
0.41206432448054126`, 0.4191599963796138`, 0.4126091702012203`, \
0.41118092160133424`, 0.41113549903151186`, 0.40728979411419725`, \
0.4118476354518458`, 0.4040328603612733`, -2.4151935138575498`, \
0.4086364493660152`, 0.4150530139192924`, 0.40322115371761946`, \
0.41611981928623654`, 0.40912124265681327`, -2.4240471893588116`, \
0.4093379112708585`, -2.427233278408779`, 0.4054986743572144`, \
0.42136115658409024`, 0.41545646182080576`, 0.4168117765316116`, \
0.41857186051804723`, -2.4210006139624056`, 0.41587142600579524`, \
0.4126810925909411`, 0.41339992362849`, -2.419518505612772`, \
0.4143517468377858`, 0.42201677529658244`, 0.4034334327258941`, \
0.4178097278319952`, -2.424239208336915`, 0.40805837391132116`, \
0.4192075427077694`, 0.4218295673938417`, 0.40357588610036504`, \
0.41610516462824926`, 0.4066066850486904`, 0.41597870632315453`, \
0.42019288188604587`, 0.404857324502679`], List[-0.24294340037330658`, \
-0.24808494891749852`, -0.2341758701188156`, -0.24535970720675562`, \
-0.24560811066572508`, -0.23547402322308275`, -0.23652728241596818`, \
-0.24866707646721212`, -0.2389757144953432`, -0.24544671084379008`, \
-0.24419889240044051`, -0.2362394094114933`, -0.2302078725993917`, \
-0.2406212000103991`, -0.24832517858770434`, -0.24852745876722418`, \
-0.23854921315631272`, -0.23789341027884298`, -0.23317874137488218`, \
-0.24163583058501859`, -0.24436906000260294`, -0.24497708911976135`, \
-0.23135233201672958`, -0.23202163736737622`, -0.23362445643720212`, \
-0.2452354162783847`, -0.2419593439339063`, -0.23507222147559081`, \
-0.24884465339568754`, 4.157234705567836`, -0.23969558430033`, \
-0.24137095261912478`, -0.247836114909699`, -0.24273809141134023`, \
-0.23730451936446467`, -0.24210949065951443`, -0.2473944766211933`, \
-0.23893168767667877`, -0.24229738763378483`, -0.24208803786451671`, \
-0.24946513286633737`, -0.24025127791534995`, -0.24727204988275736`, \
4.155540197775494`, -0.23904704023107393`, -0.24348403294714027`, \
-0.23329564047667162`, -0.24499473141270517`, -0.2474753034603113`, \
-0.23263420512997285`, -0.23130498287323914`, -0.2405510296807171`, \
-0.2478017228180611`, -0.24310861217027277`, -0.24678559741655634`, \
-0.2457502560279927`, -0.23568515130883638`, -0.23377396036890294`, \
-0.23589681683916022`, -0.24887827420130476`, -0.2403693525282363`, \
-0.24908532147136267`, -0.2471640223170684`, -0.24762764379266794`, \
-0.2416634525281024`, -0.23392560238593194`, -0.23179750992972828`, \
4.16415743706377`, -0.2481208790777157`, -0.23482887174802403`, \
-0.2458776040737501`, -0.23358559056940598`, -0.23483962340830414`, \
-0.2486067111285838`, -0.24620519314601913`, 4.165523467063291`, \
-0.23917153442575617`, -0.23880630251543253`, -0.24554810819386316`, \
-0.25006747283827097`, -0.2434622762899901`, -0.249098853157235`, \
-0.2355146019480484`, -0.2473540325622737`, -0.24479944914314333`, \
4.164048470752216`, -0.24613360705146153`, -0.23128388453816298`, \
-0.24256152076309206`, -0.24470029789805786`, -0.233699404800705`, \
-0.23875807878387625`, -0.24083117484470623`, -0.23790140125607506`, \
-0.23726307601866492`, 4.1696433402233595`, -0.2434823142394475`, \
-0.24656246589934766`, -0.23506039948050653`, -0.24886829526580376`, \
-0.24187236199395046`, -0.23071875118423746`, -0.23399491868824826`, \
-0.24539308496163678`, -0.24826163223751585`, -0.2338140492277992`, \
-0.24596991428729467`, -0.23983631267816288`, -0.2437311697977514`, \
-0.2398678918105915`], List[1.331483836716651`, -0.7588259615701164`, \
1.3307665769539059`, 1.323450853051972`, 1.3210902061589898`, \
1.31882156599306`, 1.3249490625088`, -0.761568327044109`, \
-0.7587503620280643`, -0.746493085195951`, -0.7653447905249`, \
-0.7658188700138482`, 1.3235129628946662`, -0.7480318118463518`, \
-0.7606166768085195`, -0.749881239519595`, -0.757728523624778`, \
-0.7625767877419208`, 1.316532443052766`, 1.3243160806987255`, \
-0.7598800478484241`, -0.7615155032461786`, -0.7566367490300078`, \
-0.7505286882706709`, -0.749290557655599`, 1.32152890924293`, \
1.3260542362799599`, 1.318545498248821`, -0.7467822473999687`, \
-0.7645721041859453`, 1.3180087732893615`, 1.3188715873223142`, \
-0.7612217889590437`, 1.3289667356410029`, -0.7615926445755085`, \
-0.7583168049508042`, -0.752846377986021`, 1.3325816639789676`, \
-0.7656773863102727`, 1.322256762539074`, -0.7466145413632624`, \
-0.7506687771660145`, 1.312890154341286`, -0.7474462291468076`, \
1.321528419954351`, 1.329519976487755`, -0.7470907734531829`, \
-0.7510857788670695`, -0.7566544969158666`, -0.7494162571174353`, \
-0.7607466183943064`, -0.7587486417641003`, -0.75252652434734`, \
-0.7502015179750567`, -0.7515175575953792`, 1.3167027728699146`, \
-0.7486774499651038`, 1.3219342671629248`, 1.3228061857273006`, \
-0.7506455294912335`, -0.7620825491885985`, -0.7548506052300107`, \
-0.7587770989813906`, -0.7644783685378358`, 1.3187911586337517`, \
-0.749016606879149`, -0.7497929185245917`, -0.7634061044819297`, \
-0.7485068729532679`, -0.7531886996987965`, -0.7649684069954376`, \
-0.7473941284218825`, -0.7554044016517277`, 1.3193590941260775`, \
-0.7626763437406879`, 1.3246960496254059`, -0.7643324573814233`, \
1.3280759567619862`, 1.3318291159238151`, -0.7651245259088958`, \
-0.7556398745805165`, -0.749377225837014`, -0.7625779071900098`, \
-0.7574120367212642`, 1.3133250966402688`, -0.7575011246860134`, \
-0.7574973328456482`, -0.7529460631093281`, -0.757172808095336`, \
1.3219708971948203`, -0.7489372085240008`, -0.7650471023007759`, \
-0.7562257419553106`, 1.3235060988927592`, -0.7506467885153306`, \
-0.7519122284429166`, -0.7573970567238872`, -0.7486722626373867`, \
1.3208720203906024`, 1.3288047557997125`, 1.31967623861839`, \
1.3135668245314833`, 1.322003403507057`, -0.7602046367542483`, \
-0.748764272620435`, 1.3256964608577495`, -0.7541525764031553`, \
1.3279271890282929`, 1.3142206989105745`, 1.3272333189469703`], \
List[0.5899891847334119`, 0.6000800837220294`, 0.5887667184267719`, \
-1.6756436853366292`, 0.6042220662576472`, -1.674801158771588`, \
0.5912792503046723`, 0.5986738059924381`, 0.6029019587964064`, \
0.5918733015759229`, 0.6018006260778349`, 0.5997129973037374`, \
-1.6729787611320994`, 0.5905438037575999`, 0.5976281251710036`, \
0.5912077456851095`, 0.5887514915254763`, -1.6727842325378541`, \
0.6060695421888863`, 0.5910797098417349`, 0.5980698003579785`, \
0.603562150219362`, 0.5910403518458112`, -1.6682082498516844`, \
0.5930027665374794`, 0.6028174679400491`, -1.6687661592351508`, \
0.5993511445996463`, 0.5950234710674727`, 0.6065500904052431`, \
-1.66892797833318`, -1.6741504875789448`, 0.5995258866691376`, \
-1.6797102913137851`, 0.5926387338010276`, 0.5992513035610775`, \
0.6055172962075079`, -1.6752922553327099`, 0.603197517663344`, \
-1.6722930737775001`, 0.6057476254349592`, -1.6710749755304222`, \
-1.665166602423536`, 0.5965602379971222`, -1.6646261812159338`, \
0.5970244953261998`, 0.5888133559993007`, 0.5961959614605625`, \
0.5909761057016713`, 0.6001790475519507`, 0.6043589837162288`, \
-1.675557330221715`, 0.5975640473091526`, -1.6783562415827924`, \
0.5899451707984626`, -1.6762879669623605`, 0.5954068846065739`, \
0.5919892014172957`, -1.6709036032212012`, 0.5950082778634483`, \
0.6042683109024533`, -1.6790432015775238`, -1.6778773757061052`, \
0.5961356790441568`, -1.667683717039132`, 0.6075701603956026`, \
0.6011821729258008`, 0.600544175581891`, 0.5910441447857384`, \
0.6027776345794339`, 0.5897667757531457`, 0.5948379592916843`, \
0.5965256492249061`, 0.5938471386013114`, 0.6070549179386331`, \
0.6008046599587341`, 0.5937594410161318`, -1.676689116325073`, \
-1.670957663968555`, 0.591474655786835`, 0.5986557660398225`, \
0.5998550714446659`, 0.5889513467489712`, 0.5983170213926532`, \
-1.6645781704425253`, 0.601951167541843`, 0.5973075408081492`, \
-1.6721480674036036`, 0.5989109746788766`, -1.6710366616255128`, \
0.595082779988986`, 0.6071737924319578`, 0.6069796791262848`, \
0.6055903589540235`, 0.5891585728764469`, 0.6021751225858983`, \
0.5957562936233123`, 0.5938158877574935`, 0.5942923850567586`, \
0.6059535950011277`, -1.665315859132633`, 0.5937488312978423`, \
0.5992513305126215`, 0.600168536197819`, 0.5988887426367537`, \
-1.667848167401634`, 0.603825863762012`, -1.6614004163603622`, \
0.6000973661148694`, 0.6039407548867235`], List[0.5324814184594087`, \
-1.8376533007486686`, 0.5344235210355072`, 0.5346828570086846`, \
0.5437381135471738`, -1.8514089727268652`, 0.5406696715826335`, \
0.5404184078350341`, 0.5521120610976558`, 0.5464279399780576`, \
0.5517563199153864`, 0.5363844203251673`, -1.8434178532663`, \
0.5383983760453672`, 0.5394979282187977`, 0.5504166258780602`, \
0.5467741801069729`, 0.5372844590402517`, 0.5447413159653088`, \
0.5337120705121184`, 0.5405694057944096`, 0.5325885416864862`, \
0.5403613893699474`, 0.5338257959229258`, 0.5519423306398877`, \
0.5430563216475426`, -1.853700929832941`, 0.5396935041373497`, \
0.5375313509033913`, -1.8491098340077314`, -1.8416567892143527`, \
-1.8381345028523999`, 0.5491075373340014`, -1.8448947803683977`, \
0.5428734663276897`, -1.8391833476094526`, 0.5476491551562487`, \
0.5471038088592238`, 0.5518149505537739`, 0.5452794209487639`, \
0.5331911142115143`, 0.540793188653908`, -1.8395191515974727`, \
-1.8344885897796828`, -1.8450258612939772`, 0.5510949866399036`, \
-1.8429566955886387`, -1.8479434814025486`, 0.5470537561407497`, \
0.5512711637758164`, 0.5376711317442706`, 0.5506200464317251`, \
0.5510214706251053`, 0.5363948420924496`, -1.8530208021514902`, \
0.5393555478542212`, 0.5366608445393527`, 0.5364460350170642`, \
0.5445130015104822`, 0.5357814796437812`, 0.5343431351623539`, \
0.5442993012427506`, 0.5340926829444358`, 0.5404789620407521`, \
-1.8467763971019757`, 0.5413856123494459`, 0.5332461150432942`, \
-1.8460061317363012`, 0.5388347106450034`, 0.5390193826574693`, \
0.5395401233603875`, 0.5390920244270971`, 0.5373505693387081`, \
0.5387047890763977`, 0.5450078815487566`, 0.5340414335716629`, \
0.5514316594611121`, -1.8429439098093074`, -1.8440967681162919`, \
0.5388149558361507`, 0.5359859467826341`, 0.552069731398987`, \
0.5471640401958557`, -1.837816967952104`, -1.843490248989947`, \
-1.8456389595094442`, 0.5482000803127018`, 0.5443626629083611`, \
0.5516614507681246`, 0.5434176524235259`, 0.5434526806014384`, \
-1.8415325765334822`, 0.5399307120920962`, 0.5406058199697603`, \
0.54096022603649`, -1.8530861127265599`, 0.5473685411053553`, \
0.5380290412685428`, 0.5512740978958213`, 0.5409246496078584`, \
-1.8459224953106057`, 0.545736093407564`, 0.5379375327408312`, \
0.5420051031510885`, 0.5352707241980359`, 0.5391184174638917`, \
0.55145416564684`, 0.5461176106879839`, 0.5442656673755142`, \
0.5425782898096616`], List[-1.3193175861366664`, 0.7582605881491801`, \
-1.3232286276787086`, 0.7545023062393899`, -1.3172976779895034`, \
-1.3312638243976573`, -1.3250915004994173`, 0.7514096161853405`, \
0.7569574131752953`, 0.7559172010007479`, 0.7575558935374022`, \
0.7571949226483478`, -1.3286836117032632`, 0.7587169457777094`, \
0.7648870010732939`, 0.7613868321226989`, 0.7642064511040866`, \
-1.323609794623595`, -1.3145706070988432`, -1.3160118762854165`, \
0.7576915687797479`, 0.7531397889221002`, 0.7471963798066623`, \
-1.3241866507422304`, 0.7620740767651559`, -1.3249792702135679`, \
-1.3239383469394073`, -1.326900879721334`, 0.7621040119119421`, \
0.7551421095515123`, -1.324047433183017`, -1.3308842512684993`, \
0.7584199083444726`, -1.3294346631740328`, 0.7607762842670835`, \
0.7525261699412358`, 0.7630064600978183`, 0.7606972916092917`, \
0.7541677376711916`, 0.7647709163875109`, 0.7549948173183534`, \
-1.3281464847261235`, -1.3131811317988795`, 0.7537092293707437`, \
-1.3323192329671534`, -1.3301598345616457`, 0.7459635010608314`, \
0.7623211635955102`, 0.7516275580671052`, 0.7558459920343541`, \
0.7472110401267252`, -1.3255874058402355`, 0.7638588638789262`, \
-1.3240023536581482`, 0.7509622345770989`, 0.7598546214471915`, \
0.764359179840045`, -1.3327034009142853`, 0.7520837236097272`, \
0.7482157671592956`, 0.7612200743304105`, -1.3251689108443518`, \
-1.3158859930510423`, 0.7583895354857502`, -1.329530616486407`, \
0.7467612884355799`, 0.7519255081658974`, 0.7651567420434098`, \
0.7595216150338545`, 0.7471147096405425`, 0.7563231508675399`, \
0.7459499633930663`, 0.7645870410103557`, -1.3271572587552378`, \
0.7520906362911353`, -1.3173950433604817`, 0.7545471540167504`, \
-1.3296337367245552`, -1.3227098554621965`, 0.7499276066961045`, \
0.7605076582724921`, 0.7630830841829847`, 0.7650508767190275`, \
0.7631235826571818`, -1.330157971233214`, 0.7604407553096277`, \
0.7589502281594508`, -1.3152715637061652`, 0.7503240398055571`, \
0.7547234076680932`, 0.7571216588535252`, 0.7483688900713598`, \
0.7623357056973826`, -1.316208521640585`, 0.7522990671411128`, \
0.7621814358975031`, 0.758053191028654`, 0.757148762026093`, \
-1.3198737655144712`, -1.3253208264835827`, -1.3306389071806346`, \
-1.328055479689461`, -1.3237102012372284`, 0.7533501347316838`, \
0.7612735885448209`, 0.7460170733484258`, 0.7651989528570162`, \
0.7658809787176882`, -1.316672190960418`, -1.3235955500689789`], \
List[-1.1270726570814236`, 0.8732140665280435`, -1.1271611404671813`, \
-1.132275916551632`, -1.1285196140577476`, -1.1321174907708111`, \
-1.1448197986527666`, 0.8875369103884747`, 0.8757737845320531`, \
0.8729990306921549`, 0.8709733613006096`, 0.8891496943070307`, \
-1.128352832159818`, 0.8825862930123538`, 0.876320026217043`, \
0.8745213863292483`, 0.8739356480893564`, -1.1337808428785376`, \
-1.1281106210446386`, -1.1377230771665627`, 0.8770306329731741`, \
0.8891631138820334`, 0.8847271463257632`, -1.1290560519040618`, \
0.8856487715322794`, -1.1299348381445269`, -1.134083816412599`, \
-1.1389274470135435`, 0.8881829717699331`, 0.8723594076777789`, \
-1.1335070871906983`, -1.1359069167655098`, 0.8838685718031819`, \
-1.1286535975173975`, 0.8863912577315354`, 0.8793247074642967`, \
0.8763271714657145`, -1.1379814172806597`, 0.8754060942154307`, \
-1.1349824853636945`, 0.8820435454682396`, -1.1337181143648098`, \
-1.1339170150451676`, 0.8868543981630358`, -1.1282794451125508`, \
-1.1270204054576098`, 0.8789002545731021`, 0.8821212087660065`, \
0.872693939442382`, 0.8890203058602295`, 0.8826933697263807`, \
-1.1434369064242609`, 0.8883644441688198`, -1.1436858301192752`, \
0.8852892999987753`, -1.1458935567194775`, 0.8798239234239328`, \
-1.1411848496043873`, -1.1349219576186207`, 0.8832011145382195`, \
0.8893623463603154`, -1.1273647700444298`, -1.1355166090226037`, \
0.8825272073132749`, -1.13182071483261`, 0.8775173539422966`, \
0.8743650719241509`, 0.88877514368406`, 0.8824166099237646`, \
0.8855183628281894`, 0.8824862886984838`, 0.877698149099204`, \
0.8875095302067756`, -1.1455535760119644`, 0.8868714266158303`, \
-1.131889764243506`, 0.8765143704010173`, -1.131694045521547`, \
-1.145305225872768`, 0.8757090343462544`, 0.8705509552726979`, \
0.8878284045533567`, 0.8716066873617887`, 0.8888824825535119`, \
-1.133903135811758`, 0.8737516236683622`, 0.8732923961616997`, \
-1.1450811276330826`, 0.8891424541931321`, -1.1288448860582783`, \
0.8774616468778931`, 0.8821253006101221`, 0.8794118804240744`, \
-1.1328147786043086`, 0.8843567111563313`, 0.8827530660778716`, \
0.8747159386778637`, 0.8882174297929809`, -1.1432377747772147`, \
-1.1449435339730174`, -1.1373145083845906`, -1.1430122458790415`, \
-1.1313562443232237`, 0.8837120135568212`, 0.8875242765567395`, \
-1.1439220279842472`, 0.8746636789775546`, -1.1335729401999879`, \
-1.144353118482165`, -1.1286430249456179`], List[0.2703370268807485`, \
0.2741175950123549`, 0.2729917584724036`, -3.5805652232850034`, \
0.27997280989666956`, 0.27782045653382903`, 0.2717862964478438`, \
0.2858347062240294`, 0.27171495652719324`, 0.28925842523915374`, \
0.2774709558063`, 0.2742887978020478`, 0.2880139286188791`, \
0.28925594275114636`, 0.2744585276425853`, 0.28916051593564346`, \
0.28038708873385054`, 0.28311708501043065`, 0.2859470005386067`, \
0.27183414539696926`, 0.27894337513270967`, 0.2821483156460737`, \
0.27145945457022236`, 0.2745670773786327`, 0.28915434225592673`, \
0.2835183599928852`, 0.28964734678132387`, 0.2762586886738444`, \
0.2789180114835337`, 0.2800431956519211`, 0.28247731836976014`, \
0.2816166651531519`, 0.281989663157842`, 0.28553184203224075`, \
0.27814402855879106`, 0.2785097535104216`, 0.2823946613719041`, \
-3.5784509484260085`, 0.2894833891516831`, -3.5764337694670116`, \
0.28129643702031715`, 0.28098389143001024`, 0.2826308361487105`, \
0.28428483871926774`, 0.28404402308521565`, 0.2745639451261002`, \
0.2800930546943173`, 0.27697609856806116`, 0.2887325372231479`, \
0.27407711196392304`, 0.2701918513998089`, 0.2820428511876988`, \
0.28418733837246396`, 0.28541253328391303`, 0.2815127455419862`, \
-3.567510830578196`, 0.2840420262869357`, 0.2750380718682782`, \
-3.5700557622123292`, 0.2773152715921068`, 0.27947813417114276`, \
0.2743567625409821`, 0.2841089446474958`, 0.2853828063367525`, \
0.28983713829843205`, 0.2860564224143355`, 0.27676166531838137`, \
0.2833403462495046`, 0.2837160546570043`, 0.2862402308498877`, \
0.2742544461300246`, 0.2837040496253338`, 0.2751971726539933`, \
0.28273197252147436`, 0.27410948493705056`, 0.28148098868471244`, \
0.2835378627163636`, 0.27301128705506245`, 0.2784398623523506`, \
0.2777704122919121`, 0.28010647970327446`, 0.27075507098483653`, \
0.27997233682710926`, 0.2725553388885622`, 0.2766297285524525`, \
0.2778532581238835`, 0.27626349902927183`, 0.2780719045270163`, \
0.27768785194377754`, -3.5772121939365613`, 0.27115696615818624`, \
0.27455472112064255`, 0.27876179049741573`, 0.2830366634954594`, \
0.2834522975012569`, 0.28013902758331544`, 0.279907398888083`, \
0.27893517035780147`, 0.2889423085552768`, 0.2771495297597807`, \
0.2795285792147877`, 0.2845796749082042`, 0.2872820103981668`, \
0.28075477693730877`, 0.2816962131648008`, -3.570442563339848`, \
0.2803959976169694`, -3.576123722921704`, 0.2833371737972594`, \
0.28859874263887897`]], List[20.26964347623033`, 20.16568301973428`, \
11.259729414309767`, 54.328049824363646`, 45.51130239997299`, \
22.76607895849719`, 11.213286570135834`, 9.668214308271018`, \
16.487447569065345`, 28.65288192764392`, 12.429467406430826`, \
8.358852172031101`, 25.531240879831287`, 8.654957049053941`, \
25.21577605156233`, 17.684774547868884`, 12.93844915530985`, \
11.374208773041813`, 10.957383630673055`, 12.452476353066025`, \
21.98464944453788`, 13.13749184448271`, 9.38892463064994`, \
11.909904457651344`, 9.810033330411823`, 10.968488715993237`, \
72.67384763998278`, 12.50745424561271`, 9.648481497184052`, \
101.86506076426781`, 22.24372678228282`, 25.61868310274508`, \
9.797599419891274`, 22.741911101477594`, 8.818900534166445`, \
19.82112019213737`, 9.854710627820541`, 54.727111093610525`, \
10.809482939069312`, 54.950919655967986`, 8.772782743724107`, \
10.639531210154743`, 22.87122754724652`, 103.07708851766927`, \
51.543223819303456`, 12.876023560166018`, 20.0149533298062`, \
20.694709731293266`, 8.990607688269193`, 11.090793783044862`, \
9.732571339609477`, 11.775308151564573`, 17.1033632843517`, \
10.510107048016575`, 20.49425891192881`, 54.16266677464803`, \
11.667020256058517`, 12.800056077331414`, 54.97504674060312`, \
9.846453069744335`, 9.904436759191329`, 12.259106539666124`, \
10.450161029196426`, 9.77202794209038`, 23.12714872667466`, \
10.08484878200389`, 11.421535597134573`, 102.93112644739251`, \
17.421315858517858`, 13.149587489518439`, 9.32186834230315`, \
16.933318346772566`, 9.233326867427575`, 13.173833188288945`, \
9.585432932711177`, 181.9752965994689`, 9.744663366493551`, \
74.62159547440265`, 23.243534218386372`, 12.858530406844357`, \
16.20306875522862`, 13.85127915203707`, 26.13376843011474`, \
21.572633022125927`, 24.335914505368915`, 103.06791812958349`, \
11.036352496674972`, 11.329702847288099`, 8.805600231977841`, \
53.926513573394466`, 16.456599042945133`, 20.316322355581704`, \
8.674126285841089`, 12.755929942192337`, 10.71055056950031`, \
102.3166745019617`, 13.487450847634493`, 10.669340551110906`, \
11.331786672555815`, 14.486969719685446`, 52.920194323977306`, \
13.07168776250843`, 46.053105922705555`, 8.580216581355604`, \
10.53064937834084`, 54.98639833787192`, 10.352097422462434`, \
55.008505521728154`, 11.206757656846605`, 11.700295665374863`]]]], \
Rule[\\\"NeighborsNumber\\\", 5], Rule[\\\"ClassPriors\\\", \
List[0.3482142857142857`, 0.6517857142857143`]], Rule[\\\"TrainingOutput\\\", \
NumericArray[List[2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, \
2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, \
1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, \
1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, \
2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2], \\\"UnsignedInteger8\\\"]], \
Rule[\\\"DistributionSmoothing\\\", 0.5`], Rule[\\\"Processor\\\", \
MachineLearning`MLProcessor[\\\"FirstValues\\\", \
Association[Rule[\\\"Info\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 57.`]]], Rule[\\\"Key\\\", \
\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\"], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"Method\\\", \\\"NearestNeighbors\\\"], \
Rule[\\\"PostProcessor\\\", MachineLearning`MLProcessor[\\\"Identity\\\"]], \
Rule[\\\"Options\\\", Association[Rule[\\\"NeighborsNumber\\\", \
Association[Rule[\\\"Value\\\", 5], Rule[\\\"Options\\\", Association[]]]], \
Rule[\\\"DistributionSmoothing\\\", Association[Rule[\\\"Value\\\", 0.5`], \
Rule[\\\"Options\\\", Association[]]]], Rule[\\\"NearestMethod\\\", \
Association[Rule[\\\"Value\\\", \\\"Scan\\\"], Rule[\\\"Options\\\", \
Association[]]]]]]]], Rule[\\\"TrainingInformation\\\", \
Association[Rule[\\\"PanelCell\\\", CellObject[15009]], \
Rule[\\\"TrainingFunction\\\", Classify], Rule[\\\"EMIterations\\\", Missing[\
\\\"KeyAbsent\\\", \\\"EMIterations\\\"]], \
Rule[\\\"ProcessorEntropyShift\\\", 0], Rule[\\\"PreprocessingTime\\\", \
0.3451041`6.989495112442048], Rule[\\\"LossName\\\", \
\\\"MeanCrossEntropy\\\"], Rule[\\\"BestModelInformation\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"14\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]], Rule[\\\"Configurations\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"10\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]], Rule[\\\"MaxTrainingSize\\\", 110], \
Rule[\\\"PreprocessorEvaluationTime\\\", 6.493603515625`2.*^-6], \
Rule[\\\"PreprocessorMemory\\\", 139592], Rule[\\\"InputDimension\\\", 57], \
Rule[\\\"OutputDimension\\\", 1], Rule[\\\"BaselineLogProbability\\\", \
-0.6463341980550162`], Rule[\\\"VariableBudget\\\", True], \
Rule[\\\"CheckpointingInfo\\\", Association[Rule[\\\"Checkpointing\\\", \
False]]], Rule[\\\"UserStop\\\", False], Rule[\\\"NaturalStop\\\", True], \
Rule[\\\"AbortStop\\\", False], Rule[\\\"LastReportingTime\\\", \
3.7985341315433108`17.33219102224969*^9], Rule[\\\"RoundPartitioning\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"2\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]]]], Rule[\\\"AnomalyDetector\\\", None], Rule[\\\"Log\\\", \
Association[Rule[\\\"Example\\\", MachineLearning`MLDataset[Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0.0035287043272917724`]], \
Rule[\\\"ID\\\", 4207867539065565879]]], Rule[\\\"f2\\\", Association[Rule[\\\
\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", \
List[0.03914674950054545`]], Rule[\\\"ID\\\", 7912806483560731870]]], Rule[\\\
\"f3\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0.0012942147020720321`]], \
Rule[\\\"ID\\\", 5965761203752319867]]], Rule[\\\"f4\\\", Association[Rule[\\\
\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", \
List[0.010105931360086088`]], Rule[\\\"ID\\\", 8375076442043603798]]], \
Rule[\\\"f5\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0.9459244001100046`]], \
Rule[\\\"ID\\\", 5205097644896790818]]], Rule[\\\"f6\\\", Association[Rule[\\\
\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", \
List[7]], Rule[\\\"ID\\\", 8854627039274792559]]], Rule[\\\"f7\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 7754319326773593989]]], Rule[\
\\\"f8\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
207921897603130099]]], Rule[\\\"f9\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 6351408238769381299]]], Rule[\\\"f10\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 344037314210118452]]], \
Rule[\\\"f11\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
6348694679514505666]]], Rule[\\\"f12\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 5252554518335886713]]], Rule[\\\"f13\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 5232607783926513996]]], Rule[\
\\\"f14\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
7303145252814796550]]], Rule[\\\"f15\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 90808447787319741]]], Rule[\\\"f16\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", 4503794452530117548]]], Rule[\
\\\"f17\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
2837405527786401704]]], Rule[\\\"f18\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 5636028782333709093]]], Rule[\\\"f19\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 1813727850741997469]]], Rule[\
\\\"f20\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
6709913498313238271]]], Rule[\\\"f21\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 5143675974651387584]]], Rule[\\\"f22\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 8726886491183455211]]], Rule[\
\\\"f23\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
6773162551935999198]]], Rule[\\\"f24\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 8757666475647580641]]], Rule[\\\"f25\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 1532675434602055945]]], Rule[\
\\\"f26\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
6119616733510316592]]], Rule[\\\"f27\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 6164073935886628217]]], Rule[\\\"f28\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 6406882757140105747]]], Rule[\
\\\"f29\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
9118073656617951559]]], Rule[\\\"f30\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 3471280781960335485]]], Rule[\\\"f31\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 2991007088969221471]]], Rule[\
\\\"f32\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
5991154010994051748]]], Rule[\\\"f33\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 2743158781995461983]]], Rule[\\\"f34\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 8871617069128402592]]], Rule[\
\\\"f35\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
5786645781650657112]]], Rule[\\\"f36\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 4449226368872108253]]], Rule[\\\"f37\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 4497375785093605930]]], Rule[\
\\\"f38\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
8697050170407933116]]], Rule[\\\"f39\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 2443537405650142890]]], Rule[\\\"f40\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 7115060319833467586]]], Rule[\
\\\"f41\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
9063755240371144440]]], Rule[\\\"f42\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 7161298486736233804]]], Rule[\\\"f43\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 1149423396418762070]]], Rule[\
\\\"f44\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
2479344111619379829]]], Rule[\\\"f45\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 3271438083699756007]]], Rule[\\\"f46\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 1605112137093190899]]], Rule[\
\\\"f47\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
8487197176029100879]]], Rule[\\\"f48\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 3425091239092551824]]], Rule[\\\"f49\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", 2468318163169225798]]], Rule[\
\\\"f50\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
2050087499797751690]]], Rule[\\\"f51\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 3833063325018811940]]], Rule[\\\"f52\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", 506134768010460531]]], \
Rule[\\\"f53\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
3692097242707087664]]], Rule[\\\"f54\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 4732741083377867666]]], Rule[\\\"f55\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 3623758047278371766]]], Rule[\
\\\"f56\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
7432134570476923960]]], Rule[\\\"f57\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 3923686153078021548]]]], \
Association[Rule[\\\"RawExample\\\", False], Rule[\\\"ExampleNumber\\\", 1], \
Rule[\\\"ExampleWeights\\\", 1], Rule[\\\"LogDensityRatios\\\", 0]]]], \
Rule[\\\"TrainingTime\\\", 1.1843802`], Rule[\\\"MaxTrainingMemory\\\", \
1135144], Rule[\\\"DataMemory\\\", 965888], Rule[\\\"FunctionMemory\\\", \
444424], Rule[\\\"LanguageVersion\\\", List[12.1`, 0]], Rule[\\\"Date\\\", \
DateObject[List[2020, 5, 15, 12, 22, 11.73599`8.822094689938952], \\\"Instant\
\\\", \\\"Gregorian\\\", -4.`]], Rule[\\\"ProcessorCount\\\", 2], \
Rule[\\\"ProcessorType\\\", \\\"x86-64\\\"], Rule[\\\"OperatingSystem\\\", \\\
\"Windows\\\"], Rule[\\\"SystemWordLength\\\", 64], Rule[\\\"Evaluations\\\", \
List[]]]]]], Rule[Selectable, False], Rule[Editable, False], \
Rule[SelectWithContents, True]], \\\"[\\\", RowBox[{\\\"genDataMACCsNCCN\\\", \
\\\",\\\", \\\"\\\\\\\"Probabilities\\\\\\\"\\\"}], \\\"]\\\"}]\\) is not a \
valid Association or a list of rules.\"", 2, 228, 6, 16866382083633017803, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485755674095`*^9},
 CellLabel->
  "During evaluation of \
In[228]:=",ExpressionUUID->"0b581fd3-a157-4347-a1a5-ee33c214a1d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"classErAllMaccsProbsValuesF", "=", 
   RowBox[{"Part", "[", 
    RowBox[{
     RowBox[{"classErAllMaccsProbsValues", "//", "Flatten"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"classErAllMaccsProbsValues", "//", "Flatten"}], "]"}], ",", 
       "2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7977774723291636`*^9, 3.797777491641271*^9}},
 CellLabel->
  "In[229]:=",ExpressionUUID->"1d69890a-8a7d-4539-b51f-46c0e0102994"],

Cell[BoxData[
 TemplateBox[{
  "Values", "invrl", 
   "\"The argument \
\\!\\(\\*RowBox[{InterpretationBox[RowBox[{TagBox[\\\"ClassifierFunction\\\", \
\\\"SummaryHead\\\"], \\\"[\\\", DynamicModuleBox[{Typeset`open$$ = False, \
Set[Typeset`embedState$$, \\\"Ready\\\"]}, \
TemplateBox[List[PaneSelectorBox[List[Rule[False, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SquarePlusIconMedium\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, True]], Rule[Appearance, None], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], Rule[Alignment, List[Center, \
Center]], Rule[ImageSize, Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\
\"FontCapHeight\\\"], Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
GraphicsBox[List[List[PointSize[0.13`], GrayLevel[0.45`], \
PointBox[List[List[0.9821769431797024`, -0.440194219686987`], \
List[1.1339776261519132`, 0.8056918676854272`], List[0.5279892326667741`, \
0.6574306661126254`], List[0.022147046479890797`, 1.4937877187998898`]]], \
GrayLevel[0.7`], PointBox[List[List[-0.9815166384819979`, \
0.15045697525228735`], List[-0.5923526886966953`, -0.33441771553094035`], \
List[-0.005656646679640442`, -1.462421365651345`], List[-1.0734370436522753`, \
-1.3729645043477454`]]]], List[GrayLevel[0.55`], AbsoluteThickness[1.5`], \
LineBox[List[List[-1.`, 1.5`], List[1, -1.6`]]]]], List[Rule[Axes, \
List[False, False]], Rule[AxesLabel, List[None, None]], Rule[AxesOrigin, \
List[0, 0]], Rule[BaseStyle, List[Rule[FontFamily, \\\"Arial\\\"], \
AbsoluteThickness[1.5`]]], Rule[DisplayFunction, Identity], Rule[Frame, \
List[List[True, True], List[True, True]]], Rule[FrameLabel, List[List[None, \
None], List[None, None]]], Rule[FrameStyle, Directive[Thickness[Tiny], \
GrayLevel[0.7`]]], Rule[FrameTicks, List[List[None, None], List[None, \
None]]], Rule[GridLines, List[None, None]], Rule[LabelStyle, \
List[Rule[FontFamily, \\\"Arial\\\"]]], Rule[Method, \
List[Rule[\\\"ScalingFunctions\\\", None]]], Rule[PlotRange, List[List[-1.`, \
1], List[-1.3`, 1.1`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[0.7`, 0.7`], List[0.7`, 0.7`]]], Rule[Ticks, \
List[None, None]]], Rule[Axes, False], Rule[AspectRatio, 1], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]], Rule[Frame, True], \
Rule[FrameTicks, None], Rule[FrameStyle, Directive[Opacity[0.5`], \
Thickness[Tiny], RGBColor[0.368417`, 0.506779`, 0.709798`]]], \
Rule[Background, GrayLevel[0.94`]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Input type: \\\\\\\"\\\", \\\
\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TagBox[TooltipBox[TemplateBox[List[\\\"\\\\\\\"Mixed\\\\\\\"\\\", \
StyleBox[TemplateBox[List[\\\"\\\\\\\" (number: \\\\\\\"\\\", \\\"57\\\", \
\\\"\\\\\\\")\\\\\\\"\\\"], \\\"RowDefault\\\"], GrayLevel[0.5`], \
Rule[StripOnInput, False]]], \\\"RowDefault\\\"], RowBox[List[\\\"{\\\", \
RowBox[List[\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\"]], \\\"}\\\"]]], \
Function[Annotation[Slot[1], Short[List[\\\"Numerical\\\", \\\"Numerical\\\", \
\\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\"], 10], \\\"Tooltip\\\"]]], \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"Classes: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\",\\\", \\\"\\\\\\\",\\\\\\\"\\\", \\\"False\\\", \
\\\"True\\\"], \\\"RowWithSeparators\\\"], \\\"SummaryItem\\\"]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\
\\\"Columns\\\", List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaseStyle, List[Rule[ShowStringCharacters, False], Rule[NumberMarks, \
False], Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Rows\\\", List[List[Top]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaselinePosition, List[1, 1]]]], Rule[True, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SquareMinusIconMedium\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, False]], Rule[Appearance, None], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], Rule[Alignment, List[Center, \
Center]], Rule[ImageSize, Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\
\"FontCapHeight\\\"], Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
GraphicsBox[List[List[PointSize[0.13`], GrayLevel[0.45`], \
PointBox[List[List[0.9821769431797024`, -0.440194219686987`], \
List[1.1339776261519132`, 0.8056918676854272`], List[0.5279892326667741`, \
0.6574306661126254`], List[0.022147046479890797`, 1.4937877187998898`]]], \
GrayLevel[0.7`], PointBox[List[List[-0.9815166384819979`, \
0.15045697525228735`], List[-0.5923526886966953`, -0.33441771553094035`], \
List[-0.005656646679640442`, -1.462421365651345`], List[-1.0734370436522753`, \
-1.3729645043477454`]]]], List[GrayLevel[0.55`], AbsoluteThickness[1.5`], \
LineBox[List[List[-1.`, 1.5`], List[1, -1.6`]]]]], List[Rule[Axes, \
List[False, False]], Rule[AxesLabel, List[None, None]], Rule[AxesOrigin, \
List[0, 0]], Rule[BaseStyle, List[Rule[FontFamily, \\\"Arial\\\"], \
AbsoluteThickness[1.5`]]], Rule[DisplayFunction, Identity], Rule[Frame, \
List[List[True, True], List[True, True]]], Rule[FrameLabel, List[List[None, \
None], List[None, None]]], Rule[FrameStyle, Directive[Thickness[Tiny], \
GrayLevel[0.7`]]], Rule[FrameTicks, List[List[None, None], List[None, \
None]]], Rule[GridLines, List[None, None]], Rule[LabelStyle, \
List[Rule[FontFamily, \\\"Arial\\\"]]], Rule[Method, \
List[Rule[\\\"ScalingFunctions\\\", None]]], Rule[PlotRange, List[List[-1.`, \
1], List[-1.3`, 1.1`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[0.7`, 0.7`], List[0.7`, 0.7`]]], Rule[Ticks, \
List[None, None]]], Rule[Axes, False], Rule[AspectRatio, 1], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]], Rule[Frame, True], \
Rule[FrameTicks, None], Rule[FrameStyle, Directive[Opacity[0.5`], \
Thickness[Tiny], RGBColor[0.368417`, 0.506779`, 0.709798`]]], \
Rule[Background, GrayLevel[0.94`]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Input type: \\\\\\\"\\\", \\\
\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TagBox[TooltipBox[TemplateBox[List[\\\"\\\\\\\"Mixed\\\\\\\"\\\", \
StyleBox[TemplateBox[List[\\\"\\\\\\\" (number: \\\\\\\"\\\", \\\"57\\\", \
\\\"\\\\\\\")\\\\\\\"\\\"], \\\"RowDefault\\\"], GrayLevel[0.5`], \
Rule[StripOnInput, False]]], \\\"RowDefault\\\"], RowBox[List[\\\"{\\\", \
RowBox[List[\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\
\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Numerical\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Boolean\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Boolean\\\\\\\"\\\"]], \\\"}\\\"]]], \
Function[Annotation[Slot[1], Short[List[\\\"Numerical\\\", \\\"Numerical\\\", \
\\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\"], 10], \\\"Tooltip\\\"]]], \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"Classes: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\",\\\", \\\"\\\\\\\",\\\\\\\"\\\", \\\"False\\\", \
\\\"True\\\"], \\\"RowWithSeparators\\\"], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Method: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"NearestNeighbors\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Number of training examples: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"110\\\", \\\"SummaryItem\\\"]]]]], Rule[GridBoxAlignment, \
List[Rule[\\\"Columns\\\", List[List[Left]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[AutoDelete, False], Rule[GridBoxItemSize, \
List[Rule[\\\"Columns\\\", List[List[Automatic]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\\\"Columns\\\", \
List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaseStyle, \
List[Rule[ShowStringCharacters, False], Rule[NumberMarks, False], \
Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Rows\\\", List[List[Top]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaselinePosition, List[1, 1]]]]], Dynamic[Typeset`open$$], \
Rule[ImageSize, Automatic]]], \\\"SummaryPanel\\\"], \
RuleDelayed[DynamicModuleValues, List[]]], \\\"]\\\"}], \
ClassifierFunction[Association[Rule[\\\"ExampleNumber\\\", 110], \
Rule[\\\"ClassNumber\\\", 2], Rule[\\\"Input\\\", \
Association[Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"ToMLDataset\\\", Association[Rule[\\\"Input\\\
\", Association[Rule[\\\"Ln Mole Fraction\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"]]], Rule[\\\"H2SeO4 Mole Fraction\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"Sodium Oxalate \
Mole Fraction\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\
\\\"Amine Mole Fraction\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"]]], Rule[\\\"H2O Mole Fraction\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"pH\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs53\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs54\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs62\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs65\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs74\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs79\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs80\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs82\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs83\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs84\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs85\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs86\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs90\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs91\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs93\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs96\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs98\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs100\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs103\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs104\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs105\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs108\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs111\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs115\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs116\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs118\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs120\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs121\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs122\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs128\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs129\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs131\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs133\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs134\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs137\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs138\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs141\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs145\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs147\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs148\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs149\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs151\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs153\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs155\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs156\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs158\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs160\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs162\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"]]], Rule[\\\"maccs163\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs165\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]], Rule[\\\"maccs166\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f2\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f3\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f4\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f5\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f6\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f7\\\", Association[Rule[\\\"Type\\\", \\\
\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f8\\\", Association[Rule[\
\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f9\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f10\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f11\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f12\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f13\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f14\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f15\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f16\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f17\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f18\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f19\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f20\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f21\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f22\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f23\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f24\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f25\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f26\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f27\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f28\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f29\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f30\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f31\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f32\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f33\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f34\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f35\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f36\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f37\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f38\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f39\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f40\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f41\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f42\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f43\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f44\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f45\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f46\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f47\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f48\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f49\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f50\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f51\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f52\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f53\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f54\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f55\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f56\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f57\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Preprocessor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"FromNamedFeatures\\\", Association[Rule[\
\\\"FeatureNames\\\", List[\\\"Ln Mole Fraction\\\", \\\"H2SeO4 Mole Fraction\
\\\", \\\"Sodium Oxalate Mole Fraction\\\", \\\"Amine Mole Fraction\\\", \
\\\"H2O Mole Fraction\\\", \\\"pH\\\", \\\"maccs53\\\", \\\"maccs54\\\", \
\\\"maccs62\\\", \\\"maccs65\\\", \\\"maccs74\\\", \\\"maccs79\\\", \
\\\"maccs80\\\", \\\"maccs82\\\", \\\"maccs83\\\", \\\"maccs84\\\", \
\\\"maccs85\\\", \\\"maccs86\\\", \\\"maccs90\\\", \\\"maccs91\\\", \
\\\"maccs93\\\", \\\"maccs96\\\", \\\"maccs98\\\", \\\"maccs100\\\", \
\\\"maccs103\\\", \\\"maccs104\\\", \\\"maccs105\\\", \\\"maccs108\\\", \
\\\"maccs111\\\", \\\"maccs115\\\", \\\"maccs116\\\", \\\"maccs118\\\", \
\\\"maccs120\\\", \\\"maccs121\\\", \\\"maccs122\\\", \\\"maccs128\\\", \
\\\"maccs129\\\", \\\"maccs131\\\", \\\"maccs133\\\", \\\"maccs134\\\", \
\\\"maccs137\\\", \\\"maccs138\\\", \\\"maccs141\\\", \\\"maccs145\\\", \
\\\"maccs147\\\", \\\"maccs148\\\", \\\"maccs149\\\", \\\"maccs151\\\", \
\\\"maccs153\\\", \\\"maccs155\\\", \\\"maccs156\\\", \\\"maccs158\\\", \
\\\"maccs160\\\", \\\"maccs162\\\", \\\"maccs163\\\", \\\"maccs165\\\", \
\\\"maccs166\\\"]]]], MachineLearning`MLProcessor[\\\"Transpose\\\", \
Association[Rule[\\\"FeatureNumber\\\", 57]]], MachineLearning`MLProcessor[\\\
\"WrapMLDataset\\\", Association[Rule[\\\"FeatureTypes\\\", \
List[\\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\", \\\"Numerical\\\
\", \\\"Numerical\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \\\"Numerical\\\", \
\\\"Boolean\\\", \\\"Numerical\\\", \\\"Boolean\\\", \\\"Boolean\\\", \
\\\"Boolean\\\"]], Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\", \\\"f2\\\", \
\\\"f3\\\", \\\"f4\\\", \\\"f5\\\", \\\"f6\\\", \\\"f7\\\", \\\"f8\\\", \
\\\"f9\\\", \\\"f10\\\", \\\"f11\\\", \\\"f12\\\", \\\"f13\\\", \\\"f14\\\", \
\\\"f15\\\", \\\"f16\\\", \\\"f17\\\", \\\"f18\\\", \\\"f19\\\", \\\"f20\\\", \
\\\"f21\\\", \\\"f22\\\", \\\"f23\\\", \\\"f24\\\", \\\"f25\\\", \\\"f26\\\", \
\\\"f27\\\", \\\"f28\\\", \\\"f29\\\", \\\"f30\\\", \\\"f31\\\", \\\"f32\\\", \
\\\"f33\\\", \\\"f34\\\", \\\"f35\\\", \\\"f36\\\", \\\"f37\\\", \\\"f38\\\", \
\\\"f39\\\", \\\"f40\\\", \\\"f41\\\", \\\"f42\\\", \\\"f43\\\", \\\"f44\\\", \
\\\"f45\\\", \\\"f46\\\", \\\"f47\\\", \\\"f48\\\", \\\"f49\\\", \\\"f50\\\", \
\\\"f51\\\", \\\"f52\\\", \\\"f53\\\", \\\"f54\\\", \\\"f55\\\", \\\"f56\\\", \
\\\"f57\\\"]], Rule[\\\"FeatureWeights\\\", Automatic], \
Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]], Rule[\\\"StructurePreserving\
\\\", False]]]]]]]], Rule[\\\"ScalarFeature\\\", False], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"Processor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f2\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f3\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f4\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f5\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f6\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f10\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f24\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f29\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f42\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f49\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f52\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f54\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f7\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f8\\\", Association[Rule[\\\"Type\\\", \\\
\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f9\\\", Association[Rule[\
\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f11\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f12\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f13\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f14\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f15\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f16\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f17\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f18\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f19\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f20\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f21\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f22\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f23\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f25\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f26\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f27\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f28\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f30\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f31\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f32\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f33\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f34\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f35\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f36\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f37\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f38\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f39\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f40\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f41\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f43\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f44\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f45\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f46\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f47\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f48\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f50\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f51\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f53\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f55\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f56\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f57\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
57.`]]]]], Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f2\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f3\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f4\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f5\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f6\\\", Association[Rule[\\\"Type\\\", \\\
\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f10\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f24\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f29\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f42\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f49\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f52\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f54\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"(f1f2f3f4f5f6f10f24f29f42f49f52f54)\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
13]]]]], Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
3843819132712164175]]], \
MachineLearning`MLProcessor[\\\"NumericalVectorStandardize\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"(f1f2f3f4f5f6f10f24f29f42f49f52f54)\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
13]]]]], Rule[\\\"Mean\\\", List[0.0027125744939508526`, \
0.03661327540196216`, 0.0013702662912860152`, 0.005885270631865775`, \
0.9534186131809349`, 2.436363636363636`, 0.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.`]], \
Rule[\\\"StandardDeviation\\\", List[0.0008922678396605211`, \
0.007732101328696449`, 0.0011033857541175838`, 0.0028718051216307847`, \
0.006045733366698505`, 1.8267072847427503`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`]], Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
841287822409083141], Rule[\\\"Output\\\", \
Association[Rule[\\\"(f1f2f3f4f5f6f10f24f29f42f49f52f54)\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
13]]]]]]], MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f7\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f8\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f9\\\", Association[Rule[\\\"Type\\\", \\\
\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f11\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f12\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f13\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f14\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f15\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f16\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f17\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f18\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f19\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f20\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f21\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f22\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f23\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f25\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f26\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f27\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f28\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f30\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f31\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f32\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f33\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f34\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f35\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f36\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f37\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f38\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f39\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f40\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f41\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f43\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f44\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f45\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f46\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f47\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f48\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f50\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f51\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f53\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]], Rule[\\\"f55\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], Rule[\\\"f56\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1]]], \
Rule[\\\"f57\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"BooleanVector\\\"], Rule[\\\"Weight\\\", 44]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
7898357694074848566]]], \
MachineLearning`MLProcessor[\\\"ConformBooleanVector\\\", Association[Rule[\\\
\"Invertibility\\\", \\\"Perfect\\\"], Rule[\\\"Missing\\\", \
\\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", True], \
Rule[\\\"Input\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"BooleanVector\\\"], Rule[\\\"Weight\\\", 44]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", 8596124423182320670], \
Rule[\\\"Output\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"BooleanVector\\\"], Rule[\\\"Weight\\\", 44]]]]]]], \
MachineLearning`MLProcessor[\\\"BooleanVectorToNumericalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"BooleanVector\\\"], Rule[\\\"Weight\\\", 44]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", 8693524375696191030], \
Rule[\\\"Output\\\", \
Association[Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 44]]]]]]], \
MachineLearning`MLProcessor[\\\"MergeVectors\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"(f1f2f3f4f5f6f10f24f29f42f49f52f54)\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
13]]], Rule[\\\"(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)\\\", Association[Rule[\\\
\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 44]]]]], \
Rule[\\\"Spans\\\", List[Span[1, 13], Span[14, 57]]], Rule[\\\"Wrappers\\\", \
List[Identity, Identity]], Rule[\\\"Output\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Weight\\\", List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`]], Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
102437435096265169]]], MachineLearning`MLProcessor[\\\"ImputeMissing\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Imputed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Weight\\\", List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`]], Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]]]], \
Rule[\\\"Imputer\\\", \
Function[DimensionReducerFunction[Association[Rule[\\\"ExampleNumber\\\", \
110], Rule[\\\"Imputer\\\", \
MachineLearning`MLProcessor[\\\"ImputeMissing\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Imputed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Fill\\\", List[1.1556412392689129`*^-15, \
6.207156001313375`*^-16, -4.289498049688105`*^-17, 5.752973854875811`*^-16, \
4.703863561287976`*^-14, 1.8066356491627547`*^-16, 0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.13636363636363635`, 0.6727272727272727`, 0.01818181818181818`, \
0.045454545454545456`, 0.7272727272727273`, 0.13636363636363635`, \
0.9454545454545454`, 0.07272727272727272`, 0.6`, 0.05454545454545454`, \
0.45454545454545453`, 0.39999999999999997`, 0.6363636363636364`, \
0.10909090909090909`, 0.07272727272727272`, 0.36363636363636365`, \
0.07272727272727272`, 0.9454545454545454`, 0.00909090909090909`, \
0.08181818181818182`, 0.22727272727272727`, 0.22727272727272727`, \
0.9636363636363636`, 0.2909090909090909`, 0.43636363636363634`, \
0.05454545454545454`, 0.43636363636363634`, 0.6454545454545454`, \
0.9454545454545454`, 0.07272727272727272`, 0.07272727272727272`, \
0.43636363636363634`, 0.045454545454545456`, 0.00909090909090909`, \
0.9636363636363636`, 0.05454545454545454`, 0.14545454545454545`, \
0.9454545454545454`, 0.6363636363636364`, 0.2636363636363636`, \
0.22727272727272727`, 0.36363636363636365`, 0.43636363636363634`, \
0.07272727272727272`]], Rule[\\\"Method\\\", \\\"Naive\\\"], \
Rule[\\\"VectorLength\\\", 57], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"]]]], Rule[\\\"RandomImputer\\\", \
MachineLearning`MLProcessor[\\\"ImputeMissing\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Imputed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Mean\\\", List[1.1556412392689129`*^-15, \
6.207156001313375`*^-16, -4.289498049688105`*^-17, 5.752973854875811`*^-16, \
4.703863561287976`*^-14, 1.8066356491627547`*^-16, 0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.13636363636363635`, 0.6727272727272727`, 0.01818181818181818`, \
0.045454545454545456`, 0.7272727272727273`, 0.13636363636363635`, \
0.9454545454545454`, 0.07272727272727272`, 0.6`, 0.05454545454545454`, \
0.45454545454545453`, 0.39999999999999997`, 0.6363636363636364`, \
0.10909090909090909`, 0.07272727272727272`, 0.36363636363636365`, \
0.07272727272727272`, 0.9454545454545454`, 0.00909090909090909`, \
0.08181818181818182`, 0.22727272727272727`, 0.22727272727272727`, \
0.9636363636363636`, 0.2909090909090909`, 0.43636363636363634`, \
0.05454545454545454`, 0.43636363636363634`, 0.6454545454545454`, \
0.9454545454545454`, 0.07272727272727272`, 0.07272727272727272`, \
0.43636363636363634`, 0.045454545454545456`, 0.00909090909090909`, \
0.9636363636363636`, 0.05454545454545454`, 0.14545454545454545`, \
0.9454545454545454`, 0.6363636363636364`, 0.2636363636363636`, \
0.22727272727272727`, 0.36363636363636365`, 0.43636363636363634`, \
0.07272727272727272`]], Rule[\\\"StandardDeviation\\\", \
List[0.9999999999999958`, 0.999999999999997`, 1.0000000000000004`, \
0.9999999999999991`, 0.9999999999846566`, 0.9999999999999999`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 0.3431742925123068`, 0.4692177418386887`, \
0.133608531424537`, 0.20829889522526546`, 0.4453617714151233`, \
0.3431742925123068`, 0.22709083630539634`, 0.25968830649246727`, \
0.4898979485566356`, 0.22709083630539628`, 0.4979295977319692`, \
0.4898979485566356`, 0.48104569292083466`, 0.3117532399905863`, \
0.25968830649246727`, 0.48104569292083466`, 0.25968830649246727`, \
0.22709083630539634`, 0.09491187735373227`, 0.27408751693966066`, \
0.4190702026042222`, 0.4190702026042222`, 0.18719327529067264`, \
0.45418167261079256`, 0.4959338798903947`, 0.22709083630539628`, \
0.4959338798903947`, 0.47837534970628615`, 0.22709083630539634`, \
0.25968830649246727`, 0.25968830649246727`, 0.4959338798903947`, \
0.20829889522526546`, 0.09491187735373227`, 0.18719327529067264`, \
0.22709083630539628`, 0.35255853508482393`, 0.22709083630539634`, \
0.48104569292083466`, 0.44060439331100487`, 0.4190702026042222`, \
0.48104569292083466`, 0.4959338798903947`, 0.25968830649246727`]], \
Rule[\\\"Method\\\", \\\"NaiveSampler\\\"], Rule[\\\"VectorLength\\\", 57], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"]]]], Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"ToMLDataset\\\", Association[Rule[\\\"Input\\\
\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Length\\\", 57]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Preprocessor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"NumericalVector\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
Automatic], Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]], Rule[\\\"StructurePreserving\
\\\", False]]]]]]]], Rule[\\\"ScalarFeature\\\", True], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"Processor\\\", \
MachineLearning`MLProcessor[\\\"Identity\\\"]], Rule[\\\"Padder\\\", \
MachineLearning`MLProcessor[\\\"Identity\\\"]], Rule[\\\"PostProcessor\\\", \
MachineLearning`MLProcessor[\\\"FromMLDataset\\\", \
Association[Rule[\\\"DatasetFormat\\\", Automatic], Rule[\\\"Input\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Length\\\", 14]]]]], \
Rule[\\\"InversePreprocessor\\\", \
MachineLearning`MLProcessor[\\\"Sequence\\\", Association[Rule[\\\"Processors\
\\\", List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"NumericalVector\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
List[1]], Rule[\\\"ExampleWeights\\\", 1], Rule[\\\"StructurePreserving\\\", \
False]]]]]]]], Rule[\\\"ScalarFeature\\\", True], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"StructurePreserving\\\", False], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], Rule[\\\"Model\\\", \
Association[Rule[\\\"Matrix\\\", List[List[0.03245165611395223`, \
-0.09952799612084376`, 0.03135605008943762`, -0.07799892104580645`, \
0.024545501141558155`, 0.34270135403492974`, 0.2224247353052048`, \
-0.14003328534080667`, -0.3223983535600037`, 0.03570145826604417`, \
0.20206973496783212`, 0.1015869172290205`, -0.31969023506963834`, \
-0.19613168953242963`], List[0.016144543937139193`, 0.014957068956911231`, \
-0.08486631555729944`, 0.18664025034266918`, -0.32310783361848816`, \
-0.23730486168564088`, -0.3532860535371953`, 0.06929370770266648`, \
0.11363025657953939`, 0.02372574191594997`, -0.024395450760975816`, \
-0.11746423207867229`, -0.046488061096974606`, -0.16822578434760097`], \
List[-0.007265742494575896`, 0.053492522893529654`, 0.05707674758624638`, \
-0.21401016673746992`, 0.28907278137735853`, 0.04986948248396654`, \
-0.17658776210473118`, -0.144302667464534`, 0.021876411815031332`, \
0.13705921460527792`, 0.19588189169755998`, -0.17386332161586918`, \
-0.02973929339672264`, -0.34723275849803265`], List[0.00873580928010474`, \
-0.12230356795071623`, 0.07790540549755934`, -0.1310163852209612`, \
0.06844977379280613`, 0.3613871983543503`, 0.0811346740595157`, \
-0.18383912900825877`, -0.23829162337020476`, 0.09424289488320571`, \
0.0401134815031544`, -0.17550684217450813`, -0.08642557919298334`, \
-0.27380657304379663`], List[-0.02826083014776961`, 0.04389296820749298`, \
0.0564877944181755`, -0.1258964061796123`, 0.32433917105247473`, \
0.07215418368892416`, 0.4126914673810231`, 0.045707091371820545`, \
0.011455021856108139`, -0.10539358553601419`, -0.053426705986982834`, \
0.25033561264682813`, 0.15311807383594256`, 0.43753031221773175`], \
List[0.02457041008794963`, -0.07367378601736649`, -0.0138241401863818`, \
0.05492022942988034`, -0.16703061483597537`, 0.07075045332091506`, \
-0.08404547280980118`, -0.17058562483662987`, 0.01564583525476264`, \
0.37146514425859156`, 0.5625013373150635`, 0.30391682471726544`, \
0.6056688360972544`, 0.031441926288713465`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[-0.08774094123535738`, \
-0.06519644547577128`, -0.2563403590375448`, -0.04761978670783118`, \
0.04358371266502659`, -0.03262229607513306`, 0.030062685299220057`, \
0.15601537782487712`, 0.02634474233237486`, 0.438803720598793`, \
-0.07584763230416341`, 0.1202611484992328`, -0.2096326383179573`, \
0.1214415055284201`], List[-0.10776429103799448`, 0.12921480553030734`, \
0.01736756595046111`, -0.17819764427276438`, -0.24419777512059868`, \
0.28931689507347585`, -0.1664287134587439`, -0.11955008201938577`, \
0.05005851459667067`, -0.15752499695493213`, -0.12823133299588016`, \
0.09572650524436747`, 0.04325356114689656`, 0.11920075474002827`], \
List[-0.021602465969270596`, 0.03955672291826634`, 0.033090999495653514`, \
0.0707500760438793`, 0.11612607173880629`, -0.03663571273656884`, \
0.4088769122050876`, 0.07156376663781844`, 0.3313850530211541`, \
0.02511400072725179`, -0.3312793949738888`, 0.11051440459546436`, \
0.3577340072380851`, -0.5720800067468559`], List[0.24441332085536543`, \
0.057387460504625135`, -0.11088192762799663`, 0.028884902732674227`, \
0.003715666824803957`, -0.08339882456495762`, 0.06461229507905568`, \
-0.2668568429454949`, -0.0023458198296804067`, 0.0674309762368342`, \
-0.07916164794151394`, -0.05420246948533662`, -0.006375256911595344`, \
0.04991981987027299`], List[0.014452356909368512`, 0.17543031609447504`, \
-0.04108350357866972`, -0.1304575391611399`, -0.21708719598717066`, \
0.32188855077446044`, -0.18296817378584052`, -0.15502393424323138`, \
0.035992025749324724`, -0.15892926896111914`, -0.15199869336288782`, \
0.09095620020862612`, 0.05463217676594171`, 0.13525794409248118`], \
List[-0.08774094123535736`, -0.06519644547577126`, -0.25634035903754476`, \
-0.04761978670783112`, 0.04358371266502661`, -0.032622296075133124`, \
0.030062685299220085`, 0.15601537782487712`, 0.026344742332374875`, \
0.43880372059879325`, -0.07584763230416333`, 0.12026114849923275`, \
-0.20963263831795736`, 0.12144150552842015`], List[-0.2510072422707461`, \
-0.07706201341017506`, 0.11645644728121209`, -0.11234577284777522`, \
-0.07882128023721373`, -0.03348543302195212`, 0.0149531568022209`, \
0.05701117075076439`, 0.03284531844464206`, -0.013794051098972415`, \
0.03314088296133147`, 0.019411440155343816`, -0.01777149971603439`, \
-0.018968658905368398`], List[-0.11657742208957561`, 0.015007408325123194`, \
-0.3145531337361862`, -0.061385783432568536`, 0.0025001604380474433`, \
0.03657457625565273`, 0.035114132518880584`, -0.014692565841128716`, \
0.004425426618041083`, -0.09270647710556838`, 0.041606871831112335`, \
-0.0543839216149718`, 0.05365230052425651`, -0.03437400492025116`], \
List[-0.07766403628328286`, -0.2630769362703717`, -0.07046844463944014`, \
0.043070601765481276`, 0.08764859474490103`, -0.008557655771896818`, \
-0.13055684868768114`, -0.0991481452809158`, -0.1772819843048149`, \
-0.08590356136784202`, -0.202430459346256`, 0.06232553014680138`, \
0.15692228061498045`, 0.03282789799900144`], List[0.25100724227074617`, \
0.07706201341017505`, -0.11645644728121209`, 0.11234577284777522`, \
0.07882128023721371`, 0.0334854330219521`, -0.014953156802220901`, \
-0.05701117075076436`, -0.0328453184446421`, 0.013794051098972405`, \
-0.033140882961331476`, -0.019411440155343747`, 0.01777149971603442`, \
0.01896865890536832`], List[0.018654488875125903`, 0.22089151709243104`, \
-0.1110552454721333`, 0.026735153050250027`, -0.21269578128122374`, \
0.05207134190027181`, 0.25617432181017097`, 0.10437734329478753`, \
0.15011082801124165`, -0.049466737574846126`, 0.20013195226031152`, \
-0.07354606976783358`, -0.11376439102457905`, 0.06093548908436362`], \
List[-0.09417885184638751`, -0.14812732776888304`, -0.12355499528948648`, \
0.12258317390487708`, 0.16351504440154818`, -0.2948161657918956`, \
-0.05934622843141386`, -0.02401159338486699`, -0.21424022702830478`, \
0.011142015663092777`, 0.08531145669202476`, 0.27000589013152076`, \
-0.1729921357255514`, -0.11152914003460382`], List[-0.16946096430124183`, \
0.13219143478275014`, 0.007584097888372817`, 0.14284882947940233`, \
0.12279298339507395`, -0.24835062213179374`, 0.06951247942265046`, \
-0.17144260331302835`, -0.10044147788264077`, -0.20811636525478985`, \
0.21939278569311588`, -0.11192555058983573`, -0.00778909356916728`, \
0.013833745480516389`], List[0.2134157267458405`, 0.036902474387511076`, \
-0.056846767148217216`, -0.15140696117744712`, -0.1692819588555343`, \
-0.0826859576735042`, 0.08943917875058502`, 0.06662316638792964`, \
0.12172056430336949`, -0.16817219382892176`, 0.1767528739122658`, \
0.2900847900053981`, -0.19192596792839445`, -0.1570768089991252`], \
List[-0.11657742208957562`, 0.015007408325123206`, -0.31455313373618615`, \
-0.061385783432568536`, 0.0025001604380474503`, 0.036574576255652726`, \
0.035114132518880584`, -0.01469256584112872`, 0.004425426618041068`, \
-0.09270647710556824`, 0.04160687183111226`, -0.054383921614971686`, \
0.05365230052425639`, -0.034374004920251146`], List[-0.08481433740049159`, \
0.2584514045296462`, 0.12374117672421343`, 0.11110761541315085`, \
0.016889976637183717`, 0.030151356161037774`, -0.060229897553370895`, \
-0.08237359275598959`, 0.006451702050157871`, 0.11770164099008973`, \
-0.07670806775476186`, 0.16776838581755685`, -0.09062825166129203`, \
-0.06032802692400287`], List[-0.11657742208957562`, 0.015007408325123206`, \
-0.31455313373618615`, -0.06138578343256855`, 0.0025001604380474572`, \
0.036574576255652726`, 0.03511413251888057`, -0.01469256584112871`, \
0.004425426618041061`, -0.09270647710556826`, 0.04160687183111225`, \
-0.05438392161497168`, 0.053652300524256395`, -0.03437400492025114`], \
List[-0.2510072422707461`, -0.07706201341017499`, 0.11645644728121203`, \
-0.11234577284777524`, -0.07882128023721373`, -0.03348543302195207`, \
0.01495315680222098`, 0.0570111707507644`, 0.032845318444642155`, \
-0.01379405109897244`, 0.03314088296133154`, 0.01941144015534365`, \
-0.01777149971603444`, -0.018968658905368224`], List[0.06416920646048685`, \
0.05843665307690034`, -0.035291778798162324`, 0.20541161682864434`, \
0.1804370710029542`, 0.26315060564954307`, -0.177579403510718`, \
0.4492511613208646`, -0.07343906105042251`, -0.11498345157914433`, \
0.09443805383213298`, 0.07251099151540374`, 0.056512460336103215`, \
-0.06417147025456651`], List[-0.029886501615090977`, 0.15689387870136248`, \
0.05642274554109648`, -0.03656585746547356`, -0.1718146094710993`, \
-0.08657753804065306`, 0.1255443292512412`, 0.18505962274171175`, \
-0.4887344350676738`, 0.16919127865159267`, -0.14693783073526528`, \
-0.25772107464176963`, 0.2409858757702798`, 0.029594446914944436`], \
List[0.1340717922436073`, 0.17981031237603745`, 0.01951162886009206`, \
-0.25275002976723204`, -0.08515836023461336`, -0.1490683241839124`, \
0.04436937879960147`, 0.15692163732805442`, -0.17681420525131566`, \
0.000593330078514467`, 0.040469345954648066`, 0.021209895033254225`, \
0.04165303768988679`, -0.05557778769213943`], List[0.1340717922436073`, \
0.17981031237603745`, 0.01951162886009206`, -0.25275002976723204`, \
-0.08515836023461339`, -0.1490683241839124`, 0.044369378799601455`, \
0.15692163732805445`, -0.1768142052513157`, 0.0005933300785144497`, \
0.04046934595464814`, 0.021209895033254232`, 0.04165303768988675`, \
-0.05557778769213949`], List[0.0115176900338988`, -0.11136096857710286`, \
-0.05573990764628049`, 0.26013835339695135`, -0.3428494290323051`, \
0.0692474404689198`, 0.23344429759611546`, 0.030617222258553504`, \
-0.1170536847734027`, -0.033674584706400335`, -0.0113788332198358`, \
0.05827297331514547`, -0.060033507928811056`, -0.09384279903764252`], \
List[-0.06271849778175333`, 0.25843487863066733`, 0.11502998350410369`, \
0.057469098447211854`, 0.021655062233643628`, 0.06598679563899547`, \
0.0794320439597254`, 0.06121445816302653`, 0.10767343352013183`, \
0.20809339189540027`, 0.0970250194949517`, -0.2663428090843659`, \
-0.03752322483233665`, 0.07240909581110377`], List[-0.14331217911115118`, \
0.2585509654219578`, -0.044684606961330614`, 0.07562836745731699`, \
0.017692102315949577`, 0.048397923107822524`, -0.04003477882922613`, \
-0.08759423646675688`, 0.00857532667081095`, 0.06562382754483737`, \
-0.052618440843776274`, 0.1342545722343479`, -0.059813326451092656`, \
-0.07651637885214438`], List[0.2510072422707461`, 0.07706201341017507`, \
-0.11645644728121203`, 0.1123457728477753`, 0.07882128023721373`, \
0.03348543302195209`, -0.014953156802221017`, -0.05701117075076436`, \
-0.0328453184446421`, 0.013794051098972682`, -0.033140882961331664`, \
-0.019411440155343462`, 0.01777149971603431`, 0.01896865890536807`], \
List[-0.08421645461063865`, 0.15196603616806081`, 0.12802443139526884`, \
0.2598931479503307`, -0.0314383929254725`, -0.038859247084265976`, \
0.1342299746429942`, -0.08528704791918451`, -0.12583297710945346`, \
-0.08904402926852073`, 0.0952568072374092`, 0.18018304145478828`, \
-0.07932927773782275`, 0.11096083713349329`], List[-0.15767544709017947`, \
0.14452344343309767`, 0.0006243813423682204`, 0.18440084004638316`, \
0.15927797488516338`, -0.19752664755772964`, 0.03466793235508131`, \
-0.08326611061171163`, -0.1155728018080027`, -0.23209134094035785`, \
0.23935440584202244`, -0.09816381578682506`, 0.0033797598311984117`, \
0.0011790510658659416`], List[-0.25100724227074606`, -0.07706201341017506`, \
0.11645644728121203`, -0.11234577284777529`, -0.07882128023721373`, \
-0.03348543302195209`, 0.014953156802221005`, 0.05701117075076441`, \
0.032845318444642224`, -0.013794051098972627`, 0.033140882961331664`, \
0.01941144015534356`, -0.017771499716034162`, -0.01896865890536835`], \
List[-0.11657742208957564`, 0.015007408325123204`, -0.31455313373618615`, \
-0.06138578343256852`, 0.0025001604380474537`, 0.036574576255652705`, \
0.03511413251888054`, -0.014692565841128678`, 0.004425426618041153`, \
-0.0927064771055683`, 0.04160687183111224`, -0.05438392161497156`, \
0.05365230052425646`, -0.03437400492025103`], List[-0.11657742208957562`, \
0.015007408325123206`, -0.31455313373618615`, -0.061385783432568536`, \
0.0025001604380474607`, 0.03657457625565275`, 0.03511413251888062`, \
-0.01469256584112872`, 0.004425426618041047`, -0.09270647710556829`, \
0.041606871831112065`, -0.0543839216149717`, 0.05365230052425643`, \
-0.03437400492025118`], List[-0.14331217911115113`, 0.25855096542195777`, \
-0.04468460696133062`, 0.07562836745731692`, 0.017692102315949577`, \
0.04839792310782243`, -0.04003477882922615`, -0.08759423646675667`, \
0.008575326670810804`, 0.06562382754483706`, -0.05261844084377623`, \
0.1342545722343479`, -0.0598133264510923`, -0.07651637885214452`], \
List[0.24441332085536546`, 0.05738746050462514`, -0.11088192762799667`, \
0.028884902732674172`, 0.003715666824804089`, -0.08339882456495758`, \
0.06461229507905582`, -0.26685684294549494`, -0.002345819829680268`, \
0.06743097623683406`, -0.07916164794151381`, -0.054202469485337045`, \
-0.006375256911595205`, 0.04991981987027298`], List[0.06416920646048684`, \
0.05843665307690035`, -0.03529177879816232`, 0.2054116168286443`, \
0.18043707100295442`, 0.26315060564954307`, -0.1775794035107181`, \
0.4492511613208644`, -0.07343906105042247`, -0.11498345157914441`, \
0.09443805383213293`, 0.0725109915154035`, 0.05651246033610363`, \
-0.06417147025456657`], List[0.011517690033898796`, -0.11136096857710286`, \
-0.0557399076462805`, 0.2601383533969514`, -0.342849429032305`, \
0.0692474404689199`, 0.23344429759611554`, 0.030617222258553442`, \
-0.11705368477340275`, -0.0336745847064001`, -0.011378833219835863`, \
0.05827297331514555`, -0.060033507928811264`, -0.09384279903764255`], \
List[0.25100724227074606`, 0.07706201341017509`, -0.11645644728121207`, \
0.11234577284777529`, 0.07882128023721377`, 0.03348543302195206`, \
-0.014953156802220868`, -0.05701117075076431`, -0.0328453184446422`, \
0.013794051098972568`, -0.03314088296133147`, -0.01941144015534324`, \
0.017771499716034173`, 0.01896865890536845`], List[0.1825994941272499`, \
0.09175920359914806`, -0.020671823936943792`, -0.2720052177497937`, \
0.03234897831698891`, -0.10988322941605055`, -0.04486134168770034`, \
0.042655753210937494`, 0.1697829919738901`, -0.1308281204599106`, \
0.16233707734641462`, 0.2255698175091682`, -0.13783717745460722`, \
-0.08907021130832588`], List[-0.251007242270746`, -0.07706201341017505`, \
0.11645644728121203`, -0.1123457728477752`, -0.07882128023721378`, \
-0.033485433021951894`, 0.014953156802221423`, 0.057011170750764256`, \
0.032845318444642196`, -0.013794051098972374`, 0.0331408829613314`, \
0.0194114401553436`, -0.017771499716034478`, -0.01896865890536792`], \
List[0.12214928105285511`, -0.25210418817780367`, 0.06120262737371222`, \
-0.021121155980382146`, -0.021795423948652894`, -0.08204622463702438`, \
-0.09395221463866246`, -0.04986428068712066`, -0.1040494331670554`, \
-0.14642562606099557`, -0.11406775807597255`, 0.2808275658849673`, \
0.006464013708660427`, -0.04980890064129903`], List[-0.1201425240840578`, \
0.16953184582689415`, -0.1100901748720714`, -0.10738235421653641`, \
0.03637196694062708`, -0.09682223256706972`, -0.14802451351963108`, \
-0.05958233865527321`, -0.3556361502441131`, -0.02108524623238056`, \
-0.2458124315515436`, 0.24058537972136274`, 0.14677110856269154`, \
-0.10248590388143385`], List[0.13407179224360719`, 0.1798103123760376`, \
0.01951162886009211`, -0.2527500297672326`, -0.08515836023461333`, \
-0.14906832418391225`, 0.04436937879960151`, 0.15692163732805442`, \
-0.17681420525131575`, 0.0005933300785143647`, 0.04046934595464802`, \
0.02120989503325424`, 0.04165303768988696`, -0.05557778769213957`], \
List[-0.0848143374004916`, 0.2584514045296463`, 0.12374117672421348`, \
0.11110761541315076`, 0.01688997663718374`, 0.030151356161037743`, \
-0.060229897553371034`, -0.08237359275598975`, 0.006451702050157936`, \
0.11770164099008984`, -0.07670806775476222`, 0.16776838581755726`, \
-0.0906282516612924`, -0.060328026924002964`], List[-0.14331217911115113`, \
0.25855096542195777`, -0.044684606961330475`, 0.07562836745731702`, \
0.017692102315949608`, 0.048397923107822344`, -0.0400347788292263`, \
-0.08759423646675685`, 0.008575326670810684`, 0.06562382754483738`, \
-0.05261844084377615`, 0.13425457223434825`, -0.05981332645109238`, \
-0.0765163788521448`], List[-0.11657742208957561`, 0.015007408325123242`, \
-0.31455313373618654`, -0.061385783432568654`, 0.002500160438047429`, \
0.03657457625565281`, 0.035114132518880556`, -0.01469256584112883`, \
0.004425426618041064`, -0.0927064771055681`, 0.04160687183111201`, \
-0.05438392161497143`, 0.0536523005242562`, -0.03437400492025096`]]], Rule[\\\
\"Processor\\\", MachineLearning`MLProcessor[\\\"Standardize\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Mean\\\", List[1.1556412392689129`*^-15, \
6.207156001313375`*^-16, -4.289498049688105`*^-17, 5.752973854875811`*^-16, \
4.703863561287976`*^-14, 1.8066356491627547`*^-16, 0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.13636363636363635`, 0.6727272727272727`, 0.01818181818181818`, \
0.045454545454545456`, 0.7272727272727273`, 0.13636363636363635`, \
0.9454545454545454`, 0.07272727272727272`, 0.6`, 0.05454545454545454`, \
0.45454545454545453`, 0.39999999999999997`, 0.6363636363636364`, \
0.10909090909090909`, 0.07272727272727272`, 0.36363636363636365`, \
0.07272727272727272`, 0.9454545454545454`, 0.00909090909090909`, \
0.08181818181818182`, 0.22727272727272727`, 0.22727272727272727`, \
0.9636363636363636`, 0.2909090909090909`, 0.43636363636363634`, \
0.05454545454545454`, 0.43636363636363634`, 0.6454545454545454`, \
0.9454545454545454`, 0.07272727272727272`, 0.07272727272727272`, \
0.43636363636363634`, 0.045454545454545456`, 0.00909090909090909`, \
0.9636363636363636`, 0.05454545454545454`, 0.14545454545454545`, \
0.9454545454545454`, 0.6363636363636364`, 0.2636363636363636`, \
0.22727272727272727`, 0.36363636363636365`, 0.43636363636363634`, \
0.07272727272727272`]], Rule[\\\"StandardDeviation\\\", \
List[0.9999999999999958`, 0.999999999999997`, 1.0000000000000004`, \
0.9999999999999991`, 0.9999999999846566`, 0.9999999999999999`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 0.3431742925123068`, 0.4692177418386887`, \
0.133608531424537`, 0.20829889522526546`, 0.4453617714151233`, \
0.3431742925123068`, 0.22709083630539634`, 0.25968830649246727`, \
0.4898979485566356`, 0.22709083630539628`, 0.4979295977319692`, \
0.4898979485566356`, 0.48104569292083466`, 0.3117532399905863`, \
0.25968830649246727`, 0.48104569292083466`, 0.25968830649246727`, \
0.22709083630539634`, 0.09491187735373227`, 0.27408751693966066`, \
0.4190702026042222`, 0.4190702026042222`, 0.18719327529067264`, \
0.45418167261079256`, 0.4959338798903947`, 0.22709083630539628`, \
0.4959338798903947`, 0.47837534970628615`, 0.22709083630539634`, \
0.25968830649246727`, 0.25968830649246727`, 0.4959338798903947`, \
0.20829889522526546`, 0.09491187735373227`, 0.18719327529067264`, \
0.22709083630539628`, 0.35255853508482393`, 0.22709083630539634`, \
0.48104569292083466`, 0.44060439331100487`, 0.4190702026042222`, \
0.48104569292083466`, 0.4959338798903947`, 0.25968830649246727`]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 1]]]]]]]], \
Rule[\\\"FinalDimension\\\", 14], Rule[\\\"Method\\\", \\\"Linear\\\"]]], \
Rule[\\\"PerformanceGoal\\\", Automatic], Rule[\\\"Invertibility\\\", \
\\\"Approximate\\\"], Rule[\\\"Log\\\", \
Association[Rule[\\\"TrainingTime\\\", 0.0146322`], \
Rule[\\\"MaxTrainingMemory\\\", 205424], Rule[\\\"DataMemory\\\", 51312], \
Rule[\\\"FunctionMemory\\\", 33208], Rule[\\\"LanguageVersion\\\", \
List[12.1`, 0]], Rule[\\\"Date\\\", DateObject[List[2020, 5, 15, 12, 22, \
10.7008827`8.781994565357499], \\\"Instant\\\", \\\"Gregorian\\\", -4.`]], \
Rule[\\\"ProcessorCount\\\", 2], Rule[\\\"ProcessorType\\\", \\\"x86-64\\\"], \
Rule[\\\"OperatingSystem\\\", \\\"Windows\\\"], \
Rule[\\\"SystemWordLength\\\", 64], Rule[\\\"Evaluations\\\", \
List[]]]]]][Slot[1], \\\"ImputedVectors\\\", Rule[PerformanceGoal, \
\\\"Quality\\\"]]]], Rule[\\\"Method\\\", \\\"DimensionReduction\\\"], \
Rule[\\\"VectorLength\\\", 57], Rule[\\\"Output\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
57.`]]]]], Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Version\\\", \
List[12.1`, 0]], Rule[\\\"ID\\\", 7259735455847470961]]], \
MachineLearning`MLProcessor[\\\"Standardize\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
57.`]]]]], Rule[\\\"Mean\\\", List[1.1556412392689129`*^-15, \
6.207156001313375`*^-16, -4.289498049688105`*^-17, 5.752973854875811`*^-16, \
4.703863561287976`*^-14, 1.8066356491627547`*^-16, 0.`, 0.`, 0.`, 0.`, 0.`, \
0.`, 0.`, 0.13636363636363635`, 0.6727272727272727`, 0.01818181818181818`, \
0.045454545454545456`, 0.7272727272727273`, 0.13636363636363635`, \
0.9454545454545454`, 0.07272727272727272`, 0.6`, 0.05454545454545454`, \
0.45454545454545453`, 0.39999999999999997`, 0.6363636363636364`, \
0.10909090909090909`, 0.07272727272727272`, 0.36363636363636365`, \
0.07272727272727272`, 0.9454545454545454`, 0.00909090909090909`, \
0.08181818181818182`, 0.22727272727272727`, 0.22727272727272727`, \
0.9636363636363636`, 0.2909090909090909`, 0.43636363636363634`, \
0.05454545454545454`, 0.43636363636363634`, 0.6454545454545454`, \
0.9454545454545454`, 0.07272727272727272`, 0.07272727272727272`, \
0.43636363636363634`, 0.045454545454545456`, 0.00909090909090909`, \
0.9636363636363636`, 0.05454545454545454`, 0.14545454545454545`, \
0.9454545454545454`, 0.6363636363636364`, 0.2636363636363636`, \
0.22727272727272727`, 0.36363636363636365`, 0.43636363636363634`, \
0.07272727272727272`]], Rule[\\\"StandardDeviation\\\", \
List[0.9999999999999958`, 0.999999999999997`, 1.0000000000000004`, \
0.9999999999999991`, 0.9999999999846566`, 0.9999999999999999`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 0.3431742925123068`, 0.4692177418386887`, \
0.133608531424537`, 0.20829889522526546`, 0.4453617714151233`, \
0.3431742925123068`, 0.22709083630539634`, 0.25968830649246727`, \
0.4898979485566356`, 0.22709083630539628`, 0.4979295977319692`, \
0.4898979485566356`, 0.48104569292083466`, 0.3117532399905863`, \
0.25968830649246727`, 0.48104569292083466`, 0.25968830649246727`, \
0.22709083630539634`, 0.09491187735373227`, 0.27408751693966066`, \
0.4190702026042222`, 0.4190702026042222`, 0.18719327529067264`, \
0.45418167261079256`, 0.4959338798903947`, 0.22709083630539628`, \
0.4959338798903947`, 0.47837534970628615`, 0.22709083630539634`, \
0.25968830649246727`, 0.25968830649246727`, 0.4959338798903947`, \
0.20829889522526546`, 0.09491187735373227`, 0.18719327529067264`, \
0.22709083630539628`, 0.35255853508482393`, 0.22709083630539634`, \
0.48104569292083466`, 0.44060439331100487`, 0.4190702026042222`, \
0.48104569292083466`, 0.4959338798903947`, 0.25968830649246727`]], \
Rule[\\\"Output\\\", \
Association[Rule[\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\", \
Association[Rule[\\\"Type\\\", \\\"NumericalVector\\\"], Rule[\\\"Weight\\\", \
57.`]]]]], Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
2367778904976982516]]]]], Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], Rule[\
\\\"StructurePreserving\\\", True], Rule[\\\"Missing\\\", \
\\\"Imputed\\\"]]]]]], Rule[\\\"Output\\\", Association[Rule[\\\"Preprocessor\
\\\", MachineLearning`MLProcessor[\\\"ToMLDataset\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"Sequence\\\", Association[Rule[\\\"Processors\
\\\", List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"Nominal\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
Automatic], Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]], Rule[\\\"StructurePreserving\
\\\", False]]]]]]]], Rule[\\\"ScalarFeature\\\", True], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"Processor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Version\\\", List[12.1`, 0]], Rule[\\\"ID\\\", \
6995767557603505475]]], \
MachineLearning`MLProcessor[\\\"IntegerEncodeNominalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", \
1]]]]], Rule[\\\"Index\\\", List[Association[Rule[False, 1], Rule[True, \
2]]]], Rule[\\\"MissingCode\\\", 0], Rule[\\\"Version\\\", List[12.1`, 0]], \
Rule[\\\"ID\\\", 2734911975669049395], Rule[\\\"Output\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]]]], \
MachineLearning`MLProcessor[\\\"FromVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"StructurePreserving\\\", \
True], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", \
1], Rule[\\\"SetSize\\\", List[2]]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Version\\\", List[12.1`, 0]], \
Rule[\\\"ID\\\", 2109313300824996630]]], \
MachineLearning`MLProcessor[\\\"FirstValues\\\", \
Association[Rule[\\\"Info\\\", Association[Rule[\\\"Type\\\", \
\\\"Nominal\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"SetSize\\\", 2]]], \
Rule[\\\"Key\\\", \\\"f1\\\"], Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]]], Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"ProbabilityPostprocessor\\\", Identity], Rule[\\\"Name\\\", \
\\\"class\\\"], Rule[\\\"Marginal\\\", Association[Rule[False, \
0.3482142857142857`], Rule[True, 0.6517857142857143`]]]]], \
Rule[\\\"Prior\\\", Automatic], Rule[\\\"Utility\\\", SparseArray[Automatic, \
List[2, 3], 0.`, List[1, List[List[0, 1, 2], List[List[2], List[3]]], \
List[1.`, 1.`]]]], Rule[\\\"Threshold\\\", 0], Rule[\\\"TieBreaker\\\", \
RandomChoice], Rule[\\\"PerformanceGoal\\\", Automatic], \
Rule[\\\"BatchProcessing\\\", Automatic], Rule[\\\"Model\\\", \
Association[Rule[\\\"NeighborsFunction\\\", \
MachineLearning`PackageScope`NeighborsFunction[\\\"BruteForce\\\", \
List[List[List[-1.8307194732935237`, -0.9217510889781271`, \
0.08647039971797803`, -0.7711876130222947`, 1.0306199793865183`, \
-0.5709248233646096`, -0.6154289824916891`, -1.098764664407406`, \
0.1968908287386338`, -3.393120054226287`, -1.755756146912054`, \
-0.49912587470435876`, 0.9798662415421798`, -0.11193551242211013`, \
-3.2500105866211753`, -0.8033248103356307`, 1.221210962485528`, \
0.4310023511543483`, 0.0870042670635484`, 1.1264838191885191`, \
-3.0887198930564734`, -2.0669987889370347`, -0.5283997642607533`, \
0.6064600290685411`, 0.030792459264583807`, 0.41839852987898196`, \
0.8769937231104086`, 0.816778609822226`, 0.7991100473102223`, \
-0.2075246034487424`, 0.08126348469854305`, 0.8491810434682532`, \
-0.19367769017717493`, 0.3741412704093312`, 1.0005340770421023`, \
0.47378061006002725`, 1.1074881293540293`, 0.549749218521683`, \
0.6064798219936834`, 0.004280788229238275`, 1.1802846241950316`, \
-0.6630213893913667`, 0.2372001185481162`, 0.06578495979601642`, \
0.8455877154754972`, 1.1037372868957338`, -0.5604582397436415`, \
0.3664228557815234`, 0.11740225487696326`, -1.4727507697726394`, \
-0.5741585387472619`, -0.18239672854193828`, -0.3596027089372736`, \
-0.2264699293993382`, -1.1729385261277947`, 0.17440811003155016`, \
-0.20908895387210702`, 0.009050026303547728`, 0.19058636655791356`, \
0.7141832800490083`, 1.4137239095727592`, 1.6254578604594518`, \
0.35544755156754054`, -0.986343770718811`, -0.8320936988559584`, \
0.6850918274630816`, -0.47877600310190965`, -0.3702418049883669`, \
-0.3429840964565866`, -2.008423197194354`, -0.3081718124934457`, \
0.3362690970415524`, 0.5981898036481598`, 0.6777414580762328`, \
-0.9983553836719558`, -0.08641154505181692`, 0.5878868541742819`, \
1.2147919090677697`, 0.33800287138005974`, -0.9072949103655357`, \
0.09763537659376947`, -1.3386757534655294`, -3.378570586804508`, \
0.8417515608013472`, 0.6192712508741711`, 0.3452918035012055`, \
1.4603957362406286`, 0.20736287405517906`, 0.1576339391987967`, \
0.6602278632173794`, 0.8285888177605205`, -0.5737965296843507`, \
0.7625820884527825`, 0.7206728343986296`, 0.6001018818226428`, \
0.30375735475286036`, -0.5917231879829312`, -0.2666200957927299`, \
-0.34249121131034704`, 0.3160825220005457`, 0.870167920973804`, \
0.6258476828613723`, 0.9613331793795435`, 0.22636021994714373`, \
1.2501373271858631`, 0.3129653614494367`, 1.15509749013162`, \
0.9254388377814277`, 0.05640445973709472`, 0.0538129702952008`], \
List[2.6998182989199426`, 0.48938655058825775`, -0.6431239852363061`, \
-0.16538649668085778`, 1.4553955751195333`, -0.38913533364086744`, \
-0.04506288343098372`, -0.036258028571629006`, -0.6550081863215058`, \
2.958174871304069`, 0.8802683022070854`, -0.4869197687365433`, \
0.8039022509259783`, 0.5757568317887488`, 3.036559109825868`, \
0.6051233034575123`, 0.7282899507359014`, -1.02171531395818`, \
-0.17057061587023958`, -0.9492073500930048`, 2.438248425174516`, \
1.034672525011798`, 0.0786547996755499`, -0.7713781499981571`, \
0.2946879172609394`, -0.37912659435288154`, 1.7060096856863363`, \
-0.7153243546910679`, -0.8395095349053489`, 0.155576567256345`, \
0.3395730480642706`, 0.8943267494007334`, -0.06714435936461827`, \
-0.48797617623151807`, -0.6916464112727368`, -0.2805538710347638`, \
0.8282044366173306`, -0.08675346715409077`, -0.828886901271925`, \
-0.33985310964479576`, -0.046673791747060926`, -0.04006115084722026`, \
-0.46092761281179334`, -0.7932700892459768`, 1.7085907678671028`, \
-1.2402903831939711`, 0.37672374088768357`, -0.6477147346172222`, \
-0.37128067660696784`, 0.8914296747204732`, -0.5660037899897832`, \
-1.1111857612893064`, 0.9310288857346753`, -0.0062850553850599365`, \
-0.30485036709238866`, 0.027872449334556543`, -1.238643386227492`, \
1.2338420035378075`, -0.4602116003940259`, 0.7366057162339347`, \
-0.9916765492916999`, -0.8825857389587886`, 0.018517603820057713`, \
0.3288871639948425`, -0.5028242007076348`, -1.0824676165085187`, \
1.425213612946044`, -0.7980185093172769`, -0.46178691301524455`, \
0.8722948197505542`, 0.03683411123892971`, -0.8791996669036564`, \
-0.18659910558247667`, -0.6631576722166026`, -0.38223794008354633`, \
-0.17299060803686875`, -0.8124739318457964`, 2.1375894291045543`, \
-0.28967832057757925`, -0.3370217773414963`, 0.3313896489247039`, \
1.9051294073784555`, 3.062791491659532`, -0.8235839006203045`, \
-1.2470125748621634`, -0.9666794463798841`, -0.7839448023934134`, \
-0.9388691399865025`, -0.5232309183209288`, -0.10612489216459747`, \
-0.1542227815746762`, -0.2903595501935502`, -0.17830305411008485`, \
-1.236333175990556`, -0.9510736340559699`, -0.6435561356380621`, \
-0.2752203386330748`, -1.2056594432091223`, -0.32065826915974255`, \
-0.7181603368722155`, 1.843167027326342`, -1.0729580878432665`, \
1.6002966811938137`, -0.2576822906119274`, 0.927980055015762`, \
-0.8126447218241674`, -1.0459064809212182`, -0.8901809176556077`, \
-0.6564725696838344`, -0.4481447353875831`], List[-1.049878661780966`, \
-0.2735773112799399`, -0.026971502977935113`, 0.41259257973157004`, \
0.4573720689410896`, 0.22650180942804765`, 0.08925393725377939`, \
-0.18126565168466682`, 0.030511878002128776`, -0.6497632585120456`, \
0.37179621404419716`, 0.5090658139103809`, 0.5622837804083051`, \
0.5429165369504143`, -0.6342989288020671`, -0.3277285616654632`, \
0.5315731293449856`, 0.22066251730785988`, 0.03996702419376735`, \
0.12579404778487005`, -0.6853656519601528`, -0.3117187193367907`, \
0.1791950084092031`, 0.5725918887644794`, -0.15479409894669005`, \
0.49269708299678383`, -6.924685425149935`, 0.3464465700791851`, \
0.240568007642957`, -0.12479671651047906`, 0.14335490120930663`, \
0.4530185494365561`, -0.005592874459614566`, -0.007182319064174297`, \
0.49693967905412845`, 0.2515419570949051`, 0.48882087482228326`, \
0.07502013415880819`, 0.1581061666490977`, 0.35607768114792976`, \
0.15401893141093215`, -0.2144477332791851`, 0.4724927140274886`, \
0.05406085987666189`, 0.3666075688961185`, 0.3151952868460369`, \
0.02796000401828353`, 0.5726964855657106`, 0.05209711305788653`, \
0.4262480602256384`, 0.34564120333247866`, 0.486730496394814`, \
-0.126722343524293`, -0.3484346476668785`, 0.0711289217700513`, \
0.5132527094580747`, 0.3033162990210421`, 0.2229426258268039`, \
-0.0858695159238423`, -0.2548713773042426`, 0.23516732341060803`, \
0.2488441243097775`, 0.15800603471389496`, -0.07066010928612623`, \
0.24446794167338204`, 0.4174314238026806`, -0.14995612640088263`, \
0.35610803140617525`, 0.0897711622049481`, -1.1340209632875375`, \
0.1562072336400787`, 0.49623801958821184`, -0.34790774464674307`, \
0.10358539565162025`, -0.10685591934621338`, 0.3444507667244387`, \
0.3497146094642711`, -6.954512735866635`, -0.008504182009845904`, \
0.061471748968520076`, 0.3319457485145148`, -0.10200100560183678`, \
-0.6423880012610846`, 0.28222284454952107`, 0.19057821000800362`, \
0.5663064081914485`, 0.01662476598467897`, 0.025587916711186175`, \
0.11838501467066845`, 0.10780059648402107`, 0.496536505041987`, \
0.4866710974779255`, -0.09926669400886734`, 0.7215995694729037`, \
0.30773763998468406`, 0.10588881869511024`, 0.15329071314125448`, \
0.25082855814503996`, -0.2972122843199976`, -0.047104636616557116`, \
0.1849742774406905`, 0.2207121569129356`, 0.24726743818372077`, \
0.10861911535472826`, 0.5359763322777112`, -0.0385957376812522`, \
0.15854529299405706`, 0.602487996005076`, 0.09631516092085451`, \
-0.0530003209049364`], List[-0.6723040205451787`, -0.2463610253938253`, \
0.8374277003435084`, 0.30520622706437506`, 0.8499876926961555`, \
-0.17482174424431654`, -0.03655704001111771`, -0.5037289361827427`, \
0.14873111168320435`, -3.670324880166607`, -1.1404853746156394`, \
0.6538845209203209`, 0.7898296968137419`, 0.3887737527594907`, \
-3.4801801462922795`, 0.21720886859219415`, -2.183605286886712`, \
0.07653688631423021`, 0.7416214338129853`, 0.13177629085375248`, \
-3.179013020732714`, -2.3018672084049396`, 0.2574465213540433`, \
0.3814022001081858`, 0.38798727483760087`, 0.2515401068678659`, \
-0.7841620824389033`, 0.5191213638690622`, 0.21180817593087417`, \
0.08338449416395609`, -0.006347321090378272`, 0.8212060584199368`, \
0.1825726674245603`, 0.20941820576931616`, 0.13626078150697277`, \
-0.10623520145303735`, 0.8237929149663391`, 0.13414535875728723`, \
0.698036493273946`, 0.7904664745772336`, 0.6360439185991892`, \
0.31371949192340526`, 0.7593540650906834`, 0.8847188801486788`, \
0.4044756721212195`, 0.2545686793429685`, 0.2524483839275453`, \
0.8365680453421444`, -0.7608715054020153`, -0.35628369407455257`, \
-0.37823512625190586`, 0.9804678722932869`, -0.05966193160417512`, \
-0.010387303138967666`, -0.1440558223213252`, 0.4530924926280302`, \
-0.9242190327425888`, -0.6655298298088165`, 0.7795082062166018`, \
-0.04778199753776386`, 1.2988312849696688`, 0.8190713171292754`, \
-0.09517549001016314`, 0.6499755255418026`, -0.03874664200325847`, \
0.5213775480882837`, -0.6765531605813494`, 0.5021161025504501`, \
-0.2012086086626429`, -2.2531177178140096`, -1.1773272645402377`, \
0.6829090508382835`, 0.8792410651056455`, 0.2455149170295358`, \
0.8951804444809605`, 0.625302772740203`, 0.42434221934389094`, \
-0.26308067387946915`, 0.02220164728904153`, -1.4648164509332813`, \
-0.540839101695769`, -0.728145070075237`, -3.703527713637896`, \
0.49378685487597274`, 0.6938124129036085`, 0.8364734606834128`, \
0.38269475796628577`, 0.6008284977779195`, -0.2565465526236843`, \
0.005871536998602671`, -0.14384301032196237`, 0.8683244345338476`, \
-0.12221292058302807`, 0.1301276914767409`, 0.39507246352294634`, \
0.35332973175749494`, -2.90976208213428`, -0.7650552533527701`, \
0.6926754104960977`, 0.8117672590698592`, 0.8199560250442607`, \
0.7696591580990644`, 0.8381585683907048`, -0.42557238399918196`, \
0.930445416158577`, 1.043136166373257`, 0.19836754982931173`, \
0.6776689019765401`, 0.6106979696642728`, 0.27137477448278063`], \
List[-2.670390842151875`, -0.32300541177710346`, 0.4248133534445146`, \
0.10292826384738107`, -2.5058501843848466`, 0.6231615923420084`, \
0.14905913835103143`, 0.4736787628240748`, 0.7294447084695007`, \
-1.4340229988769717`, -0.3831258456344744`, 0.288969051596385`, \
-1.631282455768187`, -1.010680644303031`, -1.6505930496459345`, \
-0.6920826593557645`, -0.15980470705897493`, 1.1703305168897071`, \
-0.1573081324115268`, 0.9544160437050038`, -1.028670900755191`, \
0.13952144639077474`, -0.1715707143533245`, 0.6042813650914786`, \
-0.5302117645185218`, 0.21150499440109435`, -0.6750710589452278`, \
0.4783479595930912`, 0.8108782266102953`, -0.1913623586434743`, \
-0.46767392143497943`, -1.7333191850447687`, 0.02992887539490877`, \
0.4716238955612652`, 0.5765887184734403`, 0.29084100132207386`, \
-1.7172858171514183`, -0.0344991783062672`, 0.6130886411279047`, \
-0.023265771554570505`, -0.4516542901484711`, 0.0449769919002595`, \
0.12244495445334276`, 0.5838430014417697`, -2.5704845714127873`, \
1.248793156075384`, -0.5268250382224121`, 0.2644603361852568`, \
0.8133598216801554`, -0.8337535494978946`, 0.9242058611154886`, \
0.9201633398108738`, -1.0791271462325664`, 0.0966910214100391`, \
0.6068889308664972`, -0.3794478273760722`, 2.0026126009120873`, \
-1.3175273109650396`, 0.22068883967843073`, -0.9820324410889248`, \
0.3879595362487455`, 0.46489482639004703`, -0.07077015763597762`, \
-0.5654062154023227`, 0.7408010794558335`, 0.9591779141212726`, \
-1.4127638720643778`, 0.7637592868012532`, 0.7202965855118365`, \
0.46463202573881474`, 0.520921086060253`, 0.6408814234839598`, \
-0.21169734239335236`, 0.6220094457817752`, 0.2283533683747125`, \
-0.10568554510471181`, 0.6920962505949528`, -1.5146312112938882`, \
0.32504447169236794`, 1.2317697648107282`, -0.2353716044838946`, \
-1.8578571864441524`, -1.545035916587873`, 0.6507789175155483`, \
1.1547998913689344`, 0.6771346935156723`, 0.6021182531967686`, \
0.8793216497130689`, 0.7402066101783763`, 0.009112279925564478`, \
0.056793278171914395`, -0.04259625363686581`, 0.1850018367195468`, \
1.2798907263361392`, 0.8822715463268016`, 0.5866635289017634`, \
1.7770720475076784`, 1.9026755067016574`, 0.19051358933799878`, \
0.5025592955781286`, -2.893666117817922`, 0.8819465829572948`, \
-2.6396637710332196`, 0.46655886571964755`, -1.9009292804629563`, \
0.5043110262799908`, 1.021314551659512`, 0.5682860746600046`, \
0.5100934911021356`, 0.4531329300521822`], List[-0.30373705225462355`, \
0.23281404843856918`, -0.3024152615113337`, 0.7865139412489055`, \
1.3372810621769675`, 0.7785656312128211`, -0.8495739163947507`, \
0.7917576832971793`, 0.23363333460055566`, -2.4947034343701593`, \
1.3243715298660725`, 0.7876118056756031`, 1.3380019488729842`, \
0.7918205162194004`, 0.7845072546697176`, -1.4010963839508925`, \
1.3243624411649055`, 0.236698557346136`, -0.315260935984721`, \
0.7926443631421887`, -1.404556322871473`, 0.7774815815828351`, \
-0.854410293694594`, -1.405873416149615`, -1.4005500443359056`, \
0.2322733195840188`, 1.3323941943669688`, -1.4100522208716055`, \
-0.30766425269709646`, 0.24171106992469016`, 0.2373568386021839`, \
1.335814288933075`, -1.4058230155047027`, 0.7901133797759256`, \
-0.8613933618308491`, -0.30940220445672295`, 0.7837243379076466`, \
-1.3964547683443653`, -1.4067792227245106`, 1.3252765507020312`, \
-0.8553243890405804`, 0.7887548950855758`, 0.7864338968957115`, \
-0.8520218815326003`, 1.3395441848956886`, 0.2422284724464688`, \
-0.3086528157174423`, 0.7867629316869011`, 1.3359019804077645`, \
0.7845475058434905`, 0.7917865753925899`, 0.24243751739377878`, \
-0.30811722565803384`, -0.855140386967907`, 0.23463513640675165`, \
0.7926918411999696`, -1.3936351389772028`, 0.7776525662695623`, \
-1.4105939136044876`, 0.23578604104423315`, -0.3057826526543087`, \
-0.30118436585510133`, 0.7845113957889693`, -0.3150034764604782`, \
0.7779599582963792`, -0.302203410548127`, 0.7867044074454396`, \
-0.8522639291589529`, -1.3940894206404675`, -0.3082422777733949`, \
-1.4094521678762417`, 0.22966431699481515`, 0.23693136919794186`, \
-1.9482727545547145`, 0.23356176182269062`, 0.7903488990009792`, \
0.23504089083984409`, 1.3385051060417636`, -1.407385824571243`, \
-2.501475582149255`, 0.24517797061071347`, -0.862591180034596`, \
-0.30125261755549676`, -1.4040382340709638`, -0.8580070286474895`, \
0.2359097878449344`, 1.327067809671762`, 0.7793970969799779`, \
1.3407512447452319`, -0.31733809503771515`, -0.31492898235090405`, \
0.23838746406216418`, -1.3993756968558522`, 0.23610446414292968`, \
-1.4049705489182762`, -0.3006256446999584`, -0.3038650939292995`, \
0.7834003776740867`, 0.7878138548799324`, -2.489711372483243`, \
1.326636936554785`, -1.3984113998559957`, 1.3245638591242759`, \
1.3343687451144712`, 0.7912808122104514`, 0.7823228978127386`, \
-0.3043173708606314`, 0.24252855671455345`, 0.2401390022865576`, \
1.328374683169829`], List[-0.001696396625894707`, -0.002420097349954249`, \
0.000562664214745906`, -0.003495818080243296`, 0.008230225720838254`, \
0.002589280406925635`, -0.0004984728111703078`, 0.005004208446746674`, \
0.0096068147991866`, -0.003232805719341543`, -0.004204096985290298`, \
0.008127786246746371`, -0.005290099945989606`, -0.00626648786643326`, \
-0.006198965399997869`, -0.0016006826004012834`, -0.009066512618831499`, \
-0.004340469984521374`, -0.004865535139663327`, 0.005856960260669786`, \
-0.00559761694446928`, 0.008055114278409332`, -0.007569787761024738`, \
0.005718712565099763`, -0.006082358967301998`, 0.00594755311091338`, \
-0.0019509766683078536`, 0.004086107937279721`, 0.000693262188846102`, \
0.004103395269351259`, -0.009070718220565044`, 0.005117355407184682`, \
-0.009749857399431523`, 0.007161657905108535`, -0.002847387090762009`, \
0.003681457456723696`, 0.004540677127237481`, 0.0031303578831295004`, \
-0.00784785779245592`, 0.00809191476182754`, 0.00602309258552992`, \
0.005556480771447256`, -0.00425963336239954`, -0.009366567980178368`, \
-0.006978400752867625`, -0.004310194514391415`, -0.0031418634264442635`, \
0.0076683834387280166`, -0.004536331224122024`, -0.009457913196983109`, \
0.00043441144586793545`, -0.005621521241569338`, 0.0024093576889028905`, \
-0.0036886619707970567`, -0.0025486455298138824`, -0.006777387342887145`, \
-0.004744258345683497`, 0.005992308290854131`, -0.004120718654187776`, \
0.007620800620376723`, 0.00004042621323919332`, 0.00810701997753488`, \
-0.005820962137844443`, 0.0026171574860449007`, 0.006447156927517048`, \
0.0036813111670895744`, -0.0005299615206490783`, -0.0029591158884124252`, \
0.0005631321448263324`, 0.004569338483633202`, -0.0048947111216662495`, \
-0.002556325099909884`, 0.007370448517810858`, 0.003823100656467255`, \
-0.00609366235385822`, 0.0003753209635151411`, 0.0008046900701592641`, \
-0.006094152497768075`, 0.007216847321445376`, -0.0077095026229575744`, \
0.006342191911956403`, -0.00946978912333183`, 0.007289379519217477`, \
0.0005271064004749963`, -0.0017976150849981776`, 0.00875377281163603`, \
-0.005682893192849425`, 0.006099984958115187`, 0.002855453974816586`, \
-0.0022262591988252145`, 0.009354292624116092`, 0.001839527006435946`, \
-0.0072778046750043845`, 0.0010237772530115284`, -0.001462147202816455`, \
0.006262369591994485`, 0.009368446594201475`, -0.005654790457421129`, \
0.004345072169772368`, 0.0022945039230828114`, 0.00972751566637976`, \
0.003929723169407467`, -0.00572086869435786`, -0.003536275330196459`, \
-0.008341510759254968`, -0.0021224356243037604`, 0.002362115700452673`, \
-0.002794746827092784`, -0.007758095657801202`, 0.003526625093414705`], \
List[0.0003942490126629464`, 0.00795204439280879`, -0.004573030664673662`, \
-0.005729934219374969`, -0.009036037469656817`, 0.0044400890628717785`, \
0.00038819953504307114`, -0.0070228923651812145`, -0.005088414884818801`, \
-0.0020651359129593982`, -0.009463280237068578`, 0.0020186254895662586`, \
-0.005816608674739231`, -0.0022803272304978833`, -0.00878953643902488`, \
0.00025474087301625287`, -0.006581805953100331`, -0.0013792203699505914`, \
0.0016058366301138285`, 0.005933718623265638`, -0.007523855043178242`, \
0.0038234313743167707`, -0.0021672416957501037`, 0.002726895703147214`, \
-0.007568802867328271`, 0.006708324953468483`, 0.0007984710377870463`, \
-0.005116412635674514`, -0.0002068738795701179`, 0.0031204711325367347`, \
0.001245720171468928`, 0.00011327507815041618`, -0.004987828538152675`, \
-0.0021026228040533362`, -0.007999091274813762`, 0.003917580446959723`, \
0.009020973771220322`, 0.0038734208292804002`, -0.0025550973743804217`, \
0.006175534961781016`, 0.0077036655227933695`, 0.001826536462792381`, \
-0.003942707292622374`, 0.007757236334485038`, -0.009343931486326763`, \
-0.0018804394927783297`, -0.004237322129818574`, 0.009575015631495234`, \
-0.008236228306998675`, -0.008702162818503514`, 0.0054252276623595365`, \
0.0019239325332088067`, 0.002990279687853814`, 0.008075469273946877`, \
0.00029548660784616335`, 0.003228536006103712`, -0.004726884792619353`, \
-0.000773347929283557`, 0.009429032544598662`, -0.008572851939464304`, \
0.008702308184566847`, -0.008933349179720364`, -0.0011942912322826411`, \
0.005981706095572716`, 0.0014495821875529155`, 0.006457266714964719`, \
0.005916095514273783`, 0.007485780009280685`, -0.00730945271009753`, \
-0.007530042827479079`, -0.0077308361250666285`, 0.0057869269073359715`, \
-0.0034621420846738665`, 0.00957205603230557`, -0.008004555432495258`, \
0.0016555408255219083`, 0.006942033343351913`, 2.119488621912108`*^-6, \
0.000846675661526821`, 0.005571354230653632`, -0.000762140035266444`, \
0.009293155298709149`, 0.00548942949321779`, -0.00733294620534513`, \
-0.0025344160866776974`, 0.003420095190397217`, -0.0059746085358280965`, \
0.006821157763256924`, -0.007522721996670777`, 0.0028646938467393537`, \
0.006730767356645035`, -0.009858254367787062`, -0.0035615575625602552`, \
0.0026080028572785206`, -0.007779855768895637`, 0.008428556134691356`, \
0.00020523307136757415`, -0.0009089215699134533`, 0.008779785483821016`, \
-0.0018170926552302166`, -0.001558044861710725`, -0.004853167588382182`, \
-0.001901612565800237`, -0.009267613051939419`, -0.0036668685521788966`, \
-0.009677575659282796`, 0.0036785763521231182`, 0.006128668817033438`, \
-0.007293841608042473`, -0.0017490623746475378`], List[0.008853914110966494`, \
-0.006507434221941437`, 0.006008140223720895`, -0.00004017944631540607`, \
0.002147202477756134`, 0.00265003928391579`, -0.008418237535921066`, \
-0.0039026647794887515`, -0.008671949933091144`, -0.0096084554658942`, \
0.001562220634011062`, 0.0013210716566437845`, 0.00859501723136109`, \
-0.006015059838684764`, -0.0030733711535752134`, -0.0025153286030204086`, \
0.004443291700465018`, 0.00821790136278237`, -0.00903497398343793`, \
-0.002623890246687459`, -0.002310006568727617`, 0.00794785745418555`, \
0.004619376044317693`, 0.006492542454331042`, -0.0004186486826412185`, \
0.0028039443455555486`, -0.009755176874408182`, 0.006011295446901051`, \
-0.00383928422453185`, -0.0034798645463543776`, -0.0041214242151664665`, \
-0.008549285245042788`, -0.003012861295254979`, -0.0050298937482912975`, \
-0.008978112458895592`, 0.006197473617974982`, 0.0015092088078420517`, \
-0.001429468673023189`, 0.007059433403171472`, -0.0005122905896397661`, \
-0.007294871582825789`, -0.003921298094986189`, -0.0006029896743881616`, \
0.008500107179168343`, -0.008508924602392179`, -0.002222954864019931`, \
-0.003096117180435752`, 0.0008939425500465448`, 0.0003898128440304495`, \
0.0013002150056984907`, -0.005227582504770373`, 0.0004342236666626184`, \
-0.008365653732221867`, 0.007236212360830805`, -0.001814887253296947`, \
-0.004303802932158651`, -0.008032688720354862`, -0.0026583491068481735`, \
0.004342990273323882`, 0.004644108160625191`, 0.005219699492818631`, \
0.004686246091035497`, 0.0012171412469215055`, -0.005758124379072603`, \
-0.007412745447482147`, 0.0010125646761198481`, -0.00023609401226292945`, \
-0.004092109274874724`, -0.008541079514543089`, -0.001669071039214813`, \
-0.005898444741175846`, -0.007553595857755099`, -0.004276518528026546`, \
-0.006030343031653479`, -0.009038290537479399`, -0.007559541058756461`, \
0.0037977451894413046`, 0.009557593374575905`, 0.004727619528647645`, \
-0.005205771562892231`, 0.005851208678326267`, -0.0012243857569749841`, \
-0.00020243205851827248`, -0.009807928713911104`, 0.007365451817380957`, \
0.00681063363843008`, 0.005617139213908252`, 0.007914832064530909`, \
-2.0246895187196745`*^-6, -0.002927958749490256`, 0.005554614529084609`, \
0.0013103427032056143`, -0.007269508215209081`, -0.0018055765080532554`, \
-0.006807915689819123`, 0.001511695012157796`, -0.006000283097387406`, \
0.004229243048620882`, -0.008286574392603469`, -0.007324993982289613`, \
0.006288252281068555`, 0.0018106446434938972`, 0.003031289998696878`, \
-0.006940401596843573`, -0.007494326182303612`, 0.0052891656385496005`, \
-0.005067300885239462`, 0.009915835814522347`, 0.008068588626158089`, \
0.003754066461718889`], List[0.008327917853691233`, -0.004705146665871539`, \
0.009900514696169292`, -0.0062952148605895306`, 0.006031534567672428`, \
-0.006281951129472878`, 0.002860919681538534`, -0.004042487516571137`, \
0.002636860647371675`, 0.004887231988505748`, -0.004859418651027868`, \
0.007456152563929525`, 0.0035680460879803227`, -0.007509014782711661`, \
0.0010458016631450864`, -0.005047332053689714`, 0.009959396398994538`, \
0.0006890172149535724`, 0.007480585094691225`, 0.0010563314208060469`, \
0.001037018574553062`, 0.00396337949772619`, -0.0014077931317505801`, \
0.00649399922569233`, 0.004453958810617192`, 0.0020140295405714215`, \
0.0009962349496742094`, 0.00980215552478728`, -0.0006885461450030356`, \
0.004786984958646594`, -0.0034181879284409036`, -0.0015523358211626537`, \
0.009068548524553792`, -0.005449416363279842`, 0.006483550604836068`, \
-0.009971385188237626`, 0.002340644573421896`, -0.002343848823601856`, \
0.0003860379358763995`, -0.0047128126639062184`, -0.0057194588357393356`, \
-0.0023944963099541416`, -0.004266311589310082`, -0.006525975142860324`, \
0.00549322638287341`, -0.006208350910877777`, 0.00007695847704295572`, \
-0.00838357497036113`, -0.00893397857268062`, -0.0025544840110001688`, \
0.0038452861152630177`, 0.008357988816530625`, 0.001337196237991129`, \
0.005743750302899028`, 0.004128098652757026`, -0.005908928883397634`, \
-0.003970068566733195`, 0.002628607103019872`, 0.006123786038439605`, \
0.006235399130831598`, -0.0000884465671560225`, 0.008043110877825436`, \
0.005171585731490586`, 0.0039861573899624796`, 0.007452377362995824`, \
0.007772822632273121`, -0.0010875894184312132`, 0.00601933173664785`, \
-0.00002153459551193157`, 0.00811875465556642`, -0.006629315215109233`, \
0.0015569527327026732`, 0.006255746950354604`, 0.004514801746616646`, \
0.00829109804479733`, 0.006330472566131264`, -0.00984178040382986`, \
0.001147457692663785`, 0.0027385678908229683`, -0.009294027876595626`, \
-0.0016407686803972601`, -0.009177752249979347`, -0.006062276432007185`, \
0.004180787677571504`, -0.004302521766906167`, 0.008232049759282066`, \
-0.0038763668436825674`, 0.005626745705254871`, -0.008902254096589436`, \
-0.00791809115119814`, 0.0025357486488689074`, -0.002456335701434033`, \
-0.00813050773828404`, 0.00040662427447469077`, -0.004625317774933184`, \
-0.006643410462770109`, -0.00013045869881280966`, 0.008563634108619284`, \
-0.009022971985006206`, -0.00017297985308681318`, 0.003543569230917594`, \
-0.005320996297347821`, 0.00652826723830726`, 0.0019080733001579087`, \
0.0024509728637091208`, 0.0028356632612735883`, 0.0008652363421517983`, \
0.0076902210912261175`, 0.009440523223567737`, 0.0008896425185332575`], \
List[-0.005620205127975383`, 0.009329537528843669`, 0.0035256476004460746`, \
-0.008606260890986123`, -0.00823662876527377`, 0.0063865883316651245`, \
-0.0053757785021947765`, -0.007364829850113663`, -0.0009475874196381955`, \
0.0065277996776791705`, 0.0024416386274444674`, -0.007819909428132925`, \
-0.00029811582801938033`, -0.006002158048737702`, -0.003127356054170888`, \
0.0000614299729676561`, 0.0035842979355387647`, -0.0041963551574777935`, \
0.007782045010588632`, -0.0009949020955062095`, -0.0021982936156574664`, \
-0.004019171853869692`, -0.006405947521161602`, 0.008627236925429053`, \
-0.00555504317342706`, -0.006678581650818`, -0.0015915703374622808`, \
0.007307228767174056`, -0.00734788617348562`, 0.00036058982564241004`, \
0.008528150524612553`, -0.006194891944916965`, 0.005186036256900929`, \
-0.0077011132375297345`, -0.0026494931086400234`, -0.005507605545369297`, \
-0.007353051177886219`, 0.007924472666644478`, 0.007528634768184824`, \
-0.0040421341922269455`, 0.004562120001161806`, 0.003206793090383568`, \
0.006842332035943206`, 0.005356958953173709`, -0.0072722037817589125`, \
-0.008621215524074882`, 0.004644375057296032`, -0.004105719713710022`, \
0.008836612065426509`, 0.002741339381107124`, 0.005772283106087593`, \
-0.00260234253700712`, 0.008669894681682704`, -0.00759296656025403`, \
0.002642562865659153`, -0.008812846279800633`, -0.0049238167886951345`, \
0.0038968023452342557`, -0.00909497207873209`, 0.004382901341266038`, \
0.0037229389861413095`, -0.005498768440784424`, -0.0019466221653444207`, \
-0.009500597479684063`, -0.0048432265837493604`, 0.003966690098095634`, \
0.00006095183777286156`, -0.004710364646753666`, 0.0029875113186202396`, \
-0.004541159995874365`, 0.0052505861318850565`, 0.003501074569641313`, \
-0.007667432510287342`, -0.0029869997680540203`, 0.005999164331943734`, \
-0.006983607290838523`, -0.006037331095537661`, 0.006652470842526039`, \
0.00807194380237266`, -0.0019581200245131075`, -0.005509119709596534`, \
-0.00992024396398137`, 0.00913461233467728`, 0.0036640234884219025`, \
-0.006243153896371534`, 0.004578995887760812`, -0.00036383506706957197`, \
0.0063530146299806065`, -0.00786464685987772`, 0.0033844473294387077`, \
-0.0033122967418597674`, -0.004135573978789532`, 0.00034199913455687167`, \
-0.009541195651247357`, -0.009427525108951104`, 0.000055124222580495846`, \
-0.004035920429467342`, -0.0004534322231095761`, 0.0017685639330554427`, \
-0.0059262374446458835`, 0.00898492675999419`, -0.007659573284320244`, \
-0.008578515522325546`, 0.005709026938305335`, -0.0008392333142827162`, \
0.009878243456155577`, -0.009308597946525159`, -0.009914713987762967`, \
0.00825367461023532`, 0.0029946099610929262`], List[0.0045629654020886146`, \
-0.0013708571756156154`, 0.0006179568835100457`, -0.009755154224388232`, \
-0.006881742269176726`, -0.009101257180671403`, -0.004026173525823559`, \
0.0066303835128266216`, -0.006978101925165792`, -0.004449027626047167`, \
0.005250703087284286`, 0.002110212143382372`, -0.0003439669745732947`, \
0.00001585656111723413`, -0.00932505105592761`, 0.0006030013916072073`, \
-0.008171620928708823`, 0.0040773239768003115`, -0.0008362163511835483`, \
0.007335903795594175`, -0.009047725464913406`, 0.0041378960294698765`, \
0.0059594839324609225`, -0.0001262964458571339`, 0.0018264134686000223`, \
0.001865635089027786`, 0.000524187328104192`, 0.009687781826969142`, \
-0.009202402745429744`, -0.0028595660724188843`, 0.0003576668727248815`, \
-0.0018534554791043434`, 0.00868734922936015`, -0.0025167699423982934`, \
0.007930327859119391`, 0.0067792514649694866`, -0.005183029450586775`, \
-0.002429900929721736`, 0.0032807939990214703`, 0.006858512400648997`, \
0.009201442446530851`, -0.0016013996246698192`, -0.0014293961685142645`, \
-0.0056654997555044065`, -0.002158401862360826`, -0.008559467616277745`, \
-0.006135197651419656`, 0.0018635848381661838`, 0.007449094824672323`, \
0.0006907969445831934`, 0.00008806800695074224`, -0.008450982405871152`, \
-0.008266127038788075`, 0.004084955570277066`, -0.0045792649234269595`, \
-0.0028806958083862563`, 0.008006872444152508`, -0.0028578610246746752`, \
-0.008242642469237886`, -0.0015963855557793172`, -0.003760429173081191`, \
-5.656438275686293`*^-6, 0.009348138902735136`, -0.004858566996971035`, \
-0.005849439115731721`, -0.00870658414439495`, -0.003322239895990342`, \
0.0015043346342661218`, 0.0002379756524510182`, -0.000358609055027756`, \
0.00936987574573988`, -0.009045069568014652`, -0.009720480880983089`, \
0.006897612287591406`, 0.005523350128584601`, 0.005452801542150481`, \
0.00482463881929384`, -0.0007406521055816663`, -0.0031710986464240573`, \
0.002802263528403043`, 0.0001035156996842014`, -0.007295240056439188`, \
-0.006983629110958442`, 0.002446326428345802`, -0.0007983379847319068`, \
0.00029913698357433155`, 0.0027554847960504954`, -0.004724417712923881`, \
-0.009592666389694596`, 0.0015311215401586885`, -6.524997910178909`*^-6, \
0.0025738414803078043`, 0.0005011884236413716`, 0.003943682659160081`, \
-0.0036665967098317223`, 0.007287612614852727`, 0.006277980847446379`, \
-0.0017467763831460412`, 0.006105376670025572`, 0.0036666696873932196`, \
0.004259144709637671`, -0.0033131957948653312`, 0.005773446246424396`, \
0.0018740757406862443`, 0.009685838089004188`, 0.0008538148353703055`, \
-0.0023416563566713774`, 0.0032535790724715317`, -0.005326296845472311`, \
-0.0017900124029037803`], List[0.003500616781015896`, -0.008397068760398897`, \
-0.004739974170821219`, -0.007092539063114349`, -0.00025712692933725287`, \
0.001289518219159902`, -0.005866994366472152`, 0.002906662351862613`, \
-0.002277809596831118`, 0.009244828686222666`, 0.00017509497427555323`, \
0.005714185837563862`, -0.008976241411198314`, 0.0012073777883834617`, \
0.004602461346032139`, 0.0034908046554899333`, 0.006360999231993611`, \
0.002809766939045541`, -0.008703472315423337`, -0.0037762005533121326`, \
0.00350518521237227`, 0.005568550939985754`, 0.004118457299943878`, \
-0.004078985767325703`, -0.006528343427215165`, 0.008175115593456413`, \
-0.008625919316386371`, -0.004120915486167241`, 0.007402640384047084`, \
0.00017650135281067209`, -0.005435921002237713`, -0.004549252399317499`, \
0.006679942451819645`, -0.00004999114806364738`, 0.0030033932615069585`, \
-0.005464421787198699`, 0.0007784600032699623`, 0.005799370372177991`, \
0.006943253738987125`, 0.0019206253964576155`, 0.0037748623355233074`, \
0.0031702514815559885`, 0.00004319174396610545`, -0.00556309099796673`, \
0.005955703102959977`, -0.00023219032669355086`, 0.008465544313725107`, \
-0.00022850323779085094`, 0.0033790122696117225`, 0.003558308201237089`, \
0.009006616215388945`, 0.001059322906222876`, -0.0015162446723473097`, \
-0.0017969361250111046`, 0.006084137398447716`, -0.003008655144035685`, \
-0.003145770033928713`, 0.00007958983228563768`, 0.0001993066773296505`, \
-0.007065155723277296`, 0.0011665712546542369`, 0.0075008309741602455`, \
0.00439061819231262`, 0.006482911435275265`, -0.009926086598174781`, \
0.0012528343923499524`, -0.0043706028433560945`, -0.003943349548862871`, \
-0.003727032520358907`, 0.0006020716173884035`, 0.00556359797698365`, \
0.00531385397899849`, -0.002605248522736199`, -0.00024119482275881954`, \
-0.0035254339838537777`, -0.0036959043064249755`, -0.0012315532315510073`, \
-0.00792737804011999`, -0.007280568263498988`, 0.005020464488260826`, \
0.005381448443589027`, -0.00692150542887187`, 0.0006971174296314907`, \
-0.0007891476631072848`, 0.003395506217876456`, 0.009763572034116031`, \
0.0029639494878680728`, -0.00039521296212616935`, 0.0003310315955032256`, \
-0.003511141103035506`, 0.007301117513201262`, -0.0008581459397828915`, \
0.008351790108972818`, 0.001760483743217297`, 0.005543800604368789`, \
0.007723590943003504`, 0.003315786342788323`, 0.00818222662496279`, \
0.0064967487534463506`, 0.0019721994092693`, -0.008128854577259509`, \
0.0000884108909131702`, -0.0010471161622664857`, -0.007312018167087965`, \
-0.004321850288021026`, -0.0054352522927591865`, 0.0025109903869481517`, \
-0.009630769888177314`, -0.0015664346393478856`, 0.005869430878244947`], \
List[0.40664230344167396`, 0.39316339081339513`, 0.4004812980019041`, \
-2.5067722182973844`, 0.40439853756414856`, 0.4024998913951789`, \
0.39930415265565317`, 0.3957782776322513`, -2.5209834628241237`, \
0.39821753109233893`, 0.3877426415842897`, 0.3884559093090243`, \
0.4052133245031956`, 0.39402973091414856`, 0.39748410995641253`, \
-2.508271696563252`, 0.39772821814378073`, 0.39162762034309`, \
0.4009340171092339`, 0.4053292046918408`, 0.4008689426378664`, \
0.40402197051383093`, 0.38994691813613047`, 0.4072326867983018`, \
0.3899411726295097`, 0.4011218522299328`, 0.3985535296431014`, \
0.3977821438652859`, 0.38790125918011387`, 0.40048090112486917`, \
0.4060587165897212`, 0.3953279280082199`, 0.4012416712791111`, \
0.3969549301792225`, 0.39493296197111716`, 0.40600976132905325`, \
0.40210518868387785`, -2.507096062264557`, 0.3908276777897913`, \
-2.5084994151304403`, 0.3916056451961711`, 0.3907719892705976`, \
0.3968610541107751`, 0.39809831235576826`, 0.3873814862580247`, \
0.39071275401532585`, 0.3896697645752416`, 0.4000161853772076`, \
0.3898820587942574`, 0.38781605915085665`, 0.3874491385809012`, \
0.3893638511107523`, -2.5144760036933502`, 0.38872099965201096`, \
0.39437710999570424`, -2.514989152342818`, 0.3981124706233186`, \
0.3881966214623517`, -2.5124126630022228`, 0.3974139488033199`, \
0.38998866917486524`, 0.3996104315664716`, 0.39138254533109884`, \
0.3930110864962133`, 0.3881711399507722`, 0.395743304590386`, \
0.3918386859768788`, 0.4001789593759557`, -2.5217088727666934`, \
0.4015220253940408`, 0.387485500015025`, -2.509091227368456`, \
0.3966822391173458`, 0.40377151057886757`, 0.3989139194282101`, \
0.40072108707908904`, 0.394830274984141`, 0.397837605840308`, \
0.4042265781779489`, 0.3913093514714434`, -2.5088650174806646`, \
0.38942695250496284`, 0.39682875646897836`, 0.400324211987584`, \
0.40646587987597144`, 0.39686026525572604`, 0.4050479154068088`, \
0.40184348954026855`, 0.39061856503882136`, -2.5235595044471397`, \
-2.5156595691236956`, 0.40688311965764523`, 0.3977287126948908`, \
0.40376589959219117`, 0.3894742097744494`, 0.4023253799014179`, \
0.39425842956215806`, 0.4028923429242918`, 0.3915858121172992`, \
0.4070459333633925`, 0.40339075078968023`, 0.400738201042113`, \
0.39855673162470473`, 0.3971407407202529`, 0.3893448863345079`, \
-2.5176708098870404`, 0.3912841593289427`, -2.5230561907142377`, \
0.4054386773740162`, 0.3881461897106063`], List[-0.6947686522022981`, \
-0.6935329412436451`, -0.7071690740488504`, -0.6920999337593359`, \
1.433135484133577`, -0.6944373302649884`, -0.6986319517239808`, \
1.4254891421221048`, 1.4380751552372129`, -0.7047534872409968`, \
1.4397744042530383`, -0.6928992629657401`, -0.6984777218758262`, \
-0.7042271256147984`, -0.6886160906831456`, 1.4273836610477826`, \
1.4313084527976259`, -0.6928808758208784`, -0.7019653803713335`, \
-0.7037519156245485`, -0.6979089027356186`, -0.700096357587538`, \
1.4433447250526332`, -0.6950876409077291`, 1.430109427909849`, \
-0.6930045106785199`, -0.6889127048824055`, -0.6951320410892805`, \
1.4390968839787404`, 1.4415165490573234`, -0.6950759391602325`, \
-0.6962968048205217`, 1.4428430899445446`, -0.6962232095234484`, \
-0.6915311941044459`, -0.7063614629119409`, -0.6924317692994341`, \
-0.6878381852663658`, 1.4393327922595076`, -0.6941247378319003`, \
-0.6936799312422084`, -0.7000535000772738`, -0.694060719993294`, \
1.4408490251583363`, -0.6936235439317526`, -0.694413291645048`, \
-0.6883556094883545`, -0.6981002491409606`, -0.7036058432004269`, \
1.4240627445153076`, 1.43400373110076`, -0.7058846771967001`, \
1.440676154508633`, -0.6921661799677443`, -0.696579946898238`, \
-0.7013236214661001`, -0.7042993329988715`, -0.7030750543315187`, \
-0.7068831331531549`, 1.4335982598570516`, -0.7074077367976239`, \
-0.7047829389443697`, -0.7013060699347581`, 1.4355684693621884`, \
-0.6943699963802195`, 1.4403023636618975`, 1.4408252500122622`, \
1.4324423080543989`, 1.4409909071384541`, -0.6960591456585165`, \
-0.7053471710050201`, 1.4338121355650912`, 1.4240201562528443`, \
-0.6898471102026736`, 1.4329953896317795`, 1.4263445258114689`, \
1.4398160589825701`, -0.7006860203235727`, -0.6892170705710987`, \
-0.7029793483745542`, 1.4243047849888053`, 1.4286281065290773`, \
-0.6991964071738295`, -0.6881378330109531`, -0.6899897835388334`, \
1.4368116908512159`, 1.4368604078356404`, -0.699897036300952`, \
-0.6913868455604696`, -0.6960283841507996`, 1.4269459653450394`, \
-0.6987053206778864`, -0.697946231587894`, -0.6984784566061436`, \
1.4260754587713056`, 1.4369341745511193`, -0.6911338699141516`, \
-0.7019778841115051`, -0.6975505045761574`, -0.6993765847342506`, \
-0.6933978649848443`, -0.7057517929193184`, 1.4286404761147902`, \
-0.7034321119177737`, -0.6992975081400697`, -0.701352146957802`, \
1.4300676551238447`, -0.6987257649339622`, -0.6963004860847832`, \
-0.7003469940258998`], List[0.1294309652344794`, 0.13749910045493013`, \
0.13754042698498828`, 0.1287303398524321`, -7.338795392451464`, \
0.12938419950216615`, 0.1287909800978199`, 0.13183653421660965`, \
0.14411369228912918`, 0.14079030893107722`, 0.12782240490448532`, \
0.14592322156426304`, 0.13508876831742023`, 0.12839030669088786`, \
0.12777388453542732`, 0.14170181000684368`, 0.1302449161591234`, \
0.12617745339204148`, 0.13763206337125902`, 0.12729417250908426`, \
0.137398334976387`, 0.14579159776133194`, 0.14542372581945787`, \
0.1315563624494281`, 0.12704580778090457`, 0.14062036341076123`, \
0.13815669339920061`, 0.12719450640565072`, 0.13348540700859177`, \
0.14320124187875372`, 0.13505250674947866`, 0.12923431645115308`, \
0.13182158921335027`, 0.13076639800913892`, 0.1305466797019349`, \
0.14568828734243217`, 0.1340904803337799`, 0.14295929382109954`, \
0.13259866603351936`, 0.12939923166304748`, 0.1271347497793447`, \
0.12952584101420728`, 0.13918145784112804`, 0.13092558920213376`, \
0.13383947281653502`, 0.14448021427372545`, 0.1298144864433166`, \
0.1292703433376779`, 0.13192222691797723`, 0.13245365998390718`, \
0.13495886160019793`, 0.13333140149959727`, 0.14469721156305132`, \
0.13317570183688562`, 0.13630700602124657`, 0.1368468135942342`, \
0.12888631756554852`, 0.14411879370460318`, 0.13965188688648753`, \
0.1294440795925884`, 0.1302105800770055`, 0.14528994590610692`, \
0.14156165819141`, 0.1265233193617407`, 0.14215576337246563`, \
0.13419535782941067`, 0.1343290276721107`, 0.13331390040790764`, \
0.14374195848650348`, 0.14428275549692887`, 0.13511333055935565`, \
0.14196217515720097`, 0.12966198666351847`, 0.13237429357732938`, \
0.13673291203485988`, 0.14111515883464398`, 0.13096488478316284`, \
0.13209940432771627`, 0.14330746693924884`, 0.13832627031201555`, \
0.1403098347395912`, 0.13612931278941526`, 0.12713703122947745`, \
0.14067239877304066`, 0.13699740053222345`, 0.1339102057882178`, \
0.13800839550317734`, 0.14414776191259784`, 0.13533707409933202`, \
0.13727860694420013`, 0.13763555463973204`, 0.14225913966392745`, \
0.12932074563114068`, 0.14024838707817391`, 0.13877394534556306`, \
0.1305360715408738`, 0.14372798929214486`, 0.13662194701087663`, \
0.1406681704982491`, 0.12815777866951278`, 0.12677721813498916`, \
0.14518159749715426`, -7.354228081804466`, 0.14242755862487425`, \
0.13193597526464396`, 0.1400080493929681`, 0.1275477914778022`, \
0.1434683395783469`, 0.1341789868060031`, 0.1448269651181843`], \
List[0.21998731210025205`, 0.21686065496907858`, 0.20921856301204395`, \
0.22751685356894133`, 0.20961330285317264`, 0.22336277704416516`, \
0.20957268549180993`, 0.20959337914618376`, 0.22057412585222508`, \
0.2091788360154206`, 0.22274069306214103`, 0.21755731342694887`, \
0.2115613635686349`, 0.2172103775563101`, 0.2105798151906258`, \
0.2150004960628256`, 0.2243060694972145`, 0.22315882373251456`, \
0.22277967258510584`, 0.21000009090331234`, 0.21486557712144685`, \
0.2273169090708636`, 0.22721043548201791`, 0.2118847489864315`, \
0.21848475356070654`, 0.2126229791795478`, 0.2215440842079362`, \
0.21395211879236373`, 0.2203014349521571`, -4.5820613759254085`, \
0.21209064176744472`, 0.2146890230820437`, 0.20945652147471333`, \
0.2195990759672006`, 0.21567083632129389`, 0.21646920894688307`, \
0.2227394829379041`, 0.22140697112096472`, 0.2131343427743589`, \
0.21341582327953953`, 0.22327252441933174`, 0.2202401705812731`, \
0.21292268801201022`, -4.588038596726772`, 0.22390636223462296`, \
0.22140922303350008`, 0.2275995029541959`, 0.2158870820294263`, \
0.22691985163241585`, 0.21420422095747987`, 0.22561947827598028`, \
0.21694626016465363`, 0.21236715732056438`, 0.2166719115041214`, \
0.21667506884485846`, 0.21077653963705395`, 0.21626558629511847`, \
0.22572946635181543`, 0.2279473618700682`, 0.21480870929897689`, \
0.2244631930757953`, 0.22355449580525272`, 0.21063334497720132`, \
0.22000820907042423`, 0.21858499913634039`, 0.2170856416007545`, \
0.21110996590465045`, -4.584981679413386`, 0.22815728030251867`, \
0.21926437899012025`, 0.2167876837206994`, 0.22497370441991094`, \
0.2127792752137236`, 0.21150509937680706`, 0.21660686187086628`, \
0.21963458171712125`, 0.2106263264741843`, 0.21996959624809473`, \
0.21763508057868053`, 0.21751969857822834`, 0.21070237762259555`, \
0.22270003346875844`, 0.2188014003067259`, 0.2274837370637315`, \
0.21141569247132613`, -4.579503636109623`, 0.21261174270681304`, \
0.22146389826264948`, 0.21313500561348458`, 0.21861682346573427`, \
0.21225164950004866`, 0.21334061661879708`, 0.22415112616159605`, \
0.2171199431669356`, 0.21639454660947516`, -4.590809143369839`, \
0.2120280829919883`, 0.2265333683511512`, 0.2217564035010245`, \
0.2132159296337088`, 0.2121722106210715`, 0.21235751278302628`, \
0.21410998398845293`, 0.22779835274714977`, 0.22632228971233245`, \
0.21173560336864908`, 0.21055083744196929`, 0.20978586898311666`, \
0.22722477216039255`, 0.22754765621739748`], List[-0.6176373647930907`, \
-0.6120703401256471`, -0.6076353542825996`, -0.6219838567144872`, \
1.6233948185070972`, -0.6210519804807763`, -0.6187683736453116`, \
1.6279799563174762`, 1.6396754101281086`, -0.6213568811935908`, \
1.641519240719224`, -0.6062058069871824`, -0.6084722193725289`, \
-0.6049605501867024`, -0.6034527708305056`, 1.6336890194203681`, \
1.640271548629565`, -0.617348380256721`, -0.6056708251813987`, \
-0.6188988900903187`, -0.6038648697292731`, -0.6215701597235368`, \
1.6385616495522348`, -0.6068445829408811`, 1.6400803137166753`, \
-0.6146244828777159`, -0.6189314478503661`, -0.6054647058224678`, \
1.634379952534125`, -0.6093418004968946`, -0.6174427417845136`, \
-0.6085803384588595`, 1.6311216690577706`, -0.6141777941638523`, \
-0.6203625666709562`, -0.608288517928633`, -0.6150970457197988`, \
-0.6214345197757434`, 1.6428980305607195`, -0.6173843562848937`, \
-0.6189256403699865`, -0.6212757041846867`, -0.6176011581326033`, \
-0.6196772373394682`, -0.6166346829774224`, -0.6180224091728792`, \
-0.6080377385847753`, -0.6077957407802229`, -0.6175764523140647`, \
1.623733565604781`, 1.6284803266050742`, -0.6121375279899703`, \
1.6278732082381462`, -0.6028629574850021`, -0.6172186611996742`, \
-0.6125074427005316`, -0.6113065511457961`, -0.6126081193526874`, \
-0.613874877162614`, 1.6416984957970608`, -0.6162464028379637`, \
-0.6154400289049556`, -0.6085882408127408`, 1.6334085157630467`, \
-0.6092587768757985`, 1.6350923867566762`, 1.6263614467596295`, \
-0.6067992913072224`, 1.6373154589621126`, -0.6167159126042233`, \
-0.6151606821654414`, 1.625695773757232`, 1.6256241814985284`, \
-0.6059046777952799`, 1.6337147987211762`, -0.6122056397802116`, \
1.6393783869617469`, -0.6070118805803432`, -0.6127518831527381`, \
-0.6055275451633781`, 1.6246026634190431`, 1.628158057296395`, \
-0.604596503229919`, -0.6106119017506854`, -0.6157741414046556`, \
-0.6199307958245374`, 1.626387623991765`, -0.60771442520467`, \
-0.6188511912362376`, -0.6024773331435188`, 1.6399728725995084`, \
-0.6117773154114317`, -0.6027531174013825`, -0.6023760652913813`, \
1.639821132747901`, -0.6058425181614624`, -0.613470309801816`, \
-0.6110026128911241`, -0.6113506348422392`, -0.6112534716016136`, \
-0.61275871863419`, -0.6180456902697005`, 1.6237857456302707`, \
-0.6064363932374768`, -0.6094130067394817`, -0.6028908452246807`, \
1.6292197466692633`, -0.6183613336803814`, -0.6101112742586934`, \
-0.6191949830021696`], List[0.3938177421366493`, 0.3910893135795384`, \
0.3902246903608575`, -2.5251063319379035`, 0.40086807265507496`, \
0.3883400239883768`, 0.3906967125296082`, 0.39124318469229924`, \
-2.507642250457231`, 0.40321152483142325`, 0.4039218206851326`, \
0.40627226283965023`, 0.3917922687936688`, 0.40178625582272626`, \
0.394812372509329`, -2.509256852488892`, 0.3927292188652028`, \
0.3985074459911015`, 0.40368011784901436`, 0.38865891250433054`, \
0.39300538105838256`, 0.4020239048496674`, 0.3889847039903784`, \
0.3959088635522943`, 0.39109119987621904`, 0.3984221005750334`, \
0.399853582094824`, 0.39195531026239533`, 0.396874282788869`, \
0.39802052162332335`, 0.4057424380836044`, 0.39005253432568165`, \
0.39374630285581214`, 0.39292689359039296`, 0.3928192696068059`, \
0.39488855117468175`, 0.40669849800077457`, -2.5190204423413785`, \
0.4067270273612543`, -2.517881638351036`, 0.40441927713866493`, \
0.3923782068652345`, 0.39216216123924996`, 0.4057262513550937`, \
0.395627813787681`, 0.4054132350556754`, 0.39065233605510086`, \
0.3928345590165029`, 0.3967866835599614`, 0.39846911584915173`, \
0.3992521893955651`, 0.40211798969080886`, -2.5178190206706796`, \
0.39183834225763076`, 0.3894087148788915`, -2.517891389730466`, \
0.38811985725740217`, 0.4069540204831458`, -2.5147628293941406`, \
0.39186229892482716`, 0.3897817251313407`, 0.3901568972079036`, \
0.39362545344337757`, 0.3893458862566219`, 0.3899301052238839`, \
0.40096294640977254`, 0.4003421713679007`, 0.39409128315805775`, \
-2.5239961561086686`, 0.40010235775454894`, 0.4024101482271547`, \
-2.5170704634771806`, 0.40258238330112295`, 0.40214328593635384`, \
0.4050310423735562`, 0.4012877163946259`, 0.3958091639885022`, \
0.38940549849565614`, 0.4019714712466943`, 0.4030151009773093`, \
-2.510981989681659`, 0.3929983317573165`, 0.40627430555533284`, \
0.4022595870162123`, 0.39840538853028706`, 0.3902303827625274`, \
0.39523249529099336`, 0.39629023411420294`, 0.40172164881270167`, \
-2.520959370733511`, -2.515650870342592`, 0.4023406625836022`, \
0.39952088394539853`, 0.39297685518610115`, 0.40587334175620116`, \
0.38915392021210593`, 0.39662613298748933`, 0.3940257806359952`, \
0.3981630064657748`, 0.40496008286534096`, 0.39088814537181404`, \
0.38836688189649543`, 0.4007721544645719`, 0.3929742581817982`, \
0.4022382563561974`, -2.508961100844488`, 0.3930216533888223`, \
-2.518040215141066`, 0.3887021501221299`, 0.3925088490654925`], \
List[-0.23751403497658133`, -0.23807215604107476`, -0.2412831266493446`, \
-0.241549215526009`, -0.23836024074436768`, -0.23213633250009585`, \
-0.24551204757344913`, -0.24077118180286972`, -0.2304967900226647`, \
-0.2436119119161811`, -0.23185513688625276`, -0.24553307847667635`, \
-0.24371424027757171`, -0.2409378053435629`, -0.23413082757035572`, \
-0.24776309429806326`, -0.24983900215638227`, -0.23670625492872627`, \
-0.23679313760384926`, -0.24925767760660564`, -0.2350032748941061`, \
-0.23566235075956996`, -0.23848206442600808`, -0.23305042216576938`, \
-0.23050778232581848`, -0.23819904553076898`, -0.23589241296592647`, \
-0.23602274073276272`, -0.23517456810514048`, 4.165816801861433`, \
-0.2386743967416578`, -0.2346688128730211`, -0.2468492624423294`, \
-0.2442501398860652`, -0.23714308500420972`, -0.23729889113019495`, \
-0.23264112160976275`, -0.24852403795584163`, -0.2425712337933016`, \
-0.23641809583500822`, -0.23420903367940032`, -0.23719028636698192`, \
-0.2494950975727385`, 4.173257601246203`, -0.24772908460467297`, \
-0.24865904976189918`, -0.24267368020833943`, -0.2430929998108117`, \
-0.2392836368937523`, -0.24381270854814233`, -0.24160732920582584`, \
-0.2356678907586509`, -0.24332999760155222`, -0.24804048633807133`, \
-0.24225007469396742`, -0.24497012132655085`, -0.2438946100215913`, \
-0.2309504162433447`, -0.246513266213768`, -0.24278037904667618`, \
-0.24180236433577032`, -0.2408803969957764`, -0.24612058779467236`, \
-0.23096808496913024`, -0.2430447251335226`, -0.23401148113373826`, \
-0.236461015472013`, 4.164702102691021`, -0.2400470286888035`, \
-0.24772168619162793`, -0.24643333689617286`, -0.24429943963452116`, \
-0.23953008931919756`, -0.2430832481118767`, -0.24637319425000978`, \
4.171651371713325`, -0.23893520816526462`, -0.24784695171329274`, \
-0.2372300981402678`, -0.2479491925970454`, -0.2487312398350212`, \
-0.23879938867202707`, -0.23902843135055735`, -0.2379206482805102`, \
-0.23883299525620225`, 4.155726831571205`, -0.24920098323817785`, \
-0.2325314663822213`, -0.2394991629241219`, -0.24496108431272212`, \
-0.23024268050223368`, -0.24151849454801866`, -0.2483783161709125`, \
-0.2331057357999529`, -0.2312443899752275`, 4.170196589906303`, \
-0.2332667977442904`, -0.23728601995561413`, -0.2476883700375442`, \
-0.2326450259158373`, -0.23547034155591962`, -0.23129678428728792`, \
-0.24603795741715573`, -0.24090439544399245`, -0.24997966573973554`, \
-0.24573716636338047`, -0.23996274914125945`, -0.24448789004411628`, \
-0.24089778195086556`, -0.2344580097814369`], List[0.28313273007132994`, \
0.2817105329608804`, 0.27607496734246095`, -3.5764960086572666`, \
0.273804796785154`, 0.2834290798615129`, 0.2801647649031048`, \
0.28701090778800314`, 0.2873738402396083`, 0.2710933415209473`, \
0.2722122349259268`, 0.2864587279620793`, 0.28936431697212567`, \
0.2849031824608057`, 0.28397748866719746`, 0.28211707677381453`, \
0.2745329705513962`, 0.27624404658156654`, 0.2747950522925291`, \
0.2701863949765928`, 0.27614903675874664`, 0.2884627621587727`, \
0.287498913504187`, 0.2726530476991989`, 0.2886680718124378`, \
0.27925475075329526`, 0.2815392357566`, 0.27128461294737316`, \
0.27216175197776493`, 0.277392176952568`, 0.2837550682259799`, \
0.28807756420535185`, 0.2892925260568349`, 0.28240471586702126`, \
0.2872339908471669`, 0.28118308365870426`, 0.2788326513158203`, \
-3.566799363886262`, 0.2814164019104369`, -3.5793740378812076`, \
0.28297532092370514`, 0.28664753322095005`, 0.2782508484049598`, \
0.2788033244360974`, 0.2861795446797749`, 0.27581222482225554`, \
0.28879012588647834`, 0.2822235239583168`, 0.2789349938702236`, \
0.28035072390928645`, 0.281564692557036`, 0.27973241066333`, \
0.2812846574994497`, 0.2894087420691745`, 0.28461061681499356`, \
-3.561245785741723`, 0.275456792069158`, 0.2780421122389904`, \
-3.56832353761558`, 0.2852829291069568`, 0.27852329987781466`, \
0.27285310189479517`, 0.27821407779353446`, 0.28677089722248383`, \
0.28164657498060264`, 0.28420538450353117`, 0.27152030221477913`, \
0.27307707581201623`, 0.2753169194337618`, 0.2877888068976094`, \
0.2731575094807093`, 0.2874902164548041`, 0.28590164538589746`, \
0.28176290712299795`, 0.27262164678465833`, 0.273359021216154`, \
0.2710576160089288`, 0.2717343541718401`, 0.2850860845746931`, \
0.28621686320846884`, 0.2795699720897607`, 0.2740463610911975`, \
0.27678235507636506`, 0.2780359231165642`, 0.28822854733287373`, \
0.28122813501540517`, 0.2810900256469993`, 0.27808821850955107`, \
0.28205380213902403`, -3.560891178671863`, 0.28686911664012266`, \
0.2879701214695455`, 0.2854669890174893`, 0.2891905511270076`, \
0.2795133063281654`, 0.2847365106040187`, 0.279819755221764`, \
0.277017198867769`, 0.27355125958710585`, 0.28661682563768887`, \
0.2846897066825828`, 0.2787803417556712`, 0.2778907401630251`, \
0.27759330371961827`, 0.2760450317134315`, -3.5677378675478697`, \
0.27748367807446656`, -3.5698394885283373`, 0.2854804416789024`, \
0.277717554377358`], List[1.2197551747816135`, 1.231918134259013`, \
1.2152077884902464`, -0.8065804670810672`, 1.2285271802529476`, \
1.2162089010817594`, 1.21508432361694`, -0.8095350197803804`, \
-0.8083632201081303`, -0.8176023756647169`, -0.8132719291428063`, \
-0.8132669551541463`, 1.2169892111256404`, -0.8126129249720206`, \
-0.8171297429452538`, -0.8091795001747124`, -0.8123881037540449`, \
-0.8159817289592277`, 1.2318447777108537`, 1.2310672263754816`, \
-0.8086104218843243`, -0.8153274066196191`, -0.81268609838327`, \
-0.8160930667766642`, -0.8258799873403637`, 1.23068676880102`, \
1.2293316695932777`, 1.2249463953225388`, -0.8066938599022165`, \
1.2316739253619635`, 1.2210308048020706`, 1.2157357967589582`, \
-0.8114706317476669`, 1.217899793412398`, -0.8167031264514079`, \
1.2212338861915994`, -0.8179824171757758`, -0.8245011289783434`, \
-0.8069221210744822`, -0.8182542455137497`, -0.8213242490567165`, \
-0.8161623880726595`, 1.2253044489343947`, 1.2285118827406276`, \
1.2291597361121505`, 1.2227977405459929`, 1.224167211166128`, \
1.23004419104301`, -0.817334122798542`, -0.8158999630524204`, \
-0.8112393760753602`, -0.8066521803993031`, -0.8226822217423515`, \
-0.8170483390695602`, 1.222621078701263`, -0.8081130425740759`, \
-0.8217323064899036`, 1.2311640499866738`, -0.8262570903450897`, \
-0.8254521628863238`, -0.8085535255893379`, -0.8079592230994492`, \
-0.8093177310408813`, -0.8250240240140697`, 1.2166668245727381`, \
-0.8075730559461867`, -0.8214459242662525`, 1.2272191217447537`, \
-0.8217810265179862`, -0.810151584670442`, -0.8139525231961613`, \
-0.8201297051649802`, -0.8217877104126884`, 1.221927035666223`, \
-0.8156419005051684`, 1.218002705442711`, -0.8158148276542524`, \
1.2149001255330574`, 1.2256481517419666`, -0.8185058925587798`, \
-0.8150646158603939`, -0.8221318501570274`, -0.8089459087601847`, \
1.218213459974587`, 1.2296701840328335`, 1.2327299110429866`, \
-0.8132357501637841`, -0.8072807473271412`, -0.8119970169002682`, \
-0.8121916614144534`, -0.8187176536724846`, 1.2339350513522882`, \
-0.8100380189001543`, 1.2186638143314508`, -0.8196479849002746`, \
1.2214626036925047`, -0.8153352739950608`, -0.8224075990071967`, \
1.2188257079064198`, 1.2298559602108194`, 1.220398157989583`, \
1.2234254748433175`, 1.2150503494054818`, -0.8089239475833232`, \
-0.8164910717738095`, -0.8151549462875921`, -0.813007739817243`, \
-0.8066202280797818`, 1.231526411385555`, 1.2190167543468784`], \
List[0.24136541463058905`, 0.2424721672974832`, 0.24912007917993126`, \
0.23114124027847688`, 0.23465462315462393`, 0.24323789638411725`, \
0.2387208612726193`, 0.2429930896164256`, 0.23107368647235366`, \
0.2438171485641331`, 0.2370006027200326`, 0.2394756452657445`, \
0.23332350157623039`, 0.23220115188522145`, 0.2333342503863889`, \
0.2497924851536654`, 0.2455225525645711`, 0.23970154532866209`, \
0.24056290407318934`, 0.238724709281025`, 0.2456412627042722`, \
0.23685822029825224`, 0.23916836456758347`, 0.2452715715577603`, \
0.23361932031904487`, 0.2479137068534313`, 0.2353840244685824`, \
0.23802779173087132`, 0.2349649495264326`, -4.164588429006551`, \
0.24856846194183618`, 0.23741707660496517`, 0.23067118060543967`, \
0.2464657581994496`, 0.23671310495783726`, 0.23036870162729034`, \
0.24807735418484328`, 0.23525320622432955`, 0.231108531930137`, \
0.23901162431207654`, 0.23529906745479573`, 0.242583775318158`, \
0.2466064631188866`, -4.172807395882889`, 0.2429707228413669`, \
0.23722015782519784`, 0.24114947104070222`, 0.24089879244734538`, \
0.2319619697987539`, 0.24702770030338272`, 0.2395135602323398`, \
0.2452983466034858`, 0.23029218359668344`, 0.23911110867862667`, \
0.24934674853743907`, 0.23760781765225444`, 0.24196186234071107`, \
0.24610375178176325`, 0.2339290547388158`, 0.250102913558795`, \
0.23807822024448277`, 0.24540553186390004`, 0.23280716546411268`, \
0.24945752147411288`, 0.23718143544755735`, 0.23233715949113493`, \
0.23300754042909705`, -4.158123796987969`, 0.24068788044139303`, \
0.2311655136753655`, 0.24302382283986956`, 0.2407876477083954`, \
0.2477692914848639`, 0.24591248343628797`, 0.2307843644520054`, \
-4.156267739254991`, 0.24088289916781`, 0.24561711851862567`, \
0.24440211693633368`, 0.24653168881517523`, 0.2359759727161052`, \
0.2333227801101984`, 0.24633944225963733`, 0.23972491034068844`, \
0.24960451025213806`, -4.17248826095096`, 0.24916568199411313`, \
0.2495338638039852`, 0.23422033899984787`, 0.24155209718847753`, \
0.23798218095044454`, 0.2343066519192781`, 0.2326135692976984`, \
0.24237133736187863`, 0.2439080956098609`, -4.158598780601571`, \
0.24550843254596721`, 0.23893066125735907`, 0.23428823769527873`, \
0.23362952550735577`, 0.2501218708737831`, 0.235317014176255`, \
0.24940094126986728`, 0.23969465169248855`, 0.23253015756187678`, \
0.23683642316357537`, 0.23874944437241832`, 0.2478762283957134`, \
0.24865295324177283`, 0.2313852478682209`], List[-1.0922722189894745`, \
-1.0859157495661722`, -1.0921345859890912`, -1.095806665190952`, \
-1.0968041782143299`, -1.0963416906788432`, -1.090300198832636`, \
0.9134608854781219`, 0.9171536033714859`, 0.9072316643682109`, \
0.9034802369163187`, 0.9118706240746228`, -1.1021534246868006`, \
0.9217166103955159`, 0.9136722217004958`, 0.9094996879485655`, \
0.9050804982990602`, 0.9110514202374893`, -1.100481722703815`, \
-1.0893180603814732`, 0.92135154234084`, 0.9045798980675703`, \
0.9040512477785142`, 0.9055467879471575`, 0.9117723954317093`, \
-1.1030409398407366`, 0.9160883741794192`, -1.0963688446279445`, \
0.9139904425134037`, -1.1044350277646724`, -1.098497396706919`, \
-1.0916484818817742`, 0.9040395487211585`, -1.0897241084439289`, \
0.9167961135263764`, -1.0937313286655246`, -1.0980619076464357`, \
-1.089050453204302`, 0.9228689759159461`, -1.1026016569080646`, \
0.9102723839540323`, 0.9166454095234025`, -1.09059421461213`, \
-1.1014357818803409`, 0.9120781562513822`, -1.0915829982601082`, \
-1.0903326752764197`, -1.088497934102514`, 0.9156814593219189`, \
0.9200483871885823`, 0.9090514442792801`, 0.9185138355069792`, \
0.9033483151234547`, 0.9085642667320034`, -1.1041956599072817`, \
-1.0988159647649096`, 0.9060558349022633`, -1.0927070249622313`, \
-1.0892979003675094`, 0.9033865221124485`, 0.9178989415575505`, \
0.9157897474150292`, 0.921270217008779`, 0.9153577789414272`, \
-1.0866545824166323`, 0.9145053648506131`, 0.9216219109941919`, \
-1.1048274917500918`, 0.9219939038172607`, 0.9115770277057706`, \
0.9049271388505145`, 0.9064313783731339`, 0.9053031784104109`, \
-1.1003419613709722`, 0.9155309809418123`, -1.1020432825535569`, \
0.9073159278552213`, 0.9190799971690607`, -1.088706503512269`, \
0.9115382734330216`, 0.9173207054354918`, 0.9029056252839386`, \
0.9175402885917517`, -1.091155275532633`, -1.0886135396083532`, \
-1.095848738304073`, 0.9034803021292114`, 0.9057745695577174`, \
0.9120443426153758`, -1.1034440534001189`, 0.9084006330481715`, \
-1.0937064911661873`, 0.9058808121238405`, -1.0994432713847693`, \
0.9104447396758749`, -1.0972427289205438`, 0.9052696061307484`, \
0.9172764692881555`, -1.1018458789057448`, -1.0858768464825563`, \
0.9074929835899057`, -1.0931433292886903`, -1.0970870752288133`, \
0.9055073664345145`, -1.0921599636622834`, -1.0883750362022029`, \
0.9153914334895349`, -1.0913476649122047`, -1.0902159625590848`, \
-1.1002815334797598`], List[0.8226267987018725`, 0.8094854305288989`, \
0.8173150014738874`, -1.2158984488230216`, 0.8249120869501877`, \
0.8087122242409266`, 0.8076656037680296`, -1.2293011541241077`, \
-1.2329564528981571`, 0.8091652964998498`, -1.2324810779607784`, \
0.8086104489029827`, 0.8241447746475322`, 0.8213011024646016`, \
0.8066972472615566`, -1.222354738926484`, -1.230729462954115`, \
-1.2154440829818172`, 0.8194253263447794`, 0.8130698829484313`, \
0.8206212382922224`, 0.8256855427832979`, -1.2294636875783675`, \
-1.2241585594597226`, -1.2300710775108639`, 0.8116337000969001`, \
0.8158709841636068`, 0.8137174999570368`, -1.2314191130988967`, \
0.8139697686808399`, 0.8181446793736527`, 0.8234594197124897`, \
-1.2147626483871095`, 0.8259571054834384`, 0.8177887532350231`, \
0.8166471724859052`, 0.8151540495969772`, -1.2215792202117521`, \
-1.2344483638106312`, -1.228594007695622`, 0.8065408662392867`, \
-1.222139150702659`, 0.8175683651157641`, 0.8175014586103485`, \
0.8205094934840412`, 0.8236776299995252`, 0.8124198207520761`, \
0.8075704535663384`, 0.8108463749357165`, -1.220248330217017`, \
-1.2151951466679263`, -1.2336151247321046`, -1.2153939776304188`, \
-1.2182433524363914`, 0.8070107619024566`, -1.2235137849738693`, \
0.8259766317260172`, 0.8090077626356601`, -1.2277294710544204`, \
-1.2195472527630518`, 0.807828091028913`, -1.218559014800138`, \
-1.2179884163709116`, -1.2187863774236805`, 0.8127448930525663`, \
-1.2342256068252684`, -1.2186943530968397`, 0.8155330160740931`, \
-1.2300273620487674`, 0.8200903286740228`, 0.8108024692170435`, \
-1.229977626630911`, -1.2160356776473424`, 0.823161700126089`, \
-1.227071408919517`, 0.8165987433125761`, -1.232595817051498`, \
0.8244662099480664`, 0.8158653608177525`, 0.8255812545070992`, \
-1.2303137822471417`, -1.2148494618464067`, 0.8209479356615066`, \
0.8262049853913266`, 0.8100059931222231`, 0.8233913402803714`, \
-1.2194147178384955`, -1.2184264519444994`, 0.8129925148713708`, \
-1.225469638018426`, -1.217365451812288`, 0.8114510854324064`, \
0.8067950201758533`, 0.8200382128508582`, -1.226144831883701`, \
0.8139416910262772`, 0.8254225282239335`, 0.8226942836099772`, \
0.8259003729963273`, 0.8220263752400532`, 0.8157160870741039`, \
0.8253750552897869`, 0.8147821065275419`, 0.8142954986737627`, \
0.8228685228876168`, -1.2267512914437828`, -1.2293667934243842`, \
-1.2153785531419015`, 0.8212539419376327`, 0.8088490650699882`], \
List[-0.7575414525278162`, 1.3141397436476097`, -0.7467324268568153`, \
-0.7522069400896928`, -0.7511474126648431`, -0.7554354171457025`, \
-0.755847602215838`, -0.7555098893767265`, 1.3227664667051198`, \
1.3273659513047311`, -0.7519549333378821`, 1.3240888886371438`, \
-0.7564314273567952`, 1.3142193876022432`, 1.3220420261987553`, \
1.3313577274237542`, -0.7475572264970705`, -0.7597854818463693`, \
-0.7618879578657864`, -0.7584323356330327`, 1.3276029548245702`, \
1.3249018585776764`, -0.764270347325922`, -0.7646283935359478`, \
-0.7644563540170479`, -0.7575411877164153`, -0.7512763735613086`, \
-0.7526148867712262`, -0.7572225484605957`, 1.3291462793799478`, \
-0.7565783201211748`, -0.7532592474249759`, -0.7527661323839898`, \
-0.7492099463699443`, 1.3177121163935412`, 1.3300760641822602`, \
-0.7542303387086121`, -0.758194263623309`, -0.7480651497646524`, \
-0.7621116355869026`, 1.3184262278159031`, -0.7538881212448313`, \
-0.7611303155634729`, 1.324628977025374`, -0.7533615762864307`, \
-0.7519803329693723`, 1.3165056532388923`, 1.3208152558119652`, \
1.313424407913704`, -0.7610461920608446`, -0.762533798158447`, \
-0.746878660532154`, 1.3316137248869409`, -0.7509085905983419`, \
1.3230196215901069`, -0.7503148458542809`, 1.327924194728236`, \
-0.7529896772902127`, -0.7471366298228823`, -0.7476825631491674`, \
1.312987782637202`, -0.7503514218098475`, -0.7622986078907281`, \
-0.7557584439223006`, -0.7553353939874637`, -0.7572766263319328`, \
-0.7573139235692682`, 1.3140410185279838`, 1.3221570866550452`, \
1.322911328324592`, 1.3165593167963618`, 1.3249897510454347`, \
-0.7573070176901411`, -0.7609508209702187`, -0.7642165113662863`, \
1.3175102374515553`, -0.759524109673782`, -0.7584083641852442`, \
-0.7629372559832701`, 1.3267157480989618`, 1.332078498421634`, \
-0.7487991772768192`, 1.321931472107222`, 1.32224316537514`, \
-0.7603280883162326`, 1.3184500412533262`, -0.7552589040373148`, \
-0.7507291027754527`, 1.327285127437217`, -0.7529860000040702`, \
1.3150615302562632`, 1.3309339834821234`, 1.314421199968907`, \
-0.7538810475211746`, -0.7654401473414786`, 1.3131909349090063`, \
1.3327678065251405`, 1.3161041295918372`, -0.7562735581385922`, \
-0.7647938106129135`, -0.7618172581977207`, -0.7552751323841093`, \
-0.747270206604528`, 1.3179015046157183`, -0.7572361736882229`, \
-0.7532729968968678`, -0.7476970673740826`, -0.7484115571937467`, \
-0.7574027322162382`, -0.7551885499119572`], List[0.3568616757236018`, \
-2.8591678335244737`, 0.3598322233136734`, 0.34862063684553496`, \
0.3592504254849084`, 0.34146136743496636`, 0.35559976424452155`, \
0.3456541091761449`, 0.35446178263567163`, 0.34354929799536743`, \
0.3509422745118186`, 0.34760739822162734`, 0.3499150048204824`, \
0.3443229980207163`, 0.35250525568489527`, 0.33994416026999014`, \
0.34452954126641566`, 0.3505365754425548`, 0.3561656832293768`, \
0.3496817707234127`, 0.35940232011388146`, 0.3590780462113459`, \
0.34182190545972446`, 0.3435466324262564`, 0.3515996663100485`, \
0.3533416148715399`, 0.35482518564878435`, 0.3518867420706974`, \
0.35610399525710384`, -2.8594538826028644`, 0.35153239626847965`, \
0.34437738636261966`, 0.35015647784211756`, 0.34967477339030956`, \
0.3474972154983921`, -2.854230767247289`, 0.34049869451092585`, \
0.35378554353831726`, 0.34163513045672467`, 0.3449177220952819`, \
0.3544716822779737`, 0.3401534899738427`, 0.3488713089654764`, \
-2.8544327490988257`, 0.35943111857234783`, 0.34340546765315433`, \
-2.8675201202095577`, -2.8564577960891744`, 0.3579181148003626`, \
0.3505640329452176`, 0.35577147240532336`, 0.34515469589760306`, \
0.34069248087910187`, 0.35873845669332033`, -2.8547290929107856`, \
0.34085471431057573`, 0.3420588273544478`, 0.34696782937899096`, \
0.35230489226994466`, 0.342948721360315`, 0.3531231467981833`, \
0.34831083221809606`, 0.3445023933207438`, 0.3444066161603311`, \
0.3598960197293951`, 0.3411502814266659`, 0.34823722484126823`, \
-2.849886099215486`, 0.3545016261907652`, 0.3484723086252626`, \
0.3516658316481843`, 0.35132132749049116`, 0.34590860053192257`, \
0.35805148017615473`, 0.3412209110604968`, 0.34462317390982905`, \
0.35886206179853286`, 0.3555034249383502`, 0.34449423035779053`, \
0.35515816510394693`, 0.34775869376980223`, 0.3590864577017353`, \
0.3577747219072539`, -2.852614283883145`, 0.3471276465078279`, \
-2.851257859460198`, 0.351113542476151`, 0.34812131612224656`, \
0.3576786785422531`, 0.3442626057159365`, 0.35732598916117847`, \
-2.863864777508747`, 0.3450213705927498`, 0.35331906800505586`, \
0.3415601996750743`, -2.8539623024055687`, 0.34676580131507795`, \
0.35907157072101026`, 0.34502412666515225`, 0.3542792183821745`, \
0.3455929532015919`, 0.35299991557686294`, 0.3532106558376431`, \
0.3540089432448087`, 0.34351345303974695`, 0.3572265586958205`, \
0.357252829818508`, 0.3436998188660272`, 0.3489017070326607`, \
0.3510648871012396`], List[0.2784996362360309`, 0.27462689457937156`, \
0.2863051266465701`, -3.564328337400391`, 0.27673882556764406`, \
0.2898002684602767`, 0.2846879375772796`, 0.2722647732220412`, \
0.2806774885351921`, 0.2866732004018723`, 0.272911460430897`, \
0.28770691038192986`, 0.27521959676197827`, 0.2802474500669608`, \
0.28762597920511274`, 0.27088787225451677`, 0.2870374590512979`, \
0.2755183714815359`, 0.28167317071267817`, 0.28353433851145743`, \
0.2706990164673804`, 0.2706717517627124`, 0.2849696427437252`, \
0.28012394916614547`, 0.28861698334989194`, 0.286316166880355`, \
0.2801356688196787`, 0.27559362697097245`, 0.27426062776340066`, \
0.28405284634332745`, 0.27196110889540226`, 0.2812936410723578`, \
0.2725899431084399`, 0.2767558629820092`, 0.2757419241507783`, \
0.2709923809253253`, 0.28745917445423297`, -3.564418176690796`, \
0.2880890478046615`, -3.564075278303957`, 0.27417017641189956`, \
0.27703372990653347`, 0.2775547163715596`, 0.28146568766100255`, \
0.2828458081988551`, 0.2775092308249125`, 0.27043906324980377`, \
0.28998746894275956`, 0.28226396524222813`, 0.2828063151211104`, \
0.28653573143142524`, 0.28159403222258306`, 0.2723941189768081`, \
0.27440074525009517`, 0.274319145529406`, -3.5642165447722127`, \
0.28066891901900654`, 0.2833872527224171`, -3.5711833975368`, \
0.2806022101174963`, 0.2768549087967031`, 0.2856951528122109`, \
0.2711181569395217`, 0.2706483959149786`, 0.27958114706860726`, \
0.2840100236483037`, 0.2770138298486997`, 0.2868343431101876`, \
0.2767342252476238`, 0.2881413128206602`, 0.27360448460248454`, \
0.2889404913113531`, 0.288690459469256`, 0.28822978277274597`, \
0.2836933652501159`, 0.27229835046593687`, 0.28756244655268426`, \
0.2701825415081245`, 0.2753839212053805`, 0.2878079357739485`, \
0.28214113228643434`, 0.28325495258926636`, 0.27050333938412413`, \
0.27971396484738403`, 0.27147896436972235`, 0.273828159150863`, \
0.28920453524098744`, 0.2889329594609435`, 0.2707105035805662`, \
-3.574670324630918`, 0.27737975616693744`, 0.2767567178828548`, \
0.2703846136814477`, 0.2894049467332152`, 0.27945185582609233`, \
0.2811771934521927`, 0.2890823640446064`, 0.2821442170035851`, \
0.2854627863484751`, 0.27891604335409664`, 0.2833031671750381`, \
0.277523623017401`, 0.2822106900678125`, 0.28660755402394383`, \
0.2875864246227872`, -3.579969158390455`, 0.2744049755429006`, \
-3.5771076628859557`, 0.2727345669001113`, 0.2702705522681936`], \
List[-1.319791113094094`, 0.7476984317421526`, -1.3143954664273745`, \
0.7488437957973884`, -1.3276399137927848`, -1.3193669073788754`, \
-1.3294027234788455`, 0.7463013724657941`, 0.7485499241586232`, \
0.7532029129599446`, 0.7552837962411876`, 0.7533151328669905`, \
-1.3158851078455311`, 0.7625943249489335`, 0.7489037382976288`, \
0.7493761354754629`, 0.7550236547805825`, -1.3260556827805243`, \
-1.3168703880515917`, -1.3214602869382994`, 0.7609560597765564`, \
0.7574359658459809`, 0.7541530136803413`, -1.3201596031279657`, \
0.7582929318341255`, -1.3132997501380654`, -1.3179312931748417`, \
-1.3233969902255136`, 0.7625918007470693`, 0.7657980939097243`, \
-1.3200274211281997`, -1.3292317543900314`, 0.7460604840443122`, \
-1.3197713215445825`, 0.7612053763325007`, 0.7577671693454907`, \
0.7573593787460111`, 0.7637791353403482`, 0.7502558925883738`, \
0.7621498476103875`, 0.7636127596678709`, -1.3187378104634255`, \
-1.325229599533303`, 0.7461347547253233`, -1.3133627313396157`, \
-1.3141091225614463`, 0.7534018134576438`, 0.765185570961471`, \
0.7559027233724046`, 0.7508577980524326`, 0.7617353677685023`, \
-1.3252801708975894`, 0.7607159590897725`, -1.3235447625768375`, \
0.7483441730945211`, 0.7593775038428391`, 0.7600013112297166`, \
-1.3235948326737577`, 0.7518992689649997`, 0.7571051539451209`, \
0.7525539941500634`, -1.3172800807702714`, -1.3238875761109141`, \
0.7612083995544611`, -1.3319318757992775`, 0.749300392514968`, \
0.7561289697364201`, 0.7563499852553306`, 0.747508719787536`, \
0.7590800516486755`, 0.7598646570124087`, 0.7511768848935465`, \
0.7625325106596422`, -1.326364506775967`, 0.7551741800503408`, \
-1.313142806448846`, 0.7527981883318967`, -1.3204156985748858`, \
-1.3251109580129359`, 0.7523686507376528`, 0.7539014674359577`, \
0.7521907941555454`, 0.75496617650491`, 0.7507279157917162`, \
-1.3223461622419679`, 0.7461688695264388`, 0.7499443215538479`, \
-1.3218883505630852`, 0.7657412154615857`, 0.7561527147387768`, \
0.7643484551905675`, 0.7604091402023202`, 0.7643425720924178`, \
-1.3259685864488029`, 0.764115288067673`, 0.7548668250539604`, \
0.7470424915960516`, 0.7643911544243019`, -1.3174374656552736`, \
-1.3196773271744549`, -1.3325614018065493`, -1.3187084097862605`, \
-1.3323511904841454`, 0.763927154293881`, 0.7519717781574524`, \
0.7653388462799421`, 0.7623331486355188`, 0.7540818720710194`, \
-1.3302091131032077`, -1.3325379297299726`], List[0.2769575197144409`, \
0.2763208357125533`, 0.28754772843055043`, -3.570810795308`, \
0.27766256228039116`, 0.28653112530207403`, 0.2859939609964154`, \
0.2757472855971372`, 0.27084185707154523`, 0.28330811564661135`, \
0.28050283346776234`, 0.2781463075529329`, 0.28716456260524215`, \
0.28527542381024024`, 0.27292449078174935`, 0.2853692671142766`, \
0.28885341984988605`, 0.2732567795563074`, 0.2720475092748023`, \
0.2780582889628989`, 0.2877040768741231`, 0.2717341088282721`, \
0.2730147901308517`, 0.27744176056249253`, 0.27109638351691356`, \
0.2876887530538443`, 0.2898127566621445`, 0.28753581133713585`, \
0.2748208645593523`, 0.2715620614877125`, 0.2804747758132164`, \
0.2714077951359465`, 0.2845464066318118`, 0.28816604187598394`, \
0.2768073466873455`, 0.2840978837607274`, 0.2822925043646281`, \
-3.566734350904004`, 0.2782298726666845`, -3.5779033594463434`, \
0.27211364996930976`, 0.2777370371659829`, 0.2897567304664914`, \
0.28072420830173944`, 0.2806231481929734`, 0.27506803063116547`, \
0.28277926639792744`, 0.2848199946573266`, 0.27692181333675864`, \
0.2804575175900508`, 0.2754366812420996`, 0.27802332524492285`, \
0.2775014156232357`, 0.2836202727564411`, 0.27135926885930656`, \
-3.576992265653604`, 0.2815673890593268`, 0.281273820772431`, \
-3.5627654979652843`, 0.28912592738776194`, 0.27300709030589526`, \
0.2738832087861057`, 0.27497748211349815`, 0.2721399474499232`, \
0.2766133209821678`, 0.27371755907933704`, 0.2756755162332568`, \
0.2731208168518078`, 0.27194492106981405`, 0.2716323597273385`, \
0.28422632746596327`, 0.2737817589312084`, 0.2754831253585124`, \
0.28441948584396276`, 0.28108633885595824`, 0.2833235184379857`, \
0.2892545087026491`, 0.2872832439095354`, 0.2858895775139666`, \
0.27848775174906565`, 0.2728535871318814`, 0.27022650664222664`, \
0.2820099338350937`, 0.2708293862701927`, 0.27210048055226255`, \
0.27265651019497705`, 0.2728881485591441`, 0.277064445557766`, \
0.2712703186734505`, -3.579580740886866`, 0.2866163127995475`, \
0.2730420834472972`, 0.2874702410539206`, 0.2831841028222273`, \
0.2881285693052292`, 0.2870537321754322`, 0.27544921173021447`, \
0.271234791473049`, 0.2840493600191219`, 0.2845813052650848`, \
0.2824689268325785`, 0.27859093591424944`, 0.2734633298931204`, \
0.2887299607709715`, 0.2818279163141927`, -3.5758196717448247`, \
0.2752013786716422`, -3.5706980487108675`, 0.28419215975373024`, \
0.2709719362992194`], List[-0.24595300934558642`, -0.2358283577132787`, \
-0.24717482887989534`, -0.2400744964792624`, -0.23489201723667374`, \
-0.2368079119596298`, -0.2397597462406012`, -0.248286535421895`, \
-0.23310007503783092`, -0.24261624450812397`, -0.247132624799186`, \
-0.23121508076790237`, -0.24139352254577773`, -0.24879216032504706`, \
-0.24573476810306194`, -0.2347605074072494`, -0.23129714519587538`, \
-0.2484906693357958`, -0.23802035978704483`, -0.2303543336299651`, \
-0.23477374388971703`, -0.23779817622405425`, -0.24163616331211324`, \
-0.24826212416167517`, -0.23186036376619185`, -0.24969608079275515`, \
-0.2470113380595243`, -0.23898768053985495`, -0.24830114288187488`, \
4.153619707129034`, -0.24229135491678105`, -0.23200368225539159`, \
-0.23349282618059342`, -0.2479513064832338`, -0.23930126104196514`, \
-0.23671587817636178`, -0.24777821623635898`, -0.24347339112910843`, \
-0.24139613494969586`, -0.23588522132918735`, -0.23229124843563642`, \
-0.2422293195344679`, -0.23716026609808988`, 4.167229819474385`, \
-0.23622586163477396`, -0.23739534569111548`, -0.24991723682196745`, \
-0.23858095041272182`, -0.2388622971277416`, -0.2306732680783733`, \
-0.24306391482757195`, -0.23787970689296278`, -0.24313108262340732`, \
-0.23528186866022174`, -0.23651171760870499`, -0.2404270835212975`, \
-0.2468610252065727`, -0.24613608433297898`, -0.2330608783853239`, \
-0.24352134409746948`, -0.24133154755531075`, -0.24153479113236076`, \
-0.23495070857240824`, -0.23629273399935513`, -0.2474425026307221`, \
-0.24518301305022072`, -0.24980345720072855`, 4.1579629897114065`, \
-0.2484837295882813`, -0.23805877586887922`, -0.2414895422660947`, \
-0.23219157817700237`, -0.2318000139160669`, -0.2308519561765598`, \
-0.2304265893894236`, 4.167631039452716`, -0.24240366609091507`, \
-0.24208761601073644`, -0.23391385891134184`, -0.23068592974335392`, \
-0.24761657519820246`, -0.24512319805458493`, -0.24483842810872847`, \
-0.24643220351336492`, -0.24338625197282943`, 4.1615689949634245`, \
-0.237839698438499`, -0.23810854520589955`, -0.24259210093602104`, \
-0.23676030406666748`, -0.2473942210422258`, -0.23979866415551457`, \
-0.23492380924627398`, -0.23597414843870906`, -0.2309038835874363`, \
4.155936781383501`, -0.23988955881088028`, -0.23657921815508468`, \
-0.23743261353141354`, -0.23367543338396363`, -0.2475618783984715`, \
-0.2412618883556662`, -0.2444784512966952`, -0.2454813846661916`, \
-0.23067421189500897`, -0.25000645204229144`, -0.24991561769179105`, \
-0.2434504517100068`, -0.24752147306805292`, -0.2348075311688883`], \
List[0.10476035415426305`, 0.09186244705715255`, 0.08693880381401194`, \
0.09730815751137206`, 0.09107926317641864`, 0.09187633083167651`, \
0.09682614305216487`, 0.08988554391930625`, 0.09636321617258929`, \
0.09207593139060771`, 0.09146747176600656`, 0.09392503926875546`, \
0.10060973000967899`, 0.09059722550464619`, 0.09239588897067744`, \
0.10183646126781147`, 0.09165448939283913`, 0.09160142603310283`, \
0.08860224237316641`, 0.08659958841931029`, 0.08916406442808401`, \
0.09005891496183913`, 0.10128170126527482`, 0.08780423715855366`, \
0.08971637648338798`, 0.09969916470930908`, 0.09778014695282497`, \
0.0955930897228293`, 0.10488782527538508`, 0.10243347495996692`, \
0.09357107297079502`, 0.09114446039818686`, 0.09601980771067288`, \
0.09153445533875301`, 0.0958764534710779`, 0.10559103405835633`, \
0.0939630658827183`, 0.10228613182025718`, 0.09582761962594974`, \
0.0935886639196459`, 0.08891435369444206`, 0.08609430959950917`, \
0.09050118692247142`, 0.10425430885157368`, 0.10449467545566861`, \
0.09153674936210413`, 0.08739179530439846`, 0.09305254477012198`, \
0.10360769087945561`, 0.10070182194466923`, 0.09533592294117416`, \
0.10577690420612759`, 0.09332737624750104`, 0.10378906455242957`, \
0.0978166118079668`, 0.09859829763289696`, 0.09684795132850142`, \
0.10208574440587437`, 0.0978267741469486`, 0.10560116084126003`, \
0.1046553188925525`, 0.09763104101905709`, 0.08888003042008451`, \
0.09827830928392427`, 0.09573265662646609`, 0.10349966474115818`, \
0.09841373132299565`, 0.08745736953582794`, 0.09249255459221459`, \
0.09903808524757099`, 0.08682679233786555`, 0.09396121816295643`, \
0.09083511233381236`, 0.0876178033208897`, 0.09575643409669547`, \
-10.445522130123994`, 0.08739197805212555`, 0.09592241335332059`, \
0.10433519486832202`, 0.08987079703381073`, 0.10273781479556221`, \
0.10306082032462603`, 0.09864730543392339`, 0.09431530759975067`, \
0.0904021215887324`, 0.08649397799598627`, 0.08697420156098437`, \
0.08741747181855591`, 0.10276782346851335`, 0.08834781205680362`, \
0.09143037036583751`, 0.09220976842542947`, 0.10028746785852787`, \
0.0893682495824187`, 0.10016146307055121`, 0.09026294830347137`, \
0.08786309727949254`, 0.0985116133185768`, 0.10444432167531446`, \
0.10411084861576238`, 0.10253331670327567`, 0.10149879885071686`, \
0.09289890614365601`, 0.10486231577805637`, 0.10531475876036377`, \
0.08700334629667097`, 0.10366126926552144`, 0.0991677772189851`, \
0.08929621472413563`, 0.09189140717100178`], List[0.2954786411925324`, \
0.2926513484367903`, 0.29605305403974563`, 0.30567727176045595`, \
0.30522935458650274`, -3.3464095037660586`, 0.30730386634837675`, \
0.288982067905437`, 0.3036792355867786`, 0.29579463739405065`, \
0.2915194906759764`, 0.28910377724828196`, -3.340563111343526`, \
0.3023136768247477`, 0.2959947541917407`, 0.30215731866494144`, \
0.2978512599683611`, 0.2994997614699012`, 0.29346935285744347`, \
0.2962708327159277`, 0.30798606441658316`, 0.3013083388836689`, \
0.29581896929163143`, 0.29358293677182085`, 0.29657079129012986`, \
0.29182291656158876`, 0.2930408653700467`, 0.2972056120772442`, \
0.2910408806045762`, 0.30669221755855963`, -3.347251346945188`, \
-3.349834151757562`, 0.3005510138039033`, -3.3492768930085304`, \
0.29924187752259285`, 0.29902745944105685`, 0.3021591412305472`, \
0.2964467136741278`, 0.30808334632731266`, 0.3023376755031857`, \
0.2959194957304392`, 0.30145175939235386`, -3.3595948773918094`, \
0.30627350706993645`, 0.30730304258730357`, 0.30307461130273433`, \
0.29691046631891904`, 0.3004356858050116`, 0.30038349786829593`, \
0.2982418072750755`, 0.300235792092967`, 0.29446837658043173`, \
0.29441899349425604`, 0.3008303521744675`, 0.29388295765379485`, \
0.3081435706282472`, 0.30169812229789017`, 0.3062718029379722`, \
0.3033384530520971`, 0.2974631196413902`, 0.29322111888732205`, \
0.2999679980057542`, 0.29130470198624026`, 0.2900357880369344`, \
-3.3480399064576556`, 0.2906134611184319`, 0.3018496519670305`, \
0.2945114148375555`, 0.29807091126923807`, 0.30406367020047287`, \
0.3061287625773613`, 0.3058768485575757`, 0.2977154126038194`, \
0.3017255570636904`, 0.3054546254296483`, 0.294186885008173`, \
0.2969387085054304`, 0.291453387167498`, -3.356225815831478`, \
0.30236905395516966`, 0.30167368939154393`, 0.2939222710872338`, \
0.3021435935389632`, 0.29345518691828315`, -3.3501094304871386`, \
0.2935924027414798`, 0.3043230792397664`, 0.291817475030888`, \
0.30777108298585243`, 0.2972760118873821`, 0.29964048528881043`, \
0.30140328250073795`, 0.29497270947587856`, 0.30161623125268894`, \
0.3071802077887457`, 0.3041522071269382`, 0.2895302485021754`, \
0.29784661915273947`, 0.30112307129723`, 0.29475598480885845`, \
0.28999854857108653`, 0.2936752896571205`, 0.30204447347180036`, \
0.3073550571064085`, 0.2979868944766817`, 0.30257672658116`, \
0.30128048057467854`, 0.2924039472275211`, 0.2933415988814197`, \
0.30787872528621363`], List[0.5331805913448902`, -1.8370467072044967`, \
0.5390222555556492`, 0.5448277158164421`, 0.5323673602482092`, \
-1.834646664772409`, 0.5355390091700092`, 0.5326891148442896`, \
0.5460708577943332`, 0.5473354670404451`, 0.5474194721892505`, \
0.5435330404529376`, -1.841056248794783`, 0.5332462009645619`, \
0.5492328623998821`, 0.5393022765586362`, 0.5376365553367183`, \
0.5351594980787102`, 0.5496225295946695`, 0.5324946239461885`, \
0.5519202746444885`, 0.541733685329906`, 0.5344237864411517`, \
0.5487651968327328`, 0.538985847093344`, 0.5370738910536871`, \
-1.8474809498184444`, 0.5324585381743445`, 0.5353998784168522`, \
-1.85154285043005`, -1.8393190624750393`, -1.8459660920367855`, \
0.5421151139786651`, -1.8524412036147986`, 0.5347464962748796`, \
-1.8436094974249542`, 0.5450339021637146`, 0.5378576745852228`, \
0.5386762988283567`, 0.5333988707133662`, 0.5392972667913053`, \
0.5343890422036925`, -1.8409220029463031`, -1.8467620136356622`, \
-1.8427253391024772`, 0.5498158919704524`, -1.8499925469224443`, \
-1.850216051405761`, 0.5378221604222625`, 0.5505979154308628`, \
0.5395897874824735`, 0.5327819817634769`, 0.5465796754978627`, \
0.5468764581252464`, -1.8426439378311261`, 0.5479370021497502`, \
0.5324222838158901`, 0.548883244577157`, 0.5470487117055061`, \
0.539214666687352`, 0.5481274065805682`, 0.5450394798815835`, \
0.549318280065746`, 0.541596468151135`, -1.8513652338365858`, \
0.538668239342796`, 0.5506726899232384`, -1.8467735276794617`, \
0.5521538820464605`, 0.5422632006948078`, 0.5520999276883294`, \
0.5379188343752048`, 0.5446976341325609`, 0.5434167977786332`, \
0.5390195937699154`, 0.5458362400714356`, 0.5376075933957847`, \
-1.8351172892517225`, -1.8500487722310046`, 0.5415128408049128`, \
0.536368632299735`, 0.5417583240862457`, 0.5442117792525428`, \
-1.8372328493668229`, -1.84584901470116`, -1.8448518679007428`, \
0.5346528337664911`, 0.5404079853255542`, 0.5496886027768132`, \
0.5460141030949965`, 0.5352722319954383`, -1.8393674505487974`, \
0.5338109156552295`, 0.5397603436759202`, 0.5479017457000348`, \
-1.8457713338173651`, 0.5448143465538304`, 0.5492476758628154`, \
0.5478688506162699`, 0.5346250315601917`, -1.846147438482681`, \
0.5475457940932258`, 0.5401540965893107`, 0.5324904184618977`, \
0.5492298003089896`, 0.5406501657711633`, 0.5522201923768687`, \
0.5478192200737552`, 0.534717242598229`, 0.5354940808841007`], \
List[0.5438266590339179`, -1.8370059494169224`, 0.5332825219906382`, \
0.5380386620576803`, 0.5428723782510263`, -1.8364788205896214`, \
0.542815985250049`, 0.5330914356583119`, 0.5361358015975299`, \
0.5367034156018465`, 0.5428404513349621`, 0.5514696036574602`, \
-1.8489790120434568`, 0.548746490198334`, 0.5376381716753165`, \
0.5359211334486764`, 0.5335127250664498`, 0.5412066564975457`, \
0.5343868776451696`, 0.5451498243377481`, 0.5458282848878407`, \
0.5508217250934848`, 0.5461319762325567`, 0.5490547180292136`, \
0.5507773526980785`, 0.5482160082078503`, -1.853133901424146`, \
0.5353174450737838`, 0.5336023134454179`, -1.8376487111846398`, \
-1.8466006861023703`, -1.8491587138899295`, 0.5324605335301442`, \
-1.8395722599972013`, 0.5342122996640857`, -1.8441696583305052`, \
0.5363217504619288`, 0.5471646817692714`, 0.5455184384001276`, \
0.5483685249921224`, 0.5485632350850524`, 0.5397673620576569`, \
-1.8419201549913164`, -1.8444826616217802`, -1.8382359648635853`, \
0.5333902066786319`, -1.8530099533889004`, -1.8442509370400835`, \
0.5429946116092722`, 0.5371626912823692`, 0.5400121525013817`, \
0.535575979160404`, 0.5335495821451719`, 0.5399767558838428`, \
-1.8482572774580512`, 0.5472969262685502`, 0.5380687851537836`, \
0.5353477566151398`, 0.5369836704713968`, 0.5383449319970753`, \
0.5444476768383889`, 0.5453305860635257`, 0.5384068147747985`, \
0.5362569446635904`, -1.8469492093453281`, 0.5428745052716648`, \
0.5336930478479177`, -1.839665361532368`, 0.5392803949980272`, \
0.5464238590459546`, 0.5434481752677492`, 0.5373084389273294`, \
0.5425548906663704`, 0.5407963942166121`, 0.5380905284259537`, \
0.5438570339203722`, 0.5510796455632211`, -1.848539659858221`, \
-1.8390678663532953`, 0.5464317008986713`, 0.5406261189451809`, \
0.5424624259954344`, 0.5375383262517264`, -1.8523478038024142`, \
-1.8510687944059212`, -1.8498696737342302`, 0.5399713935100141`, \
0.5467753574910832`, 0.5482032557912934`, 0.5446427755416561`, \
0.5487440223743854`, -1.8475742297564886`, 0.5492986819872353`, \
0.5328105579977671`, 0.5383468755612948`, -1.8501659141005526`, \
0.5407280045247519`, 0.5387649534832892`, 0.5357427727466069`, \
0.5337972035774091`, -1.8500365650223187`, 0.5349046031445341`, \
0.5460514897114657`, 0.537902370593522`, 0.541320100940492`, \
0.5325698725743808`, 0.5466508920206855`, 0.5487367347675476`, \
0.5472350214685903`, 0.5424711207843437`], List[-0.18556601417943586`, \
-0.2016104814059474`, -0.19660530957784964`, -0.2015015743448139`, \
-0.18705309441004914`, -0.2029573345541902`, -0.18970497437337827`, \
-0.18757642320297546`, -0.190700039878142`, -0.19498361842247333`, \
-0.18510439302561743`, -0.2015135239959372`, -0.20253840540763138`, \
-0.1849200910474507`, -0.19381700684595654`, -0.19451298694655453`, \
-0.20389700263363103`, -0.19617769326806891`, -0.19305403214124037`, \
-0.19369740737400415`, -0.1982300058344979`, -0.1952267571802233`, \
-0.19015418615885643`, -0.19014340365827753`, -0.18988781507560282`, \
-0.2005067984962468`, 5.144049117604479`, -0.20161316121741552`, \
-0.1889967948023984`, -0.19236141814651017`, -0.1848983840147566`, \
-0.1978863774205276`, -0.1899167903418148`, -0.1889137043222169`, \
-0.19154207236882606`, -0.18572363933658811`, -0.18870275122235772`, \
-0.20158854493151399`, -0.1869891213324629`, -0.19043276527354133`, \
-0.18711618561294097`, -0.19718025033294342`, -0.1871824485538928`, \
-0.1944828145348864`, 5.152142219398206`, -0.18594564090348153`, \
-0.19826673051224475`, -0.18460531119630022`, -0.1907293568136984`, \
-0.1883629198540101`, -0.1923743298265704`, -0.18770584073088312`, \
-0.19816017282527554`, -0.19863147557757482`, -0.19843581990587428`, \
-0.1914944982827732`, -0.20002826319029138`, -0.20251593960714853`, \
-0.19127191033931387`, -0.20377675924830396`, -0.18702415158291802`, \
-0.19687749562658266`, -0.18974684909181266`, -0.20007494010397991`, \
-0.1866337433642618`, -0.1922383883535682`, -0.1873011359984721`, \
-0.19559832773768954`, -0.19822253663418835`, -0.19120968242235112`, \
-0.1927263258220901`, -0.1994524066297471`, -0.20102942668556234`, \
-0.1876162736972079`, -0.19287963037294403`, -0.18941158901710822`, \
-0.1888990372179329`, 5.140862260023851`, -0.1910968284304211`, \
-0.1857912480921619`, -0.2012938127635543`, -0.20123493770689016`, \
-0.20103636300851307`, -0.19740911211655715`, -0.18597898304300114`, \
-0.1973604281690401`, -0.19896757677632662`, -0.1968254453477497`, \
-0.19996803935801735`, -0.20044764412177296`, -0.20041246557438847`, \
-0.19615375431924675`, -0.18896160189573055`, -0.18991008240707585`, \
-0.18653368191826422`, -0.19999956356432347`, -0.18902366717523408`, \
-0.19500663178598823`, -0.19305569007245865`, -0.19820787257781552`, \
5.156610592080146`, -0.19591076176053526`, -0.19445019036785305`, \
-0.1883742529442481`, -0.1891490609743376`, -0.20171267883641428`, \
-0.18972601376544673`, -0.20140365675833807`, -0.18778304766955958`, \
-0.1901849284090712`], List[-1.5514387819549396`, 0.6391209789683131`, \
-1.5536933408745923`, 0.63090094779299`, -1.553561834494418`, \
-1.5523597757516088`, -1.5668783778706983`, 0.6351063988779768`, \
0.6446298970405221`, 0.6443168925554437`, 0.6332340225538693`, \
0.6489563513280296`, -1.5663253062287807`, 0.6450610982671096`, \
0.6313121665510899`, 0.6308580691393124`, 0.6327923084385314`, \
0.6393370695420671`, -1.5600829049835916`, -1.5624825254916122`, \
0.6458337673120847`, 0.6382808122436514`, 0.6358794641702227`, \
0.6499772873860493`, 0.638286578101829`, -1.5570061099367847`, \
-1.5556472538835098`, -1.5651865805756149`, 0.6395265604707234`, \
0.6345893270122884`, -1.569718689046938`, -1.5546532864519622`, \
0.6349877810440857`, -1.5611036422464502`, 0.6313524106520253`, \
0.6372338048122448`, 0.6425326038565313`, 0.6427947295499647`, \
0.6406035779572026`, 0.6351868937779214`, 0.6490265407018697`, \
0.6425585625960892`, -1.5560170149590644`, 0.6490504883508175`, \
-1.5657556583427235`, -1.5614491129262016`, 0.6482215151285059`, \
0.6318644797818371`, 0.6383580317856631`, 0.6384676695428737`, \
0.6419616637012886`, 0.6419677836267478`, 0.6348376705978915`, \
0.6472873592968179`, 0.6447086475871012`, 0.6421639034326503`, \
0.6412717111993554`, -1.5535436360014212`, 0.6495143799220909`, \
0.6368118964069958`, 0.6498830591197631`, 0.6366282460692243`, \
0.6501259136864364`, 0.6426228503866199`, -1.5686008213552562`, \
0.633713478794162`, 0.6331124884705196`, 0.647282969005661`, \
0.6320523023389197`, 0.6316810890026205`, 0.634129820956347`, \
0.6339755786118249`, 0.6455251786605034`, -1.5515280530032536`, \
0.6355780354334464`, -1.5653324521450986`, 0.6403205589001708`, \
-1.5607759731138142`, -1.5699986965976331`, 0.6435626063532295`, \
0.6333683827868181`, 0.6357093770777924`, 0.6432697433800642`, \
0.6481826946732803`, -1.5671342569050402`, 0.6389756153042521`, \
0.6481231278786391`, 0.6409580264492776`, 0.6367356798701699`, \
0.6494346787019604`, 0.6347479125182564`, 0.6398933030146025`, \
0.6320087371807125`, -1.5664460983853732`, 0.6420735634746212`, \
0.6366941039515507`, 0.6459671277392698`, 0.6457001557806986`, \
-1.5682334510624087`, -1.5580740106035127`, -1.5658248607895178`, \
-1.5606377251755357`, -1.5629066761743788`, 0.6436502976495923`, \
0.6349208423454534`, 0.6455076970107099`, 0.642671473890681`, \
0.6435461500184007`, -1.565406873951922`, -1.5524715447770312`], \
List[-1.1282528380021446`, 0.8706679751584904`, -1.135835639635714`, \
-1.1366296933807436`, -1.143808311407334`, -1.1343023209548848`, \
-1.1441932341723662`, 0.8824714486354795`, 0.8851714002052347`, \
0.8825461035787806`, 0.889380910151575`, 0.8706607439171365`, \
-1.1438839933746028`, 0.8819876344555974`, 0.8790613886294951`, \
0.8896822586117975`, 0.872209664580539`, -1.1438150350952005`, \
-1.1464534724166386`, -1.1348123291899572`, 0.8831773819936729`, \
0.8833743368796171`, 0.8736564037285025`, -1.129444684979284`, \
0.8805860841966604`, -1.1408563761963395`, -1.133066424468105`, \
-1.1427873047710304`, 0.8725494173337538`, 0.8812487769502411`, \
-1.137880296394023`, -1.1338489899831967`, 0.88363960362546`, \
-1.1464899471029457`, 0.8898780252280521`, 0.877335775808004`, \
0.8852268139600838`, -1.1395536970610185`, 0.8856237400842726`, \
-1.1451767750822808`, 0.8715483776487679`, -1.1421530752289042`, \
-1.1442589419652602`, 0.8710152588411073`, -1.1444782214613103`, \
-1.1349586583942066`, 0.8841852489986495`, 0.8885762411255972`, \
0.8831461120453792`, 0.8889064500725992`, 0.8767634997322123`, \
-1.1435268808905281`, 0.8876439301726925`, -1.1423138605789376`, \
0.8702086328709948`, -1.1441589166840245`, 0.8749029306666876`, \
-1.1441847417870614`, -1.1402189134813698`, 0.8748347110330746`, \
0.8752238615477606`, -1.1283117785335441`, -1.1452694860585562`, \
0.8741982984942637`, -1.1288571496336306`, 0.8897623655414238`, \
0.8735956687783535`, 0.8854081472425126`, 0.886523607501296`, \
0.8887229645525129`, 0.8853235311482552`, 0.8779395926366564`, \
0.8840140589029502`, -1.1284695884394804`, 0.8863278386447172`, \
-1.1365179024529544`, 0.8757984586436107`, -1.1332392273987577`, \
-1.1305360873843906`, 0.8725699035296051`, 0.8799942028075718`, \
0.8707472656051345`, 0.8749743458194197`, 0.8795559639504291`, \
-1.1449935375568476`, 0.8826789211166726`, 0.8857936997997023`, \
-1.1296081272352851`, 0.8703924987379636`, -1.1403266916385209`, \
0.8807031210875371`, 0.8882667181402853`, 0.8744060318273403`, \
-1.1457858279195416`, 0.8879201474970213`, 0.8731334851426632`, \
0.8801947322343573`, 0.8864400169623039`, -1.1271291661703615`, \
-1.1403345134411553`, -1.1402093848838026`, -1.1377166995539885`, \
-1.1432233955745819`, 0.8702498078354218`, 0.8803780911969115`, \
-1.1446488132398236`, 0.8740648163823643`, -1.1362896469406507`, \
-1.1367172439380309`, -1.1267578562979927`], List[0.23215390043456757`, \
0.23802630054403767`, 0.24583856521323832`, 0.24837328400982056`, \
0.24090965095951147`, 0.24525549084574416`, 0.24718361171042785`, \
0.23366114662987353`, 0.24296423708836784`, 0.23567989674549628`, \
0.24809096220335838`, 0.23349107912963535`, 0.23634180338303543`, \
0.24380414501648617`, 0.2333470084000023`, 0.23193444027887727`, \
0.24893431813027544`, 0.2325294260131252`, 0.24356675449119636`, \
0.24005288708380854`, 0.24179951146023002`, 0.24160775329605905`, \
0.24618404157946294`, 0.23130845883732304`, 0.24152095530839848`, \
0.23496849423469857`, 0.24433807126646206`, 0.2310544272348833`, \
0.24324448593251424`, -4.164884580243688`, 0.23956287836718249`, \
0.23991819593755018`, 0.2351321323840547`, 0.2310495522109226`, \
0.24861283867515005`, 0.23580629973581363`, 0.2347274910622332`, \
0.235516424156264`, 0.23332979351092206`, 0.23842339000575896`, \
0.23312199623412266`, 0.24730376811411095`, 0.24031432871065028`, \
-4.156315771071074`, 0.24631533348539003`, 0.24318412924712046`, \
0.2449961996057425`, 0.23799610661543044`, 0.24272941318624927`, \
0.24269157028778537`, 0.2455597276783613`, 0.24888402176646668`, \
0.2473227530071841`, 0.24389280524828694`, 0.2433808913868122`, \
0.24298213115744025`, 0.23621369813598117`, 0.24054818587238191`, \
0.24274412340915605`, 0.23769827292538273`, 0.23545103859538383`, \
0.2372986440946806`, 0.24436322107699213`, 0.24678725375274332`, \
0.24302461854931667`, 0.2488275258013223`, 0.2438289258525879`, \
-4.154880811573367`, 0.24047369473337316`, 0.23828877683012525`, \
0.2436697678249507`, 0.23073415367468947`, 0.24571665225037606`, \
0.2385206987785061`, 0.2410742761276235`, -4.157364787643888`, \
0.23080437450387836`, 0.233580783449711`, 0.23948912154689314`, \
0.24704872543425718`, 0.24565112295839028`, 0.23049748726549513`, \
0.2390084181628207`, 0.2355027298155618`, 0.23259247645603873`, \
-4.170740266308939`, 0.23272795914394917`, 0.23459515333898512`, \
0.23209982921072506`, 0.24211069209976788`, 0.23506572353515315`, \
0.24322206072522928`, 0.23909966835494156`, 0.2446413467212236`, \
0.24871576580044066`, -4.159919725529238`, 0.2498621328141147`, \
0.2364743513829745`, 0.2311841058309716`, 0.24203336666140052`, \
0.2462688255350464`, 0.24161418383998573`, 0.24877515996343783`, \
0.24740156061296134`, 0.2374716092973207`, 0.23131343720567177`, \
0.2413638274758877`, 0.23037997306122346`, 0.2397216888889694`, \
0.23996790889986458`], List[-1.1465049847012838`, 0.8752393918867661`, \
-1.133195605491783`, 0.8877187666983501`, -1.126534579200763`, \
-1.1407419165290755`, -1.1430285141886998`, 0.8746932364234516`, \
0.8839802017020904`, 0.8850110586323886`, -1.1412650900745762`, \
0.8793036049521175`, -1.1295636663761126`, 0.8863568587159306`, \
0.8769736799917164`, 0.870113235565618`, 0.8751069730782415`, \
-1.1326759281004406`, -1.1335771723739616`, -1.1373702647574628`, \
0.8780223322455015`, 0.8853417755563338`, -1.141603777088024`, \
-1.1340967070674635`, 0.8726898242405192`, -1.1277791370034693`, \
0.8878998386783724`, -1.1425788833896193`, 0.8898288604143137`, \
0.8858179326524696`, -1.1312678245973071`, -1.1369505336801375`, \
-1.1348390951191736`, -1.146438111907867`, 0.8790975836315302`, \
0.8840232705788615`, -1.1448544108096042`, 0.8770902024533196`, \
-1.138995356874468`, 0.888143581250609`, 0.8797911791245251`, \
-1.130975190959611`, -1.1283933479163397`, 0.8777866315204045`, \
0.8825181060247983`, -1.1319480962680473`, 0.8789491694230598`, \
0.8854811652439633`, 0.8726463477784137`, -1.1429750769846796`, \
0.8896249513623169`, -1.1447879270325219`, 0.8891017366861019`, \
-1.1274818739359356`, 0.8783121811340968`, 0.8803245320894502`, \
0.8869829556252512`, -1.1344834014395069`, 0.8773295145586965`, \
-1.1289256914330357`, 0.8750965251226628`, -1.1462439166957006`, \
-1.1445439141279694`, -1.135469736760127`, -1.128088895889578`, \
0.8716809452772337`, -1.1266665210504518`, 0.8852529684610863`, \
0.8768348977333912`, 0.8862525036539542`, 0.884643989200889`, \
0.8751429725650572`, 0.8815117954554473`, -1.1294201198332463`, \
0.8880740015883658`, -1.1398540359672622`, -1.1354421431472856`, \
0.8852327239449844`, -1.13497504659984`, 0.8713070425727563`, \
0.8796219338162712`, -1.1379290843974526`, 0.8790851315361599`, \
0.8794325858047741`, -1.1372605385397294`, 0.8803378444305503`, \
0.8777322688618201`, -1.1312772647060965`, 0.8817238627537712`, \
0.8842571476926653`, 0.8825096933789621`, 0.8719249857061118`, \
0.873653693949467`, -1.1333564852135012`, 0.8834270340591033`, \
0.8892855111869509`, 0.8743920146251212`, 0.880356710720525`, \
-1.1413614023378422`, -1.1352707415988033`, 0.8885644896616723`, \
-1.1419517910711054`, -1.1435813990417936`, 0.8860350253960654`, \
-1.1345551900939346`, 0.8865517633352445`, 0.8781400486457964`, \
0.8857422209671121`, -1.1407090292835727`, -1.1282604600582635`], \
List[-0.7314874826125287`, 1.3504166468443628`, -0.7416107003266837`, \
-0.7488300105625636`, -0.7459719608165668`, -0.7359723985239933`, \
-0.7390018836331779`, -0.7334532922020839`, 1.345134586576413`, \
1.3589484344318448`, -0.7379950369744727`, 1.3463317873834229`, \
-0.740118194035`, 1.3493802923604574`, 1.3534832955544707`, \
1.3476150198413768`, -0.7362117864881359`, -0.7367372760579357`, \
-0.7473417343751586`, -0.7363474132309447`, 1.3448775720650357`, \
1.3479103149798806`, -0.7470524594642948`, -0.7479068789006008`, \
-0.7467748596890217`, -0.7420090126307252`, -0.7406588736353104`, \
-0.7461692097600747`, -0.7434371054239933`, 1.3468159066777057`, \
-0.7443401836837592`, -0.7369810937776607`, -0.737148824510543`, \
-0.7459587617453218`, 1.3477882132155852`, 1.3500202894855466`, \
-0.7313120088153104`, -0.7484009661096803`, -0.7356113311617035`, \
-0.750681622757361`, 1.3466340664069911`, -0.7447470307171747`, \
-0.7437384130637746`, 1.3523089233643448`, -0.7449800583609603`, \
-0.735284915553914`, 1.3572064612411123`, 1.3448036432351615`, \
1.3527232336124004`, -0.7495008014565856`, -0.7407676853804445`, \
-0.7395166307655692`, 1.3461111919321316`, -0.7378296683731428`, \
1.3574302346108582`, -0.7488851871083122`, 1.3460945313840549`, \
-0.7364817597561508`, -0.7453286022114672`, -0.7344514755588932`, \
1.3536796150959853`, -0.7372566960309112`, -0.7472018046750614`, \
-0.7474957391098529`, -0.7340514345869139`, -0.7350389493242613`, \
-0.7323368326837059`, 1.3587693856077927`, 1.3535567606180205`, \
1.339500332320947`, 1.358863077700843`, 1.359199252133518`, \
-0.750879701907643`, -0.7421668118845873`, -0.7352045874545813`, \
-0.7356038754963548`, -0.7320982339697544`, -0.7451805002977916`, \
-0.7314218273202412`, 1.3503336352625186`, 1.3406425589001263`, \
-0.7493108743621574`, 1.3557650974883457`, 1.3420783216652445`, \
-0.7421472252604102`, 1.345510009356905`, -0.7407575144021736`, \
-0.7472019711426294`, 1.3514879896955907`, -0.7372834752809377`, \
1.3532471599271028`, 1.3474314730652213`, 1.3451711263500277`, \
-0.7447541343398634`, -0.7474850846872261`, 1.3543855656291575`, \
1.344033794703372`, 1.3517465823371373`, -0.7405204943533663`, \
-0.7373889241873937`, -0.7497533015761432`, -0.746602871445211`, \
-0.7322242124531397`, 1.3475692641971182`, -0.731397184714182`, \
-0.7479999426227205`, -0.7464315180352192`, -0.7388553111290687`, \
-0.7361502341685556`, -0.7395718854460422`], List[-0.23923211286062146`, \
-0.23633871660479266`, -0.2481021336404936`, -0.24078426675448825`, \
-0.24783615502453413`, -0.2493972075381261`, -0.23999538905039355`, \
-0.24979694486134985`, -0.24328649531422644`, -0.2335590286979149`, \
-0.24045167585613922`, -0.24720428474592543`, -0.23062429948469382`, \
-0.23549164409861684`, -0.24860688142724405`, -0.23203544274153162`, \
-0.2384874995898699`, -0.2391453070858919`, -0.23486529766204028`, \
-0.23697958978860864`, -0.24920519542178315`, -0.24587284106354332`, \
-0.24694308608568538`, -0.2448688830561555`, -0.2466886267080428`, \
-0.23409639352143116`, -0.24745775099767783`, -0.23191891177474172`, \
-0.24617314419603087`, 4.155156167346723`, -0.2317945821547695`, \
-0.2315587881822882`, -0.2356060288623827`, -0.2381338843979653`, \
-0.23554221145353332`, -0.2314083005650466`, -0.24283582273392101`, \
-0.24663181696735795`, -0.2433386833313346`, -0.23558347865500065`, \
-0.23130011049689767`, -0.24763342404559377`, -0.24074676448276713`, \
4.1554469192576216`, -0.25004927868482946`, -0.24908615557198954`, \
-0.23620675953198167`, -0.23033184600750636`, -0.24097485311413597`, \
-0.24420095043343237`, -0.2415186108486246`, -0.23714901432867858`, \
-0.24743214273279568`, -0.23913583189234588`, -0.23041089672718745`, \
-0.24064781565567983`, -0.2331488232513614`, -0.2327420927700287`, \
-0.23179817335167338`, -0.23574789384508088`, -0.24195928096577268`, \
-0.2379224188606442`, -0.24666834271548577`, -0.2452012652670911`, \
-0.23941772773807363`, -0.2487291661983204`, -0.24127375071844614`, \
4.157629891233154`, -0.24278435093735304`, -0.24251673558418135`, \
-0.23331923472498897`, -0.23574519536713784`, -0.231426044923842`, \
-0.23041313016740722`, -0.24261994827875466`, 4.160106289499654`, \
-0.2447646342661794`, -0.24185489038728786`, -0.2377907454735098`, \
-0.2475246098299305`, -0.2393503118891554`, -0.24126563336857593`, \
-0.23067580834162502`, -0.2485786162794771`, -0.23912289703609496`, \
4.173149278228338`, -0.24672590941916356`, -0.24651518867287453`, \
-0.23915014642324442`, -0.2329922776793925`, -0.23687063670576758`, \
-0.24166502628963088`, -0.23093103770611986`, -0.23769064271977958`, \
-0.24823238384968765`, 4.16886926867973`, -0.2383519000606604`, \
-0.24343285915453394`, -0.23201921404305895`, -0.24404361790374446`, \
-0.2492291894192243`, -0.2396894262531141`, -0.23126945776458507`, \
-0.2420035884056069`, -0.2411816699684223`, -0.2380137335240742`, \
-0.23278333527288475`, -0.2494372300047345`, -0.24666574807612685`, \
-0.24917560040557163`], List[0.2865032303469074`, 0.27129916660825265`, \
0.2858371964049677`, -3.5678795517381743`, 0.27015957846270644`, \
0.2760022843089985`, 0.27384835716367034`, 0.2888937138960661`, \
0.2703489117076676`, 0.2782974723399431`, 0.288932141437423`, \
0.28316189179247137`, 0.2750897349287349`, 0.28171828008991107`, \
0.27734742628203557`, 0.2753412004274318`, 0.27484978285833944`, \
0.28458921207894355`, 0.2754578355570314`, 0.28963696777362513`, \
0.2863540865113042`, 0.2866004802020178`, 0.27454197350590887`, \
0.2865224366383861`, 0.2817847229120987`, 0.27602125680662215`, \
0.2778622056648662`, 0.27955052048288676`, 0.274943716699767`, \
0.27816692584056113`, 0.2823801275657867`, 0.27451809401566285`, \
0.2758643178554675`, 0.28518300058457646`, 0.2873004419971422`, \
0.27274431664021653`, 0.2816480157529277`, -3.5723203623436786`, \
0.28731930932330907`, -3.5748389613452316`, 0.2866123519456463`, \
0.28973973484304627`, 0.2715292574208738`, 0.27334807965808783`, \
0.2834269789361351`, 0.27392079847587525`, 0.2830434021412162`, \
0.2891099458683903`, 0.27492530103897284`, 0.27386442864009575`, \
0.28654465804153156`, 0.28051088216108483`, 0.28493168357247284`, \
0.2890445173306222`, 0.28807432134602773`, -3.561066029054927`, \
0.28130939250657366`, 0.2834544019835003`, -3.574838283544036`, \
0.2721592082911129`, 0.27892858002170184`, 0.2723235699574184`, \
0.2774928813227864`, 0.2821562846980125`, 0.278219451536929`, \
0.28262598080751905`, 0.2735135745991419`, 0.2828923921843482`, \
0.2703835088011154`, 0.28931583673126854`, 0.2702086710824762`, \
0.2781776474476634`, 0.2864179289619669`, 0.28220584578546276`, \
0.2734331435009274`, 0.2775861978311635`, 0.28412880373679156`, \
0.2709753453491161`, 0.2712672329116711`, 0.2762348150020696`, \
0.28439350795925633`, 0.2810933848730675`, 0.27384414001063084`, \
0.27619742625989363`, 0.2864551725822934`, 0.28727959405095604`, \
0.2851392829150887`, 0.27603978565160187`, 0.27018512429841446`, \
-3.5665401599311264`, 0.2848228023834947`, 0.28521394843257003`, \
0.27517900321678035`, 0.28718487584263197`, 0.28872190008398385`, \
0.2763108540421668`, 0.28200433138895664`, 0.2892695946915503`, \
0.2733551439256271`, 0.28056258775791887`, 0.2723977370638479`, \
0.2820273664693763`, 0.2724395607285499`, 0.275258741663549`, \
0.273086635657933`, -3.5723481059321838`, 0.2770371831048627`, \
-3.5647335184049007`, 0.2708637517248068`, 0.28210344551754485`], \
List[0.27347770566669244`, 0.2809095777010382`, 0.27056529971385557`, \
-3.5702411297816`, 0.28169241302606873`, 0.27062316732075664`, \
0.28186512598650615`, 0.2767652017179621`, 0.27480893480169605`, \
0.27137292282988074`, 0.2845702182302201`, 0.28834345125327887`, \
0.28470798051762153`, 0.28180743842332184`, 0.2808548382519082`, \
0.28698811952165326`, 0.28626844780715416`, 0.28235048262160095`, \
0.2873311869151726`, 0.2842751344571114`, 0.2786318608907668`, \
0.2740447526512989`, 0.2878709058069483`, 0.2891509657706134`, \
0.2723182992952`, 0.2700898858382841`, 0.2752347491812089`, \
0.28594667427178483`, 0.28258161930116116`, 0.27984514158762935`, \
0.28717233210066506`, 0.28807719731583276`, 0.27545687130025615`, \
0.2774650758467698`, 0.2741523430702914`, 0.27574680302830634`, \
0.2757174988990818`, -3.5707187615843767`, 0.28627124251060243`, \
-3.5656861964252067`, 0.2888906720106206`, 0.27759309457695225`, \
0.27968325407764705`, 0.28437100087023065`, 0.27959593161460067`, \
0.2884312069202645`, 0.28706978629138735`, 0.2839825974770203`, \
0.28737005286331596`, 0.28368656858514035`, 0.2887747827527186`, \
0.29000103033455843`, 0.2749983374866424`, 0.28734724316653415`, \
0.28815807926950454`, -3.569443726521158`, 0.2785613410408538`, \
0.27219700509838984`, -3.568103080598601`, 0.2843647952889371`, \
0.2835821088702209`, 0.27228429439871754`, 0.2805942854838696`, \
0.2747408378575516`, 0.2701430375379117`, 0.28404765056428327`, \
0.2779008185694581`, 0.28249922513531744`, 0.28684737055455917`, \
0.2722954812826215`, 0.2812144234210907`, 0.280754207046718`, \
0.2818823889563988`, 0.27068070472670147`, 0.2722642030070619`, \
0.28643194627868734`, 0.2845809674475992`, 0.28503404831432055`, \
0.28056857050771483`, 0.28754347960422905`, 0.2849713853141242`, \
0.27840750557210164`, 0.2782959966182001`, 0.2753297228732888`, \
0.2809315241737759`, 0.27724003597214114`, 0.27772308042081395`, \
0.27563767717577264`, 0.27906693347042477`, -3.5774852556821872`, \
0.27944835301132975`, 0.2779026813772899`, 0.27238019104579336`, \
0.27480831456036214`, 0.27812052112638763`, 0.2775869644516699`, \
0.2710136119069091`, 0.285419971099821`, 0.2801353416733808`, \
0.2812373360697042`, 0.27140667566197446`, 0.2715889547597741`, \
0.2853186003992531`, 0.2889131770419002`, 0.2773261752006678`, \
-3.579134839892347`, 0.27689386407923955`, -3.569070740084344`, \
0.2890135310789787`, 0.27601883384943615`], List[-1.13275683520429`, \
0.8790554277062436`, -1.1414377438067334`, -1.1288067717245986`, \
-1.1270705304481305`, -1.1286112812807583`, -1.1461899909090618`, \
0.8799285704586909`, 0.8715070089844492`, 0.8778348422886263`, \
0.8780148387719342`, 0.8812121941078659`, -1.1385897752272087`, \
0.8896259342797468`, 0.8835907362109443`, 0.8827845559313109`, \
0.8760076025153815`, -1.1305305656979738`, -1.1275293642015738`, \
-1.1272560106056335`, 0.8767623428560218`, 0.8786458410900323`, \
0.8850741383113644`, -1.1393918946581352`, 0.8729725352486052`, \
-1.1377223514387917`, -1.1410167536834586`, -1.1389278660685602`, \
0.8819154688726076`, 0.8731258719962918`, -1.1278555162601451`, \
-1.1267675335995413`, 0.8785203729539927`, -1.1425994229404148`, \
0.8739412538918199`, 0.8870814210044876`, 0.8866213846510105`, \
-1.1410189507084425`, 0.8856830598063203`, -1.1344834180675016`, \
0.871195381380958`, -1.1379545398942683`, -1.1293220821651189`, \
0.8866605855225712`, -1.1321015959816503`, -1.1455642608765295`, \
0.8722670044185384`, 0.880441459471436`, 0.8751064921047237`, \
0.8833238349536029`, 0.886068001758512`, -1.1358813660887133`, \
0.8840543171269202`, -1.145557368415863`, 0.8782604296982874`, \
-1.14512243500421`, 0.8830687590618613`, -1.1428918773353167`, \
-1.1308898010435864`, 0.8876045361111684`, 0.8806013300881468`, \
-1.1365807889997224`, -1.136233690007959`, 0.8770568594673172`, \
-1.1459479163737005`, 0.8722639285504328`, 0.8715010605639677`, \
0.8883917513233042`, 0.8721066092598704`, 0.8725825775426714`, \
0.8887436521001477`, 0.882695243314748`, 0.8850618665479777`, \
-1.138301528015186`, 0.8738977104614917`, -1.130509625743623`, \
0.8862345550733967`, -1.13154006658348`, -1.1439651371755974`, \
0.8835617802586625`, 0.8871528719358291`, 0.8868197614193711`, \
0.8897635516469192`, 0.8716861819530698`, -1.1427127474722483`, \
0.8786111383501172`, 0.884451236924051`, -1.127533397797144`, \
0.8875492628682768`, -1.1378919250033996`, 0.8785220935641609`, \
0.8732998539304778`, 0.8699414776199528`, -1.1337201540802904`, \
0.8877071626220814`, 0.8707627189452879`, 0.877322095890184`, \
0.886638116527753`, -1.1384747590549291`, -1.1267852963434706`, \
-1.1415019081153086`, -1.1318721081966354`, -1.1406093531795445`, \
0.8853975294914036`, 0.8819102459763185`, -1.1284659360609934`, \
0.8807916366029849`, -1.1363326024143527`, -1.1431880570767476`, \
-1.136539090275197`], List[0.21705760146266695`, 0.21285448566722873`, \
0.2128233794243613`, 0.22267038756971275`, 0.2104297641575248`, \
0.20927758619457898`, 0.2141813926589927`, 0.21441520996746127`, \
0.21244410596949242`, 0.22803800079020745`, 0.21499634347485586`, \
0.21131298203203155`, 0.22095344116162854`, 0.2190778281351234`, \
0.2264264703291886`, 0.2180644047432584`, 0.2218262434324806`, \
0.21156274652537405`, 0.21306458437043496`, 0.2210568105156913`, \
0.21520489351283556`, 0.21958082904634715`, 0.21867390533594688`, \
0.22466988187115167`, 0.2213594980721273`, 0.2231757597738389`, \
0.2253705707740288`, 0.22536117744384374`, 0.2086621736563386`, \
-4.58283444132731`, 0.22357895054810242`, 0.22561436962070333`, \
0.22606711729774692`, 0.22280543640164535`, 0.2164861529002271`, \
0.21683408355140782`, 0.2084540495072821`, 0.22185728603929583`, \
0.21848900839659696`, 0.21118690726108436`, 0.21596929456251715`, \
0.21256958065302983`, 0.22459827306756347`, -4.586439898094261`, \
0.22067425963300996`, 0.2092919393222668`, 0.22180365531064247`, \
0.22655263030428616`, 0.22478931265415925`, 0.22368991858387444`, \
0.2226255113594035`, 0.22789799145793427`, 0.20923760629115937`, \
0.22262407942780288`, 0.2093006445418567`, 0.226475808299657`, \
0.22688047643553633`, 0.21397242714119744`, 0.21092285655920565`, \
0.2186678143415152`, 0.21028315060638667`, 0.221136753237588`, \
0.21052110835948173`, 0.22557339448616823`, 0.21167896638029005`, \
0.2199776649796198`, 0.21907153955824574`, -4.581761538123202`, \
0.21671551473767175`, 0.21571092046613924`, 0.21292530961928346`, \
0.22664893374695635`, 0.21548742898687712`, 0.20929628194697197`, \
0.21221114625336815`, 0.22632728822876358`, 0.22670688797528685`, \
0.22562672210539866`, 0.22335020947414524`, 0.2103478622398542`, \
0.2227122295149683`, 0.22681258635256782`, 0.22201415846433192`, \
0.22778929978929927`, 0.21990949879084173`, -4.579450981950618`, \
0.21011053936150884`, 0.21967030317940783`, 0.21925456557897108`, \
0.2243971673382787`, 0.21080237590838247`, 0.22263170221565576`, \
0.20865726554707711`, 0.21120583138405505`, 0.220288355699937`, \
-4.583341517361693`, 0.21728013530210363`, 0.21457937014406311`, \
0.2127265982791053`, 0.2117400118115641`, 0.22664419628148824`, \
0.2276956025453734`, 0.22387284773147031`, 0.21320105025566222`, \
0.21919974040870988`, 0.21249509823653148`, 0.20914761543610008`, \
0.2130229497054453`, 0.2188760123572694`, 0.22664679441450478`], \
List[0.10352100085806203`, 0.09783528005381609`, 0.1033110540707328`, \
0.09578674854243788`, 0.09974363826145052`, 0.0935994631480617`, \
0.10521077805977994`, 0.10266002092325927`, 0.09193805137641584`, \
0.09430895102001896`, 0.10483985122143662`, 0.0981288101489491`, \
0.10256362629391479`, 0.0889400908251382`, 0.08751734231219022`, \
0.1020851516450007`, 0.09992069559199135`, 0.09497557304288784`, \
0.10565118570903764`, 0.10019415333884381`, 0.09972142770498447`, \
0.10072077496002185`, 0.08896109589909984`, 0.09010414968856631`, \
0.09041280878465977`, 0.0979791879407922`, 0.09661139548031399`, \
0.08849513103385465`, 0.09639865962960205`, 0.08596773250568274`, \
0.09404009639284394`, 0.10027691208129631`, 0.0883849883831982`, \
0.08741226926879414`, 0.10354026036677855`, 0.09085799577037737`, \
0.10080470269883969`, 0.08975586005833167`, 0.10550653339789659`, \
0.1001066962266553`, 0.10496594114821758`, 0.09124306767579249`, \
0.10367406858533346`, 0.10574124587300965`, 0.09557108454025791`, \
0.08748797599930667`, 0.09663084769719821`, 0.09309238050810584`, \
0.08905192633331538`, 0.09322605968034589`, 0.09947506650011285`, \
0.08728184293594135`, 0.10184246732224295`, 0.09033637693091827`, \
0.09296219118589333`, 0.08894896287894316`, 0.09322378999002617`, \
0.0867793802884593`, 0.09340201331538939`, 0.10392139856339667`, \
0.0985518942685037`, 0.09628576621066255`, 0.1000521853484404`, \
0.09986941567779557`, 0.09429783609761999`, 0.09705994247673491`, \
0.09745616144591368`, 0.08900225088710592`, 0.10082659617763665`, \
0.10005198498397351`, 0.10550284817453123`, 0.10505907714561113`, \
0.0959281258475571`, 0.09261101175872613`, 0.10505934276785463`, \
-10.431091730666491`, 0.1031120271517335`, 0.09399691088974577`, \
0.08934040163723989`, 0.09019128809520155`, 0.09604627508287975`, \
0.10062798005406619`, 0.09959223584946982`, 0.09815619152830614`, \
0.08931565132963304`, 0.09249032040744043`, 0.09888870948758705`, \
0.09254387397543043`, 0.09042804700870913`, 0.0979522386315974`, \
0.08873954363971681`, 0.09018209045704778`, 0.08632612152315311`, \
0.09256742899276946`, 0.101746085415156`, 0.0940410674910829`, \
0.09591768819071228`, 0.10516010772712722`, 0.09339079380103821`, \
0.1035471630816903`, 0.10524321376984425`, 0.091453398457357`, \
0.09806403540179426`, 0.09743832860261796`, 0.10177198775568785`, \
0.10362733469944313`, 0.09332233567703001`, 0.0882257554755575`, \
0.08824068705066396`, 0.09373411717701224`], List[-0.1876583086231311`, \
-0.19862107388979536`, -0.1843777942022908`, -0.20371548963307284`, \
-0.1991512451137344`, -0.18950224419622086`, -0.20238244965840563`, \
-0.19242306457676278`, -0.2016173412837571`, -0.20378272900932182`, \
-0.1875952071730635`, -0.18910535819132474`, -0.19717900089572088`, \
-0.18916475553990728`, -0.20085868959397113`, -0.19293168085105877`, \
-0.1871814723826833`, -0.1978909419107408`, -0.1844172934573662`, \
-0.1986233495954571`, -0.18933896959983976`, -0.1932853965566588`, \
-0.20118207917192277`, -0.20073111543424807`, -0.1849437564520675`, \
-0.20063271464078725`, 5.153303103857935`, -0.20250828698443082`, \
-0.20083345168739`, -0.191837844429917`, -0.1966075189751027`, \
-0.2028034317738745`, -0.18525607028011742`, -0.19407824473928553`, \
-0.18509085395092004`, -0.19263596833926805`, -0.19141988207498528`, \
-0.18450132150386622`, -0.19441683974541968`, -0.19155680505553574`, \
-0.1929851696665255`, -0.18576307270782322`, -0.20405718955045266`, \
-0.19478712996873634`, 5.150020887740942`, -0.19321543229037996`, \
-0.19145210958574957`, -0.18544533353136528`, -0.19548898234222886`, \
-0.1935919683393697`, -0.19412139642335116`, -0.19901280266035723`, \
-0.1940762428707481`, -0.18467519936194313`, -0.18714503731276388`, \
-0.20008916542689129`, -0.20324739123626134`, -0.18533974713670612`, \
-0.19790382725120845`, -0.19280522493633295`, -0.19146632206980083`, \
-0.20351687498761337`, -0.18589653800757946`, -0.19137434464063643`, \
-0.2002789355466552`, -0.1983847160769162`, -0.19609619075002382`, \
-0.19634873607899017`, -0.18938984778251974`, -0.19059840372987788`, \
-0.19426526653571666`, -0.1980473935612811`, -0.19622889866198037`, \
-0.18614857629437806`, -0.18641348307063246`, -0.18984305420976366`, \
-0.1883237298759116`, 5.154612272418157`, -0.1912850507500578`, \
-0.18874946507744747`, -0.2016656029297999`, -0.1884737956199321`, \
-0.1994111027476591`, -0.1876429745369555`, -0.18433628518204645`, \
-0.19329186327823697`, -0.19558654764363298`, -0.19204665045192257`, \
-0.20204229607106583`, -0.19323423130158873`, -0.18941897061716081`, \
-0.19107369033420332`, -0.19222255870354743`, -0.19905123143193618`, \
-0.1911517840048294`, -0.19999573012220231`, -0.192084967795651`, \
-0.19866365574498823`, -0.18756520043435368`, -0.19232781776368524`, \
5.140348710201745`, -0.18911251499331672`, -0.1976048175865529`, \
-0.20064864873276927`, -0.19312504414020268`, -0.18551254221870167`, \
-0.1886993767026958`, -0.19090787349763544`, -0.19163268810827472`, \
-0.19845812519805006`], List[0.23531195601647845`, 0.24641514792757585`, \
0.24611676883877373`, 0.24194204441973727`, 0.24599224298343864`, \
0.2378812419951256`, 0.24231100455157256`, 0.2382630197649593`, \
0.23537554267564031`, 0.23251895554212057`, 0.24876446849961192`, \
0.2436192719717055`, 0.23845078908935496`, 0.24528903985204237`, \
0.24470381508289804`, 0.24918704972638558`, 0.2487191517872811`, \
0.23250181043872922`, 0.2403638962614189`, 0.23975553557004312`, \
0.23475557941029523`, 0.2448204014359913`, 0.23439692167675008`, \
0.24670541918031708`, 0.23168558891030844`, 0.2403508620448119`, \
0.25007838654582765`, 0.2333832291224376`, 0.23026838246445852`, \
-4.172469875229912`, 0.24562068461182804`, 0.2341309461304087`, \
0.23192729868305487`, 0.24217686276094244`, 0.24430808800968384`, \
0.23502068694887407`, 0.2318601959791684`, 0.23867300308075373`, \
0.23262860485598152`, 0.23057029008003965`, 0.2469971303355121`, \
0.23331804104690143`, 0.2365795890873841`, -4.170171701898062`, \
0.23537854055640747`, 0.24774355146583177`, 0.24553902325439914`, \
0.24490807365320486`, 0.24269264915578959`, 0.23579280725361748`, \
0.2319378319051698`, 0.2360867751234373`, 0.2475703859710063`, \
0.23951888381529396`, 0.24146052578857757`, 0.23437315313687287`, \
0.23182797923295345`, 0.2476109996272166`, 0.231773430303912`, \
0.2336822591621003`, 0.23762217192624802`, 0.2431098521061253`, \
0.2408969555277364`, 0.24367092323536135`, 0.23272320524079762`, \
0.23289814987743815`, 0.23380778777113242`, -4.166059825396026`, \
0.24815020459251677`, 0.24305204082347837`, 0.23242335940957815`, \
0.23107513753102119`, 0.23904175105601988`, 0.24102370491609743`, \
0.2371355446944312`, -4.171500152992536`, 0.2332509234669523`, \
0.24094943749162853`, 0.23318722808452613`, 0.2444894407303338`, \
0.23352113531519259`, 0.23496207948562223`, 0.23908904525266028`, \
0.24823036568353182`, 0.24694091251998332`, -4.155347223874801`, \
0.2490942229584072`, 0.23670536215331522`, 0.2500143542883727`, \
0.24854897063047235`, 0.23065894141324206`, 0.24799490486968867`, \
0.24272426414328863`, 0.24791427730131013`, 0.23716372316282325`, \
-4.155198706585365`, 0.23185590665200065`, 0.24687458491643047`, \
0.2322127154836163`, 0.23490428410342826`, 0.2445622719486984`, \
0.2375248996931883`, 0.24012920581164343`, 0.247185181512005`, \
0.23083224560988935`, 0.234555130730896`, 0.23691842472382846`, \
0.2437553357065998`, 0.2378372667042693`, 0.23186455691626498`], \
List[0.41447072071807206`, -2.4255930149682676`, 0.41692961873831574`, \
0.4222692912083557`, 0.41342584799757703`, 0.42060585230903225`, \
0.4179975187063812`, 0.41132458398948646`, 0.42083198313970654`, \
0.4193450630260671`, 0.4110756026791945`, 0.4191928690064088`, \
0.4070715888107792`, 0.4139666207293221`, 0.4027095115535399`, \
0.4177414044468936`, 0.40335149781136437`, 0.4088045299611019`, \
0.4146051686518506`, 0.4104698566715707`, 0.41183628548575424`, \
0.40631170854831516`, 0.42081411666986157`, 0.40933083831058537`, \
0.4134109091043091`, 0.415561260609112`, -2.4307198499350937`, \
0.4178079230571511`, 0.4169107143070822`, -2.4241342949828577`, \
0.41392019310002776`, 0.41169551931523723`, 0.4123067357233678`, \
0.4195866330712955`, 0.40332902444139024`, -2.42520927331785`, \
0.40273946290939344`, 0.42250111742796415`, 0.4039383608771172`, \
0.41100907210794657`, 0.4097807662164757`, 0.4095601437978087`, \
0.4060900210161585`, -2.4207555319729535`, -2.4155533351876417`, \
0.4117294693333712`, -2.422241615606141`, -2.419291093106096`, \
0.40841583685387056`, 0.4104845761592336`, 0.40695166762630364`, \
0.4188363971661469`, 0.41332051773086237`, 0.41894240231104457`, \
-2.4158441406599143`, 0.41688217216096746`, 0.4208789589810964`, \
0.41307067337358633`, 0.41947059329358966`, 0.41694753760520487`, \
0.4183745482700221`, 0.4065187365752687`, 0.4144691121881137`, \
0.41478875993646386`, 0.4180650851446986`, 0.4214856583764732`, \
0.4164649723741842`, -2.4199955735966387`, 0.403805222626882`, \
0.41206432448054126`, 0.4191599963796138`, 0.4126091702012203`, \
0.41118092160133424`, 0.41113549903151186`, 0.40728979411419725`, \
0.4118476354518458`, 0.4040328603612733`, -2.4151935138575498`, \
0.4086364493660152`, 0.4150530139192924`, 0.40322115371761946`, \
0.41611981928623654`, 0.40912124265681327`, -2.4240471893588116`, \
0.4093379112708585`, -2.427233278408779`, 0.4054986743572144`, \
0.42136115658409024`, 0.41545646182080576`, 0.4168117765316116`, \
0.41857186051804723`, -2.4210006139624056`, 0.41587142600579524`, \
0.4126810925909411`, 0.41339992362849`, -2.419518505612772`, \
0.4143517468377858`, 0.42201677529658244`, 0.4034334327258941`, \
0.4178097278319952`, -2.424239208336915`, 0.40805837391132116`, \
0.4192075427077694`, 0.4218295673938417`, 0.40357588610036504`, \
0.41610516462824926`, 0.4066066850486904`, 0.41597870632315453`, \
0.42019288188604587`, 0.404857324502679`], List[-0.24294340037330658`, \
-0.24808494891749852`, -0.2341758701188156`, -0.24535970720675562`, \
-0.24560811066572508`, -0.23547402322308275`, -0.23652728241596818`, \
-0.24866707646721212`, -0.2389757144953432`, -0.24544671084379008`, \
-0.24419889240044051`, -0.2362394094114933`, -0.2302078725993917`, \
-0.2406212000103991`, -0.24832517858770434`, -0.24852745876722418`, \
-0.23854921315631272`, -0.23789341027884298`, -0.23317874137488218`, \
-0.24163583058501859`, -0.24436906000260294`, -0.24497708911976135`, \
-0.23135233201672958`, -0.23202163736737622`, -0.23362445643720212`, \
-0.2452354162783847`, -0.2419593439339063`, -0.23507222147559081`, \
-0.24884465339568754`, 4.157234705567836`, -0.23969558430033`, \
-0.24137095261912478`, -0.247836114909699`, -0.24273809141134023`, \
-0.23730451936446467`, -0.24210949065951443`, -0.2473944766211933`, \
-0.23893168767667877`, -0.24229738763378483`, -0.24208803786451671`, \
-0.24946513286633737`, -0.24025127791534995`, -0.24727204988275736`, \
4.155540197775494`, -0.23904704023107393`, -0.24348403294714027`, \
-0.23329564047667162`, -0.24499473141270517`, -0.2474753034603113`, \
-0.23263420512997285`, -0.23130498287323914`, -0.2405510296807171`, \
-0.2478017228180611`, -0.24310861217027277`, -0.24678559741655634`, \
-0.2457502560279927`, -0.23568515130883638`, -0.23377396036890294`, \
-0.23589681683916022`, -0.24887827420130476`, -0.2403693525282363`, \
-0.24908532147136267`, -0.2471640223170684`, -0.24762764379266794`, \
-0.2416634525281024`, -0.23392560238593194`, -0.23179750992972828`, \
4.16415743706377`, -0.2481208790777157`, -0.23482887174802403`, \
-0.2458776040737501`, -0.23358559056940598`, -0.23483962340830414`, \
-0.2486067111285838`, -0.24620519314601913`, 4.165523467063291`, \
-0.23917153442575617`, -0.23880630251543253`, -0.24554810819386316`, \
-0.25006747283827097`, -0.2434622762899901`, -0.249098853157235`, \
-0.2355146019480484`, -0.2473540325622737`, -0.24479944914314333`, \
4.164048470752216`, -0.24613360705146153`, -0.23128388453816298`, \
-0.24256152076309206`, -0.24470029789805786`, -0.233699404800705`, \
-0.23875807878387625`, -0.24083117484470623`, -0.23790140125607506`, \
-0.23726307601866492`, 4.1696433402233595`, -0.2434823142394475`, \
-0.24656246589934766`, -0.23506039948050653`, -0.24886829526580376`, \
-0.24187236199395046`, -0.23071875118423746`, -0.23399491868824826`, \
-0.24539308496163678`, -0.24826163223751585`, -0.2338140492277992`, \
-0.24596991428729467`, -0.23983631267816288`, -0.2437311697977514`, \
-0.2398678918105915`], List[1.331483836716651`, -0.7588259615701164`, \
1.3307665769539059`, 1.323450853051972`, 1.3210902061589898`, \
1.31882156599306`, 1.3249490625088`, -0.761568327044109`, \
-0.7587503620280643`, -0.746493085195951`, -0.7653447905249`, \
-0.7658188700138482`, 1.3235129628946662`, -0.7480318118463518`, \
-0.7606166768085195`, -0.749881239519595`, -0.757728523624778`, \
-0.7625767877419208`, 1.316532443052766`, 1.3243160806987255`, \
-0.7598800478484241`, -0.7615155032461786`, -0.7566367490300078`, \
-0.7505286882706709`, -0.749290557655599`, 1.32152890924293`, \
1.3260542362799599`, 1.318545498248821`, -0.7467822473999687`, \
-0.7645721041859453`, 1.3180087732893615`, 1.3188715873223142`, \
-0.7612217889590437`, 1.3289667356410029`, -0.7615926445755085`, \
-0.7583168049508042`, -0.752846377986021`, 1.3325816639789676`, \
-0.7656773863102727`, 1.322256762539074`, -0.7466145413632624`, \
-0.7506687771660145`, 1.312890154341286`, -0.7474462291468076`, \
1.321528419954351`, 1.329519976487755`, -0.7470907734531829`, \
-0.7510857788670695`, -0.7566544969158666`, -0.7494162571174353`, \
-0.7607466183943064`, -0.7587486417641003`, -0.75252652434734`, \
-0.7502015179750567`, -0.7515175575953792`, 1.3167027728699146`, \
-0.7486774499651038`, 1.3219342671629248`, 1.3228061857273006`, \
-0.7506455294912335`, -0.7620825491885985`, -0.7548506052300107`, \
-0.7587770989813906`, -0.7644783685378358`, 1.3187911586337517`, \
-0.749016606879149`, -0.7497929185245917`, -0.7634061044819297`, \
-0.7485068729532679`, -0.7531886996987965`, -0.7649684069954376`, \
-0.7473941284218825`, -0.7554044016517277`, 1.3193590941260775`, \
-0.7626763437406879`, 1.3246960496254059`, -0.7643324573814233`, \
1.3280759567619862`, 1.3318291159238151`, -0.7651245259088958`, \
-0.7556398745805165`, -0.749377225837014`, -0.7625779071900098`, \
-0.7574120367212642`, 1.3133250966402688`, -0.7575011246860134`, \
-0.7574973328456482`, -0.7529460631093281`, -0.757172808095336`, \
1.3219708971948203`, -0.7489372085240008`, -0.7650471023007759`, \
-0.7562257419553106`, 1.3235060988927592`, -0.7506467885153306`, \
-0.7519122284429166`, -0.7573970567238872`, -0.7486722626373867`, \
1.3208720203906024`, 1.3288047557997125`, 1.31967623861839`, \
1.3135668245314833`, 1.322003403507057`, -0.7602046367542483`, \
-0.748764272620435`, 1.3256964608577495`, -0.7541525764031553`, \
1.3279271890282929`, 1.3142206989105745`, 1.3272333189469703`], \
List[0.5899891847334119`, 0.6000800837220294`, 0.5887667184267719`, \
-1.6756436853366292`, 0.6042220662576472`, -1.674801158771588`, \
0.5912792503046723`, 0.5986738059924381`, 0.6029019587964064`, \
0.5918733015759229`, 0.6018006260778349`, 0.5997129973037374`, \
-1.6729787611320994`, 0.5905438037575999`, 0.5976281251710036`, \
0.5912077456851095`, 0.5887514915254763`, -1.6727842325378541`, \
0.6060695421888863`, 0.5910797098417349`, 0.5980698003579785`, \
0.603562150219362`, 0.5910403518458112`, -1.6682082498516844`, \
0.5930027665374794`, 0.6028174679400491`, -1.6687661592351508`, \
0.5993511445996463`, 0.5950234710674727`, 0.6065500904052431`, \
-1.66892797833318`, -1.6741504875789448`, 0.5995258866691376`, \
-1.6797102913137851`, 0.5926387338010276`, 0.5992513035610775`, \
0.6055172962075079`, -1.6752922553327099`, 0.603197517663344`, \
-1.6722930737775001`, 0.6057476254349592`, -1.6710749755304222`, \
-1.665166602423536`, 0.5965602379971222`, -1.6646261812159338`, \
0.5970244953261998`, 0.5888133559993007`, 0.5961959614605625`, \
0.5909761057016713`, 0.6001790475519507`, 0.6043589837162288`, \
-1.675557330221715`, 0.5975640473091526`, -1.6783562415827924`, \
0.5899451707984626`, -1.6762879669623605`, 0.5954068846065739`, \
0.5919892014172957`, -1.6709036032212012`, 0.5950082778634483`, \
0.6042683109024533`, -1.6790432015775238`, -1.6778773757061052`, \
0.5961356790441568`, -1.667683717039132`, 0.6075701603956026`, \
0.6011821729258008`, 0.600544175581891`, 0.5910441447857384`, \
0.6027776345794339`, 0.5897667757531457`, 0.5948379592916843`, \
0.5965256492249061`, 0.5938471386013114`, 0.6070549179386331`, \
0.6008046599587341`, 0.5937594410161318`, -1.676689116325073`, \
-1.670957663968555`, 0.591474655786835`, 0.5986557660398225`, \
0.5998550714446659`, 0.5889513467489712`, 0.5983170213926532`, \
-1.6645781704425253`, 0.601951167541843`, 0.5973075408081492`, \
-1.6721480674036036`, 0.5989109746788766`, -1.6710366616255128`, \
0.595082779988986`, 0.6071737924319578`, 0.6069796791262848`, \
0.6055903589540235`, 0.5891585728764469`, 0.6021751225858983`, \
0.5957562936233123`, 0.5938158877574935`, 0.5942923850567586`, \
0.6059535950011277`, -1.665315859132633`, 0.5937488312978423`, \
0.5992513305126215`, 0.600168536197819`, 0.5988887426367537`, \
-1.667848167401634`, 0.603825863762012`, -1.6614004163603622`, \
0.6000973661148694`, 0.6039407548867235`], List[0.5324814184594087`, \
-1.8376533007486686`, 0.5344235210355072`, 0.5346828570086846`, \
0.5437381135471738`, -1.8514089727268652`, 0.5406696715826335`, \
0.5404184078350341`, 0.5521120610976558`, 0.5464279399780576`, \
0.5517563199153864`, 0.5363844203251673`, -1.8434178532663`, \
0.5383983760453672`, 0.5394979282187977`, 0.5504166258780602`, \
0.5467741801069729`, 0.5372844590402517`, 0.5447413159653088`, \
0.5337120705121184`, 0.5405694057944096`, 0.5325885416864862`, \
0.5403613893699474`, 0.5338257959229258`, 0.5519423306398877`, \
0.5430563216475426`, -1.853700929832941`, 0.5396935041373497`, \
0.5375313509033913`, -1.8491098340077314`, -1.8416567892143527`, \
-1.8381345028523999`, 0.5491075373340014`, -1.8448947803683977`, \
0.5428734663276897`, -1.8391833476094526`, 0.5476491551562487`, \
0.5471038088592238`, 0.5518149505537739`, 0.5452794209487639`, \
0.5331911142115143`, 0.540793188653908`, -1.8395191515974727`, \
-1.8344885897796828`, -1.8450258612939772`, 0.5510949866399036`, \
-1.8429566955886387`, -1.8479434814025486`, 0.5470537561407497`, \
0.5512711637758164`, 0.5376711317442706`, 0.5506200464317251`, \
0.5510214706251053`, 0.5363948420924496`, -1.8530208021514902`, \
0.5393555478542212`, 0.5366608445393527`, 0.5364460350170642`, \
0.5445130015104822`, 0.5357814796437812`, 0.5343431351623539`, \
0.5442993012427506`, 0.5340926829444358`, 0.5404789620407521`, \
-1.8467763971019757`, 0.5413856123494459`, 0.5332461150432942`, \
-1.8460061317363012`, 0.5388347106450034`, 0.5390193826574693`, \
0.5395401233603875`, 0.5390920244270971`, 0.5373505693387081`, \
0.5387047890763977`, 0.5450078815487566`, 0.5340414335716629`, \
0.5514316594611121`, -1.8429439098093074`, -1.8440967681162919`, \
0.5388149558361507`, 0.5359859467826341`, 0.552069731398987`, \
0.5471640401958557`, -1.837816967952104`, -1.843490248989947`, \
-1.8456389595094442`, 0.5482000803127018`, 0.5443626629083611`, \
0.5516614507681246`, 0.5434176524235259`, 0.5434526806014384`, \
-1.8415325765334822`, 0.5399307120920962`, 0.5406058199697603`, \
0.54096022603649`, -1.8530861127265599`, 0.5473685411053553`, \
0.5380290412685428`, 0.5512740978958213`, 0.5409246496078584`, \
-1.8459224953106057`, 0.545736093407564`, 0.5379375327408312`, \
0.5420051031510885`, 0.5352707241980359`, 0.5391184174638917`, \
0.55145416564684`, 0.5461176106879839`, 0.5442656673755142`, \
0.5425782898096616`], List[-1.3193175861366664`, 0.7582605881491801`, \
-1.3232286276787086`, 0.7545023062393899`, -1.3172976779895034`, \
-1.3312638243976573`, -1.3250915004994173`, 0.7514096161853405`, \
0.7569574131752953`, 0.7559172010007479`, 0.7575558935374022`, \
0.7571949226483478`, -1.3286836117032632`, 0.7587169457777094`, \
0.7648870010732939`, 0.7613868321226989`, 0.7642064511040866`, \
-1.323609794623595`, -1.3145706070988432`, -1.3160118762854165`, \
0.7576915687797479`, 0.7531397889221002`, 0.7471963798066623`, \
-1.3241866507422304`, 0.7620740767651559`, -1.3249792702135679`, \
-1.3239383469394073`, -1.326900879721334`, 0.7621040119119421`, \
0.7551421095515123`, -1.324047433183017`, -1.3308842512684993`, \
0.7584199083444726`, -1.3294346631740328`, 0.7607762842670835`, \
0.7525261699412358`, 0.7630064600978183`, 0.7606972916092917`, \
0.7541677376711916`, 0.7647709163875109`, 0.7549948173183534`, \
-1.3281464847261235`, -1.3131811317988795`, 0.7537092293707437`, \
-1.3323192329671534`, -1.3301598345616457`, 0.7459635010608314`, \
0.7623211635955102`, 0.7516275580671052`, 0.7558459920343541`, \
0.7472110401267252`, -1.3255874058402355`, 0.7638588638789262`, \
-1.3240023536581482`, 0.7509622345770989`, 0.7598546214471915`, \
0.764359179840045`, -1.3327034009142853`, 0.7520837236097272`, \
0.7482157671592956`, 0.7612200743304105`, -1.3251689108443518`, \
-1.3158859930510423`, 0.7583895354857502`, -1.329530616486407`, \
0.7467612884355799`, 0.7519255081658974`, 0.7651567420434098`, \
0.7595216150338545`, 0.7471147096405425`, 0.7563231508675399`, \
0.7459499633930663`, 0.7645870410103557`, -1.3271572587552378`, \
0.7520906362911353`, -1.3173950433604817`, 0.7545471540167504`, \
-1.3296337367245552`, -1.3227098554621965`, 0.7499276066961045`, \
0.7605076582724921`, 0.7630830841829847`, 0.7650508767190275`, \
0.7631235826571818`, -1.330157971233214`, 0.7604407553096277`, \
0.7589502281594508`, -1.3152715637061652`, 0.7503240398055571`, \
0.7547234076680932`, 0.7571216588535252`, 0.7483688900713598`, \
0.7623357056973826`, -1.316208521640585`, 0.7522990671411128`, \
0.7621814358975031`, 0.758053191028654`, 0.757148762026093`, \
-1.3198737655144712`, -1.3253208264835827`, -1.3306389071806346`, \
-1.328055479689461`, -1.3237102012372284`, 0.7533501347316838`, \
0.7612735885448209`, 0.7460170733484258`, 0.7651989528570162`, \
0.7658809787176882`, -1.316672190960418`, -1.3235955500689789`], \
List[-1.1270726570814236`, 0.8732140665280435`, -1.1271611404671813`, \
-1.132275916551632`, -1.1285196140577476`, -1.1321174907708111`, \
-1.1448197986527666`, 0.8875369103884747`, 0.8757737845320531`, \
0.8729990306921549`, 0.8709733613006096`, 0.8891496943070307`, \
-1.128352832159818`, 0.8825862930123538`, 0.876320026217043`, \
0.8745213863292483`, 0.8739356480893564`, -1.1337808428785376`, \
-1.1281106210446386`, -1.1377230771665627`, 0.8770306329731741`, \
0.8891631138820334`, 0.8847271463257632`, -1.1290560519040618`, \
0.8856487715322794`, -1.1299348381445269`, -1.134083816412599`, \
-1.1389274470135435`, 0.8881829717699331`, 0.8723594076777789`, \
-1.1335070871906983`, -1.1359069167655098`, 0.8838685718031819`, \
-1.1286535975173975`, 0.8863912577315354`, 0.8793247074642967`, \
0.8763271714657145`, -1.1379814172806597`, 0.8754060942154307`, \
-1.1349824853636945`, 0.8820435454682396`, -1.1337181143648098`, \
-1.1339170150451676`, 0.8868543981630358`, -1.1282794451125508`, \
-1.1270204054576098`, 0.8789002545731021`, 0.8821212087660065`, \
0.872693939442382`, 0.8890203058602295`, 0.8826933697263807`, \
-1.1434369064242609`, 0.8883644441688198`, -1.1436858301192752`, \
0.8852892999987753`, -1.1458935567194775`, 0.8798239234239328`, \
-1.1411848496043873`, -1.1349219576186207`, 0.8832011145382195`, \
0.8893623463603154`, -1.1273647700444298`, -1.1355166090226037`, \
0.8825272073132749`, -1.13182071483261`, 0.8775173539422966`, \
0.8743650719241509`, 0.88877514368406`, 0.8824166099237646`, \
0.8855183628281894`, 0.8824862886984838`, 0.877698149099204`, \
0.8875095302067756`, -1.1455535760119644`, 0.8868714266158303`, \
-1.131889764243506`, 0.8765143704010173`, -1.131694045521547`, \
-1.145305225872768`, 0.8757090343462544`, 0.8705509552726979`, \
0.8878284045533567`, 0.8716066873617887`, 0.8888824825535119`, \
-1.133903135811758`, 0.8737516236683622`, 0.8732923961616997`, \
-1.1450811276330826`, 0.8891424541931321`, -1.1288448860582783`, \
0.8774616468778931`, 0.8821253006101221`, 0.8794118804240744`, \
-1.1328147786043086`, 0.8843567111563313`, 0.8827530660778716`, \
0.8747159386778637`, 0.8882174297929809`, -1.1432377747772147`, \
-1.1449435339730174`, -1.1373145083845906`, -1.1430122458790415`, \
-1.1313562443232237`, 0.8837120135568212`, 0.8875242765567395`, \
-1.1439220279842472`, 0.8746636789775546`, -1.1335729401999879`, \
-1.144353118482165`, -1.1286430249456179`], List[0.2703370268807485`, \
0.2741175950123549`, 0.2729917584724036`, -3.5805652232850034`, \
0.27997280989666956`, 0.27782045653382903`, 0.2717862964478438`, \
0.2858347062240294`, 0.27171495652719324`, 0.28925842523915374`, \
0.2774709558063`, 0.2742887978020478`, 0.2880139286188791`, \
0.28925594275114636`, 0.2744585276425853`, 0.28916051593564346`, \
0.28038708873385054`, 0.28311708501043065`, 0.2859470005386067`, \
0.27183414539696926`, 0.27894337513270967`, 0.2821483156460737`, \
0.27145945457022236`, 0.2745670773786327`, 0.28915434225592673`, \
0.2835183599928852`, 0.28964734678132387`, 0.2762586886738444`, \
0.2789180114835337`, 0.2800431956519211`, 0.28247731836976014`, \
0.2816166651531519`, 0.281989663157842`, 0.28553184203224075`, \
0.27814402855879106`, 0.2785097535104216`, 0.2823946613719041`, \
-3.5784509484260085`, 0.2894833891516831`, -3.5764337694670116`, \
0.28129643702031715`, 0.28098389143001024`, 0.2826308361487105`, \
0.28428483871926774`, 0.28404402308521565`, 0.2745639451261002`, \
0.2800930546943173`, 0.27697609856806116`, 0.2887325372231479`, \
0.27407711196392304`, 0.2701918513998089`, 0.2820428511876988`, \
0.28418733837246396`, 0.28541253328391303`, 0.2815127455419862`, \
-3.567510830578196`, 0.2840420262869357`, 0.2750380718682782`, \
-3.5700557622123292`, 0.2773152715921068`, 0.27947813417114276`, \
0.2743567625409821`, 0.2841089446474958`, 0.2853828063367525`, \
0.28983713829843205`, 0.2860564224143355`, 0.27676166531838137`, \
0.2833403462495046`, 0.2837160546570043`, 0.2862402308498877`, \
0.2742544461300246`, 0.2837040496253338`, 0.2751971726539933`, \
0.28273197252147436`, 0.27410948493705056`, 0.28148098868471244`, \
0.2835378627163636`, 0.27301128705506245`, 0.2784398623523506`, \
0.2777704122919121`, 0.28010647970327446`, 0.27075507098483653`, \
0.27997233682710926`, 0.2725553388885622`, 0.2766297285524525`, \
0.2778532581238835`, 0.27626349902927183`, 0.2780719045270163`, \
0.27768785194377754`, -3.5772121939365613`, 0.27115696615818624`, \
0.27455472112064255`, 0.27876179049741573`, 0.2830366634954594`, \
0.2834522975012569`, 0.28013902758331544`, 0.279907398888083`, \
0.27893517035780147`, 0.2889423085552768`, 0.2771495297597807`, \
0.2795285792147877`, 0.2845796749082042`, 0.2872820103981668`, \
0.28075477693730877`, 0.2816962131648008`, -3.570442563339848`, \
0.2803959976169694`, -3.576123722921704`, 0.2833371737972594`, \
0.28859874263887897`]], List[20.26964347623033`, 20.16568301973428`, \
11.259729414309767`, 54.328049824363646`, 45.51130239997299`, \
22.76607895849719`, 11.213286570135834`, 9.668214308271018`, \
16.487447569065345`, 28.65288192764392`, 12.429467406430826`, \
8.358852172031101`, 25.531240879831287`, 8.654957049053941`, \
25.21577605156233`, 17.684774547868884`, 12.93844915530985`, \
11.374208773041813`, 10.957383630673055`, 12.452476353066025`, \
21.98464944453788`, 13.13749184448271`, 9.38892463064994`, \
11.909904457651344`, 9.810033330411823`, 10.968488715993237`, \
72.67384763998278`, 12.50745424561271`, 9.648481497184052`, \
101.86506076426781`, 22.24372678228282`, 25.61868310274508`, \
9.797599419891274`, 22.741911101477594`, 8.818900534166445`, \
19.82112019213737`, 9.854710627820541`, 54.727111093610525`, \
10.809482939069312`, 54.950919655967986`, 8.772782743724107`, \
10.639531210154743`, 22.87122754724652`, 103.07708851766927`, \
51.543223819303456`, 12.876023560166018`, 20.0149533298062`, \
20.694709731293266`, 8.990607688269193`, 11.090793783044862`, \
9.732571339609477`, 11.775308151564573`, 17.1033632843517`, \
10.510107048016575`, 20.49425891192881`, 54.16266677464803`, \
11.667020256058517`, 12.800056077331414`, 54.97504674060312`, \
9.846453069744335`, 9.904436759191329`, 12.259106539666124`, \
10.450161029196426`, 9.77202794209038`, 23.12714872667466`, \
10.08484878200389`, 11.421535597134573`, 102.93112644739251`, \
17.421315858517858`, 13.149587489518439`, 9.32186834230315`, \
16.933318346772566`, 9.233326867427575`, 13.173833188288945`, \
9.585432932711177`, 181.9752965994689`, 9.744663366493551`, \
74.62159547440265`, 23.243534218386372`, 12.858530406844357`, \
16.20306875522862`, 13.85127915203707`, 26.13376843011474`, \
21.572633022125927`, 24.335914505368915`, 103.06791812958349`, \
11.036352496674972`, 11.329702847288099`, 8.805600231977841`, \
53.926513573394466`, 16.456599042945133`, 20.316322355581704`, \
8.674126285841089`, 12.755929942192337`, 10.71055056950031`, \
102.3166745019617`, 13.487450847634493`, 10.669340551110906`, \
11.331786672555815`, 14.486969719685446`, 52.920194323977306`, \
13.07168776250843`, 46.053105922705555`, 8.580216581355604`, \
10.53064937834084`, 54.98639833787192`, 10.352097422462434`, \
55.008505521728154`, 11.206757656846605`, 11.700295665374863`]]]], \
Rule[\\\"NeighborsNumber\\\", 5], Rule[\\\"ClassPriors\\\", \
List[0.3482142857142857`, 0.6517857142857143`]], Rule[\\\"TrainingOutput\\\", \
NumericArray[List[2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, \
2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, \
1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, \
1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, \
2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2], \\\"UnsignedInteger8\\\"]], \
Rule[\\\"DistributionSmoothing\\\", 0.5`], Rule[\\\"Processor\\\", \
MachineLearning`MLProcessor[\\\"FirstValues\\\", \
Association[Rule[\\\"Info\\\", Association[Rule[\\\"Type\\\", \
\\\"NumericalVector\\\"], Rule[\\\"Weight\\\", 57.`]]], Rule[\\\"Key\\\", \
\\\"((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))\\\"], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"StructurePreserving\\\", False], Rule[\\\"Missing\\\", \\\"Allowed\\\
\"]]]], Rule[\\\"Method\\\", \\\"NearestNeighbors\\\"], \
Rule[\\\"PostProcessor\\\", MachineLearning`MLProcessor[\\\"Identity\\\"]], \
Rule[\\\"Options\\\", Association[Rule[\\\"NeighborsNumber\\\", \
Association[Rule[\\\"Value\\\", 5], Rule[\\\"Options\\\", Association[]]]], \
Rule[\\\"DistributionSmoothing\\\", Association[Rule[\\\"Value\\\", 0.5`], \
Rule[\\\"Options\\\", Association[]]]], Rule[\\\"NearestMethod\\\", \
Association[Rule[\\\"Value\\\", \\\"Scan\\\"], Rule[\\\"Options\\\", \
Association[]]]]]]]], Rule[\\\"TrainingInformation\\\", \
Association[Rule[\\\"PanelCell\\\", CellObject[15009]], \
Rule[\\\"TrainingFunction\\\", Classify], Rule[\\\"EMIterations\\\", Missing[\
\\\"KeyAbsent\\\", \\\"EMIterations\\\"]], \
Rule[\\\"ProcessorEntropyShift\\\", 0], Rule[\\\"PreprocessingTime\\\", \
0.3451041`6.989495112442048], Rule[\\\"LossName\\\", \
\\\"MeanCrossEntropy\\\"], Rule[\\\"BestModelInformation\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"14\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]], Rule[\\\"Configurations\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"10\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]], Rule[\\\"MaxTrainingSize\\\", 110], \
Rule[\\\"PreprocessorEvaluationTime\\\", 6.493603515625`2.*^-6], \
Rule[\\\"PreprocessorMemory\\\", 139592], Rule[\\\"InputDimension\\\", 57], \
Rule[\\\"OutputDimension\\\", 1], Rule[\\\"BaselineLogProbability\\\", \
-0.6463341980550162`], Rule[\\\"VariableBudget\\\", True], \
Rule[\\\"CheckpointingInfo\\\", Association[Rule[\\\"Checkpointing\\\", \
False]]], Rule[\\\"UserStop\\\", False], Rule[\\\"NaturalStop\\\", True], \
Rule[\\\"AbortStop\\\", False], Rule[\\\"LastReportingTime\\\", \
3.7985341315433108`17.33219102224969*^9], Rule[\\\"RoundPartitioning\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"2\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]]]], Rule[\\\"AnomalyDetector\\\", None], Rule[\\\"Log\\\", \
Association[Rule[\\\"Example\\\", MachineLearning`MLDataset[Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0.0035287043272917724`]], \
Rule[\\\"ID\\\", 4207867539065565879]]], Rule[\\\"f2\\\", Association[Rule[\\\
\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", \
List[0.03914674950054545`]], Rule[\\\"ID\\\", 7912806483560731870]]], Rule[\\\
\"f3\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0.0012942147020720321`]], \
Rule[\\\"ID\\\", 5965761203752319867]]], Rule[\\\"f4\\\", Association[Rule[\\\
\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", \
List[0.010105931360086088`]], Rule[\\\"ID\\\", 8375076442043603798]]], \
Rule[\\\"f5\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0.9459244001100046`]], \
Rule[\\\"ID\\\", 5205097644896790818]]], Rule[\\\"f6\\\", Association[Rule[\\\
\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", \
List[7]], Rule[\\\"ID\\\", 8854627039274792559]]], Rule[\\\"f7\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 7754319326773593989]]], Rule[\
\\\"f8\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
207921897603130099]]], Rule[\\\"f9\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 6351408238769381299]]], Rule[\\\"f10\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 344037314210118452]]], \
Rule[\\\"f11\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
6348694679514505666]]], Rule[\\\"f12\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 5252554518335886713]]], Rule[\\\"f13\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 5232607783926513996]]], Rule[\
\\\"f14\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
7303145252814796550]]], Rule[\\\"f15\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 90808447787319741]]], Rule[\\\"f16\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", 4503794452530117548]]], Rule[\
\\\"f17\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
2837405527786401704]]], Rule[\\\"f18\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 5636028782333709093]]], Rule[\\\"f19\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 1813727850741997469]]], Rule[\
\\\"f20\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
6709913498313238271]]], Rule[\\\"f21\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 5143675974651387584]]], Rule[\\\"f22\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 8726886491183455211]]], Rule[\
\\\"f23\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
6773162551935999198]]], Rule[\\\"f24\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 8757666475647580641]]], Rule[\\\"f25\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 1532675434602055945]]], Rule[\
\\\"f26\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
6119616733510316592]]], Rule[\\\"f27\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 6164073935886628217]]], Rule[\\\"f28\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 6406882757140105747]]], Rule[\
\\\"f29\\\", Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
9118073656617951559]]], Rule[\\\"f30\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 3471280781960335485]]], Rule[\\\"f31\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 2991007088969221471]]], Rule[\
\\\"f32\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
5991154010994051748]]], Rule[\\\"f33\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 2743158781995461983]]], Rule[\\\"f34\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 8871617069128402592]]], Rule[\
\\\"f35\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
5786645781650657112]]], Rule[\\\"f36\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 4449226368872108253]]], Rule[\\\"f37\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 4497375785093605930]]], Rule[\
\\\"f38\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
8697050170407933116]]], Rule[\\\"f39\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 2443537405650142890]]], Rule[\\\"f40\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 7115060319833467586]]], Rule[\
\\\"f41\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
9063755240371144440]]], Rule[\\\"f42\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 7161298486736233804]]], Rule[\\\"f43\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 1149423396418762070]]], Rule[\
\\\"f44\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
2479344111619379829]]], Rule[\\\"f45\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 3271438083699756007]]], Rule[\\\"f46\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 1605112137093190899]]], Rule[\
\\\"f47\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
8487197176029100879]]], Rule[\\\"f48\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[1]], \
Rule[\\\"ID\\\", 3425091239092551824]]], Rule[\\\"f49\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", 2468318163169225798]]], Rule[\
\\\"f50\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", \
2050087499797751690]]], Rule[\\\"f51\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 3833063325018811940]]], Rule[\\\"f52\\\", \
Association[Rule[\\\"Type\\\", \\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[1]], Rule[\\\"ID\\\", 506134768010460531]]], \
Rule[\\\"f53\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
3692097242707087664]]], Rule[\\\"f54\\\", Association[Rule[\\\"Type\\\", \
\\\"Numerical\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 4732741083377867666]]], Rule[\\\"f55\\\", \
Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", 3623758047278371766]]], Rule[\
\\\"f56\\\", Association[Rule[\\\"Type\\\", \\\"Boolean\\\"], Rule[\\\"Weight\
\\\", 1], Rule[\\\"Values\\\", List[0]], Rule[\\\"ID\\\", \
7432134570476923960]]], Rule[\\\"f57\\\", Association[Rule[\\\"Type\\\", \
\\\"Boolean\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"Values\\\", List[0]], \
Rule[\\\"ID\\\", 3923686153078021548]]]], \
Association[Rule[\\\"RawExample\\\", False], Rule[\\\"ExampleNumber\\\", 1], \
Rule[\\\"ExampleWeights\\\", 1], Rule[\\\"LogDensityRatios\\\", 0]]]], \
Rule[\\\"TrainingTime\\\", 1.1843802`], Rule[\\\"MaxTrainingMemory\\\", \
1135144], Rule[\\\"DataMemory\\\", 965888], Rule[\\\"FunctionMemory\\\", \
444424], Rule[\\\"LanguageVersion\\\", List[12.1`, 0]], Rule[\\\"Date\\\", \
DateObject[List[2020, 5, 15, 12, 22, 11.73599`8.822094689938952], \\\"Instant\
\\\", \\\"Gregorian\\\", -4.`]], Rule[\\\"ProcessorCount\\\", 2], \
Rule[\\\"ProcessorType\\\", \\\"x86-64\\\"], Rule[\\\"OperatingSystem\\\", \\\
\"Windows\\\"], Rule[\\\"SystemWordLength\\\", 64], Rule[\\\"Evaluations\\\", \
List[]]]]]], Rule[Selectable, False], Rule[Editable, False], \
Rule[SelectWithContents, True]], \\\"[\\\", RowBox[{\\\"genDataMACCsNCCN\\\", \
\\\",\\\", \\\"\\\\\\\"Probabilities\\\\\\\"\\\"}], \\\"]\\\"}]\\) is not a \
valid Association or a list of rules.\"", 2, 229, 7, 16866382083633017803, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485756596756`*^9},
 CellLabel->
  "During evaluation of \
In[229]:=",ExpressionUUID->"3f9249a2-a6c5-4575-95f8-0b38f37ef3eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"classErAllMaccsProbsValuesT", "=", 
   RowBox[{"Part", "[", 
    RowBox[{
     RowBox[{"classErAllMaccsProbsValues", "//", "Flatten"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"2", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"classErAllMaccsProbsValues", "//", "Flatten"}], "]"}], ",", 
       "2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.797777503638109*^9, 3.797777510028022*^9}},
 CellLabel->
  "In[230]:=",ExpressionUUID->"064220ca-496b-4253-a9d0-388b3eb3c0d7"],

Cell[BoxData[
 TemplateBox[{
  "Values", "argt", 
   "\"\\!\\(\\*RowBox[{\\\"Values\\\"}]\\) called with \\!\\(\\*RowBox[{\\\"0\
\\\"}]\\) arguments; \\!\\(\\*RowBox[{\\\"1\\\"}]\\) or \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\) arguments are expected.\"", 2, 230, 8, 
   16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548575708545*^9},
 CellLabel->
  "During evaluation of \
In[230]:=",ExpressionUUID->"aacde2f0-63b1-46b2-b28f-94fe6c84cae8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"classErAllMaccsEntropies", "=", 
   RowBox[{"Abs", "[", 
    RowBox[{
     RowBox[{"classErAllMaccsProbsValuesT", "*", 
      RowBox[{"Log", "[", 
       RowBox[{"2", ",", "classErAllMaccsProbsValuesT"}], "]"}]}], "+", 
     RowBox[{"classErAllMaccsProbsValuesF", "*", 
      RowBox[{"Log", "[", 
       RowBox[{"2", ",", "classErAllMaccsProbsValuesF"}], "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7977775262735424`*^9, 3.797777536521186*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"1bceb1dd-67a3-48a2-8dcc-e45e7031edd3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"softMaxclassErAllMaccs", "=", 
   RowBox[{
    RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classErAllMaccsEntropies", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.79777755058175*^9, 3.797777559938743*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"7bc9dc31-b074-4f45-8589-f1e38b0df2be"],

Cell[BoxData[
 TemplateBox[{
  "SoftmaxLayer", "invindata2", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array\\\\\\\"\\\"}]\\) (or a list of \
these).\"", 2, 232, 9, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548575790325*^9},
 CellLabel->
  "During evaluation of \
In[232]:=",ExpressionUUID->"11e324bb-68a0-4b71-8c01-c2dfef903dc6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"classErAllMaccsEntropiesScaled", "=", 
   RowBox[{"Rescale", "[", 
    RowBox[{"classErAllMaccsEntropies", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Max", "[", "classErAllMaccsEntropies", "]"}], ",", 
       RowBox[{"Min", "[", "classErAllMaccsEntropies", "]"}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.797777572998291*^9, 3.797777581121241*^9}},
 CellLabel->
  "In[233]:=",ExpressionUUID->"556c297a-1467-41fe-a792-c5b99f7d9a96"]
}, Closed]],

Cell[CellGroupData[{

Cell["Do Sampling ", "Subsection",
 CellChangeTimes->{{3.7977913209215913`*^9, 
  3.7977913228027563`*^9}},ExpressionUUID->"7a244652-b68f-4ed0-9cec-\
ce305fd7f724"],

Cell[CellGroupData[{

Cell["First Attempt", "Subsubsection",
 CellChangeTimes->{{3.797791282583438*^9, 
  3.7977912837848206`*^9}},ExpressionUUID->"af21b2fa-2e1a-4c1c-b69c-\
31a9a1233dc7"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"this", " ", "is", " ", "likely", " ", "outdated", " ", "and", " ", 
   RowBox[{"bad", ".", " ", "New"}], " ", "classifiers", " ", "take", " ", 
   "data", " ", "inputs", " ", "as", " ", "association", " ", "and", " ", 
   "it", " ", "makes", " ", "everything", " ", "easier"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7977789515853205`*^9, 3.79777898257321*^9}},
 CellLabel->
  "In[234]:=",ExpressionUUID->"b28381de-d5c4-4a79-aa50-53a5f8a65df0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lanthElem", "=", "\"\<Lanthanum\>\""}], ";"}]], "Input",
 CellLabel->
  "In[235]:=",ExpressionUUID->"b613efed-41d2-4443-b02d-18049d5e35a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hydrateStoich", "=", "6"}], ";"}]], "Input",
 CellChangeTimes->{{3.797729539977242*^9, 3.7977295442887*^9}, 
   3.797777599768401*^9},
 CellLabel->
  "In[236]:=",ExpressionUUID->"64ac2883-8038-473c-98d9-9a2e000a279d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"choiceDataFracs", "=", "\[IndentingNewLine]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"choice", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"softMaxclassErAllMaccs", "\[Rule]", "genDataMACCsML"}], ",", 
        "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Dataset", "[", "\[IndentingNewLine]", 
     RowBox[{"Join", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AssociationThread", "[", 
        RowBox[{"\"\<Ln Mole Fraction\>\"", "\[Rule]", 
         RowBox[{"choice", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"\"\<H2SeO4 Mole Fraction\>\"", "\[Rule]", 
         RowBox[{"choice", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"\"\<Sodium Oxalate Mole Fraction\>\"", "\[Rule]", 
         RowBox[{"choice", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"\"\<Amine Mole Fraction\>\"", "\[Rule]", 
         RowBox[{"choice", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"\"\<H2O Mole Fraction\>\"", "\[Rule]", 
         RowBox[{"choice", "[", 
          RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"\"\<pH\>\"", "\[Rule]", 
         RowBox[{"choice", "[", 
          RowBox[{"[", "6", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"\"\<PC1\>\"", "\[Rule]", 
         RowBox[{"choice", "[", 
          RowBox[{"[", "7", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"\"\<PC2\>\"", "\[Rule]", 
         RowBox[{"choice", "[", 
          RowBox[{"[", "8", "]"}], "]"}]}], "]"}]}], "]"}], "]"}]}], 
   ")"}]}], "\n", 
 RowBox[{
  RowBox[{"choiceIndex", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Position", "[", 
     RowBox[{"genDataMACCsML", ",", 
      RowBox[{"Normal", "[", 
       RowBox[{"Values", "[", "choiceDataFracs", "]"}], "]"}]}], "]"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{"choiceDataAll", "=", 
  RowBox[{"genData2D", "[", "choiceIndex", "]"}]}], "\n", 
 RowBox[{"chosenAmine", "=", 
  RowBox[{"Molecule", "[", 
   RowBox[{
    RowBox[{"Keys", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{
        RowBox[{"Query", "[", 
         RowBox[{"Position", "[", 
          RowBox[{"lookupProperty", ",", 
           RowBox[{"choice", "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"7", ",", "8"}], "}"}], "]"}], "]"}]}], "]"}], "]"}], 
        "@", "lookupProperty"}], "]"}], "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{"MoleculePlot", "[", "chosenAmine", "]"}], "\n", 
 RowBox[{"Dataset", "[", "\[IndentingNewLine]", 
  RowBox[{"Join", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"AssociationThread", "[", 
     RowBox[{"\"\<Ln ID\>\"", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"ElementData", "[", 
         RowBox[{"lanthElem", ",", "\"\<Abbreviation\>\""}], "]"}], "<>", 
        "\"\<Cl3.\>\"", "<>", 
        RowBox[{"ToString", "[", "hydrateStoich", "]"}], "<>", 
        "\"\<H2O\>\""}], ")"}]}], "]"}], ",", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"\"\<Ln Mass/g\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Normal", "[", 
           RowBox[{"Values", "[", 
            RowBox[{"choiceDataAll", "[", 
             RowBox[{"All", ",", 
              RowBox[{"{", "\"\<Ln Moles\>\"", "}"}]}], "]"}], "]"}], "]"}], 
          "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ")"}], "*", 
       RowBox[{"QuantityMagnitude", "[", 
        RowBox[{"MoleculeValue", "[", 
         RowBox[{
          RowBox[{
          "Molecule", "[", "\"\<Lanthanum trichloride hexahydrate\>\"", "]"}],
           ",", "\"\<MolecularMass\>\""}], "]"}], "]"}]}]}], "]"}], ",", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"\"\<H2SeO4 (40 wt %)/g\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"Normal", "[", 
             RowBox[{"Values", "[", 
              RowBox[{"choiceDataAll", "[", 
               RowBox[{"All", ",", 
                RowBox[{"{", "\"\<H2SeO4 Moles\>\"", "}"}]}], "]"}], "]"}], 
             "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}], "*", 
         RowBox[{"QuantityMagnitude", "[", 
          RowBox[{"ChemicalData", "[", 
           RowBox[{"\"\<SelenicAcid\>\"", ",", "\"\<MolecularMass\>\""}], 
           "]"}], "]"}]}], ")"}], "/", "0.4"}]}], "]"}], ",", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"\"\<Na2C2O4/g\>\"", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"Normal", "[", 
            RowBox[{"Values", "[", 
             RowBox[{"choiceDataAll", "[", 
              RowBox[{"All", ",", 
               RowBox[{"{", "\"\<Na2C2O4 Moles\>\"", "}"}]}], "]"}], "]"}], 
            "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ")"}], "*", 
        RowBox[{"QuantityMagnitude", "[", 
         RowBox[{"ChemicalData", "[", 
          RowBox[{"\"\<SodiumOxalate\>\"", ",", "\"\<MolecularMass\>\""}], 
          "]"}], "]"}]}], ")"}]}], "]"}], ",", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"\"\<Amine/g\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Normal", "[", 
           RowBox[{"Values", "[", 
            RowBox[{"choiceDataAll", "[", 
             RowBox[{"All", ",", 
              RowBox[{"{", "\"\<Amine Moles\>\"", "}"}]}], "]"}], "]"}], 
           "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ")"}], "*", 
       RowBox[{"QuantityMagnitude", "[", 
        RowBox[{"chosenAmine", "[", "\"\<MolecularMass\>\"", "]"}], "]"}]}]}],
      "]"}], ",", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"\"\<SMILES\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{"\"\<Cl.\>\"", "\[Rule]", "\"\<\>\""}], "]"}], "[", 
       RowBox[{"chosenAmine", "[", "\"\<SMILES\>\"", "]"}], "]"}]}], "]"}], 
    ",", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"\"\<H2O/g\>\"", "\[Rule]", 
      RowBox[{"QuantityMagnitude", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Normal", "[", 
           RowBox[{"Values", "[", 
            RowBox[{"choiceDataAll", "[", 
             RowBox[{"All", ",", 
              RowBox[{"{", "\"\<Water Moles\>\"", "}"}]}], "]"}], "]"}], 
           "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "*", 
        RowBox[{"ChemicalData", "[", 
         RowBox[{"\"\<Water\>\"", ",", "\"\<MolecularMass\>\""}], "]"}]}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"\"\<pH\>\"", "\[Rule]", 
      RowBox[{"choice", "[", 
       RowBox[{"[", "6", "]"}], "]"}]}], "]"}]}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.79431505644915*^9, 3.7943151039031134`*^9}, {
  3.797729533794099*^9, 3.7977295358718977`*^9}, {3.797729578085816*^9, 
  3.797729579131713*^9}, {3.7977776067428417`*^9, 3.797777634247132*^9}},
 CellLabel->
  "In[237]:=",ExpressionUUID->"d8d6ae87-1f73-436e-ab0c-fd34f51b89d2"],

Cell[BoxData[
 TemplateBox[{
  "RandomSample", "lrwl", 
   "\"The set of items to sample from, \\!\\(\\*RowBox[{\\\"$Failed\\\", \\\"\
\[Rule]\\\", \\\"genDataMACCsML\\\"}]\\), should be a non-empty list or a \
rule weights -> choices.\"", 2, 237, 10, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548575906021*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"b3b8688e-3d05-4fd9-9d09-7be7a02d9caa"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"3\\\"}]\\) of \
\\!\\(\\*RowBox[{\\\"RandomSample\\\", \\\"[\\\", RowBox[{RowBox[{\\\"$Failed\
\\\", \\\"\[Rule]\\\", \\\"genDataMACCsML\\\"}], \\\",\\\", \\\"1\\\"}], \
\\\"]\\\"}]\\) does not exist.\"", 2, 237, 11, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548575908016*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"40379208-6d58-4e59-acb0-80c5841a87af"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"4\\\"}]\\) of \
\\!\\(\\*RowBox[{\\\"RandomSample\\\", \\\"[\\\", RowBox[{RowBox[{\\\"$Failed\
\\\", \\\"\[Rule]\\\", \\\"genDataMACCsML\\\"}], \\\",\\\", \\\"1\\\"}], \
\\\"]\\\"}]\\) does not exist.\"", 2, 237, 12, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485759289618`*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"4e6ce171-2bc4-4ec2-9e1f-9a85a5c5521e"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"5\\\"}]\\) of \
\\!\\(\\*RowBox[{\\\"RandomSample\\\", \\\"[\\\", RowBox[{RowBox[{\\\"$Failed\
\\\", \\\"\[Rule]\\\", \\\"genDataMACCsML\\\"}], \\\",\\\", \\\"1\\\"}], \
\\\"]\\\"}]\\) does not exist.\"", 2, 237, 13, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548575939931*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"6175f623-be5a-4077-82b9-5c41187716f8"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \
\\\"partw\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 237, 14, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485759528985`*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"5fdb6b07-4fe6-4f90-a75b-d714e6611c64"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "Ln Mole Fraction" -> ($Failed -> $CellContext`genDataMACCsML), 
       "H2SeO4 Mole Fraction" -> 1, "Sodium Oxalate Mole Fraction" -> Part[
         RandomSample[$Failed -> $CellContext`genDataMACCsML, 1], 3], 
       "Amine Mole Fraction" -> Part[
         RandomSample[$Failed -> $CellContext`genDataMACCsML, 1], 4], 
       "H2O Mole Fraction" -> Part[
         RandomSample[$Failed -> $CellContext`genDataMACCsML, 1], 5], "pH" -> 
       Part[
         RandomSample[$Failed -> $CellContext`genDataMACCsML, 1], 6], "PC1" -> 
       Part[
         RandomSample[$Failed -> $CellContext`genDataMACCsML, 1], 7], "PC2" -> 
       Part[
         RandomSample[$Failed -> $CellContext`genDataMACCsML, 1], 8]], 
     "InitialShape" -> TypeSystem`PackageScope`DocumentShape[
       Association[{"Ln Mole Fraction"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"H2SeO4 Mole Fraction"} -> 
        TypeSystem`PackageScope`AtomShape[34], {
         "Sodium Oxalate Mole Fraction"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Amine Mole Fraction"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"H2O Mole Fraction"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"pH"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"PC1"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"PC2"} -> 
        TypeSystem`PackageScope`UnknownShape[False]], 1], "InitialType" -> 
     TypeSystem`Struct[{
       "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
        "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
        "H2O Mole Fraction", "pH", "PC1", "PC2"}, {TypeSystem`AnyType, 
        TypeSystem`Atom[Integer], TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`AnyType}], "Meta" -> Association["ID" -> 150723488329504], 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[
       Association[{"Ln Mole Fraction"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"H2SeO4 Mole Fraction"} -> 
        TypeSystem`PackageScope`AtomShape[34], {
         "Sodium Oxalate Mole Fraction"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Amine Mole Fraction"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"H2O Mole Fraction"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"pH"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"PC1"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"PC2"} -> 
        TypeSystem`PackageScope`UnknownShape[False]], 1], "Type" -> 
     TypeSystem`Struct[{
       "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
        "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
        "H2O Mole Fraction", "pH", "PC1", "PC2"}, {TypeSystem`AnyType, 
        TypeSystem`Atom[Integer], TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`AnyType}], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 10, "DataRowCount" -> 
     8, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Ln Mole Fraction", 
                  Style[
                  "Ln Mole Fraction", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Ln Mole Fraction"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Ln Mole Fraction"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"$Failed", "\[Rule]", "genDataMACCsML"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Ln Mole Fraction"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["H2SeO4 Mole Fraction", 
                  Style[
                  "H2SeO4 Mole Fraction", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["H2SeO4 Mole Fraction"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["H2SeO4 Mole Fraction"]}, "ColumnHeader", False], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["H2SeO4 Mole Fraction"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Sodium Oxalate Mole Fraction", 
                  Style[
                  "Sodium Oxalate Mole Fraction", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Sodium Oxalate Mole Fraction"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Sodium Oxalate Mole Fraction"]}, "ColumnHeader", False],
                "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"$Failed", "\[Rule]", "genDataMACCsML"}], ",", 
                    "1"}], "]"}], "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}], FontFamily -> "Source Code Pro",
                  ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Sodium Oxalate Mole Fraction"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Amine Mole Fraction", 
                  Style[
                  "Amine Mole Fraction", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Amine Mole Fraction"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amine Mole Fraction"]}, "ColumnHeader", False], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"$Failed", "\[Rule]", "genDataMACCsML"}], ",", 
                    "1"}], "]"}], "\[LeftDoubleBracket]", "4", 
                   "\[RightDoubleBracket]"}], FontFamily -> "Source Code Pro",
                  ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amine Mole Fraction"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["H2O Mole Fraction", 
                  Style[
                  "H2O Mole Fraction", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["H2O Mole Fraction"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["H2O Mole Fraction"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"$Failed", "\[Rule]", "genDataMACCsML"}], ",", 
                    "1"}], "]"}], "\[LeftDoubleBracket]", "5", 
                   "\[RightDoubleBracket]"}], FontFamily -> "Source Code Pro",
                  ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["H2O Mole Fraction"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["pH", 
                  Style[
                  "pH", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["pH"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"$Failed", "\[Rule]", "genDataMACCsML"}], ",", 
                    "1"}], "]"}], "\[LeftDoubleBracket]", "6", 
                   "\[RightDoubleBracket]"}], FontFamily -> "Source Code Pro",
                  ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PC1", 
                  Style[
                  "PC1", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["PC1"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PC1"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"$Failed", "\[Rule]", "genDataMACCsML"}], ",", 
                    "1"}], "]"}], "\[LeftDoubleBracket]", "7", 
                   "\[RightDoubleBracket]"}], FontFamily -> "Source Code Pro",
                  ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PC1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PC2", 
                  Style[
                  "PC2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["PC2"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PC2"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"$Failed", "\[Rule]", "genDataMACCsML"}], ",", 
                    "1"}], "]"}], "\[LeftDoubleBracket]", "8", 
                   "\[RightDoubleBracket]"}], FontFamily -> "Source Code Pro",
                  ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PC2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{394., {87.4, 91.6}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{394., {87.4, 91.6}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.798548575988104*^9},
 CellLabel->
  "Out[237]=",ExpressionUUID->"5eaecb0e-ce93-4b5a-8906-db9cd2dc80cc"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> {}, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 0, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Vector[TypeSystem`UnknownType, 0], "Meta" -> 
     Association["ID" -> 150732078264106], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 0, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Vector[TypeSystem`UnknownType, 0], "Path" -> {}, 
     "BaseIndices" -> {}, "DisplayedRowCount" -> 0, "DisplayedColumnCount" -> 
     1, "DataRowCount" -> 0, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Spacer[10], 
                  Style[
                   Spacer[10], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{}, 
                  4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{}, "Item",
                 False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5], 8}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{30., {19.4, 23.6}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{30., {19.4, 23.6}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.798548586302746*^9},
 CellLabel->
  "Out[239]=",ExpressionUUID->"6ce0f5dd-af2d-4528-bf27-8c24ddab14dd"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"7\\\", \\\",\\\", \
\\\"8\\\"}], \\\"}\\\"}]\\) of \\!\\(\\*RowBox[{\\\"RandomSample\\\", \\\"[\\\
\", RowBox[{RowBox[{\\\"$Failed\\\", \\\"\[Rule]\\\", \
\\\"genDataMACCsML\\\"}], \\\",\\\", \\\"1\\\"}], \\\"]\\\"}]\\) does not \
exist.\"", 2, 240, 23, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.79854858642593*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"17b73a5c-fa37-400b-9bc0-11025f221b09"],

Cell[BoxData[
 TemplateBox[{
  "Flatten", "normal", 
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"Flatten\\\", \
\\\"[\\\", RowBox[{\\\"Missing\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"PartInvalid\\\\\\\"\\\", \\\",\\\", RowBox[{\\\"{\\\", \\\
\"}\\\"}]}], \\\"]\\\"}], \\\"]\\\"}]\\).\"", 2, 240, 24, 
   16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485864448805`*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"de63c400-c289-4870-b6f0-435a1a9cfdc9"],

Cell[BoxData[
 TemplateBox[{
  "Keys", "invrl", 
   "\"The argument \\!\\(\\*RowBox[{\\\"Flatten\\\", \\\"[\\\", \
RowBox[{\\\"Missing\\\", \\\"[\\\", RowBox[{\\\"\\\\\\\"PartInvalid\\\\\\\"\\\
\", \\\",\\\", RowBox[{\\\"{\\\", \\\"}\\\"}]}], \\\"]\\\"}], \\\"]\\\"}]\\) \
is not a valid Association or a list of rules.\"", 2, 240, 25, 
   16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.79854858645984*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"fe99a5e5-2aab-4c50-9360-a50990c0e1ec"],

Cell[BoxData[
 RowBox[{"Molecule", "[", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"PartInvalid\"\>", ",", 
     RowBox[{"{", "}"}]}], "]"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.798548586472805*^9},
 CellLabel->
  "Out[240]=",ExpressionUUID->"30e0c8e8-02ba-44ed-8935-de7826b0733a"],

Cell[BoxData[
 TemplateBox[{
  "MoleculePlot", "mol", 
   "\"Argument \\!\\(\\*RowBox[{\\\"Molecule\\\", \\\"[\\\", \
RowBox[{\\\"Flatten\\\", \\\"[\\\", RowBox[{\\\"Missing\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"PartInvalid\\\\\\\"\\\", \\\",\\\", RowBox[{\\\"{\\\", \\\
\"}\\\"}]}], \\\"]\\\"}], \\\"]\\\"}], \\\"]\\\"}]\\) is not a valid \
molecule.\"", 2, 241, 26, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548586477792*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"597b44d3-a036-455a-887f-aae4da450a05"],

Cell[BoxData[
 RowBox[{"MoleculePlot", "[", 
  RowBox[{"Molecule", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Missing", "[", 
     RowBox[{"\<\"PartInvalid\"\>", ",", 
      RowBox[{"{", "}"}]}], "]"}], "]"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.7985485865765285`*^9},
 CellLabel->
  "Out[241]=",ExpressionUUID->"ea8bfb60-3f3b-4a7b-a654-b3db7710d6ad"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"1\\\"}]\\) of \\!\\(\\*RowBox[{\\\"{\\\", \
\\\"}\\\"}]\\) does not exist.\"", 2, 242, 27, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548588105045*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"255b723c-c180-45c4-b82d-28ba851fc77f"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"1\\\"}]\\) of \\!\\(\\*RowBox[{\\\"{\\\", \
\\\"}\\\"}]\\) does not exist.\"", 2, 242, 28, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.798548589913616*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"222e5da0-fcf3-4cd8-9596-8cce4a5add0e"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"1\\\"}]\\) of \\!\\(\\*RowBox[{\\\"{\\\", \
\\\"}\\\"}]\\) does not exist.\"", 2, 242, 29, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485968801084`*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"579ac0f1-63a2-4f55-bc45-169f4717e6fc"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \
\\\"partw\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 242, 30, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485968920765`*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"ed78557a-5a6d-433d-999a-23c159d5a5c6"],

Cell[BoxData[
 TemplateBox[{
  "StringReplace", "strse", 
   "\"String or list of strings expected at position \\!\\(\\*RowBox[{\\\"1\\\
\"}]\\) in \\!\\(\\*RowBox[{RowBox[{\\\"StringReplace\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"Cl.\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"\\\\\\\"\\\"}], \\\"]\\\"}], \\\"[\\\", \
RowBox[{RowBox[{\\\"Molecule\\\", \\\"[\\\", RowBox[{\\\"Flatten\\\", \\\"[\\\
\", RowBox[{\\\"Missing\\\", \\\"[\\\", RowBox[{\\\"\\\\\\\"PartInvalid\\\\\\\
\"\\\", \\\",\\\", RowBox[{\\\"{\\\", \\\"}\\\"}]}], \\\"]\\\"}], \
\\\"]\\\"}], \\\"]\\\"}], \\\"[\\\", \\\"\\\\\\\"SMILES\\\\\\\"\\\", \
\\\"]\\\"}], \\\"]\\\"}]\\).\"", 2, 242, 31, 16866382083633017803, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7985485970060916`*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"08908087-f6aa-4b4c-82cd-a1330309cde7"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "Ln ID" -> "LaCl3.6H2O", "Ln Mass/g" -> 353.3549999999998 Part[{}, 1], 
       "H2SeO4 (40 wt %)/g" -> 362.4575 Part[{}, 1], "Na2C2O4/g" -> 
       133.9975385599999999999`5.182523056031305 Part[{}, 1], "Amine/g" -> 
       Part[{}, 1] QuantityMagnitude[
          Molecule[
           Flatten[
            Missing["PartInvalid", {}]]]["MolecularMass"]], "SMILES" -> 
       StringReplace["Cl." -> ""][
         Molecule[
          Flatten[
           Missing["PartInvalid", {}]]]["SMILES"]], "H2O/g" -> 
       QuantityMagnitude[
        Part[{}, 1] Quantity[18.015`4.697417855177584, "AtomicMassUnit"]], 
       "pH" -> Part[
         RandomSample[$Failed -> $CellContext`genDataMACCsML, 1], 6]], 
     "InitialShape" -> TypeSystem`PackageScope`DocumentShape[
       Association[{"Ln ID"} -> 
        TypeSystem`PackageScope`AtomShape[96.00000000000001], {"Ln Mass/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"H2SeO4 (40 wt %)/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Na2C2O4/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Amine/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"SMILES"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"H2O/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"pH"} -> 
        TypeSystem`PackageScope`UnknownShape[False]], 1], "InitialType" -> 
     TypeSystem`Struct[{
       "Ln ID", "Ln Mass/g", "H2SeO4 (40 wt %)/g", "Na2C2O4/g", "Amine/g", 
        "SMILES", "H2O/g", "pH"}, {
        TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`AnyType, TypeSystem`AnyType}], "Meta" -> 
     Association["ID" -> 150779322904373], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`DocumentShape[
       Association[{"Ln ID"} -> 
        TypeSystem`PackageScope`AtomShape[96.00000000000001], {"Ln Mass/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"H2SeO4 (40 wt %)/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Na2C2O4/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Amine/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"SMILES"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"H2O/g"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"pH"} -> 
        TypeSystem`PackageScope`UnknownShape[False]], 1], "Type" -> 
     TypeSystem`Struct[{
       "Ln ID", "Ln Mass/g", "H2SeO4 (40 wt %)/g", "Na2C2O4/g", "Amine/g", 
        "SMILES", "H2O/g", "pH"}, {
        TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`AnyType, TypeSystem`AnyType}], "Path" -> {}, 
     "BaseIndices" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 
     10, "DataRowCount" -> 8, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Ln ID", 
                  Style[
                  "Ln ID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Ln ID"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Ln ID"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["LaCl3.6H2O", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Ln ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{96.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Ln Mass/g", 
                  Style[
                  "Ln Mass/g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Ln Mass/g"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Ln Mass/g"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"353.3549999999998`", " ", 
                   RowBox[{
                    RowBox[{"{", "}"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Ln Mass/g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["H2SeO4 (40 wt %)/g", 
                  Style[
                  "H2SeO4 (40 wt %)/g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["H2SeO4 (40 wt %)/g"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["H2SeO4 (40 wt %)/g"]}, "ColumnHeader", False], "Mouse"],
               ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"362.4575`", " ", 
                   RowBox[{
                    RowBox[{"{", "}"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["H2SeO4 (40 wt %)/g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Na2C2O4/g", 
                  Style[
                  "Na2C2O4/g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Na2C2O4/g"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Na2C2O4/g"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"133.9975385599999999999`5.182523056031305", " ", 
                   RowBox[{
                    RowBox[{"{", "}"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Na2C2O4/g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Amine/g", 
                  Style[
                  "Amine/g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Amine/g"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amine/g"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{
                    RowBox[{"{", "}"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], " ", 
                   RowBox[{"QuantityMagnitude", "[", 
                    RowBox[{
                    RowBox[{"Molecule", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"PartInvalid\"", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "]"}], "]"}], "[", 
                    "\"MolecularMass\"", "]"}], "]"}]}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amine/g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SMILES", 
                  Style[
                  "SMILES", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["SMILES"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SMILES"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"StringReplace", "[", 
                    RowBox[{"\"Cl.\"", "\[Rule]", "\"\""}], "]"}], "[", 
                   RowBox[{
                    RowBox[{"Molecule", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"PartInvalid\"", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "]"}], "]"}], "[", 
                    "\"SMILES\"", "]"}], "]"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SMILES"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["H2O/g", 
                  Style[
                  "H2O/g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["H2O/g"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["H2O/g"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"QuantityMagnitude", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"{", "}"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], " ", 
                    RowBox[{"(", 
                    TemplateBox[{
                    "18.015`4.697417855177584", "\"u\"", 
                    "unified atomic mass units", "\"AtomicMassUnit\""}, 
                    "Quantity", SyntaxForm -> Mod], ")"}]}], "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["H2O/g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["pH", 
                  Style[
                  "pH", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["pH"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"$Failed", "\[Rule]", "genDataMACCsML"}], ",", 
                    "1"}], "]"}], "\[LeftDoubleBracket]", "6", 
                   "\[RightDoubleBracket]"}], FontFamily -> "Source Code Pro",
                  ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{585., {88.9, 93.1}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{585., {88.9, 93.1}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7985485971911173`*^9},
 CellLabel->
  "Out[242]=",ExpressionUUID->"cddeecac-ddae-4630-91ba-d32d26cc3874"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Better Attempt", "Subsubsection",
 CellChangeTimes->{{3.7977913532824736`*^9, 
  3.7977913647923193`*^9}},ExpressionUUID->"66a83075-5508-4ad6-b115-\
14abb9ef6ba2"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"try", " ", "to", " ", "simplify", " ", "things"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7977791005956984`*^9, 3.797779105265805*^9}},
 CellLabel->
  "In[243]:=",ExpressionUUID->"dbbdbac2-3b72-46d2-b87d-64cde60510b5"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "want", " ", "to", " ", "keep", " ", "this", " ", "outside", " ", "of", " ",
    "a", " ", "module", " ", "to", " ", "allow", " ", "for", " ", "variables",
    " ", "to", " ", "be", " ", 
   RowBox[{"utilized", "?"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797791466322353*^9, 3.797791478592635*^9}},
 CellLabel->
  "In[244]:=",ExpressionUUID->"f2846816-8d9d-4dfe-94a5-c89b2faa83e5"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{
  "sampleDataML", ",", "classProbs", ",", "classProbsValues", ",", 
   "classProbsValuesF", ",", "classProbsValuesT", ",", "classEntropies", ",", 
   "softMaxclass", ",", "choice", ",", "probs", ",", "sampleDS"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7977828309245634`*^9, 3.797782850049828*^9}, {
  3.7977923825151615`*^9, 3.797792393571061*^9}},
 CellLabel->
  "In[245]:=",ExpressionUUID->"6b878943-6163-457a-a0ac-db909f21be1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{"classifier_ClassifierFunction", ",", "sampleDS_Dataset"}], "]"}], 
  ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"generate", " ", "sampling", " ", "weights"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sampleDataML", "=", 
     RowBox[{"Normal", "[", 
      RowBox[{"sampleDS", "[", 
       RowBox[{"All", ",", 
        RowBox[{"Keys", "[", 
         RowBox[{"Information", "[", 
          RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}], "]"}]}],
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"classProbs", "=", 
     RowBox[{"classifier", "[", 
      RowBox[{"sampleDataML", ",", "\"\<Probabilities\>\""}], "]"}]}], ";", 
    "\n", 
    RowBox[{"classProbsValues", "=", 
     RowBox[{"classProbs", "//", "Values"}]}], ";", "\n", 
    RowBox[{"classProbsValuesF", "=", 
     RowBox[{"Part", "[", 
      RowBox[{
       RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"1", ",", 
         RowBox[{"Length", "[", 
          RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
        "]"}]}], "]"}]}], ";", "\n", 
    RowBox[{"classProbsValuesT", "=", 
     RowBox[{"Part", "[", 
      RowBox[{
       RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"2", ",", 
         RowBox[{"Length", "[", 
          RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
        "]"}]}], "]"}]}], ";", "\n", 
    RowBox[{"classEntropies", "=", 
     RowBox[{"-", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"classProbsValuesT", "*", 
         RowBox[{"Log", "[", 
          RowBox[{"2", ",", "classProbsValuesT"}], "]"}]}], "+", 
        RowBox[{"classProbsValuesF", "*", 
         RowBox[{"Log", "[", 
          RowBox[{"2", ",", "classProbsValuesF"}], "]"}]}]}], ")"}]}]}], ";", 
    "\n", 
    RowBox[{"softMaxclass", "=", 
     RowBox[{
      RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classEntropies", "]"}]}], ";",
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"choice", "=", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{"RandomSample", "[", 
        RowBox[{
         RowBox[{"softMaxclass", "\[Rule]", 
          RowBox[{"Normal", "[", "sampleDS", "]"}]}], ",", "1"}], "]"}], 
       "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"probs", "=", 
     RowBox[{"classifier", "[", 
      RowBox[{
       RowBox[{"Normal", "[", "choice", "]"}], ",", "\"\<Probabilities\>\""}],
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"out", "=", 
     RowBox[{"{", 
      RowBox[{"choice", ",", "\[IndentingNewLine]", 
       RowBox[{"TableForm", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "}"}], ",", 
         RowBox[{"TableHeadings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"None", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<False Probability\>\"", ",", "\"\<True Probability\>\""}], 
             "}"}]}], "}"}]}]}], "]"}]}], "}"}]}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977825106654043`*^9, 3.7977826808436165`*^9}, {
   3.7977827894281693`*^9, 3.7977828251004467`*^9}, {3.797782926008704*^9, 
   3.7977829519301214`*^9}, {3.7977829828717723`*^9, 
   3.7977830121078405`*^9}, {3.7977835603765044`*^9, 
   3.7977835606773367`*^9}, {3.797783651368411*^9, 3.7977836530448356`*^9}, {
   3.7977837641872344`*^9, 3.7977837648755417`*^9}, {3.7977837950188437`*^9, 
   3.797783897570631*^9}, {3.797791535613364*^9, 3.797791549633828*^9}, {
   3.79779219983659*^9, 3.797792203713299*^9}, {3.7977922359268303`*^9, 
   3.79779224044201*^9}, {3.7977924951041236`*^9, 3.7977924976437025`*^9}, {
   3.797792638685742*^9, 3.797792640412073*^9}, {3.7977929213116045`*^9, 
   3.7977929214426565`*^9}, {3.797798139288637*^9, 3.797798139889425*^9}, {
   3.7977982506559677`*^9, 3.797798258691498*^9}, 3.7978057594612546`*^9, {
   3.7978058169272633`*^9, 3.7978058283093843`*^9}, {3.7978060501541615`*^9, 
   3.797806053188048*^9}, {3.7981686440436573`*^9, 3.7981686452769604`*^9}, {
   3.798548256056916*^9, 3.798548259830098*^9}, {3.798549918231038*^9, 
   3.798549918714188*^9}},
 CellLabel->
  "In[251]:=",ExpressionUUID->"b6f54d90-f608-4e81-8b99-5479d4396239"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{
   "classifier_ClassifierFunction", ",", "amine_String", ",", 
    "descriptor_String"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Which", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"descriptor", "==", "\"\<maccs\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"sampleDS", "=", 
       RowBox[{"genDataMACCsSAssoc", "[", "amine", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"descriptor", "\[Equal]", "\"\<one hot\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"sampleDS", "=", 
       RowBox[{"genDataOheSAssoc", "[", "amine", "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"sampleDataML", "=", 
     RowBox[{"Normal", "[", 
      RowBox[{"sampleDS", "[", 
       RowBox[{"All", ",", 
        RowBox[{"Keys", "[", 
         RowBox[{"Information", "[", 
          RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}], "]"}]}],
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"classProbs", "=", 
     RowBox[{"classifier", "[", 
      RowBox[{"sampleDataML", ",", "\"\<Probabilities\>\""}], "]"}]}], ";", 
    "\n", 
    RowBox[{"classProbsValues", "=", 
     RowBox[{"classProbs", "//", "Values"}]}], ";", "\n", 
    RowBox[{"classProbsValuesF", "=", 
     RowBox[{"Part", "[", 
      RowBox[{
       RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"1", ",", 
         RowBox[{"Length", "[", 
          RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
        "]"}]}], "]"}]}], ";", "\n", 
    RowBox[{"classProbsValuesT", "=", 
     RowBox[{"Part", "[", 
      RowBox[{
       RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"2", ",", 
         RowBox[{"Length", "[", 
          RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
        "]"}]}], "]"}]}], ";", "\n", 
    RowBox[{"classEntropies", "=", 
     RowBox[{"-", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"classProbsValuesT", "*", 
         RowBox[{"Log", "[", 
          RowBox[{"2", ",", "classProbsValuesT"}], "]"}]}], "+", 
        RowBox[{"classProbsValuesF", "*", 
         RowBox[{"Log", "[", 
          RowBox[{"2", ",", "classProbsValuesF"}], "]"}]}]}], ")"}]}]}], ";", 
    "\n", 
    RowBox[{"softMaxclass", "=", 
     RowBox[{
      RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classEntropies", "]"}]}], ";",
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"choice", "=", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{"RandomSample", "[", 
        RowBox[{
         RowBox[{"softMaxclass", "\[Rule]", 
          RowBox[{"Normal", "[", "sampleDS", "]"}]}], ",", "1"}], "]"}], 
       "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"probs", "=", 
     RowBox[{"classifier", "[", 
      RowBox[{
       RowBox[{"Normal", "[", "choice", "]"}], ",", "\"\<Probabilities\>\""}],
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"out", "=", 
     RowBox[{"{", 
      RowBox[{"choice", ",", "\[IndentingNewLine]", 
       RowBox[{"TableForm", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "}"}], ",", 
         RowBox[{"TableHeadings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"None", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<False Probability\>\"", ",", "\"\<True Probability\>\""}], 
             "}"}]}], "}"}]}]}], "]"}]}], "}"}]}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977825106654043`*^9, 3.7977826808436165`*^9}, {
   3.7977827894281693`*^9, 3.7977828251004467`*^9}, {3.797782926008704*^9, 
   3.7977829519301214`*^9}, {3.7977829828717723`*^9, 
   3.7977830121078405`*^9}, {3.7977835603765044`*^9, 
   3.7977835606773367`*^9}, {3.797783651368411*^9, 3.7977836530448356`*^9}, {
   3.7977837641872344`*^9, 3.7977837648755417`*^9}, {3.7977837950188437`*^9, 
   3.797783897570631*^9}, {3.797791535613364*^9, 3.797791549633828*^9}, {
   3.7977916315682526`*^9, 3.797791691174432*^9}, {3.7977918077122416`*^9, 
   3.7977918131341486`*^9}, {3.7977918529721518`*^9, 3.7977918662202396`*^9}, 
   3.797792075301162*^9, 3.797792501973387*^9, {3.797792677783868*^9, 
   3.797792684883569*^9}, {3.7977981417225294`*^9, 3.797798143106787*^9}, {
   3.7977982403341837`*^9, 3.7977982407361126`*^9}, 3.797805753711633*^9, {
   3.7978057850016193`*^9, 3.7978058043967466`*^9}, {3.797806043636631*^9, 
   3.7978060462566233`*^9}, 3.798168586138627*^9, {3.798168636159231*^9, 
   3.798168637251999*^9}, {3.798548263477145*^9, 3.798548267501492*^9}, {
   3.798549912126979*^9, 3.798549912418627*^9}},
 CellLabel->
  "In[250]:=",ExpressionUUID->"d3d61b04-ba22-4a44-bc27-5bccdbcde19f"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"can", " ", "sample", " ", "with", " ", "model"}], ",", " ", 
   "amine", ",", " ", 
   RowBox[{
   "and", " ", "descriptor", " ", "type", " ", "\[IndentingNewLine]", 
    "parses", " ", "which", " ", "sampling", " ", "dataset", " ", "is", " ", 
    "needed", " ", "based", " ", "on", " ", "amine"}]}], " ", 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.7985499538758097`*^9, 
  3.798549982151496*^9}},ExpressionUUID->"b9ff047c-4fca-462a-a794-\
bb7419117c8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sample", "[", 
  RowBox[{"classErAllMaccs", ",", "\"\<NCCN\>\"", ",", "\"\<maccs\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7977982129158344`*^9, 3.7977982297112384`*^9}, {
  3.797798270010337*^9, 3.797798290540391*^9}},
 CellLabel->
  "In[252]:=",ExpressionUUID->"91745d7a-a4a8-40f3-944e-d0870600eaaf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Association["InitialData" -> {
         Association[
         "Ln Mole Fraction" -> 0.0026415842026959488`, "H2SeO4 Mole Fraction" -> 
          0.07297376359947558, "Sodium Oxalate Mole Fraction" -> 
          0.0028066832153644454`, "Amine Mole Fraction" -> 
          0.013373020026148237`, "H2O Mole Fraction" -> 0.9082049489563159, 
          "pH" -> 6, "Lanthanide Moles" -> 0.00016, "40 wt% H2SeO4 Moles" -> 
          0.00442, "Na2C2O4 Moles" -> 0.00017, "Amine Moles" -> 0.00081, 
          "Water Moles" -> 0.05500971412711629, "maccs53" -> 0, "maccs54" -> 
          1, "maccs62" -> 0, "maccs65" -> 0, "maccs74" -> 0, "maccs79" -> 1, 
          "maccs80" -> 0, "maccs82" -> 1, "maccs83" -> 0, "maccs84" -> 1, 
          "maccs85" -> 0, "maccs86" -> 0, "maccs90" -> 0, "maccs91" -> 0, 
          "maccs93" -> 0, "maccs96" -> 0, "maccs98" -> 0, "maccs100" -> 1, 
          "maccs103" -> 0, "maccs104" -> 1, "maccs105" -> 0, "maccs108" -> 0, 
          "maccs111" -> 1, "maccs115" -> 0, "maccs116" -> 0, "maccs118" -> 1, 
          "maccs120" -> 0, "maccs121" -> 0, "maccs122" -> 0, "maccs128" -> 0, 
          "maccs129" -> 0, "maccs131" -> 1, "maccs133" -> 0, "maccs134" -> 0, 
          "maccs137" -> 0, "maccs138" -> 1, "maccs141" -> 0, "maccs145" -> 0, 
          "maccs147" -> 1, "maccs148" -> 0, "maccs149" -> 0, "maccs151" -> 1, 
          "maccs153" -> 1, "maccs155" -> 1, "maccs156" -> 0, "maccs158" -> 1, 
          "maccs160" -> 0, "maccs162" -> 0, "maccs163" -> 0, "maccs165" -> 0, 
          "maccs166" -> 0]}, "InitialShape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[268.80000000000007`], 
             TypeSystem`PackageScope`AtomShape[60]]], 20, 
           DirectedInfinity[1], {All}]], 1, 
         DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Real], 62], 1], "Meta" -> 
       Association["ID" -> 261593774109798], "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[268.80000000000007`], 
             TypeSystem`PackageScope`AtomShape[60]]], 20, 
           DirectedInfinity[1], {All}]], 1, 
         DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
         TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Real], 62], 1], "Path" -> {}, "BaseIndices" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
       1, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Ln Mole Fraction", 
                    Style[
                    "Ln Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Ln Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Ln Mole Fraction"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00264158"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Ln Mole Fraction"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["H2SeO4 Mole Fraction", 
                    Style[
                    "H2SeO4 Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["H2SeO4 Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["H2SeO4 Mole Fraction"]}, "RowHeader", False], 
                 "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0729738"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["H2SeO4 Mole Fraction"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Sodium Oxalate Mole Fraction", 
                    Style[
                    "Sodium Oxalate Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Sodium Oxalate Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Sodium Oxalate Mole Fraction"]}, "RowHeader", False], 
                 "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00280668"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Sodium Oxalate Mole Fraction"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Amine Mole Fraction", 
                    Style[
                    "Amine Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Amine Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Amine Mole Fraction"]}, "RowHeader", False], "Mouse"],
                 ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.013373"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Amine Mole Fraction"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["H2O Mole Fraction", 
                    Style[
                    "H2O Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["H2O Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["H2O Mole Fraction"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.908205"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["H2O Mole Fraction"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["pH", 
                    Style[
                    "pH", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["pH"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["pH"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["pH"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Lanthanide Moles", 
                    Style[
                    "Lanthanide Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Lanthanide Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Lanthanide Moles"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00016"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Lanthanide Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["40 wt% H2SeO4 Moles", 
                    Style[
                    "40 wt% H2SeO4 Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["40 wt% H2SeO4 Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["40 wt% H2SeO4 Moles"]}, "RowHeader", False], "Mouse"],
                 ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00442"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["40 wt% H2SeO4 Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Na2C2O4 Moles", 
                    Style[
                    "Na2C2O4 Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Na2C2O4 Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Na2C2O4 Moles"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00017"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Na2C2O4 Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Amine Moles", 
                    Style[
                    "Amine Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Amine Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Amine Moles"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00081"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Amine Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Water Moles", 
                    Style[
                    "Water Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Water Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Water Moles"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0550097"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Water Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs53", 
                    Style[
                    "maccs53", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs53"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs53"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs53"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs54", 
                    Style[
                    "maccs54", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs54"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs54"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs54"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs62", 
                    Style[
                    "maccs62", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs62"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs62"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs62"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs65", 
                    Style[
                    "maccs65", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs65"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs65"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs65"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs74", 
                    Style[
                    "maccs74", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs74"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs74"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs74"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs79", 
                    Style[
                    "maccs79", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs79"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs79"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs79"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs80", 
                    Style[
                    "maccs80", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs80"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs80"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs80"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs82", 
                    Style[
                    "maccs82", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs82"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs82"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs82"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["maccs83", 
                    Style[
                    "maccs83", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["maccs83"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs83"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["maccs83"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["62 total \:203a ", ""], 
                    Style[
                    Superscript["62 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1}, 
                    2]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                  "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}],
                BaseStyle -> {{
                  RGBColor[
                  0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
                   8}, ContextMenu -> {
                   MenuItem["Show 1 More Row at This Level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                   MenuItem["Show 5 More Rows at This Level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Show 1 Fewer Row at This Level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                   MenuItem["Show 5 Fewer Rows at This Level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
               Background -> GrayLevel[0.98]], SpanFromLeft}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
              "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
            Left, Dividers -> All, FrameStyle -> 
            GrayLevel[0.7490196078431373], 
            BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
           LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
           ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           If[GeneralUtilities`$DebugMode, 
            Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
              TypeSystem`NestedGrid`PackagePrivate`formatState[
              TypeSystem`NestedGrid`PackagePrivate`$state$$, 
               TypeSystem`NestedGrid`PackagePrivate`$path$$, 
               TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
               TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
          TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
           TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
          TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
          TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
        ImageSizeCache->{357., {199.4, 203.6}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{357., {199.4, 203.6}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>
       Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[GridBox[{
       {
        TagBox["\<\"False Probability\"\>",
         HoldForm], 
        TagBox["\<\"True Probability\"\>",
         HoldForm]},
       {"0.21347402597402598`", "0.7865259740259741`"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[2.0999999999999996`]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     {None, OutputFormsDump`HeadedColumns}],
    Function[BoxForm`e$, 
     TableForm[
     BoxForm`e$, 
      TableHeadings -> {None, {"False Probability", "True Probability"}}]]]}],
   "}"}]], "Output",
 CellChangeTimes->{{3.797798226328678*^9, 3.7977982341142073`*^9}, {
   3.7977982664239607`*^9, 3.79779829482791*^9}, {3.7978056046843224`*^9, 
   3.797805613591498*^9}, {3.7978057766748924`*^9, 3.7978058371258006`*^9}, 
   3.7978060690293827`*^9, 3.7981687399618287`*^9, 3.79854860345031*^9, 
   3.798549926148267*^9},
 CellLabel->
  "Out[252]=",ExpressionUUID->"bfaf64ef-8971-48d3-844f-5a3d5c709139"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "can", " ", "sample", " ", "just", " ", "using", " ", "classifier", " ", 
   "and", " ", "the", " ", "correct", " ", "sampling", " ", "dataset"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7985499379170732`*^9, 
  3.798549949130329*^9}},ExpressionUUID->"5d775d58-48a5-4621-8f70-\
8aabe2016a85"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sample", "[", 
  RowBox[{"classOhEr", ",", "genDataOheA1"}], "]"}]], "Input",
 CellChangeTimes->{{3.797805840849839*^9, 3.797805876744236*^9}, {
  3.797805913767771*^9, 3.7978059193698206`*^9}},
 CellLabel->
  "In[253]:=",ExpressionUUID->"d74735a4-2f27-4c34-a053-7a8e2d06c62e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Association["InitialData" -> {
         Association[
         "Ln Mole Fraction" -> 0.006498964638994509, "H2SeO4 Mole Fraction" -> 
          0.09383870893377437, "Sodium Oxalate Mole Fraction" -> 
          0.0019021359919008322`, "Amine Mole Fraction" -> 
          0.012839417945330615`, "H2O Mole Fraction" -> 0.8849207724899997, 
          "pH" -> 0, "Lanthanide Moles" -> 0.00041, "40 wt% H2SeO4 Moles" -> 
          0.00592, "Na2C2O4 Moles" -> 0.00012000000000000002`, "Amine Moles" -> 
          0.00081, "Water Moles" -> 0.05582697196780461, "NCCN" -> 1, "NCCCN" -> 
          0, "NCCCCN" -> 0, "NCCCCCN" -> 0, "NCCCCCCCN" -> 0, 
          "NCCCNCCCCNCCCN" -> 0, "CN(C)CCN(C)C" -> 0, "CNCCNC" -> 0, 
          "C1CNCCN1" -> 0, "CC1CNCCN1" -> 0, "CC1CNC(C)CN1" -> 0, 
          "C1CN2CCN1CC2" -> 0, "Cl.Cl.NC1CN2CCC1CC2" -> 0, "Cl.Cl.NC1CCNC1" -> 
          0, "NCC1CCCCN1" -> 0, "CC1=NC=CN=C1" -> 0, "NCCNCCN" -> 0, 
          "C1CC(CCN1)C2CCNCC2" -> 0, "C(CN)CN" -> 0]}, "InitialShape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[268.80000000000007`], 
             TypeSystem`PackageScope`AtomShape[60]]], 20, 
           DirectedInfinity[1], {All}]], 1, 
         DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Real], 30], 1], "Meta" -> 
       Association["ID" -> 97105116607597], "RowTarget" -> 20, "ColumnTarget" -> 
       10, "Shape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[268.80000000000007`], 
             TypeSystem`PackageScope`AtomShape[60]]], 20, 
           DirectedInfinity[1], {All}]], 1, 
         DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
         TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Real], 30], 1], "Path" -> {}, "BaseIndices" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
       1, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Ln Mole Fraction", 
                    Style[
                    "Ln Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Ln Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Ln Mole Fraction"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00649896"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Ln Mole Fraction"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["H2SeO4 Mole Fraction", 
                    Style[
                    "H2SeO4 Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["H2SeO4 Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["H2SeO4 Mole Fraction"]}, "RowHeader", False], 
                 "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0938387"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["H2SeO4 Mole Fraction"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Sodium Oxalate Mole Fraction", 
                    Style[
                    "Sodium Oxalate Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Sodium Oxalate Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Sodium Oxalate Mole Fraction"]}, "RowHeader", False], 
                 "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00190214"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Sodium Oxalate Mole Fraction"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Amine Mole Fraction", 
                    Style[
                    "Amine Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Amine Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Amine Mole Fraction"]}, "RowHeader", False], "Mouse"],
                 ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0128394"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Amine Mole Fraction"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["H2O Mole Fraction", 
                    Style[
                    "H2O Mole Fraction", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["H2O Mole Fraction"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["H2O Mole Fraction"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.884921"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["H2O Mole Fraction"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["pH", 
                    Style[
                    "pH", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["pH"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["pH"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["pH"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Lanthanide Moles", 
                    Style[
                    "Lanthanide Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Lanthanide Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Lanthanide Moles"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00041"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Lanthanide Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["40 wt% H2SeO4 Moles", 
                    Style[
                    "40 wt% H2SeO4 Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["40 wt% H2SeO4 Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["40 wt% H2SeO4 Moles"]}, "RowHeader", False], "Mouse"],
                 ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00592"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["40 wt% H2SeO4 Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Na2C2O4 Moles", 
                    Style[
                    "Na2C2O4 Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Na2C2O4 Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Na2C2O4 Moles"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00012"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Na2C2O4 Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Amine Moles", 
                    Style[
                    "Amine Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Amine Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Amine Moles"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00081"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Amine Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Water Moles", 
                    Style[
                    "Water Moles", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Water Moles"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Water Moles"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.055827"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["Water Moles"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["NCCN", 
                    Style[
                    "NCCN", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["NCCN"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCN"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCN"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["NCCCN", 
                    Style[
                    "NCCCN", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["NCCCN"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCN"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCN"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["NCCCCN", 
                    Style[
                    "NCCCCN", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["NCCCCN"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCCN"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCCN"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["NCCCCCN", 
                    Style[
                    "NCCCCCN", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["NCCCCCN"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCCCN"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCCCN"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["NCCCCCCCN", 
                    Style[
                    "NCCCCCCCN", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["NCCCCCCCN"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCCCCCN"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCCCCCN"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["NCCCNCCCCNCCCN", 
                    Style[
                    "NCCCNCCCCNCCCN", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["NCCCNCCCCNCCCN"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCNCCCCNCCCN"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["NCCCNCCCCNCCCN"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CN(C)CCN(C)C", 
                    Style[
                    "CN(C)CCN(C)C", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["CN(C)CCN(C)C"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["CN(C)CCN(C)C"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["CN(C)CCN(C)C"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CNCCNC", 
                    Style[
                    "CNCCNC", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["CNCCNC"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["CNCCNC"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["CNCCNC"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["C1CNCCN1", 
                    Style[
                    "C1CNCCN1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["C1CNCCN1"]}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["C1CNCCN1"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                   Key["C1CNCCN1"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["30 total \:203a ", ""], 
                    Style[
                    Superscript["30 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1}, 
                    2]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                  "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}],
                BaseStyle -> {{
                  RGBColor[
                  0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
                   8}, ContextMenu -> {
                   MenuItem["Show 1 More Row at This Level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                   MenuItem["Show 5 More Rows at This Level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                   MenuItem["Show 1 Fewer Row at This Level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                   MenuItem["Show 5 Fewer Rows at This Level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
               Background -> GrayLevel[0.98]], SpanFromLeft}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
              "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
            Left, Dividers -> All, FrameStyle -> 
            GrayLevel[0.7490196078431373], 
            BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
           LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
           ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           If[GeneralUtilities`$DebugMode, 
            Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
              TypeSystem`NestedGrid`PackagePrivate`formatState[
              TypeSystem`NestedGrid`PackagePrivate`$state$$, 
               TypeSystem`NestedGrid`PackagePrivate`$path$$, 
               TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
               TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
          TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
           TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
          TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
          TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
        ImageSizeCache->{357., {199.9, 204.1}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{357., {199.9, 204.1}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>
       Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[GridBox[{
       {
        TagBox["\<\"False Probability\"\>",
         HoldForm], 
        TagBox["\<\"True Probability\"\>",
         HoldForm]},
       {"0.12118596195255707`", "0.878814038047443`"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[2.0999999999999996`]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     {None, OutputFormsDump`HeadedColumns}],
    Function[BoxForm`e$, 
     TableForm[
     BoxForm`e$, 
      TableHeadings -> {None, {"False Probability", "True Probability"}}]]]}],
   "}"}]], "Output",
 CellChangeTimes->{3.7978058589262013`*^9, 3.797805922436582*^9, 
  3.7978060825322666`*^9, 3.798168747223221*^9, 3.798548606632973*^9, 
  3.79854993277942*^9},
 CellLabel->
  "Out[253]=",ExpressionUUID->"c7cb2b94-635a-4216-bfc9-8338105c5dc4"]
}, Open  ]],

Cell["\<\
Possible To-Do:
- make output in the form of experimental datasets (ie. gram amounts) \
\>", "Text",
 CellChangeTimes->{{3.7985500069502196`*^9, 
  3.7985500224989915`*^9}},ExpressionUUID->"5c660d1f-726b-462b-9292-\
584f0b390350"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
Magnification:>0.75 Inherited,
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"879958a2-b761-4968-b766-55d6cf700ec4"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 218, 4, 72, "Title",ExpressionUUID->"0e687f9e-3d11-4b16-962e-ea370c7f2d7d"],
Cell[801, 28, 158, 3, 24, "Author",ExpressionUUID->"7ddb4b38-e074-445f-8a4c-04d9f5fbe65d"],
Cell[962, 33, 338, 7, 26, "Text",ExpressionUUID->"e5b4dc54-fa83-4f68-884c-36cb084e7a1c"],
Cell[CellGroupData[{
Cell[1325, 44, 164, 3, 50, "Section",ExpressionUUID->"ec552e2c-6408-4c6f-aa03-8bd60697ab52"],
Cell[CellGroupData[{
Cell[1514, 51, 6055, 148, 291, "Input",ExpressionUUID->"f1ef0786-2283-4573-b4f9-747cb6df7c71",
 InitializationCell->True],
Cell[7572, 201, 4884, 92, 70, "Output",ExpressionUUID->"f3a7dbed-7841-4b2e-bb04-b22697e70861"],
Cell[12459, 295, 2277, 33, 70, "Output",ExpressionUUID->"bf1676d8-756b-4b33-8b73-f14cfa1c34fc"]
}, Open  ]],
Cell[14751, 331, 1268, 29, 91, "Input",ExpressionUUID->"14400471-f92d-4f76-9411-a159184d0902",
 InitializationCell->True],
Cell[16022, 362, 791, 15, 34, "Input",ExpressionUUID->"9cd20d70-281b-4515-8917-96ff9fb5c214",
 InitializationCell->True],
Cell[16816, 379, 690, 14, 34, "Input",ExpressionUUID->"95a8d02a-cdaa-4220-a98c-cf2bfd49505a",
 InitializationCell->True],
Cell[17509, 395, 555, 14, 33, "Input",ExpressionUUID->"49c3e8e9-febd-4820-8b59-7d04d9254e40",
 InitializationCell->True],
Cell[18067, 411, 558, 12, 34, "Input",ExpressionUUID->"e74da9c2-3db6-48b6-91ef-f8d41401a2cc",
 InitializationCell->True],
Cell[18628, 425, 798, 17, 33, "Input",ExpressionUUID->"306c9187-3c44-4b49-9609-675df3d85296",
 InitializationCell->True],
Cell[19429, 444, 324, 7, 21, "Input",ExpressionUUID->"45844a54-127e-4003-9c83-9c61f8e2a945"],
Cell[19756, 453, 346, 9, 33, "Input",ExpressionUUID->"f6190d35-c127-43d2-85a6-4ed5d6cad109",
 InitializationCell->True],
Cell[20105, 464, 1281, 38, 48, "Input",ExpressionUUID->"f0269ccf-2c46-4393-9eca-6b79d80a8c47",
 InitializationCell->True],
Cell[21389, 504, 711, 17, 33, "Input",ExpressionUUID->"2d5c8a34-6412-40da-9692-92e63bbca57f",
 InitializationCell->True],
Cell[22103, 523, 362, 9, 33, "Input",ExpressionUUID->"0432a505-8eef-4d0d-b5e2-83c4d178e301",
 InitializationCell->True],
Cell[22468, 534, 393, 9, 22, "Input",ExpressionUUID->"5abf05de-e703-4224-a3b6-dec8ed8a85a3"],
Cell[22864, 545, 427, 11, 34, "Input",ExpressionUUID->"23941c56-2814-4283-9ee1-3ca43b3beb8c",
 InitializationCell->True],
Cell[23294, 558, 427, 11, 34, "Input",ExpressionUUID->"9a10d79d-1129-423f-885b-c7a1c1933efe",
 InitializationCell->True],
Cell[23724, 571, 479, 12, 34, "Input",ExpressionUUID->"1e567500-600a-40df-80b2-dd15c8afeb80",
 InitializationCell->True],
Cell[24206, 585, 177, 3, 21, "Input",ExpressionUUID->"3dd3d28d-fa09-479c-ba9e-3d3ad072ac0c"],
Cell[CellGroupData[{
Cell[24408, 592, 177, 3, 41, "Subsection",ExpressionUUID->"a59a34fa-84d0-4a2b-94d9-ed4416886013"],
Cell[24588, 597, 576, 13, 34, "Input",ExpressionUUID->"ef22dd3d-591d-410d-9c67-bc5c5152f3f3",
 InitializationCell->True],
Cell[25167, 612, 574, 13, 34, "Input",ExpressionUUID->"a9fb8e6f-c071-4f4a-aa36-21ef24602910",
 InitializationCell->True],
Cell[25744, 627, 737, 19, 66, "Input",ExpressionUUID->"f83d9803-b602-485a-aae2-3c9ad0d0fbf0"],
Cell[26484, 648, 480, 12, 34, "Input",ExpressionUUID->"9b1af78f-6839-4346-b0d6-0369e05c54c4",
 InitializationCell->True],
Cell[26967, 662, 687, 18, 64, "Input",ExpressionUUID->"9c9ea8ba-cc5c-4262-b25b-e989c9e1bb49",
 InitializationCell->True],
Cell[27657, 682, 420, 10, 34, "Input",ExpressionUUID->"362d1d6d-c589-422d-b09f-ad0ed1117286",
 InitializationCell->True],
Cell[28080, 694, 951, 22, 34, "Input",ExpressionUUID->"81fdfeab-0e81-407f-85d7-0c7f0ea11800",
 InitializationCell->True],
Cell[29034, 718, 976, 25, 34, "Input",ExpressionUUID->"c732c5cf-f296-4d68-bd9a-dce0069b240a",
 InitializationCell->True],
Cell[30013, 745, 937, 24, 34, "Input",ExpressionUUID->"4c1eea0b-2b64-4a42-b05b-c70c43c941f3",
 InitializationCell->True],
Cell[30953, 771, 1353, 26, 77, "Input",ExpressionUUID->"a8ab51ed-374b-40f4-9762-ca9d7fe52943",
 InitializationCell->True],
Cell[32309, 799, 1203, 25, 77, "Input",ExpressionUUID->"aa072809-94c0-460f-85f5-db92344a7a8e",
 InitializationCell->True],
Cell[33515, 826, 1229, 25, 77, "Input",ExpressionUUID->"87ed8975-48b7-4a59-a69b-d55d56250459",
 InitializationCell->True],
Cell[34747, 853, 1081, 23, 63, "Input",ExpressionUUID->"b4e6cbdf-1b8c-496e-bbfa-16e549080bba",
 InitializationCell->True],
Cell[35831, 878, 879, 23, 106, "Input",ExpressionUUID->"8585c208-2222-46bd-a472-c310087cf282",
 InitializationCell->True],
Cell[36713, 903, 880, 21, 49, "Input",ExpressionUUID->"e8b0db08-c135-4ea4-8a38-56928e770a76",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[37642, 930, 204, 3, 40, "Section",ExpressionUUID->"3b93617e-4988-4ed3-a5cb-390a12f420ee"],
Cell[37849, 935, 298, 7, 21, "Input",ExpressionUUID->"86bf2c2c-4858-4ac9-9eb2-150c386f4eeb"],
Cell[38150, 944, 599, 15, 48, "Input",ExpressionUUID->"58817331-a03a-408f-839c-226dff8d8310",
 InitializationCell->True],
Cell[38752, 961, 248, 5, 21, "Input",ExpressionUUID->"4d26e7fa-b689-473b-9b41-71cdd98b901f"],
Cell[39003, 968, 745, 20, 48, "Input",ExpressionUUID->"7fc6f787-0fc6-4eac-a2ae-7bf0fe32621c",
 InitializationCell->True],
Cell[39751, 990, 376, 8, 21, "Input",ExpressionUUID->"53c7cded-93b8-4b5d-9005-5f08916523f3"],
Cell[CellGroupData[{
Cell[40152, 1002, 522, 12, 33, "Input",ExpressionUUID->"8cb17d1d-3461-4b2e-8167-1115623f5563",
 InitializationCell->True],
Cell[40677, 1016, 297495, 4998, 51, "Output",ExpressionUUID->"9aaf8a0a-33ed-439f-80d2-5dc3150a2d84"]
}, Open  ]],
Cell[338187, 6017, 442, 10, 33, "Input",ExpressionUUID->"15b1120a-61ee-4984-a994-08e017ad7998",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[338654, 6031, 311, 6, 33, "Input",ExpressionUUID->"ae9b84f3-7d66-4c3d-810b-451f349ded58",
 InitializationCell->True],
Cell[338968, 6039, 2447, 58, 101, "Output",ExpressionUUID->"2eba8681-ef98-4f67-9240-ad575b87e735"]
}, Open  ]],
Cell[341430, 6100, 338, 7, 21, "Input",ExpressionUUID->"072e0a9e-bcbc-4704-b02c-ac2c87ff6493"],
Cell[CellGroupData[{
Cell[341793, 6111, 567, 12, 33, "Input",ExpressionUUID->"c6c26e28-0082-444d-a980-90fe5804676e",
 InitializationCell->True],
Cell[342363, 6125, 93591, 1651, 70, "Output",ExpressionUUID->"732e7003-e1da-43d3-a39e-ddc1d933ffa6"]
}, Open  ]],
Cell[435969, 7779, 498, 11, 33, "Input",ExpressionUUID->"71b835fc-02e2-46ec-a066-657853de1b51",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[436492, 7794, 363, 7, 33, "Input",ExpressionUUID->"c5080808-ce12-41ad-bce6-cde0dcbdb52a",
 InitializationCell->True],
Cell[436858, 7803, 2684, 63, 70, "Output",ExpressionUUID->"f550450f-bc5d-4b67-81fe-6abbb7693b56"]
}, Open  ]],
Cell[439557, 7869, 261, 5, 21, "Input",ExpressionUUID->"b931f058-5a4e-43ef-91e4-9e2946d4e93f"],
Cell[439821, 7876, 817, 21, 48, "Input",ExpressionUUID->"32260238-cfa3-4ab1-920a-9dac62939406",
 InitializationCell->True],
Cell[440641, 7899, 328, 7, 21, "Input",ExpressionUUID->"c8ca546a-be6e-4997-90e4-ccde0cc52a36"],
Cell[CellGroupData[{
Cell[440994, 7910, 472, 11, 33, "Input",ExpressionUUID->"f7c8dbfd-4e01-46f5-84b7-8f5fad474ce0",
 InitializationCell->True],
Cell[441469, 7923, 156960, 2686, 70, "Output",ExpressionUUID->"44ca7c0c-b46c-447a-b650-de3ec671c731"]
}, Open  ]],
Cell[CellGroupData[{
Cell[598466, 10614, 424, 9, 33, "Input",ExpressionUUID->"7a13c6cf-3ccb-42d1-b77f-9b8df5682066",
 InitializationCell->True],
Cell[598893, 10625, 162092, 2708, 70, "Output",ExpressionUUID->"42be013c-5ef3-4b2b-8907-114800c5e7fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[761022, 13338, 311, 6, 33, "Input",ExpressionUUID->"cbf03a51-90a6-4bc0-9b60-76bc21e24998",
 InitializationCell->True],
Cell[761336, 13346, 2372, 56, 70, "Output",ExpressionUUID->"3768c8f4-1db2-44bb-94b3-a72f599ed34a"]
}, Open  ]],
Cell[763723, 13405, 729, 16, 21, "Input",ExpressionUUID->"737feaea-b393-4fae-be68-81e9d7c00df0"],
Cell[CellGroupData[{
Cell[764477, 13425, 474, 11, 33, "Input",ExpressionUUID->"aa3187cf-80e2-423c-ab6e-53f4cb3d0775",
 InitializationCell->True],
Cell[764954, 13438, 285565, 4810, 70, "Output",ExpressionUUID->"366388a0-75c4-40cb-a04e-357733391e5b"]
}, Open  ]],
Cell[1050534, 18251, 452, 11, 33, "Input",ExpressionUUID->"26cff43c-6254-4eb9-a5a7-b82e036cb083",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1051011, 18266, 311, 6, 33, "Input",ExpressionUUID->"3d0a52f1-abcc-473f-a8d7-19019e437011",
 InitializationCell->True],
Cell[1051325, 18274, 2515, 59, 70, "Output",ExpressionUUID->"f6ba9c66-29aa-4260-ace6-3360d0730a88"]
}, Open  ]],
Cell[1053855, 18336, 674, 15, 21, "Input",ExpressionUUID->"8919fb48-6108-4fc2-8aa6-3c48c1f03086"],
Cell[CellGroupData[{
Cell[1054554, 18355, 474, 11, 33, "Input",ExpressionUUID->"d397c963-f07d-4993-9814-16f7b1480742",
 InitializationCell->True],
Cell[1055031, 18368, 158025, 2706, 70, "Output",ExpressionUUID->"3b66dad6-7278-4d6d-baa6-b03c791871f9"]
}, Open  ]],
Cell[1213071, 21077, 451, 11, 33, "Input",ExpressionUUID->"6516a2e2-053e-43b9-88ad-a3b33ff16794",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1213547, 21092, 309, 6, 33, "Input",ExpressionUUID->"d99be2d8-18e2-413a-99a4-0a21bb173ac2",
 InitializationCell->True],
Cell[1213859, 21100, 2526, 59, 70, "Output",ExpressionUUID->"20a348aa-562b-40f4-ba6b-cc662a9ee96f"]
}, Open  ]],
Cell[1216400, 21162, 344, 8, 21, "Input",ExpressionUUID->"db300ac4-9914-443c-8a6b-c7aeaaa56535"],
Cell[CellGroupData[{
Cell[1216769, 21174, 528, 12, 33, "Input",ExpressionUUID->"cbbcd5ca-1e13-442d-b8f6-b762a5e2aa43",
 InitializationCell->True],
Cell[1217300, 21188, 150968, 2595, 70, "Output",ExpressionUUID->"ffa26624-7e5a-4edb-87b2-10f954df2432"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1368305, 23788, 480, 10, 33, "Input",ExpressionUUID->"98b9e5ba-a26a-4f4f-bc78-b99ab953943d",
 InitializationCell->True],
Cell[1368788, 23800, 155211, 2621, 70, "Output",ExpressionUUID->"fb34105f-ac67-40b4-b4fe-9d5a73f5cb2d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1524036, 26426, 362, 7, 33, "Input",ExpressionUUID->"50b90bfc-5ec4-4bd2-96e6-36a8a93cc877",
 InitializationCell->True],
Cell[1524401, 26435, 2439, 57, 70, "Output",ExpressionUUID->"de2ccbae-39f8-43d5-acca-f157b434b483"]
}, Open  ]],
Cell[1526855, 26495, 465, 10, 21, "Input",ExpressionUUID->"edd21b4e-00a8-41e5-b272-70834dc4c9ba"],
Cell[CellGroupData[{
Cell[1527345, 26509, 478, 11, 33, "Input",ExpressionUUID->"42be112c-c8c5-4518-ba17-2e16234acb5a",
 InitializationCell->True],
Cell[1527826, 26522, 97261, 1719, 70, "Output",ExpressionUUID->"d489e2af-c8b5-4272-9bd1-4a2283f2034a"]
}, Open  ]],
Cell[1625102, 28244, 458, 11, 33, "Input",ExpressionUUID->"679008c4-2b15-41c5-8a83-de35952cd1f6",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1625585, 28259, 315, 6, 33, "Input",ExpressionUUID->"b95a00ec-d28a-4907-9073-f65b1c81ffdf",
 InitializationCell->True],
Cell[1625903, 28267, 2603, 61, 70, "Output",ExpressionUUID->"50da026b-4b4f-421d-9793-e80799d20c5d"]
}, Open  ]],
Cell[1628521, 28331, 411, 9, 21, "Input",ExpressionUUID->"1879d912-ad55-4f40-b569-6cc3f3f1d007"],
Cell[CellGroupData[{
Cell[1628957, 28344, 479, 11, 33, "Input",ExpressionUUID->"e53f9bdb-3405-4695-9a67-e72cb78bd629",
 InitializationCell->True],
Cell[1629439, 28357, 93151, 1647, 70, "Output",ExpressionUUID->"2cf80c61-75da-419a-afe6-418c83c6f8a5"]
}, Open  ]],
Cell[1722605, 30007, 461, 11, 33, "Input",ExpressionUUID->"295a3d40-adef-4de1-b28c-93035120347b",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1723091, 30022, 313, 6, 33, "Input",ExpressionUUID->"6ef1303e-530e-4d63-bb47-714f2a8c4960",
 InitializationCell->True],
Cell[1723407, 30030, 2591, 61, 70, "Output",ExpressionUUID->"5ba578a7-cca7-4b97-8821-58c2fd16843e"]
}, Open  ]],
Cell[1726013, 30094, 213, 4, 21, "Input",ExpressionUUID->"4f69c207-82a2-4927-8d7e-0702bed261df"],
Cell[CellGroupData[{
Cell[1726251, 30102, 532, 12, 33, "Input",ExpressionUUID->"9b56ffe6-8b6c-4ab3-be6b-7d03c6619c55",
 InitializationCell->True],
Cell[1726786, 30116, 130287, 2288, 70, "Output",ExpressionUUID->"34d48100-d657-4a74-ad72-cef56b7585a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1857110, 32409, 486, 10, 33, "Input",ExpressionUUID->"d132ac31-2d88-45da-a360-7079554ab7dc",
 InitializationCell->True],
Cell[1857599, 32421, 137455, 2387, 70, "Output",ExpressionUUID->"d9afc394-5707-476c-91d2-c8406b0fd509"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1995091, 34813, 362, 7, 33, "Input",ExpressionUUID->"ad5eefac-0ab6-4f52-bddd-9e874ab627fd",
 InitializationCell->True],
Cell[1995456, 34822, 2328, 56, 70, "Output",ExpressionUUID->"a0c376fb-8eb9-4ef2-a620-88dd2dc2c244"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1997833, 34884, 166, 3, 40, "Section",ExpressionUUID->"f65314a4-2e28-47f2-82c9-b869b9146999"],
Cell[1998002, 34889, 596, 15, 36, "Input",ExpressionUUID->"44f7ffd7-00ef-4d38-8263-35993fb01787"],
Cell[1998601, 34906, 302, 7, 21, "Input",ExpressionUUID->"72c0a8f2-ca7b-44be-8e72-83316f581a10"],
Cell[CellGroupData[{
Cell[1998928, 34917, 436, 10, 21, "Input",ExpressionUUID->"375935a1-8645-4148-9ce3-57765c538b29"],
Cell[1999367, 34929, 109564, 1976, 51, "Output",ExpressionUUID->"43863f93-a013-46f2-8797-8a1f0aec5796"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2108968, 36910, 332, 7, 21, "Input",ExpressionUUID->"685d24d2-0755-49ee-9e6b-236d5e128023"],
Cell[2109303, 36919, 116298, 2034, 51, "Output",ExpressionUUID->"89827625-efc3-4387-b571-c91a0e7a181e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2225638, 38958, 227, 4, 21, "Input",ExpressionUUID->"a0119bad-4f6e-4149-95fd-022784333708"],
Cell[2225868, 38964, 2201, 55, 101, "Output",ExpressionUUID->"b401e637-ac62-45f7-9521-ac97f5b841cd"]
}, Open  ]],
Cell[2228084, 39022, 214, 4, 21, "Input",ExpressionUUID->"32228919-d762-4890-8690-d5ab7f1298cc"],
Cell[CellGroupData[{
Cell[2228323, 39030, 393, 9, 21, "Input",ExpressionUUID->"1d52c0df-d424-40fa-918a-33515037ea2e"],
Cell[2228719, 39041, 114868, 2039, 70, "Output",ExpressionUUID->"21534de6-dbe9-4403-a8de-ae997671a59d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2343624, 41085, 342, 7, 21, "Input",ExpressionUUID->"06c1014d-59d5-489e-8eb3-297e0bfcbb5b"],
Cell[2343969, 41094, 121064, 2121, 70, "Output",ExpressionUUID->"92ea1c2b-240d-445e-8c05-8726b5019274"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2465070, 43220, 230, 4, 21, "Input",ExpressionUUID->"8322475d-90fb-44e5-9a65-75b1dbc3b024"],
Cell[2465303, 43226, 1969, 51, 70, "Output",ExpressionUUID->"0edc0efc-742a-424e-98c7-d4ce7bd26066"]
}, Open  ]],
Cell[2467287, 43280, 214, 4, 21, "Input",ExpressionUUID->"23da1025-6790-4576-8242-dd8a3ad677ee"],
Cell[CellGroupData[{
Cell[2467526, 43288, 448, 10, 21, "Input",ExpressionUUID->"de028032-bcab-4ab1-96a9-1bb6a37b5d6c"],
Cell[2467977, 43300, 81898, 1483, 70, "Output",ExpressionUUID->"a4fde107-0f58-4be6-8d6a-f96741218bc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2549912, 44788, 399, 8, 21, "Input",ExpressionUUID->"91473e33-f15f-4d1f-9898-6e788aa2b348"],
Cell[2550314, 44798, 86141, 1513, 70, "Output",ExpressionUUID->"f04590ea-cc13-43f1-9dad-11b651c2e9d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2636492, 46316, 283, 5, 21, "Input",ExpressionUUID->"660d12eb-f69b-43f8-a8fd-9f2ec1deb99f"],
Cell[2636778, 46323, 2052, 52, 70, "Output",ExpressionUUID->"64ee4ec0-f757-44a3-8082-dca486c6310f"]
}, Open  ]],
Cell[2638845, 46378, 254, 5, 21, "Input",ExpressionUUID->"a4859b17-6707-4a57-a0ad-c169efc911a8"],
Cell[CellGroupData[{
Cell[2639124, 46387, 395, 9, 21, "Input",ExpressionUUID->"d707cc6a-0c9c-4434-a581-eca47483b82a"],
Cell[2639522, 46398, 108511, 1948, 70, "Output",ExpressionUUID->"9f6c490e-1b8f-46df-80c9-ada509b1c714"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2748070, 48351, 347, 7, 21, "Input",ExpressionUUID->"445a62e1-c739-4b74-82f0-7bc342b94562"],
Cell[2748420, 48360, 110577, 1960, 70, "Output",ExpressionUUID->"bfabb54a-dead-4998-a048-f8b0a3d129a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2859034, 50325, 231, 4, 21, "Input",ExpressionUUID->"2be6cf63-bdcc-4c02-8fb0-25af57962b96"],
Cell[2859268, 50331, 1973, 51, 70, "Output",ExpressionUUID->"cb727027-4456-4c94-baea-514d4b83b5d6"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2861290, 50388, 167, 3, 40, "Section",ExpressionUUID->"63aff88a-5e05-4855-a92e-c7197d887eb1"],
Cell[2861460, 50393, 619, 13, 21, "Input",ExpressionUUID->"3fc7539f-6e44-41ab-b135-4a4cf4ecb40e"],
Cell[2862082, 50408, 629, 14, 21, "Input",ExpressionUUID->"692d5b41-e69a-43a3-bdcf-cdc7fe2a1bdc"],
Cell[CellGroupData[{
Cell[2862736, 50426, 6234, 118, 562, "Input",ExpressionUUID->"a4de37b7-6e2b-47de-a7cb-b57033729a52"],
Cell[2868973, 50546, 452, 11, 70, "Message",ExpressionUUID->"712e80fb-1c13-4f11-8bf8-60b109505bf2"],
Cell[2869428, 50559, 453, 11, 70, "Message",ExpressionUUID->"1b7a3b28-9254-4f15-b7c7-6cb1c44addac"],
Cell[2869884, 50572, 443, 10, 70, "Message",ExpressionUUID->"3a852a36-3873-4774-a140-ad29f2d0ab09"],
Cell[2870330, 50584, 451, 10, 70, "Message",ExpressionUUID->"f488bcb7-0e5b-4746-9008-f9b02c0055be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2870818, 50599, 195, 3, 21, "Input",ExpressionUUID->"a0be6905-1c91-4307-97ba-99eecd84f533"],
Cell[2871016, 50604, 118473, 2286, 70, "Output",ExpressionUUID->"c28e43f5-5572-4143-a5c6-c1e987482d94"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2989538, 52896, 171, 3, 40, "Section",ExpressionUUID->"4c106b5a-d242-44d2-aef7-fd1ae864d8f4"],
Cell[CellGroupData[{
Cell[2989734, 52903, 160, 3, 41, "Subsection",ExpressionUUID->"23332509-ff6c-4315-8fad-667c7e788a1c"],
Cell[2989897, 52908, 638, 16, 33, "Input",ExpressionUUID->"b46005ab-6ef7-4134-b3ce-72eddf670489",
 InitializationCell->True],
Cell[2990538, 52926, 279, 6, 21, "Input",ExpressionUUID->"8af1b154-aafd-4da1-a915-735582c8e64e"],
Cell[2990820, 52934, 2986, 66, 36, "Input",ExpressionUUID->"35837fde-3a49-4a07-81aa-129e50401642",
 InitializationCell->True],
Cell[2993809, 53002, 372, 8, 21, "Input",ExpressionUUID->"39600ed8-1fa7-4470-b743-773392234ace"],
Cell[2994184, 53012, 1059, 27, 62, "Input",ExpressionUUID->"a80e9338-e661-4dd7-9807-6ed18401700c",
 InitializationCell->True],
Cell[2995246, 53041, 477, 11, 21, "Input",ExpressionUUID->"9b0e9740-fc50-4f74-89c0-2b8e238257bc"],
Cell[2995726, 53054, 937, 26, 48, "Input",ExpressionUUID->"1dd14319-e3b2-499c-8813-5d75e6a56053",
 InitializationCell->True],
Cell[2996666, 53082, 894, 22, 33, "Input",ExpressionUUID->"4c33a966-c724-449a-b34c-5b9d5da4899c",
 InitializationCell->True],
Cell[2997563, 53106, 1699, 41, 91, "Input",ExpressionUUID->"0141f667-b1cc-48d6-85b0-335dbec3d60c",
 InitializationCell->True],
Cell[2999265, 53149, 348, 7, 21, "Input",ExpressionUUID->"1eb38862-8365-43ee-88ec-931d5f63a553"],
Cell[2999616, 53158, 346, 8, 33, "Input",ExpressionUUID->"9d87fc65-3c64-4178-be6c-9eafd11b85c6",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2999987, 53170, 222, 4, 21, "Input",ExpressionUUID->"4a529569-624c-418f-87d3-ad364888eeea"],
Cell[3000212, 53176, 1833, 44, 70, "Output",ExpressionUUID->"e53127c7-c202-4b4a-8ad2-7a0375ccd965"]
}, Open  ]],
Cell[3002060, 53223, 353, 7, 21, "Input",ExpressionUUID->"557c8722-697c-427c-aa27-07ba47410cc9"],
Cell[3002416, 53232, 828, 16, 48, "Input",ExpressionUUID->"82afd135-4a83-4857-828e-fd28c53de20f",
 InitializationCell->True],
Cell[3003247, 53250, 398, 8, 21, "Input",ExpressionUUID->"aa3a9ec9-504a-4476-bf4d-1bf8feac45a0"],
Cell[3003648, 53260, 1416, 33, 76, "Input",ExpressionUUID->"d1cb9733-c2bd-4c7c-9938-a5b27f4e3d8e",
 InitializationCell->True],
Cell[3005067, 53295, 525, 10, 21, "Input",ExpressionUUID->"228ce5b7-5d48-4080-afc7-1c9b25994f2d"],
Cell[3005595, 53307, 532, 11, 33, "Input",ExpressionUUID->"17240a08-b2ec-450f-8a42-5a3ce7ff3fe0",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[3006164, 53323, 168, 3, 30, "Subsection",ExpressionUUID->"7b2fe8b0-802f-4e04-aa8c-e92cb2d16398"],
Cell[3006335, 53328, 449, 11, 21, "Input",ExpressionUUID->"68dce3e4-2c01-4d8e-98dd-564d7b3a9d7a"],
Cell[CellGroupData[{
Cell[3006809, 53343, 633, 11, 33, "Input",ExpressionUUID->"8d831da0-e5a6-4230-a51d-0abba4de9060",
 InitializationCell->True],
Cell[3007445, 53356, 4306, 93, 70, "Output",ExpressionUUID->"fe33f2f1-430c-4010-96b0-f632572bc41d"]
}, Open  ]],
Cell[3011766, 53452, 329, 7, 21, "Input",ExpressionUUID->"6ccf8bea-1093-41d0-8370-88b2da0b6c8b"],
Cell[3012098, 53461, 1949, 58, 76, "Input",ExpressionUUID->"08f31828-b0c0-43dc-9ca3-4e6566084fc4",
 InitializationCell->True],
Cell[3014050, 53521, 352, 7, 21, "Input",ExpressionUUID->"687d7e27-83ff-4feb-b532-30d6051698d9"],
Cell[3014405, 53530, 739, 15, 48, "Input",ExpressionUUID->"495ada73-b4b2-4074-96e0-ac1ea1878382",
 InitializationCell->True],
Cell[3015147, 53547, 353, 7, 21, "Input",ExpressionUUID->"a91e01e7-1c47-4cd4-8122-c62d0c725195"],
Cell[3015503, 53556, 1372, 34, 76, "Input",ExpressionUUID->"c2c309de-3ed7-42df-ae31-aa1ed03d6420",
 InitializationCell->True],
Cell[3016878, 53592, 501, 10, 21, "Input",ExpressionUUID->"46a6ac43-4d17-4beb-b091-9a9d330167c8"],
Cell[3017382, 53604, 478, 10, 33, "Input",ExpressionUUID->"1b44e745-fb8b-4e3f-9978-ce4dfd58ef64",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[3017909, 53620, 172, 3, 40, "Section",ExpressionUUID->"454ece5d-f957-46cb-aff4-3b547c157af0"],
Cell[CellGroupData[{
Cell[3018106, 53627, 175, 3, 41, "Subsection",ExpressionUUID->"5b61132a-d710-46a5-9fc9-7bb41765530e"],
Cell[3018284, 53632, 326, 7, 21, "Input",ExpressionUUID->"55a66179-076c-4da0-8539-12ed2817dae7"],
Cell[CellGroupData[{
Cell[3018635, 53643, 370, 9, 21, "Input",ExpressionUUID->"784fb4b9-0244-4c94-9d36-4442997f99e1"],
Cell[3019008, 53654, 366, 9, 70, "Message",ExpressionUUID->"1578a690-c962-4523-a275-a76e1db4c7e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3019411, 53668, 266, 6, 21, "Input",ExpressionUUID->"cf926b16-b06d-4a49-9a6c-c9ce310a9e3b"],
Cell[3019680, 53676, 241783, 3535, 70, "Message",ExpressionUUID->"0b581fd3-a157-4347-a1a5-ee33c214a1d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3261500, 57216, 538, 13, 21, "Input",ExpressionUUID->"1d69890a-8a7d-4539-b51f-46c0e0102994"],
Cell[3262041, 57231, 241783, 3535, 70, "Message",ExpressionUUID->"3f9249a2-a6c5-4575-95f8-0b38f37ef3eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3503861, 60771, 536, 13, 21, "Input",ExpressionUUID->"064220ca-496b-4253-a9d0-388b3eb3c0d7"],
Cell[3504400, 60786, 482, 11, 70, "Message",ExpressionUUID->"aacde2f0-63b1-46b2-b28f-94fe6c84cae8"]
}, Open  ]],
Cell[3504897, 60800, 580, 14, 21, "Input",ExpressionUUID->"1bceb1dd-67a3-48a2-8dcc-e45e7031edd3"],
Cell[CellGroupData[{
Cell[3505502, 60818, 329, 8, 21, "Input",ExpressionUUID->"7bc9dc31-b074-4f45-8589-f1e38b0df2be"],
Cell[3505834, 60828, 500, 11, 70, "Message",ExpressionUUID->"11e324bb-68a0-4b71-8c01-c2dfef903dc6"]
}, Open  ]],
Cell[3506349, 60842, 502, 12, 21, "Input",ExpressionUUID->"556c297a-1467-41fe-a792-c5b99f7d9a96"]
}, Closed]],
Cell[CellGroupData[{
Cell[3506888, 60859, 164, 3, 30, "Subsection",ExpressionUUID->"7a244652-b68f-4ed0-9cec-ce305fd7f724"],
Cell[CellGroupData[{
Cell[3507077, 60866, 166, 3, 35, "Subsubsection",ExpressionUUID->"af21b2fa-2e1a-4c1c-b69c-31a9a1233dc7"],
Cell[3507246, 60871, 499, 9, 21, "Input",ExpressionUUID->"b28381de-d5c4-4a79-aa50-53a5f8a65df0"],
Cell[3507748, 60882, 174, 4, 21, "Input",ExpressionUUID->"b613efed-41d2-4443-b02d-18049d5e35a3"],
Cell[3507925, 60888, 252, 6, 21, "Input",ExpressionUUID->"64ac2883-8038-473c-98d9-9a2e000a279d"],
Cell[CellGroupData[{
Cell[3508202, 60898, 7838, 188, 392, "Input",ExpressionUUID->"d8d6ae87-1f73-436e-ab0c-fd34f51b89d2"],
Cell[3516043, 61088, 472, 10, 70, "Message",ExpressionUUID->"b3b8688e-3d05-4fd9-9d09-7be7a02d9caa"],
Cell[3516518, 61100, 518, 11, 70, "Message",ExpressionUUID->"40379208-6d58-4e59-acb0-80c5841a87af"],
Cell[3517039, 61113, 520, 11, 70, "Message",ExpressionUUID->"4e6ce171-2bc4-4ec2-9e1f-9a85a5c5521e"],
Cell[3517562, 61126, 518, 11, 70, "Message",ExpressionUUID->"6175f623-be5a-4077-82b9-5c41187716f8"],
Cell[3518083, 61139, 454, 10, 70, "Message",ExpressionUUID->"5fdb6b07-4fe6-4f90-a75b-d714e6611c64"],
Cell[3518540, 61151, 41077, 750, 70, "Output",ExpressionUUID->"5eaecb0e-ce93-4b5a-8906-db9cd2dc80cc"],
Cell[3559620, 61903, 21307, 374, 70, "Output",ExpressionUUID->"6ce0f5dd-af2d-4528-bf27-8c24ddab14dd"],
Cell[3580930, 62279, 573, 12, 70, "Message",ExpressionUUID->"17b73a5c-fa37-400b-9bc0-11025f221b09"],
Cell[3581506, 62293, 586, 13, 70, "Message",ExpressionUUID->"de63c400-c289-4870-b6f0-435a1a9cfdc9"],
Cell[3582095, 62308, 559, 12, 70, "Message",ExpressionUUID->"fe99a5e5-2aab-4c50-9360-a50990c0e1ec"],
Cell[3582657, 62322, 320, 8, 70, "Output",ExpressionUUID->"30e0c8e8-02ba-44ed-8935-de7826b0733a"],
Cell[3582980, 62332, 588, 12, 70, "Message",ExpressionUUID->"597b44d3-a036-455a-887f-aae4da450a05"],
Cell[3583571, 62346, 365, 9, 70, "Output",ExpressionUUID->"ea8bfb60-3f3b-4a7b-a654-b3db7710d6ad"],
Cell[3583939, 62357, 392, 9, 70, "Message",ExpressionUUID->"255b723c-c180-45c4-b82d-28ba851fc77f"],
Cell[3584334, 62368, 392, 9, 70, "Message",ExpressionUUID->"222e5da0-fcf3-4cd8-9596-8cce4a5add0e"],
Cell[3584729, 62379, 394, 9, 70, "Message",ExpressionUUID->"579ac0f1-63a2-4f55-bc45-169f4717e6fc"],
Cell[3585126, 62390, 454, 10, 70, "Message",ExpressionUUID->"ed78557a-5a6d-433d-999a-23c159d5a5c6"],
Cell[3585583, 62402, 883, 16, 70, "Message",ExpressionUUID->"08908087-f6aa-4b4c-82cd-a1330309cde7"],
Cell[3586469, 62420, 41305, 761, 70, "Output",ExpressionUUID->"cddeecac-ddae-4630-91ba-d32d26cc3874"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[3627823, 63187, 169, 3, 30, "Subsubsection",ExpressionUUID->"66a83075-5508-4ad6-b115-14abb9ef6ba2"],
Cell[3627995, 63192, 273, 6, 21, "Input",ExpressionUUID->"dbbdbac2-3b72-46d2-b87d-64cde60510b5"],
Cell[3628271, 63200, 439, 9, 21, "Input",ExpressionUUID->"f2846816-8d9d-4dfe-94a5-c89b2faa83e5"],
Cell[3628713, 63211, 484, 10, 21, "Input",ExpressionUUID->"6b878943-6163-457a-a0ac-db909f21be1b"],
Cell[3629200, 63223, 4817, 112, 248, "Input",ExpressionUUID->"b6f54d90-f608-4e81-8b99-5479d4396239",
 InitializationCell->True],
Cell[3634020, 63337, 5328, 123, 348, "Input",ExpressionUUID->"d3d61b04-ba22-4a44-bc27-5bccdbcde19f",
 InitializationCell->True],
Cell[3639351, 63462, 536, 12, 50, "Input",ExpressionUUID->"b9ff047c-4fca-462a-a794-bb7419117c8c"],
Cell[CellGroupData[{
Cell[3639912, 63478, 334, 7, 21, "Input",ExpressionUUID->"91745d7a-a4a8-40f3-944e-d0870600eaaf"],
Cell[3640249, 63487, 70931, 1284, 417, "Output",ExpressionUUID->"bfaf64ef-8971-48d3-844f-5a3d5c709139"]
}, Open  ]],
Cell[3711195, 64774, 348, 8, 21, "Input",ExpressionUUID->"5d775d58-48a5-4621-8f70-8aabe2016a85"],
Cell[CellGroupData[{
Cell[3711568, 64786, 301, 6, 21, "Input",ExpressionUUID->"d74735a4-2f27-4c34-a053-7a8e2d06c62e"],
Cell[3711872, 64794, 70309, 1278, 418, "Output",ExpressionUUID->"c7cb2b94-635a-4216-bfc9-8338105c5dc4"]
}, Open  ]],
Cell[3782196, 66075, 240, 6, 43, "Text",ExpressionUUID->"5c660d1f-726b-462b-9292-584f0b390350"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

