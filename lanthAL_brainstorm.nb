(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    314501,       6079]
NotebookOptionsPosition[    302883,       5886]
NotebookOutlinePosition[    303321,       5903]
CellTagsIndexPosition[    303278,       5900]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Active Learning Brainstorm ", "Title",
 CellChangeTimes->{{3.804600318613331*^9, 
  3.804600323076214*^9}},ExpressionUUID->"6b4dd09e-6715-4f5f-a125-\
8d843f7ea704"],

Cell["Will Borrelli", "Author",
 CellChangeTimes->{{3.80460032884228*^9, 
  3.804600330480211*^9}},ExpressionUUID->"d83df031-b9fc-418b-8e47-\
286474c3f643"],

Cell[CellGroupData[{

Cell["Initial Data Import", "Section",
 CellChangeTimes->{{3.797728301126897*^9, 
  3.797728303946023*^9}},ExpressionUUID->"7c07ee20-ab93-438a-8ec1-\
ae835b9125ec"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "googleSheet", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"googleSheet", "[", 
    RowBox[{"docKey_String", ",", "sheetName_String", ",", 
     RowBox[{"columns_String", ":", "\"\<\>\""}], ",", 
     RowBox[{"format_String", ":", "\"\<csv\>\""}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rangeSpec", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringLength", "[", "columns", "]"}], ">", "0"}], ",", 
         RowBox[{"\"\<&range=\>\"", "<>", "columns"}], ",", "\"\<\>\""}], 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<https://docs.google.com/spreadsheets/d/\>\"", "<>", "docKey", 
       "<>", "\"\</gviz/tq?tqx=out:\>\"", "<>", "format", "<>", 
       "\"\<&sheet=\>\"", "<>", "sheetName", "<>", "rangeSpec"}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"googleSheet", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<Amines\>\"", ",", "\"\<A:E\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<name\>\"", ",", "\"\<abbreviation\>\"", ",", 
      "\"\<Chloride salt?\>\"", ",", "\"\<Amine formula\>\"", ",", 
      "\"\<SMILES \>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<ethylenediamine\>\"", ",", "\"\<en\>\"", ",", "\"\<no\>\"", ",", 
      "\"\<C2H8N2\>\"", ",", "\"\<NCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,3-diaminopropane\>\"", ",", "\"\<1,3-dap\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C3H10N2\>\"", ",", "\"\<NCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,4-diaminobutane\>\"", ",", "\"\<1,4-dab\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C4H12N2\>\"", ",", "\"\<NCCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,5-diaminopentane\>\"", ",", "\"\<1,5-dap\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C5H14N2\>\"", ",", "\"\<NCCCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,6-diaminohexane\>\"", ",", "\"\<1,6-dah\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C6H16N2\>\"", ",", "\"\<NCCCCCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<spermine\>\"", ",", "\"\<spermine\>\"", ",", "\"\<no\>\"", ",", 
      "\"\<C10H26N4\>\"", ",", "\"\<NCCCNCCCCNCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<N,N,N',N'-tetramethylethylenediamine\>\"", ",", "\"\<tmed\>\"", 
      ",", "\"\<no\>\"", ",", "\"\<C6H16N2\>\"", ",", 
      "\"\<CN(C)CCN(C)C\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<N,N'-dimethylethylenediamine\>\"", ",", "\"\<dmed\>\"", ",", 
      "\"\<no\>\"", ",", "\"\<C4H12N2\>\"", ",", "\"\<CNCCNC\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<piperazine\>\"", ",", "\"\<pip\>\"", ",", "\"\<no\>\"", ",", 
      "\"\<C4H10N2\>\"", ",", "\"\<C1CNCCN1\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<2-methylpiperazine\>\"", ",", "\"\<2-mpip\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C5H12N2\>\"", ",", "\"\<CC1CNCCN1\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<2,5-dimethylpiperazine\>\"", ",", "\"\<2,5-dmpip\>\"", ",", 
      "\"\<no\>\"", ",", "\"\<C6H14N2\>\"", ",", "\"\<CC1CNC(C)CN1\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,4-diaza[2.2.2]bicyclooctane\>\"", ",", "\"\<dabco\>\"", ",", 
      "\"\<no\>\"", ",", "\"\<C6H12N2\>\"", ",", "\"\<C1CN2CCN1CC2\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<3-aminoquinuclidine.2HCl\>\"", ",", "\"\<3-aqn\>\"", ",", 
      "\"\<yes\>\"", ",", "\"\<C7H14N2.2HCl\>\"", ",", 
      "\"\<Cl.Cl.NC1CN2CCC1CC2\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<3-aminopyrrolidine.2HCl\>\"", ",", "\"\<3-apry\>\"", ",", 
      "\"\<yes\>\"", ",", "\"\<C4H10N2.2HCl\>\"", ",", 
      "\"\<Cl.Cl.NC1CCNC1\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<2-(aminomethyl)piperidine\>\"", ",", "\"\<2-amp\>\"", ",", 
      "\"\<no\>\"", ",", "\"\<C6H14N2\>\"", ",", "\"\<NCC1CCCCN1\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<2-methylpyrazine\>\"", ",", "\"\<2-mpyr\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C5H6N2\>\"", ",", "\"\<CC1=NC=CN=C1\>\""}], "}"}]}], "}"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"smiles", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Rest", "@", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "5"}], "]"}], "]"}]}], ",", 
     RowBox[{"{", "\"\<C(CN)CN\>\"", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amines", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Molecule", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{"\"\<Cl.\>\"", "\[Rule]", "\"\<\>\""}], "]"}], "[", "#", 
       "]"}], "]"}], "&"}], "/@", "smiles"}]}], " ", ";", 
  RowBox[{"(*", 
   RowBox[{"remove", " ", "salts"}], "*)"}], "\n", 
  RowBox[{"{", 
   RowBox[{
   "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
    "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", 
    "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
    "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", ",", 
    "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
    "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
    "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\""}], "}"}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781546417928156*^9, 3.781546430534261*^9}, {
   3.7816021001566825`*^9, 3.7816021125612*^9}, {3.7816022308967695`*^9, 
   3.781602255699417*^9}, {3.781616996568091*^9, 3.7816170018758907`*^9}, 
   3.7816214627140718`*^9, {3.781739990456283*^9, 3.7817399945573225`*^9}, {
   3.7898348504343276`*^9, 3.7898348527750654`*^9}, {3.804600430185212*^9, 
   3.8046004340542984`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"f73a3d2c-82c3-482d-bc33-3f5ed06f3f1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"googleSheetDataset", "[", 
   RowBox[{"docKey_String", ",", "sheetName_String", ",", 
    RowBox[{"columns_String", ":", "\"\<\>\""}], ",", 
    RowBox[{"format_String", ":", "\"\<csv\>\""}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rangeSpec", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "columns", "]"}], ">", "0"}], ",", 
        RowBox[{"\"\<&range=\>\"", "<>", "columns"}], ",", "\"\<\>\""}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Import", "[", 
     RowBox[{
      RowBox[{
      "\"\<https://docs.google.com/spreadsheets/d/\>\"", "<>", "docKey", 
       "<>", "\"\</gviz/tq?tqx=out:\>\"", "<>", "format", "<>", 
       "\"\<&sheet=\>\"", "<>", "sheetName", "<>", "rangeSpec"}], ",", 
      "\"\<Dataset\>\"", ",", 
      RowBox[{"HeaderLines", "\[Rule]", "1"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816022642929835`*^9, 3.7816022759838495`*^9}, {
  3.7817400036511955`*^9, 3.7817400049078007`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"313aeda6-9633-4ba6-b8c2-fd762e9a351b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJE", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<JE_Lanthanide_reactions\>\"", ",", "\"\<A:L\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7815471126650867`*^9, 3.7815471166813517`*^9}, {
  3.7815630959481087`*^9, 3.7815631269771585`*^9}, {3.7815631800636263`*^9, 
  3.781563295748209*^9}, {3.7815665877287083`*^9, 3.7815665889803643`*^9}, {
  3.7816002305472493`*^9, 3.781600249695258*^9}, {3.781601977892505*^9, 
  3.7816020304303226`*^9}, {3.7816020672680607`*^9, 3.7816020827940273`*^9}, {
  3.7816022830706987`*^9, 3.781602333091202*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"ae72564b-e2ca-42f9-b693-12fa7c65499a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJZDunordered", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<JZD_Lanthanide_reactions\>\"", ",", "\"\<A:L\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781602363412743*^9, 3.7816023768451166`*^9}, {
  3.7816024491298723`*^9, 3.7816024894045286`*^9}, {3.78160253611205*^9, 
  3.7816026252922573`*^9}, {3.781602681574018*^9, 3.781602699229116*^9}, {
  3.782657906954549*^9, 3.782657916224681*^9}, {3.782661063452709*^9, 
  3.782661067986163*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"f77c67cb-f0bd-4e86-9b7a-6f43186bd7e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJZD", "=", 
   RowBox[{"dataJZDunordered", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"dataJE", "//", "First"}], "//", "Keys"}], "//", "Normal"}]}],
      "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816027018717785`*^9, 3.7816027266596203`*^9}, {
  3.781602762947981*^9, 3.781602771068947*^9}, {3.78265789922052*^9, 
  3.7826579050229096`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"b0d4a967-f0df-4a02-ab2c-6e4dde732990"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMD", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<MD_Lanthanide_reactions\>\"", ",", "\"\<A:S\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.789341399313546*^9, 3.7893414112144556`*^9}, {
   3.789341443887838*^9, 3.789341473748061*^9}, {3.789341624269355*^9, 
   3.7893416281829476`*^9}, 3.7898348811072493`*^9},
 CellLabel->"In[77]:=",ExpressionUUID->"a8b537e0-c52e-4a7a-807f-e6873488349d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDord", "=", 
   RowBox[{"dataMD", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Reference\>\"", ",", "\"\<Ln ID\>\"", ",", "\"\<Ln Mass/g\>\"", 
       ",", "\"\<H2SeO4 (aq) 40%w/w /g\>\"", ",", "\"\<Na2C2O4/g\>\"", ",", 
       "\"\<Amine/g\>\"", ",", "\"\<Amine name\>\"", ",", "\"\<SMILES\>\"", 
       ",", "\"\<Added H2O/g\>\"", ",", "\"\<pH\>\"", ",", "\"\<Outcome\>\"", 
       ",", "\"\<Purity\>\""}], "}"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7893416301744895`*^9, 3.7893417528008356`*^9}, {
  3.7904607738810253`*^9, 3.790460776041793*^9}, {3.7912040602334223`*^9, 
  3.7912040609445353`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"5171f080-931a-4aa4-bd1e-4f797c21ec56"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "take", " ", "only", " ", "reactions", " ", "that", " ", "have", " ", 
   "outcome", " ", "entries"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7912179442892313`*^9, 3.791217956642193*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"cd7da6dc-ae5f-492e-820e-7ae58a91f8a8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDord", "=", 
   RowBox[{"dataMDord", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "200"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7912179596361895`*^9, 3.7912179643725195`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"4b38cb8d-aeb7-479f-99f1-1a4182010598"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDFull", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"dataMDord", "[", 
      RowBox[{"All", ",", 
       RowBox[{
        RowBox[{"KeyMap", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "/.", 
            RowBox[{
            "\"\<Reference\>\"", "\[Rule]", "\"\<Reaction number\>\""}]}], 
           "&"}], ",", "#"}], "]"}], "&"}]}], "]"}], "[", 
     RowBox[{"All", ",", 
      RowBox[{
       RowBox[{"KeyMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "/.", 
           RowBox[{
           "\"\<H2SeO4 (aq) 40%w/w /g\>\"", "\[Rule]", 
            "\"\<H2SeO4 (40 wt %)/g\>\""}]}], "&"}], ",", "#"}], "]"}], 
       "&"}]}], "]"}], "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"KeyMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "/.", 
          RowBox[{"\"\<Added H2O/g\>\"", "\[Rule]", "\"\<H2O/g\>\""}]}], 
         "&"}], ",", "#"}], "]"}], "&"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7912414155230637`*^9, 3.7912414598906307`*^9}, {
  3.791241498066386*^9, 3.791241620348447*^9}, {3.7912416813879967`*^9, 
  3.7912417362433567`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"557c61ba-f89e-4c8b-a835-3ccba14dde16"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataCombined", "=", 
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{"Catenate", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Normal", "[", "dataJE", "]"}], ",", 
         RowBox[{"Normal", "[", "dataJZD", "]"}]}], "}"}], "]"}], "]"}], ",", 
     RowBox[{"-", "25"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781602865872223*^9, 3.7816028879329557`*^9}, {
   3.7816029521238112`*^9, 3.7816030114814105`*^9}, 3.781603925653813*^9, 
   3.781615540265335*^9, {3.7821728512473164`*^9, 3.7821728544821634`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"1fff0d1e-1b11-419f-8ebd-1c0f530699a0"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"standardize", " ", "labels"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8046006614863033`*^9, 
  3.8046006680223036`*^9}},ExpressionUUID->"942c48c9-a02f-4827-b3c3-\
e659196f9c24"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataCombined", "=", 
   RowBox[{"dataCombined", "/.", 
    RowBox[{"\"\<ErCl3.6H2O/g\>\"", "\[Rule]", "\"\<ErCl3.6H2O\>\""}]}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797816954789365*^9, 3.7978169566574745`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"1c1b86ca-e022-4772-9d84-8be4f2c4c64b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genData2D", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\genData2D.csv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7954089003983264`*^9, 3.7954089207081604`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"84edf42e-bd69-4e3b-b110-7a38910571f2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genData2Dv2", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\genData2Dv2.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7954089226455493`*^9, 3.7954089314147415`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"53548bd7-5611-4dd9-91ec-2272eff87e50"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allDataMACCs", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\allDataMACCs.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.795376380925789*^9, 3.7953764503252993`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"8dd02bc8-d728-4a4a-822b-d6e26ddd93ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allDataOneHot", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\allDataOneHot.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.79534690939496*^9, 3.7953469300087214`*^9}, {
  3.7953470373660774`*^9, 3.795347044136973*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"57063d85-831f-4e5a-8ed3-bf7b87e53e22"],

Cell[CellGroupData[{

Cell["Data Processing Functions", "Subsection",
 CellChangeTimes->{{3.7977283618435545`*^9, 
  3.7977283717906923`*^9}},ExpressionUUID->"02666971-04fb-4577-abe4-\
90fe6e2567dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"laGroupQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<LaCl3.6H2O\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816155714819126`*^9, 3.781615577177689*^9}, {
  3.7816156247321773`*^9, 3.7816156292391233`*^9}, {3.782658876652196*^9, 
  3.7826588769882216`*^9}, {3.7918998515832415`*^9, 3.791899869640334*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"92d0f3ba-3dd2-47ee-ae6c-d9be855c74a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"erGroupQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<ErCl3.6H2O\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921040103059583`*^9, 3.792104021030526*^9}, {
  3.792104068501077*^9, 3.792104073095149*^9}, {3.7921041462506914`*^9, 
  3.7921041470356154`*^9}, {3.792104487220478*^9, 3.7921044913074737`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"bdfc9ce6-823c-4b03-837a-999ccc0dfaea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lanthGroup", "[", 
   RowBox[{"df_", ",", "lanth_String"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"lanthGroupQ", "[", 
      RowBox[{"row_", ",", 
       RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
      RowBox[{"lanth", "<>", "\"\<Cl3.6H2O\>\""}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "lanthGroupQ"}], "]"}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.797816682445188*^9, 3.797816765523422*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"751b95dd-a07d-4c54-87da-9666729f6ee9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<SMILES\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<NCCCNCCCCNCCCN\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816157028235025`*^9, 3.7816157458544636`*^9}, {
  3.782172411151492*^9, 3.7821724138827496`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"0e8128b5-e6de-42c2-92ad-0cf477c6b18a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineGroup", "[", 
   RowBox[{"df_", ",", "amine_String"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"amineQ", "[", 
      RowBox[{"row_", ",", 
       RowBox[{"query_String", ":", "\"\<SMILES\>\""}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"row", "[", "query", "]"}], "\[Equal]", "amine"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "amineQ"}], "]"}]}], ")"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797816526361371*^9, 3.7978166174643745`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"a282b186-a094-4186-93f9-8ad34619e001"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rxnSuccessQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", " ", "\"\<Outcome\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[GreaterEqual]", "3"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781622007317878*^9, 3.7816220195361867`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"d6f04097-0079-4bc4-a0da-c9061b1a1940"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccs", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", "7", "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.791803122882662*^9, 3.7918031382559056`*^9}, {
   3.7918035309814463`*^9, 3.7918035696370006`*^9}, {3.792106289580659*^9, 
   3.792106290085314*^9}, {3.792148276635498*^9, 3.79214829072795*^9}, {
   3.7953765358516235`*^9, 3.795376538303071*^9}, 3.797778826863719*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"0710a27a-525d-4148-8bd2-ef2db8ec1acc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccsRed", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Delete", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "5", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "7", "}"}]}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921911434126787`*^9, 3.792191197483028*^9}, {
   3.7953765445483775`*^9, 3.795376544787736*^9}, 3.797778830770344*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"50a1d803-37e3-4c60-870c-51e1ba728914"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccsRedpH", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Delete", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "5", "}"}], ",", 
         RowBox[{"{", "7", "}"}]}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921919063748302`*^9, 3.79219191467488*^9}, {
   3.795376549355523*^9, 3.795376549498181*^9}, 3.7977788341736927`*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"b4a8257c-cbd9-4d0a-ba06-92d2629190b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOH", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<H2SeO4 Mole Fraction\>\"", ",", 
       "\"\<Sodium Oxalate Mole Fraction\>\"", ",", 
       "\"\<Amine Mole Fraction\>\"", ",", "\"\<H2O Mole Fraction\>\"", ",", 
       "\"\<pH\>\"", ",", "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", 
       "\"\<NCCCCN\>\"", ",", "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", 
       ",", "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948837777078834`*^9, 3.7948837984704933`*^9}, {
   3.7948844019697094`*^9, 3.794884405660018*^9}, 3.797798003770788*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"e5c614fb-0a34-4ada-b03a-889f1fb8c4a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHred", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<Sodium Oxalate Mole Fraction\>\"",
        ",", "\"\<Amine Mole Fraction\>\"", ",", "\"\<NCCN\>\"", ",", 
       "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", "\"\<NCCCCCN\>\"", ",", 
       "\"\<NCCCCCCCN\>\"", ",", "\"\<NCCCNCCCCNCCCN\>\"", ",", 
       "\"\<CN(C)CCN(C)C\>\"", ",", "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"",
        ",", "\"\<CC1CNCCN1\>\"", ",", "\"\<CC1CNC(C)CN1\>\"", ",", 
       "\"\<C1CN2CCN1CC2\>\"", ",", "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CCNC1\>\"", ",", "\"\<NCC1CCCCN1\>\"", ",", 
       "\"\<CC1=NC=CN=C1\>\"", ",", "\"\<NCCNCCN\>\"", ",", 
       "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", "\"\<C(CN)CN\>\""}], "}"}]}], "]"}],
    "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948847695973425`*^9, 3.79488478779722*^9}, 
   3.797778862286379*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"d53f6d00-222a-4cd4-8577-bbaed14594af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHredpH", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<Sodium Oxalate Mole Fraction\>\"",
        ",", "\"\<Amine Mole Fraction\>\"", ",", "\"\<pH\>\"", ",", 
       "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
       "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", 
       "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794884796554892*^9, 3.7948848103915005`*^9}, 
   3.797778849797413*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"5d61392c-7d50-4ed7-a84d-e7c3a6712d6d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHonly", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
       "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", 
       "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948849660265164`*^9, 3.7948849850306168`*^9}, 
   3.797778856985733*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"8ba0e897-8eb6-4c63-a7c5-9f382a6ceb96"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainTestSplit", "[", "fraction_", "]"}], "[", "df_Dataset", 
   "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nTrainingItems", " ", "=", " ", 
      RowBox[{"UpTo", "@", 
       RowBox[{"Round", "@", 
        RowBox[{"(", 
         RowBox[{"fraction", "*", 
          RowBox[{"Length", "[", "df", "]"}]}], ")"}]}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TakeDrop", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"RandomSample", "[", "df", "]"}], ",", " ", 
      "\[IndentingNewLine]", "nTrainingItems"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], " "}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7915552591974335`*^9, 3.791555263437021*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"bf7a3b22-b8a1-4485-b1ba-1dfc7d5d9cd6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainTestSplit", "[", "fraction_", "]"}], "[", 
   RowBox[{"df_Dataset", ",", "seed_"}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nTrainingItems", " ", "=", " ", 
      RowBox[{"UpTo", "@", 
       RowBox[{"Round", "@", 
        RowBox[{"(", 
         RowBox[{"fraction", "*", 
          RowBox[{"Length", "[", "df", "]"}]}], ")"}]}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TakeDrop", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"SeedRandom", "[", "seed", "]"}], ";", 
        RowBox[{"RandomSample", "[", "df", "]"}]}], ")"}], ",", " ", 
      "\[IndentingNewLine]", "nTrainingItems"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], " "}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.804602126514862*^9, 3.8046021741950445`*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"399763c1-11c1-4a5c-bc60-eb5ac0ee5845"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classMeasures", "[", "cm_ClassifierMeasurementsObject", "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", " ", 
       RowBox[{"cm", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Accuracy\>\"", ",", "\"\<Recall\>\"", ",", "\"\<MCC\>\"", ",", 
      "\"\<Sensitivity\>\"", ",", "\"\<Specificity\>\"", ",", 
      "\"\<AreaUnderROCCurve\>\"", ",", "\"\<F1Score\>\""}], "}"}]}], "//", 
   "TableForm"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.791293828248836*^9, 3.791293830784854*^9}, {
  3.791293873577479*^9, 3.7912938758373833`*^9}, {3.791720537960402*^9, 
  3.7917205555484447`*^9}, {3.7923259283658032`*^9, 3.7923259303311443`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"7f07a6f9-2c78-4606-9db3-8fbf6ef87493"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Make Sampling Datasets", "Section",
 CellChangeTimes->{{3.7977291888355694`*^9, 
  3.7977291931138754`*^9}},ExpressionUUID->"8bb6d680-ad22-43d4-bb13-\
3f1a9498138c"],

Cell[CellGroupData[{

Cell["MACCs Keys", "Subsection",
 CellChangeTimes->{{3.7977292038482203`*^9, 
  3.797729205434863*^9}},ExpressionUUID->"1b02fffb-5e21-435f-9f0f-\
1252cd1c860e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataRaw", "=", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"genData2Dv2", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", 
        "10", ",", "11", ",", "12", ",", "13"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977292091355968`*^9, 3.797729218862091*^9}, {
  3.7977293185267353`*^9, 3.7977293460560913`*^9}, {3.7977296240994773`*^9, 
  3.79772963654508*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"f36a8485-2013-409d-8ff2-d2722129a491"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"get", " ", "all", " ", "the", " ", "maccs", " ", "keys"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.797730156260543*^9, 3.797730161618863*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"4f39cd32-710e-4d94-ad87-485a239d1b06"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccs", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{
     InterpretationBox[
      TagBox[
       StyleBox[
        StyleBox[
         FrameBox[GridBox[{
            {
             StyleBox[
              StyleBox[
               AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                BoxBaselineShift->-0.25,
                BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
               
               FontColor->RGBColor[
                0.8745098039215686, 0.2784313725490196, 0.03137254901960784]],
              ShowStringCharacters->False,
              FontFamily->"Source Sans Pro Black",
              FontSize->Rational[10, 13] Inherited,
              FontWeight->"Heavy",
              PrivateFontOptions->{"OperatorSubstitution"->False}], 
             StyleBox[
              StyleBox["\<\"MACCSKeys\"\>", "ResourceFunctionLabel"],
              ShowStringCharacters->False,
              FontSize->Rational[12, 13] Inherited]}
           }]], "ResourceFunctionFrame"],
        FrameBoxOptions->{Background->GrayLevel[0.5, 0.15],
        BaseStyle->{
         "StandardForm", LineSpacing -> {0, 0}, LineBreakWithin -> False},
        FrameMargins->{{3, 3}, {0, 0}},
        FrameStyle->Directive[
          GrayLevel[0.5, 0.35], 
          AbsoluteThickness[0.5]],
        RoundingRadius->4},
        GridBoxOptions->{FrameStyle->GrayLevel[1, 0],
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
        GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{0.25}}, "Rows" -> {-0.1, {}, 0}}}],
       {"FunctionResourceBox", 
        RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784],
         "\"MACCSKeys\""}],
      ResourceFunction[
       ResourceObject[
        Association[
        "Name" -> "MACCSKeys", "ShortName" -> "MACCSKeys", "UUID" -> 
         "f8b0f1a9-223b-4eda-9d8c-9e4928b1b029", "ResourceType" -> "Function",
          "Version" -> "1.0.0", "Description" -> 
         "Compute the 166-bit MACCS (Molecular ACCess System) key", 
         "RepositoryLocation" -> 
         URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
         "SymbolName" -> 
         "FunctionRepository`$9d04496dd1d74429862dbd9de474c06d`MACCSKeys", 
         "FunctionLocation" -> 
         CloudObject[
          "https://www.wolframcloud.com/obj/e49eb676-b131-43dc-a539-\
cec4e5e85b7c"]], {ResourceSystemBase -> Automatic}]],
      Selectable->False], "/@", "smiles"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7954098603627405`*^9, 3.7954099252933607`*^9}, {
  3.795409968908456*^9, 3.795410083911524*^9}, {3.7954102185602927`*^9, 
  3.795410368181925*^9}, {3.7959231644070606`*^9, 3.795923172071984*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"01b8eb54-e108-4471-b273-0c387ddc0c60"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "make", " ", "an", " ", "assoc", " ", "of", " ", "each", " ", "maccs", " ", 
   "key", " ", "\"\<name\>\"", " ", "and", " ", "the", " ", "value"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.797730163349805*^9, 3.7977301747219367`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"bde02aed-928a-4188-9b96-39660f05fb1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsAssoc", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<maccs\>\"", "<>", 
        RowBox[{"ToString", "[", "j", "]"}]}], "->", 
       RowBox[{
        RowBox[{"maccs", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "j", "]"}], "]"}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "maccs", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"maccs", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.795924457764222*^9, 3.7959246559957795`*^9}, {
  3.795924689825609*^9, 3.7959247935113134`*^9}, {3.797730774950071*^9, 
  3.797730823417225*^9}, {3.797730879059975*^9, 3.797730882277068*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"b7b09101-887d-489d-8ec5-3ff043ae399a"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "get", " ", "only", " ", "the", " ", "maccs", " ", "keys", " ", "that", " ",
    "vary", " ", 
   RowBox[{"(", 
    RowBox[{
    "from", " ", "maccs", " ", "dataset", " ", "where", " ", "this", " ", 
     "was", " ", "already", " ", "computed"}], ")"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977301764903917`*^9, 3.797730194751487*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"3423186c-a548-43f3-9e07-c976796b7c12"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsRed", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Lookup", "[", 
      RowBox[{
       RowBox[{"Association", "[", 
        RowBox[{"maccsAssoc", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"First", "[", 
           RowBox[{"allDataMACCs", "[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"10", ";;"}], "}"}]}], "]"}], "]"}], "]"}], "]"}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "maccsAssoc", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797731037699054*^9, 3.797731163269812*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"f112b039-fb53-4d0a-bf33-6f15a0fdf8ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsAssocRed", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"First", "[", 
           RowBox[{"allDataMACCs", "[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"10", ";;"}], "}"}]}], "]"}], "]"}], "]"}], "]"}], 
        "]"}], ",", "#"}], "]"}], "&"}], "/@", "maccsRed"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797731387177384*^9, 3.797731469646494*^9}, {
  3.7977315006404223`*^9, 3.7977315151608515`*^9}, {3.7977315517990856`*^9, 
  3.797731581658821*^9}, {3.797731625682429*^9, 3.797731738263607*^9}, {
  3.797731801638977*^9, 3.797731804044848*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"e85ee864-22ac-4bb7-a645-3d7666f950e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"genDataRaw", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "#"}], "]"}], 
            "&"}], "/@", "maccsAssocRed"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"genDataRaw", "[", 
                RowBox[{"[", 
                 RowBox[{"i", "+", "1"}], "]"}], "]"}], "]"}], ",", "#"}], 
             "]"}], "&"}], "/@", "maccsAssocRed"}]}], "\[IndentingNewLine]", 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "20"}], "}"}]}], "]"}], "//", 
      "Flatten"}], "//", "DeleteDuplicates"}], "//", "Dataset"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977685099254184`*^9, 3.7977685301862717`*^9}, {
  3.797768654874099*^9, 3.797768812541133*^9}, {3.7977688550559883`*^9, 
  3.797768880494068*^9}, {3.797768914142953*^9, 3.797768924494399*^9}, {
  3.7977692894126697`*^9, 3.7977693049402647`*^9}, {3.7977734762860675`*^9, 
  3.797773481886305*^9}, {3.7977766008410673`*^9, 3.7977766009557905`*^9}, {
  3.797776930812009*^9, 3.7977769643033924`*^9}, {3.797781826838252*^9, 
  3.7977818300175962`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"23fa21af-377d-4832-bd01-ffc3cb37f921"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "amine", " ", "SMILES", " ", "to", " ", 
   "their", " ", "reduced", " ", "MACCS", " ", "keys"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797778366426738*^9, 3.797778376915882*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"3b79a496-bd87-400f-b64b-4e6ed30d1a09"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineRedMACCsAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "maccsAssocRed"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797778190938843*^9, 3.79777836057209*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"c6ef8b47-5061-421f-9172-bd67e96068bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositionIndex", "[", "smiles", "]"}]], "Input",
 CellChangeTimes->{{3.7977895686983175`*^9, 3.797789573105955*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"ad2b9c45-02fa-433c-b83a-5fe3d1caa6cc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NCCN\"\>", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"\<\"NCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{"\<\"NCCCNCCCCNCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{"\<\"CN(C)CCN(C)C\"\>", "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{"\<\"CNCCNC\"\>", "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{"\<\"C1CNCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{"\<\"CC1CNCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{"\<\"CC1CNC(C)CN1\"\>", "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{"\<\"C1CN2CCN1CC2\"\>", "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{"\<\"Cl.Cl.NC1CN2CCC1CC2\"\>", "\[Rule]", 
    RowBox[{"{", "13", "}"}]}], ",", 
   RowBox[{"\<\"Cl.Cl.NC1CCNC1\"\>", "\[Rule]", 
    RowBox[{"{", "14", "}"}]}], ",", 
   RowBox[{"\<\"NCC1CCCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "15", "}"}]}], ",", 
   RowBox[{"\<\"CC1=NC=CN=C1\"\>", "\[Rule]", 
    RowBox[{"{", "16", "}"}]}], ",", 
   RowBox[{"\<\"NCCNCCN\"\>", "\[Rule]", 
    RowBox[{"{", "17", "}"}]}], ",", 
   RowBox[{"\<\"C1CC(CCN1)C2CCNCC2\"\>", "\[Rule]", 
    RowBox[{"{", "18", "}"}]}], ",", 
   RowBox[{"\<\"C(CN)CN\"\>", "\[Rule]", 
    RowBox[{"{", "19", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.797789573440578*^9, 3.7977976271469975`*^9, 
  3.7985485558891315`*^9, 3.8046014449898987`*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"ced7230e-a2d4-48d9-b7aa-6c008ae190a2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "list", " ", "of", " ", "the", " ", "names", " ", "of", " ", "gen", " ", 
   "data", " ", "MACCs", " ", "key", " ", "datasets"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977902116394377`*^9, 3.7977902223723288`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"c8873c28-1393-4cb4-b6f6-0e0d53082359"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCsList", "=", 
   RowBox[{"{", 
    RowBox[{
    "genDataMACCsA1", ",", "genDataMACCsA2", ",", "genDataMACCsA3", ",", 
     "genDataMACCsA4", ",", "genDataMACCsA5", ",", "genDataMACCsA6", ",", 
     "genDataMACCsA7", ",", "genDataMACCsA8", ",", "genDataMACCsA9", ",", 
     "genDataMACCsA10", ",", "genDataMACCsA11", ",", "genDataMACCsA12", ",", 
     "genDataMACCsA13", ",", "genDataMACCsA14", ",", "genDataMACCsA15", ",", 
     "genDataMACCsA16", ",", "genDataMACCsA17", ",", "genDataMACCsA18", ",", 
     "genDataMACCsA19"}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797789827905715*^9, 3.797789876863767*^9}, {
  3.7977900907871294`*^9, 3.7977900914457607`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"9dde5512-f858-480b-a18a-657aea842d35"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "generates", " ", "separate", " ", "generated", " ", "sampling", " ", 
   "datasets", " ", "for", " ", "each", " ", "amine", " ", "with", " ", 
   "MACCs", " ", "descriptors"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.79779017762912*^9, 3.7977902016774435`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"0da964f9-2a01-40e9-939d-288a3b8db68e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "genDataMACCsA1", ",", "genDataMACCsA2", ",", "genDataMACCsA3", ",", 
     "genDataMACCsA4", ",", "genDataMACCsA5", ",", "genDataMACCsA6", ",", 
     "genDataMACCsA7", ",", "genDataMACCsA8", ",", "genDataMACCsA9", ",", 
     "genDataMACCsA10", ",", "genDataMACCsA11", ",", "genDataMACCsA12", ",", 
     "genDataMACCsA13", ",", "genDataMACCsA14", ",", "genDataMACCsA15", ",", 
     "genDataMACCsA16", ",", "genDataMACCsA17", ",", "genDataMACCsA18", ",", 
     "genDataMACCsA19"}], "}"}], "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"amineRedMACCsAssoc", "[", 
           RowBox[{"smiles", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
       RowBox[{"Normal", "[", "genDataRaw", "]"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "smiles", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977893833120947`*^9, 3.797789409895822*^9}, {
  3.7977899980614743`*^9, 3.797789999643379*^9}, {3.797790893144055*^9, 
  3.7977909191332893`*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"90bc2d77-3c4c-41f2-8c73-e1423a639ddb"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "each", " ", "smiles", " ", "string", " ", 
   "and", " ", "its", " ", "generated", " ", "sampling", " ", "dataset", " ", 
   "with", " ", "maccs", " ", "decriptors"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977901550150166`*^9, 3.7977901688104553`*^9}, {
  3.797791210847643*^9, 3.797791212053918*^9}, {3.7977977439748707`*^9, 
  3.7977977463800936`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"0ebb8817-cd2f-449d-bebb-73703fa2c73f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCsSAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "genDataMACCsList"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977899026079407`*^9, 3.7977899181563168`*^9}, 
   3.7977899684040127`*^9, {3.797790102989602*^9, 3.7977901304155207`*^9}, {
   3.7977912140535975`*^9, 3.797791225082279*^9}, {3.797797748981144*^9, 
   3.797797764176195*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"92923544-06cb-42fd-b9db-abca8dddce6c"]
}, Closed]],

Cell[CellGroupData[{

Cell["One Hot Encoding", "Subsection",
 CellChangeTimes->{{3.7977905195781918`*^9, 
  3.7977905234438753`*^9}},ExpressionUUID->"8cb200c7-bbb2-43b0-9bd6-\
2ee942e0cb82"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "one", " ", "hot", " ", "encode", " ", "for", " ", "each", " ", "amine"}], 
   ";", " ", 
   RowBox[{
   "enc", " ", "turns", " ", "True", " ", "or", " ", "False", " ", "to", " ", 
    "1", " ", "or", " ", "0"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948659943854885`*^9, 3.794866015501851*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"d230dfdb-eea0-45d4-b29e-7c0e089b8c99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"enc", "=", 
  RowBox[{"NetEncoder", "[", "\"\<Boolean\>\"", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948651781564693`*^9, 3.794865179126934*^9}, {
  3.7948653553328924`*^9, 3.7948653589806294`*^9}, {3.7948654716834154`*^9, 
  3.794865521904889*^9}, {3.7948655533867555`*^9, 3.794865554374774*^9}, {
  3.7948655907751646`*^9, 3.79486559244794*^9}, {3.7948657221804185`*^9, 
  3.7948657249116125`*^9}, {3.79486576204962*^9, 3.7948657656069517`*^9}, {
  3.7948658033034306`*^9, 3.794865854323888*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"b3a72139-2fe9-4732-9b54-c7335529a31a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Boolean\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Boolean\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7948658545894423`*^9, 3.7953467863934927`*^9, 
  3.797790576212371*^9, 3.797797635194351*^9, 3.7978055627008457`*^9, 
  3.798548185981921*^9, 3.798548564766074*^9, 3.804601452911669*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"bd21804a-b8ba-4402-a783-1f43d490925d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "create", " ", "True", " ", "and", " ", "False", " ", "lists", " ", "for", 
   " ", "each", " ", "amine"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948661471398582`*^9, 3.794866156451421*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"ad702dd5-c05b-4bd4-9361-b325164780eb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"amineTandF", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"smiles", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", 
      RowBox[{"smiles", "[", 
       RowBox[{"[", "j", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "19"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1and0", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"enc", "[", "#", "]"}], "&"}], "/@", "amineTandF"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1and0Assoc", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"smiles", "[", 
         RowBox[{"[", "m", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{
        RowBox[{"amine1and0", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "[", 
        RowBox[{"[", "m", "]"}], "]"}]}], " ", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "19"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1HotAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"smiles", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{"amine1and0Assoc", "[", 
        RowBox[{"[", "n", "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "19"}], "}"}]}], "]"}], "|>"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794866185026414*^9, 3.794866559763882*^9}, {
  3.7948666019431486`*^9, 3.794866639807707*^9}, {3.794867330970943*^9, 
  3.7948673631276274`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"1a178f2e-e243-4c6e-8484-64306e5d0923"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "list", " ", "of", " ", "gen", " ", "data", " ", "one", " ", "hot", " ", 
   "encoded", " ", "for", " ", "each", " ", "amine"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977911593124084`*^9, 3.7977911683431816`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"a70272ff-27a3-4da5-a9fe-86489a7a1205"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataOheList", "=", 
   RowBox[{"{", 
    RowBox[{
    "genDataOheA1", ",", "genDataOheA2", ",", "genDataOheA3", ",", 
     "genDataOheA4", ",", "genDataOheA5", ",", "genDataOheA6", ",", 
     "genDataOheA7", ",", "genDataOheA8", ",", "genDataOheA9", ",", 
     "genDataOheA10", ",", "genDataOheA11", ",", "genDataOheA12", ",", 
     "genDataOheA13", ",", "genDataOheA14", ",", "genDataOheA15", ",", 
     "genDataOheA16", ",", "genDataOheA17", ",", "genDataOheA18", ",", 
     "genDataOheA19"}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977911030695877`*^9, 3.7977911077625537`*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"37ffff50-9ab0-4c92-91fa-0391fd7eac77"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "generated", " ", "sampling", " ", "datasets", " ", "for", " ", "each", " ",
    "amine", " ", "one", " ", "hot", " ", "encoded"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977911708534155`*^9, 3.797791182773553*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"3f0a203e-8843-43e5-bef9-7ff27774415c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "genDataOheA1", ",", "genDataOheA2", ",", "genDataOheA3", ",", 
     "genDataOheA4", ",", "genDataOheA5", ",", "genDataOheA6", ",", 
     "genDataOheA7", ",", "genDataOheA8", ",", "genDataOheA9", ",", 
     "genDataOheA10", ",", "genDataOheA11", ",", "genDataOheA12", ",", 
     "genDataOheA13", ",", "genDataOheA14", ",", "genDataOheA15", ",", 
     "genDataOheA16", ",", "genDataOheA17", ",", "genDataOheA18", ",", 
     "genDataOheA19"}], "}"}], "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"Association", "@", 
           RowBox[{"amine1HotAssoc", "[", 
            RowBox[{"smiles", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", "#"}], "]"}], 
        "&"}], "/@", 
       RowBox[{"Normal", "[", "genDataRaw", "]"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "smiles", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797790761633565*^9, 3.797790770993244*^9}, {
  3.797790993063525*^9, 3.797791094142624*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"9c2ad11f-eecb-4dc8-b2dd-760c525c955e"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "each", " ", "smiles", " ", "string", " ", 
   "and", " ", "its", " ", "generated", " ", "sampling", " ", "dataset", " ", 
   "with", " ", "one", " ", "hot", " ", "encoded", " ", "decriptors"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7977901550150166`*^9, 3.7977901688104553`*^9}, {
  3.797791210847643*^9, 3.797791212053918*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"ac705e7f-9d33-4358-b326-5490a63d7e75"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataOheSAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "genDataOheList"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977899026079407`*^9, 3.7977899181563168`*^9}, 
   3.7977899684040127`*^9, {3.797790102989602*^9, 3.7977901304155207`*^9}, {
   3.7977912140535975`*^9, 3.797791225082279*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"7960f15a-d622-478f-8a61-f4817b2df185"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Split Data", "Section",
 CellChangeTimes->{{3.8046018771637926`*^9, 
  3.804601878417282*^9}},ExpressionUUID->"d3a78690-de63-4552-8cbf-\
02695864ba72"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"take", " ", "initial", " ", 
   RowBox[{"80", "/", "20"}], " ", "split", " ", "of", " ", "288", " ", 
   "erbium", " ", "reactions"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8046024149322343`*^9, 
  3.8046024392660556`*^9}},ExpressionUUID->"1dcde0fe-f781-44ac-a891-\
9d8ea0ef8490"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"erTrainMACCs", ",", "erTestMACCs"}], "}"}], "=", 
   RowBox[{
    RowBox[{"trainTestSplit", "[", "0.8", "]"}], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"GroupBy", "[", 
       RowBox[{"allDataMACCs", ",", "laGroupQ"}], "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}], ",", "1841"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8046018815455284`*^9, 3.804602001561383*^9}, {
  3.80460218407016*^9, 3.8046022339013057`*^9}, {3.8046022930418186`*^9, 
  3.8046023455243845`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"33ded86d-11b9-4e97-98be-007372272abd"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "take", " ", "some", " ", "from", " ", "the", " ", "training", " ", "data",
     " ", "to", " ", "use", " ", "as", " ", "active", " ", "sample", " ", 
    "pool"}], " ", "-", " ", 
   RowBox[{
   "note", " ", "that", " ", "the", " ", "rxns", " ", "are", " ", "already", 
    " ", "randomly", " ", "samples", " ", "from", " ", "the", " ", 
    RowBox[{"train", "/", "test"}], " ", "split"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.804602459992835*^9, 3.8046024733296824`*^9}, {
  3.8046025089782734`*^9, 
  3.8046025171070457`*^9}},ExpressionUUID->"770cf801-3415-4b1e-8ceb-\
5f1c421abe19"],

Cell[BoxData[
 RowBox[{
  RowBox[{"erALpool", "=", 
   RowBox[{"erTrainMACCs", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "30"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8046024762893143`*^9, 3.8046025357298145`*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"cc31b2d8-21d8-42c9-bf8a-22ac81962711"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"now", " ", 
   RowBox[{"there", "'"}], "s", " ", "200", " ", "training", " ", "rxns"}], 
  " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8046025627171*^9, 
  3.8046025668706713`*^9}},ExpressionUUID->"01786e04-14ca-4d18-94a4-\
77764fc3393b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"erTrainMACCs", "=", 
   RowBox[{"erTrainMACCs", "[", 
    RowBox[{"[", 
     RowBox[{"31", ";;"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.804602539330142*^9, 3.804602552851296*^9}},
 CellLabel->
  "In[142]:=",ExpressionUUID->"38cd8c7d-71d6-42cc-9bf8-87c26ac6a023"]
}, Closed]],

Cell[CellGroupData[{

Cell["Active Learning Sampling ", "Section",
 CellChangeTimes->{{3.7943150232371006`*^9, 
  3.794315027733412*^9}},ExpressionUUID->"748afb97-cd0e-4ba2-9774-\
ca9c7b920dcc"],

Cell[CellGroupData[{

Cell["Do Sampling ", "Subsection",
 CellChangeTimes->{{3.7977913209215913`*^9, 
  3.7977913228027563`*^9}},ExpressionUUID->"f3f0504b-77d6-42bf-b195-\
8b9dbe43a8d7"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "want", " ", "to", " ", "keep", " ", "this", " ", "outside", " ", "of", " ",
    "a", " ", "module", " ", "to", " ", "allow", " ", "for", " ", "variables",
    " ", "to", " ", "be", " ", 
   RowBox[{"utilized", "?"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797791466322353*^9, 3.797791478592635*^9}},
 CellLabel->
  "In[244]:=",ExpressionUUID->"23ea11b3-9c16-496e-ad1a-240c7b717751"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{
  "sampleDataML", ",", "classProbs", ",", "classProbsValues", ",", 
   "classProbsValuesF", ",", "classProbsValuesT", ",", "classEntropies", ",", 
   "softMaxclass", ",", "choice", ",", "probs", ",", "sampleDS"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7977828309245634`*^9, 3.797782850049828*^9}, {
  3.7977923825151615`*^9, 3.797792393571061*^9}},
 CellLabel->
  "In[245]:=",ExpressionUUID->"1649b1a7-7404-460b-8f6f-0831fae98f1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{
   "classifier_ClassifierFunction", ",", "sampleDS_Dataset", ",", 
    "goal_String", ",", "\[Beta]_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sampleDataML", ",", "classProbs", ",", "classProbsValues", ",", 
      "classProbsValuesF", ",", "classProbsValuesT", ",", "classEntropies", 
      ",", "softMaxclass", ",", "choice", ",", "probs", ",", "out"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"generate", " ", "sampling", " ", "weights"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sampleDataML", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"sampleDS", "[", 
        RowBox[{"All", ",", 
         RowBox[{"Keys", "[", 
          RowBox[{"Information", "[", 
           RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}], 
          "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"classProbs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{"sampleDataML", ",", "\"\<Probabilities\>\""}], "]"}]}], ";", 
     "\n", 
     RowBox[{"classProbsValues", "=", 
      RowBox[{"classProbs", "//", "Values"}]}], ";", "\n", 
     RowBox[{"classProbsValuesF", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classProbsValuesT", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classEntropies", "=", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<explore\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"#1", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
              RowBox[{"#2", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<exploit\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", ">", "0.5"}], ",", 
             RowBox[{
              RowBox[{"-", "\[Beta]"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}]}], "]"}], 
           "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\n", 
     RowBox[{"softMaxclass", "=", 
      RowBox[{
       RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classEntropies", "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Makes", " ", "one", " ", "choice"}], ",", " ", 
       RowBox[{
       "gets", " ", "the", " ", "probs", " ", "and", " ", "outputs", " ", "a",
         " ", "dataset", " ", "and", " ", "table"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"choice", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{
          RowBox[{"softMaxclass", "\[Rule]", 
           RowBox[{"Normal", "[", "sampleDS", "]"}]}], ",", "1"}], "]"}], 
        "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"probs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "choice", "]"}], ",", 
        "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"{", 
       RowBox[{"choice", ",", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "}"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<False Probability\>\"", ",", "\"\<True Probability\>\""}], 
              "}"}]}], "}"}]}]}], "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977825106654043`*^9, 3.7977826808436165`*^9}, {
   3.7977827894281693`*^9, 3.7977828251004467`*^9}, {3.797782926008704*^9, 
   3.7977829519301214`*^9}, {3.7977829828717723`*^9, 
   3.7977830121078405`*^9}, {3.7977835603765044`*^9, 
   3.7977835606773367`*^9}, {3.797783651368411*^9, 3.7977836530448356`*^9}, {
   3.7977837641872344`*^9, 3.7977837648755417`*^9}, {3.7977837950188437`*^9, 
   3.797783897570631*^9}, {3.797791535613364*^9, 3.797791549633828*^9}, {
   3.79779219983659*^9, 3.797792203713299*^9}, {3.7977922359268303`*^9, 
   3.79779224044201*^9}, {3.7977924951041236`*^9, 3.7977924976437025`*^9}, {
   3.797792638685742*^9, 3.797792640412073*^9}, {3.7977929213116045`*^9, 
   3.7977929214426565`*^9}, {3.797798139288637*^9, 3.797798139889425*^9}, {
   3.7977982506559677`*^9, 3.797798258691498*^9}, 3.7978057594612546`*^9, {
   3.7978058169272633`*^9, 3.7978058283093843`*^9}, {3.7978060501541615`*^9, 
   3.797806053188048*^9}, {3.7981686440436573`*^9, 3.7981686452769604`*^9}, {
   3.798548256056916*^9, 3.798548259830098*^9}, {3.798549918231038*^9, 
   3.798549918714188*^9}, {3.804602625159012*^9, 3.8046027153504305`*^9}, {
   3.804608316927*^9, 3.8046083667520056`*^9}, {3.80460933862428*^9, 
   3.8046094318898516`*^9}, 3.804610106547855*^9, {3.804610265806364*^9, 
   3.8046102850887704`*^9}, {3.8046103210313463`*^9, 3.804610328744605*^9}, {
   3.8046103658261967`*^9, 3.80461043059576*^9}, {3.8046104667665906`*^9, 
   3.804610549291696*^9}, {3.804611155063016*^9, 3.8046111671170683`*^9}, {
   3.8046112353633957`*^9, 3.8046112452174144`*^9}, {3.8046112873363523`*^9, 
   3.804611362355996*^9}, {3.8048531390941334`*^9, 3.8048531395566263`*^9}},
 CellLabel->
  "In[388]:=",ExpressionUUID->"ce4f6966-6485-4086-b2f6-adf0f451e249"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{
   "classifier_ClassifierFunction", ",", "amine_String", ",", 
    "descriptor_String", ",", "goal_String", ",", "\[Beta]_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sampleDS", ",", "sampleDataML", ",", "classProbs", ",", 
      "classProbsValues", ",", "classProbsValuesF", ",", "classProbsValuesT", 
      ",", "classEntropies", ",", "softMaxclass", ",", "choice", ",", "probs",
       ",", "out"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{"ToString", "@", "descriptor"}], ",", "\"\<maccs\>\"", ",", 
         RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"sampleDS", "=", 
        RowBox[{"genDataMACCsSAssoc", "[", "amine", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{"ToString", "@", "descriptor"}], ",", "\"\<one hot\>\"", ",", 
         RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"sampleDS", "=", 
        RowBox[{"genDataOheSAssoc", "[", "amine", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"sampleDataML", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"sampleDS", "[", 
        RowBox[{"All", ",", 
         RowBox[{"Keys", "[", 
          RowBox[{"Information", "[", 
           RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}], 
          "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"classProbs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{"sampleDataML", ",", "\"\<Probabilities\>\""}], "]"}]}], ";", 
     "\n", 
     RowBox[{"classProbsValues", "=", 
      RowBox[{"classProbs", "//", "Values"}]}], ";", "\n", 
     RowBox[{"classProbsValuesF", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classProbsValuesT", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classEntropies", "=", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<explore\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"#1", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
              RowBox[{"#2", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<exploit\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", ">", "0.5"}], ",", 
             RowBox[{
              RowBox[{"-", "\[Beta]"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}]}], "]"}], 
           "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\n", 
     RowBox[{"softMaxclass", "=", 
      RowBox[{
       RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classEntropies", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"choice", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{
          RowBox[{"softMaxclass", "\[Rule]", 
           RowBox[{"Normal", "[", "sampleDS", "]"}]}], ",", "1"}], "]"}], 
        "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"probs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "choice", "]"}], ",", 
        "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"{", 
       RowBox[{"choice", ",", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "}"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<False Probability\>\"", ",", "\"\<True Probability\>\""}], 
              "}"}]}], "}"}]}]}], "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977825106654043`*^9, 3.7977826808436165`*^9}, {
   3.7977827894281693`*^9, 3.7977828251004467`*^9}, {3.797782926008704*^9, 
   3.7977829519301214`*^9}, {3.7977829828717723`*^9, 
   3.7977830121078405`*^9}, {3.7977835603765044`*^9, 
   3.7977835606773367`*^9}, {3.797783651368411*^9, 3.7977836530448356`*^9}, {
   3.7977837641872344`*^9, 3.7977837648755417`*^9}, {3.7977837950188437`*^9, 
   3.797783897570631*^9}, {3.797791535613364*^9, 3.797791549633828*^9}, {
   3.7977916315682526`*^9, 3.797791691174432*^9}, {3.7977918077122416`*^9, 
   3.7977918131341486`*^9}, {3.7977918529721518`*^9, 3.7977918662202396`*^9}, 
   3.797792075301162*^9, 3.797792501973387*^9, {3.797792677783868*^9, 
   3.797792684883569*^9}, {3.7977981417225294`*^9, 3.797798143106787*^9}, {
   3.7977982403341837`*^9, 3.7977982407361126`*^9}, 3.797805753711633*^9, {
   3.7978057850016193`*^9, 3.7978058043967466`*^9}, {3.797806043636631*^9, 
   3.7978060462566233`*^9}, 3.798168586138627*^9, {3.798168636159231*^9, 
   3.798168637251999*^9}, {3.798548263477145*^9, 3.798548267501492*^9}, {
   3.798549912126979*^9, 3.798549912418627*^9}, {3.8046027236127243`*^9, 
   3.8046027686071224`*^9}, {3.804611423709182*^9, 3.8046114358734813`*^9}, {
   3.8046114988120017`*^9, 3.804611520110611*^9}, {3.80485313408119*^9, 
   3.804853134595708*^9}},
 CellLabel->
  "In[387]:=",ExpressionUUID->"4fd3f493-b910-4e25-8942-30bac99bbdfe"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"can", " ", "sample", " ", "with", " ", "model"}], ",", " ", 
   "amine", ",", " ", 
   RowBox[{
   "and", " ", "descriptor", " ", "type", " ", "\[IndentingNewLine]", 
    "parses", " ", "which", " ", "sampling", " ", "dataset", " ", "is", " ", 
    "needed", " ", "based", " ", "on", " ", "amine"}]}], " ", 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.7985499538758097`*^9, 
  3.798549982151496*^9}},ExpressionUUID->"143a591c-e047-4612-a2c2-\
0d693f308f65"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "can", " ", "sample", " ", "just", " ", "using", " ", "classifier", " ", 
   "and", " ", "the", " ", "correct", " ", "sampling", " ", "dataset"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7985499379170732`*^9, 
  3.798549949130329*^9}},ExpressionUUID->"9b68b292-b2a9-4799-82ec-\
c5fdc303d116"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{"cErMACCs1", ",", "erALpool", ",", "\"\<explore\>\""}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.797805840849839*^9, 3.797805876744236*^9}, {
  3.797805913767771*^9, 3.7978059193698206`*^9}, {3.804611582256496*^9, 
  3.8046116623844805`*^9}, {3.80485317817981*^9, 3.8048531818928237`*^9}},
 CellLabel->
  "In[391]:=",ExpressionUUID->"48705537-5927-47e3-a9ba-5d901d006639"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "or", " ", "using", " ", "a", " ", "parameter", " ", "for", " ", "how", " ",
    "much", " ", "to", " ", "favor", " ", "successes"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.804611620347427*^9, 
  3.804611631294649*^9}},ExpressionUUID->"d73f982f-2448-400e-a16b-\
35400c648161"],

Cell[BoxData[
 RowBox[{"sample", "[", 
  RowBox[{"cErMACCs1", ",", "erALpool", ",", "\"\<exploit\>\"", ",", "1.15"}],
   "]"}]], "Input",ExpressionUUID->"3c9c4434-f000-450c-8149-83378a103162"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Do active learning ", "Subsection",
 CellChangeTimes->{{3.804603236857339*^9, 
  3.804603244779775*^9}},ExpressionUUID->"ab102951-0288-4bf8-b684-\
0e5c800c6782"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alIterate", "[", 
   RowBox[{"classifier_", ",", "trainDat_", ",", "sampDat_", ",", "goal_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "choice", ",", "mLTrainDat", ",", "featCols", ",", "model", ",", 
      "newPool", ",", "nTrainDat"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"choice", "=", 
      RowBox[{"First", "@", 
       RowBox[{"sample", "[", 
        RowBox[{"classifier", ",", "sampDat", ",", 
         RowBox[{"ToString", "[", "goal", "]"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "combined", " ", "previously", " ", "trained", " ", "dat", " ", "with", 
       " ", "new", " ", "point"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"featCols", "=", 
      RowBox[{"Keys", "@", 
       RowBox[{"Information", "[", 
        RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"nTrainDat", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"choice", ",", "trainDat"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mLTrainDat", "=", 
      RowBox[{"Normal", "@", 
       RowBox[{
        RowBox[{"GroupBy", "[", 
         RowBox[{"nTrainDat", ",", "rxnSuccessQ"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "All", ",", "featCols"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "train", " ", "new", " ", "classifier", " ", "on", " ", "old", " ", 
        "training", " ", "dat"}], " ", "+", " ", 
       RowBox[{"new", " ", "data", " ", "point"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"model", "=", 
      RowBox[{"Classify", "[", 
       RowBox[{"mLTrainDat", ",", 
        RowBox[{
        "FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newPool", "=", 
      RowBox[{"Dataset", "[", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Normal", "@", "sampDat"}], ",", 
         RowBox[{
          RowBox[{"#", "\[NotEqual]", 
           RowBox[{"Association", "@", 
            RowBox[{"First", "@", 
             RowBox[{"Normal", "@", "choice"}]}]}]}], "&"}]}], "]"}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"model", ",", "choice", ",", "nTrainDat", ",", "newPool"}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8046032535993085`*^9, 3.804603263322758*^9}, {
   3.8046033132866106`*^9, 3.8046033329826355`*^9}, {3.804603380051915*^9, 
   3.804603381811007*^9}, {3.804603548407754*^9, 3.8046035837193007`*^9}, {
   3.8046036329764423`*^9, 3.8046036803346386`*^9}, {3.8046037185796857`*^9, 
   3.8046037478385353`*^9}, {3.804603792331096*^9, 3.8046038300226216`*^9}, {
   3.804603923865199*^9, 3.8046039516310587`*^9}, {3.804604032908296*^9, 
   3.804604033859706*^9}, {3.804604187675151*^9, 3.8046042476286616`*^9}, {
   3.8046054404356318`*^9, 3.8046054706767654`*^9}, {3.8046065024177537`*^9, 
   3.8046065340871725`*^9}, {3.804606673880054*^9, 3.8046066748930097`*^9}, 
   3.804606753352315*^9, {3.8048509775907617`*^9, 3.80485098020088*^9}, {
   3.8048513009191837`*^9, 3.804851304943771*^9}, {3.804851628796821*^9, 
   3.8048516352368116`*^9}, {3.804851817940166*^9, 3.804851819091364*^9}, {
   3.8048519655827627`*^9, 3.80485196589484*^9}, {3.804852183747939*^9, 
   3.8048522442665415`*^9}, {3.8048523318570237`*^9, 3.804852381508545*^9}, {
   3.8048525155760994`*^9, 3.8048525309249907`*^9}, {3.804852666721877*^9, 
   3.8048527005197215`*^9}, {3.804853101081296*^9, 3.8048531015753603`*^9}},
 CellLabel->
  "In[385]:=",ExpressionUUID->"22f13c19-381c-4785-9870-7677b6341c31"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alItLoop", "[", 
   RowBox[{"classifier_", ",", "trainDat_", ",", "sampDat_", ",", "goal_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"loopNumb", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Length", "@", "sampDat"}], ")"}], "-", "1"}]}], ",", 
      "firstIt", ",", "subIts", ",", "model", ",", "tDat", ",", "sDat", ",", 
      "rest"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"firstIt", "=", 
      RowBox[{"alIterate", "[", 
       RowBox[{"classifier", ",", "trainDat", ",", "sampDat", ",", "goal"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"model", "=", 
      RowBox[{"firstIt", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tDat", "=", 
      RowBox[{"firstIt", "[", 
       RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sDat", "=", 
      RowBox[{"firstIt", "[", 
       RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rest", "=", 
      RowBox[{"Reap", "[", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"subIts", "=", 
           RowBox[{"alIterate", "[", 
            RowBox[{"model", ",", "tDat", ",", "sDat", ",", "goal"}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", "subIts", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"model", "=", 
           RowBox[{"subIts", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"tDat", "=", 
           RowBox[{"subIts", "[", 
            RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"sDat", "=", 
           RowBox[{"subIts", "[", 
            RowBox[{"[", "4", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
         ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "loopNumb"}], "}"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"rest", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}], ",", "firstIt"}],
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.80485322456013*^9, 3.8048535713752694`*^9}, {
  3.8048536940954037`*^9, 3.8048536945368843`*^9}, {3.8048542085247016`*^9, 
  3.804854282020978*^9}, {3.8048543870247126`*^9, 3.804854436526102*^9}, {
  3.8048544928138123`*^9, 3.804854493324815*^9}, {3.804854529878564*^9, 
  3.8048545310353165`*^9}, {3.8048545928549423`*^9, 3.8048545971515512`*^9}, {
  3.804854638533966*^9, 3.8048546413092527`*^9}, {3.8048547102051163`*^9, 
  3.8048547180682726`*^9}, {3.804855270027733*^9, 3.8048553176190004`*^9}, {
  3.8048553495906963`*^9, 3.8048553496995497`*^9}, {3.804855383574315*^9, 
  3.804855392100277*^9}, {3.804855450082209*^9, 3.804855458111231*^9}, {
  3.804855518192288*^9, 3.8048555238206425`*^9}, {3.8048555648530474`*^9, 
  3.804855596172053*^9}, {3.8048556425427094`*^9, 3.804855644764811*^9}},
 CellLabel->
  "In[439]:=",ExpressionUUID->"913a2fe8-9658-465f-bff7-64c5c298b863"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Active Learning Iterations", "Section",
 CellChangeTimes->{{3.8046031084114676`*^9, 
  3.804603148025961*^9}},ExpressionUUID->"810eb5cd-53bf-457e-babe-\
cf3e53b8b8f4"],

Cell[CellGroupData[{

Cell["Pure Exploration ", "Subsection",
 CellChangeTimes->{{3.8046031503239183`*^9, 
  3.8046031539165564`*^9}},ExpressionUUID->"f9961597-e0e2-4afd-994e-\
3d41df53b67e"],

Cell[CellGroupData[{

Cell["Iterations", "Subsubsection",
 CellChangeTimes->{{3.8046030604643526`*^9, 3.8046030618433475`*^9}, {
  3.8048547930946417`*^9, 
  3.804854795379844*^9}},ExpressionUUID->"4f4c0373-80a4-4a59-b1e8-\
e56ed51053fc"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"train", " ", "classifier"}], " ", "-", " ", 
   RowBox[{"NearestNeighbors", " ", "is", " ", "chosen"}]}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.804602906412613*^9, 3.80460291375661*^9}, {
  3.8046029909119854`*^9, 
  3.804602993341894*^9}},ExpressionUUID->"bbf2662a-e7a4-4367-a88a-\
71b3850059cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cErMACCs1", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccs", "[", "erTrainMACCs", "]"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.804602799034092*^9, 3.804602877383569*^9}, 
   3.804602980354585*^9},
 CellLabel->
  "In[308]:=",ExpressionUUID->"fc3ca2d9-c4a1-462d-a29e-21e80bb7f1a6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 200, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Boolean"], "maccs65" -> 
           Association["Type" -> "Boolean"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Boolean"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Boolean"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Boolean"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Boolean"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Boolean"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Boolean"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                  "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                  "H2O Mole Fraction", "pH", "maccs53", "maccs54", "maccs62", 
                  "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                  "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                  "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                  "maccs103", "maccs104", "maccs105", "maccs108", "maccs111", 
                  "maccs115", "maccs116", "maccs118", "maccs120", "maccs121", 
                  "maccs122", "maccs128", "maccs129", "maccs131", "maccs133", 
                  "maccs134", "maccs137", "maccs138", "maccs141", "maccs145", 
                  "maccs147", "maccs148", "maccs149", "maccs151", "maccs153", 
                  "maccs155", "maccs156", "maccs158", "maccs160", "maccs162", 
                  "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 57]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55", "f56", "f57"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Version" -> {12.1, 0}, "ID" -> 2890808244938110393]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Mean" -> {0.0030249235794820636`, 0.03644491421741516, 
              0.001335275755368836, 0.006025890189972363, 0.9531689962577616, 
              2.605}, "StandardDeviation" -> {0.0021634694397796935`, 
              0.007524897722051016, 0.0009184463809913036, 
              0.003251392210533918, 0.007176551509137535, 1.693804888409524}, 
             "Version" -> {12.1, 0}, "ID" -> 5899696106768861539, "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 1421983425515021190]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 8693536121458706544, "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 7278254295148636010, "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6], 
               "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f\
28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f\
54f55f56f57)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]], 
             "Spans" -> {
               Span[1, 6], 
               Span[7, 57]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 9160275731445607812]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 200, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOL+Q181YvoP7nkTuEOu9fV5CM15fA+IF7ijD0JH/NlT
aMt1fXFBs40xGBy2ZwCDJ/bVIuvcH1aV2M+aCQb2mjEgE9fYnz0DAi/sYeoh
9Gt7iD0b7Q+DrD30EGrOAai+B/YeD6uAJt6Eqn8M5R+E65sAdu8tqPx7qL07
ofrfwNXBaJi6JQUgD1yA0xD/vLUHEkDWZXsuMOM+3D0Q8dtQ/z2Bmw+zD0bD
9MHsgfkfZj/MHpi5QeAAPQE3D6YP7M2Hj6DhdgUubge24BI8fGH+h9kLcwcA
GajVCg==
                    "], "Method" -> "Naive", "VectorLength" -> 57, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOL+Q181YvoP7nkTuEOu9fV5CM15fA+IF7ijD0JH/NlT
aMt1fXFBs40xGBy2ZwCDJ/bVIuvcH1aV2M+aCQb2mjEgE9fYnz0DAi/sYeoh
9Gt7iD0b7Q+DrD30EGrOAai+B/YeD6uAJt6Eqn8M5R+E65sAdu8tqPx7qL07
ofrfwNXBaJi6JQUgD1yA0xD/vLUHEkDWZXsuMOM+3D0Q8dtQ/z2Bmw+zD0bD
9MHsgfkfZj/MHpi5QeAAPQE3D6YP7M2Hj6DhdgUubge24BI8fGH+h9kLcwcA
GajVCg==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLf/0Hgvb04Awh8sGeF0v+h4gveQWiYeGFmuLjTrWv2
t/z8N977fc9ehTvvRB3fJnuOMlHG578P2z8Rj+Ut1Ttr3/xig+Xqnbfg6ouh
tM6fS2ohIRfsv+ivnet57r79qx+XVtZrXbV/2nJCefr/+/Zm97ZlhXjet/fK
uP2mJuq+vW00Z8+Ze1fh+n7JV/452HHfngdqnzEYXLa/9HV6hfaZK3B1MBqm
7uUO09ipQnfg9IaZ69TuxVy0P/Ggw6l25l37mF9bBAP+INwzpV+5r3rXffsd
cq2vA3fcg5sPsw9Gw/TxoPkfZj/MHpi5Qe4mjqXSN+HmwfT9XyObZlQFNMdw
QeOtn3fh4rZhehk/H9+Bhy/M/zB7Ye4AAO0M5P0=
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 57, 
                   "Output" -> 
                   Association[
                    "f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Type" -> "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 57]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 16]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1:eJyVmHk01nvXxiVJpVII1SlTSSg0atpURBGiaCAVhaNkbJIpU1KozPNwI/M8
ZNjmeSZJKlTSSKMh6m299z7PWo+1zlrv+8f9916/fe/r+lzXV+i0+SEjVhYW
Frk/P64/v4Oj9SvvWsrjeK/X1MLIANg+T/R3WOsDDJ6XmHBDIB2LZ+Qe2juc
Dn02T+7+DNVFD5EiFr6AdPDUWtisalEGKbffegXYdIK22TkR9qc1qLH8jrjv
4m44910moUyqC5ZcMtFzi2lGR7ZDtpICvXD0Z3ltwNanWJJ3/YlGOAJ73FFW
K217HOnVcagSjcSNKw8/k6y7iBI6V2y+Wtrjzd1vxcIFo3E8rm9Gv0IXLv7M
a358Xjuc29z9sUitD9fynHG6tr8Awy8sNW7YVwRCl9SW52Eg8C8XLhSbFQLD
pUuu9Y+WQGJE/ox7Q0G4Vmup1I/L+fC2ICY6+3M6TkSFLDiX64YreIVl49Ms
kfNXreGqWTHQEMX+IvCYD/COjoQczWNAndn84uO7WiDB5/DZmuEmPMbgXWj4
PQUOOwqpWxi1w9jE3AvtrkWwMVQeHnO1A9eYzU8rN2sc4zbvN62OAdYjbxal
dr1Au1uD0aa1GTBh6ujKXvUMg5/yiSn+jIVAy14DlZcZYPz5Te+cZclg6DJW
f0MsHheVuFh92+oMGzZP2S3oKUaj9kivgZE25O3VfDcVUQyfLO48ktNuB35B
s/WV5+tQ+b7evaCGVtgsr7epe2EH3K8S+dvjXj0caO/SjuFrxNWzzW9LStaA
04GARfMu5MKXqPdtvW+cce2K0M+1utYoZegpW1rsgurHdvGCaDzIWpt260Q5
QPmY9olo7AZ2M4Gnj+UrUTwoPHuo4Cl0zgusjjSsRO1g11JWOx9wHhM5/7ix
HYeShZpV5rehcXe1n2RyBT5ZV5O6QysFmqz0lzUuS0ezsvxvQxGJsC9ww6Pe
ziBo6xLnSWjJgFu/TDd22tviUZ4F1VsEEnB8QXac2Nl7YKC61/QmWzW233xb
GnHlIRxYzJb/USQbBucPDPGKZ8NXKZZ5Xx2y8YSHRIiTbgFcvKfgV6OShyyP
KxJGJwaxR9rbYdlIIVj+rOBJ7B+AY6zrx5cb1aCu5uPRfOdiyGUouJ5anYN8
Eow7ry5n4a0HVX7L1tXippV2j3NeIEQ4K0r/SMkEzi0JD4axDpYq/1RdZJIJ
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
sq/Ez109S55cCkKWbXujwn6dRWH3Q5zJrRmQVpSmtVa1DHtzHHWlozLRUPfC
jYHwUrSY7TU/58//vT5YLztathw3P0rS2nAgG0p+TuwZFqqB2aJhpd4nY3HS
+O3MvEuhyLCNZ7lqmAFHfnSt9lldCOGfYu5OBOdBprBc3Y6SFriTw3bS81UR
TPL4dsZq3cE6mxvvPHTuwYI9FwVleALwkalg/07PYnhdk3QwhqcRCuXu2CZ5
FmEIh/WOR3fbUOab+TyDIj+cbehdzM+eDw1Gf19R3mYC7mwbjHeXReHul71a
qXy34ZqYoUrkbie8aartOBlSDD/G9Dnnu9sj9zEFtjiTdPzWrrjqYn8oJrxf
3Ozm9zde1TWS3dsbBTJjNXdmhEWg3Uy+O6/jivAx5R+HafnnMOUfhWn5h8OG
mX/aKP/stWTmn5OUf05T/oksZuYfNco/mZR/tP/JP9rM/ON7YtbLMC0vXOeq
X/F1qAzNFM2DirVDUSDw16T7xUo4Vz/4ZNy/BT8IljYWzHHDNW27zskaNMD6
Z7qwIqYIyuIM1MYPxGF25jxu7ZdleN38lXndKX84XZgsdnUkEjhEWbhb5+Rg
dlDVg9NahRgYIpe0oqkKHUyjZ7Wb/eHtwQ+lg7NjIM2zdO7qH404v3cBsqrH
4O6eHnQPfwiOj92U/DYi+pwXLrKrqgcV96W2Km9qwOd+b1HWjT+54YpK8pR6
FrhnHBpaH8ZAg4hPAV4S15GP28He6k06NHZrFc9SKcb4khUM8dpKNC7/6vp1
wBAtxAatGbIN//H/Jf/i/xrk/47k/13k/5/I/xeT/09VMv3fmvz/BPl/Hvn/
iDLT//nJ/znZmf7vTfx7+C/8SyH+eRH/fhL/pIh/acS/SOKfAfFPnfg3Qvyz
Jf7pE/82EP/+mV9A83fR/BGan0rz79J8Vknm/M00P5nmF9N8UZqvQfMHaL4G
zXel+Rtp/nT9bSD9cZD+XpH+XEl/B0l/V0l/bqS/C6S/RaS/V6S/VtJfGOlv
AenPnPT3T/6pnZZ/Iog/r9iZ/NlJ/FEm/qgSfw4TfxqIP5I1TP7UEH9iiD/h
xJ/jxJ8k4k809f8+6v/zqP+nT+v/XdT/kfr/Gur/ZtT/q6j//25i9n8v6v/V
1P9Dqf/vpf4vT/3/CeWPk9PyRxjlDwHKH9KUP0Qpf0hS/sim/BE7LX+4UP4w
pfyRTvnjMuUPVcofHcQfYeJPJ/HnPPGngfhTQ/z5QPz5TPwZJP7MJf40En/6
djD5s5r4k0r8eUb8MSX+dJP/Ok/zX2/yXyD/DSX/ZSP/bST/TSf/NSD/5fin
f7Yw/fco+e9T8l8d8t/F5L8jI1lh7iEFyGndZLuMUQ6yIkeyrgsmoUkD7/jq
9YXQZr0n//ZIKwwHSuE75VLYH8QjuPdxKq41NXnG3VuPsey9b7+LMjB4g/KP
bDeEqLGWLYu0HmAnjOd0DhRB3fMlw36LqvHSicUKL+fHopX8TDGLt6W4Sj1j
3jmBDPzH/wSm+Z/qtPxrTP7XSv73bZr/jZP/HST/20/+10n+t4byr+4lpv8N
Uf79J/+VT9NfJOmPhfTHQfrTIP3pk/6MSX/ppD8Dyn99pL900l8o6c9rWv6b
OF2znG9NKWSuOKX9m9ECtYnH+C3yGKD7XG/TzZJMlLad3dK+IQHL42uLOjij
IL08+LmWojWu6392n+9yLvq0C9yWHQtFodANQ196arFdqntSISQXz2Q6O0ul
MtBYrjrk0jol3Ic/NG8dTIGVTeqZVr5luNnYKXsZZzPe4P+8JzIiA1nHzC33
vmhE+ZVorrjPDlg4uJZ1DCpi092Sydt7K2Bx7CFbDrky8DF58UbJMwa3b98d
5lBUihpPb9dL7vbFbouy0M1qjzD/68E7oaMWeMSMX8X8dy7uvSvh8HxGCZww
UNPYFFMHjRJZo7keSaCSxu3G8kfXsbT/Vtq/y7T8zTKXuX9j2r8q7d+C9n+C
9p9N+79M/ldK+++i/QfT/j/Q/oto/9rf5v894l+Nm2t0tn2WygL+Vh4RE6dw
uGDJXqDmXQzC+7NWWZ1pg/3RkvNfbymESuXfx69cS4O4ut39lV9CsWDBh022
x6vRVn7BEqU1eXi+NmWLvDQCy5CH4wnxCOBk615YqBsBkRaeMvluHuAsLY12
a2NBQzc6jIc14J/vR/J/vEXvv3R/SN//n/dfaXr/1ab338v0/ttJ77+CzO/H
SXr/raT331p6/71I778u9P5bTP0/lPo/P/X/fOr/tdT/I6n/s1D/X039v5b6
/zbq/+HU/0v7mf3/K/V/Ver/M6j/R1D/f0j8vU/8ZSH+chJ/HYm/t4i/jQNM
/roQf12Iv4bjTP7yEX8fEX93ffjv/Gs5yuSvK/E3gvIHUv7YMS3/ZFH+cKf8
8YHyzwHKH/GUP8opf7hS/lCi/FFO+UOd8ocg5Y+IBmb++B8zHuZA
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOL+Q181YvoP7nkTuEOu9fV5CM15fA+IF7ijD0JH/NlT
aMt1fXFBs40xGBy2ZwCDJ/bVIuvcH1aV2M+aCQb2mjEgE9fYnz0DAi/sYeoh
9Gt7iD0b7Q+DrD30EGrOAai+B/YeD6uAJt6Eqn8M5R+E65sAdu8tqPx7qL07
ofrfwNXBaJi6JQUgD1yA0xD/vLUHEkDWZXsuMOM+3D0Q8dtQ/z2Bmw+zD0bD
9MHsgfkfZj/MHpi5QeAAPQE3D6YP7M2Hj6DhdgUubge24BI8fGH+h9kLcwcA
GajVCg==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLf/0Hgvb04Awh8sGeF0v+h4gveQWiYeGFmuLjTrWv2
t/z8N977fc9ehTvvRB3fJnuOMlHG578P2z8Rj+Ut1Ttr3/xig+Xqnbfg6ouh
tM6fS2ohIRfsv+ivnet57r79qx+XVtZrXbV/2nJCefr/+/Zm97ZlhXjet/fK
uP2mJuq+vW00Z8+Ze1fh+n7JV/452HHfngdqnzEYXLa/9HV6hfaZK3B1MBqm
7uUO09ipQnfg9IaZ69TuxVy0P/Ggw6l25l37mF9bBAP+INwzpV+5r3rXffsd
cq2vA3fcg5sPsw9Gw/TxoPkfZj/MHpi5Qe4mjqXSN+HmwfT9XyObZlQFNMdw
QeOtn3fh4rZhehk/H9+Bhy/M/zB7Ye4AAO0M5P0=
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 16, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0230615, "MaxTrainingMemory" -> 327976, 
                  "DataMemory" -> 91408, "FunctionMemory" -> 33720, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 7, 27, 11, 5, 52.5712389`9.473323059102288}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 57, "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             6691904909924163924]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOL+Q181YvoP7nkTuEOu9fV5CM15fA+IF7ijD0JH/NlT
aMt1fXFBs40xGBy2ZwCDJ/bVIuvcH1aV2M+aCQb2mjEgE9fYnz0DAi/sYeoh
9Gt7iD0b7Q+DrD30EGrOAai+B/YeD6uAJt6Eqn8M5R+E65sAdu8tqPx7qL07
ofrfwNXBaJi6JQUgD1yA0xD/vLUHEkDWZXsuMOM+3D0Q8dtQ/z2Bmw+zD0bD
9MHsgfkfZj/MHpi5QeAAPQE3D6YP7M2Hj6DhdgUubge24BI8fGH+h9kLcwcA
GajVCg==
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLf/0Hgvb04Awh8sGeF0v+h4gveQWiYeGFmuLjTrWv2
t/z8N977fc9ehTvvRB3fJnuOMlHG578P2z8Rj+Ut1Ttr3/xig+Xqnbfg6ouh
tM6fS2ohIRfsv+ivnet57r79qx+XVtZrXbV/2nJCefr/+/Zm97ZlhXjet/fK
uP2mJuq+vW00Z8+Ze1fh+n7JV/452HHfngdqnzEYXLa/9HV6hfaZK3B1MBqm
7uUO09ipQnfg9IaZ69TuxVy0P/Ggw6l25l37mF9bBAP+INwzpV+5r3rXffsd
cq2vA3fcg5sPsw9Gw/TxoPkfZj/MHpi5Qe4mjqXSN+HmwfT9XyObZlQFNMdw
QeOtn3fh4rZhehk/H9+Bhy/M/zB7Ye4AAO0M5P0=
              "], "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Version" -> {12.1, 0}, "ID" -> 7086583162346593019]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5751598210394218059]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 5934203054884415135, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 3049417541816685818]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.18316831683168316`, True -> 0.8168316831683169]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1: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
jxxrWz6xK51Htg4f1X64iQuOq1w82scRP6PpM3mIR57wBKUVcQ55pnbc5haP
vFRJcNuFn6VeJLOnD/NIVtjlPDM1Lghmd9vf2MAFj3nBMnWPeSTuj/cp3Wge
CVQL2t3rxSP79xREM115xKTCmj69jQsLuPxp13Ae4Zjbeq/uHoIu/lisHc5/
+aXFYhnWufuzibiZDhfq6o+YPdqN/SzUfD8vkkcG1PNV9FJ5xOl0jrdzBI94
azd293cOQX5T0YUbnjyyWTfNMwbnz9H/tdDlOI/UxvcO12I/Ql0blYSDeYRx
/0amkzAXqMnaLs3fhsAnNhgUBLgQ+Jqr6I+8mm/bdTSldQia6h4bJ7tzoWBX
U6Yk4h1uHLt6WxqPrPWeEHuOuunV2RX4U5wLlhuG0qV24fcWc+nlLjwyetrY
6DvqZcssn/OmWlzYw9o4dBzxbX+X/+Ag9ptX1C59ZWoIGGe2Oj5pGgIF6XT9
NJxHbGDNDeTXw+b2zwTkId918Fnqdi6oBfVL1Q8OwfCo3UrZt0OgrMm0/XCG
RyoXijQwzyJeFVf7+9ah7tvb3Iv3ol6S6SqvbvLIAcMehzNYV8fTR2O+iEPu
R9ZqTUMuHOgf/2mGOhH9ZDKwAPtJGlHs508PwcdV5hxPXNflamxd+ADWVW+a
+xxx0zQetTdFfLMpN8c+Ie/hN9xfPER+LrclbVmNfnqcuJ+ZeoVH5FKLNSeC
eGTQuHt+Nu7TUVYzlviQR0JjDUf/XsN6JYT1JO25QDHTYqWMDsH3QPqqNciD
RqrxXjnUYSRb8FujD4/827y3fgJ19/Fq/JMe5Ce3Vs7k6yIuuEWG3/yL/bbl
NpzZsJYLH+wd68SxXlIZPDsD9c89+fNyOfo+Z8GsL/YfhqBV2WJwD36/gWka
FsUdgpgTsa46tCEYMi36NXGVR+qH5ikrrEZ/VHSVBKEP884tPRGL4wGLH4SX
W3NBe0rKUR5x6s4+W2WE42vSpnWWdQzBi7fsLeaUIfg3GX3RnTcEJd2uDpmI
87InsusKvJDvyDqvnaZcWPa3UD0Z9bYmVvfMaVy/YvRV0Z///Xeq4rkc6uNU
jHyUB+oh0E+yIJc1BKMd4b9yFyMe7xRHbu3nEekLnWGUkzwiOG3hnYU+a6+d
3H3ZnUd+uH67PmHFBdWWGPOz6Mdi968vHBAvn7CB4ojZXCiarvixHHNkzpzq
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
CdDNbGPTxdN0tDj3q4pzNx0pVjXVdisy0LiDxQ9dSfCld/fahFt0lDM0r+8f
T0e74u7NJ+bQUaLITw8xeQbyUBWWjQH85599i7+8AvIyVyL8rBcDocXHn/dD
/0COxsbT4Af34I33ln6ho8JH6/fEw3N3JZlAzfuQR0WK5yYu0dEOUcrfy4Df
xycBhYmAy/NIjQs+qxlISaluqxjofbT16t7eYwx0ROpS44ZByOO2nSQBfF9P
2r7zFujwhM8fs4eQe8aatyUVIDeqc3ze/oPnDrb7FjnH8DSPuhS+eQD9coXN
qyK5dDS8b5GfJeBotT80Y24d7NmhH+sI+radqo397gm+OpwgrgA+H37jTV8E
5yNvbRTVh75un6hzqtF0ZJr4r0kCfOm6d2PSwxwGqiyzkEq9CTrYb+X+UJ2B
ysVUd/z//4cF0s5e3JhCxaXHC0LvylKxcXxiQ3SVgPnT0fadT35Qsca7s9f3
+lPx77cOqqHTVPzrEOtp8zwVW+zffXZUgYbdpv7I/eSl4j/HREdiRqmYu3jk
NW8AFdc0yH65wkvDlbjihxybig3PC54R9qPiS9EXzTLh/cx7HYb2wVScbthl
yU6i4v75H1f9EqlY7eCy5gNaVKypcaDguT0VH9zkK5cVScUnXpnftVhFw+/t
ekvMiqm4fM+D0s9HqfhR8fXz6dtoeBOZ2+0xTsXv+T2e0c5S8dHLFMl06Ks/
EkwkZQmYt1QnZQ3rUbGCT+S8dTcVX7jFyMJFAuZLmu1XfsgUMCflY0Oewb4D
tTSZZh8qzkB418h9AXPu+J/7LZNUbMXn+PDbAuzvVK0+MEfF3V/b1h3dSMNd
d17nhEjS8K4+5e4VgM/a9Ov1fFwqFn7oy6v+loqV0nwSd/RQcUrqBYbCEiqe
/Xmmf1M2FTsFu+4z06NhcTE7HW/YO7gw5YrLHip+5n3i/UMVKj7V5PvpFPQP
ztu5TjMX8NWbHCjromK9v0HPrsG852Vj1J/WC5hvLCu7e8gM9h5JU3SvoeKy
JU8svi6nYq2LfZHicVQsd+XltpyFLpxQNya3dDUNm0/deNi/nYrfrNvb4ZlG
xbnpb+TvCtLwiaMWX3hVqXgRNjS8C7iUrknRyDah4huCWhY/t1GxeW3vGbs6
AfP+JXI9i54JmO+mHn1Iu07Fcz5Jv4Jhn9jWQ6G7DGh4s8xC6qn/8ZhZdz9P
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
PeE+3Y+OnhWpXcIDeLGmzWfd4Vz7LkFLQSZqTNYR4+FnouvS5o/Lr8zg/jbh
e7yLmWi5MPKSuAg8FfddOLuJiaa+1Zw4GD6DN9z+/EHBjInOGFaRSX4z+Fa4
7rnCHTM4ttxQKzCMieZQrKvY2Rns8mjKTh/w3r9mj9YiqPeouTEmRY+J1h+h
7BERBxxNOPpy+5jodqyr7NiRGTyS+1z+vBjMUd/bULeKiarcl2xQ/78f3mPo
fnIG66ZVvryrzkTppOaFKOCnK3zpUQnY9++b4Z1x9oDXx4sBy0FPpY1KN8MQ
fFavKfsI712OXljiDHjftrq2YC/KREbXsvKCQVcciX9xhhtmsOW93z/5BvuR
xAqrDa9BX+Fpls1uMO9o4/irjv/7PJu7Kw7Ph76WrL6sz0RW7ZJdQ339yHqJ
6iMSAZ+ElelaOJfCXOZEsPrR1BGRE4dgzsvPCrPEnaH/nEWw95YZXMT7a/dO
byYqYO77/kKBiQ782ylXudCP/JS2WLlAfR0Ru1PskX60Ts/5e91sP5rbNie/
GvAIuxRwqsKBibakhXw4B7gnn1DWNwDdanpUH2dw+5HKv/BdKvDz6q3CWr17
mOj5s/UPJB1mMH+ob0HucSaa3HotsH4b4O89pcQPc83cM5jpH+pHlqvcSias
ZvByyfEVBSuYyI389mKFGhNpZywRsATdzZ3wet0RAr66vIPhDPPqvlTKp072
I+JY/SfJ5Uz0MDBrSyTMpbOImvJsoB+toHSHzGycwamEX4W45wwWbD9ZG+DK
RG+6KFtng2dw7aslZufH+9EuR197DfBN3uLz9JALTKR+9LIiZ/MMTvNXNLod
MINNVty48L9vF/HbO1ttZ6I9mY3SmdJM1DLl+mMl6EJtbZbkc/cZ3Hhq3tAN
+OVmoudJOky0N/bvwSh4776O5Yk+wM048LXYEZjHbZOHWTnMQ4aHGJdeZSLT
+9NzlcCHjVdqe3fQDPZ8mTu+BeablQ266wx+KnlxZMOVCMgFJa9oMfBv8A4b
2zDw9/GPOy9Ih8zg1smHIa77gZdhrYv3YA9jncSQ0i1MFG/D8Lc/Czi2bKjy
sGWijiGVMiH9GfyqeKutniG8f19ibe4xJrpyOjX3+79+RK5jOslBjr1aHJLn
BTo49EmAT3yuH41/liJ/+TERVbDMt0qTiXLjRCPGIeekvp+RuQ+8lTW0rlYG
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
         "], CompressedData["
1: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
         "]}], "NeighborsNumber" -> 20, 
      "ClassPriors" -> {0.18316831683168316`, 0.8168316831683169}, 
      "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 
        2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 
        2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 
        1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 
        2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 
        2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 
        2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 
        1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 
        2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 
        2, 2}], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 57.], 
         "Key" -> 
         "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Method" -> "NearestNeighbors", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 20, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "Scan", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[302449], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.5309961`7.176636324832246, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.5254015876080851, 0.09429028238519456],
          "Accuracy" -> Around[0.8081303134859656, 0.05641150649956242], 
         "EvaluationTime" -> 0.00039810717055349714`, "TestSize" -> 100, 
         "ModelMemory" -> 25184, "ModelUtility" -> -0.08485723443667381, 
         "TrainingSize" -> 40, "TrainingTime" -> 0.0630957344480193, 
         "TrainingMemory" -> 197328, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.5254015876080851, 0.06667329807456554]}, 
         "AccuracyHistory" -> {
           Around[0.8081303134859656, 0.039888958782789585`]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 200], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 278116519598739]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6862043633663216, 0.007328079368969324], "Accuracy" -> 
              Around[0.5246559761033087, 0.051079285123267], "EvaluationTime" -> 
              0.000011826834616723384`, "TestSize" -> 191, "ModelMemory" -> 
              9560, "ModelUtility" -> -0.3187358320108139, "TrainingSize" -> 
              9, "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
              84064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6862043633663216, 0.005181734614871445]}, 
              "AccuracyHistory" -> {
                Around[0.5246559761033087, 0.03611850888882323]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6853604482424749, 0.008442954243476198], "Accuracy" -> 
              Around[0.501450601110425, 0.05590024033524456], 
              "EvaluationTime" -> 0.00016324290196934873`, "TestSize" -> 160, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.31783261309026223`, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 113896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6853604482424749, 0.005970070198809757]}, 
              "AccuracyHistory" -> {
                Around[0.501450601110425, 0.03952743901100919]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6772469943782181, 0.023676785636634886`], "Accuracy" -> 
              Around[0.5761258941971317, 0.11095532010458692`], 
              "EvaluationTime" -> 0.000019858205868107035`, "TestSize" -> 40, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.3104305784805599, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 254248, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6772469943782181, 0.016742015680364774`]}, 
              "AccuracyHistory" -> {
                Around[0.5761258941971317, 0.07845725925467747]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000019858205868107035`, "MeanCrossEntropy" -> 
             Around[0.6772469943782181, 0.023676785636634886`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 254248, "TrainingTime" -> 
             0.04078971086172212], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[7.120870538857876, 2.2774693807551167`], "Accuracy" -> 
              Around[0.8180313035849756, 0.055330231284037204`], 
              "EvaluationTime" -> 0.0005011872336272722, "TestSize" -> 100, 
              "ModelMemory" -> 56336, "ModelUtility" -> -2.7182269056960164`, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 139192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[7.120870538857876, 1.61041404307667]}, 
              "AccuracyHistory" -> {
                Around[0.8180313035849756, 0.03912438174556276]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[5.916207949797309, 1.8570085273109245`], "Accuracy" -> 
              Around[0.8081303134859656, 0.05641150649956242], 
              "EvaluationTime" -> 0.0005011872336272722, "TestSize" -> 100, 
              "ModelMemory" -> 73016, "ModelUtility" -> -2.531778308816364, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 344384, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.916207949797309, 1.3131033223827986`]}, 
              "AccuracyHistory" -> {
                Around[0.8081303134859656, 0.039888958782789585`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005011872336272722, "MeanCrossEntropy" -> 
             Around[5.916207949797309, 1.8570085273109245`], "ModelMemory" -> 
             73016, "TrainingMemory" -> 344384, "TrainingTime" -> 
             0.10474029842579521`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6291905100908225, 0.08230872347375476], "Accuracy" -> 
              Around[0.7111063036145975, 0.04668676483702043], 
              "EvaluationTime" -> 0.000023597637416117584`, "TestSize" -> 191,
               "ModelMemory" -> 5968, "ModelUtility" -> -0.2556870195003441, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              71328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6291905100908225, 0.05820105651910035]}, 
              "AccuracyHistory" -> {
                Around[0.7111063036145975, 0.033012528007918804`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6878715936676482, 0.14000081529134642`], "Accuracy" -> 
              Around[0.794469175448939, 0.04574470057655692], 
              "EvaluationTime" -> 0.000022375971921437447`, "TestSize" -> 160,
               "ModelMemory" -> 6032, "ModelUtility" -> -0.3589270198214477, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 104744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6878715936676482, 0.09899552586415634]}, 
              "AccuracyHistory" -> {
                Around[0.794469175448939, 0.032346387981031566`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9946242650746617, 0.30096221447879723`], "Accuracy" -> 
              Around[0.6492966259044488, 0.10767329174319337`], 
              "EvaluationTime" -> 0.00003147313529485416, "TestSize" -> 40, 
              "ModelMemory" -> 6288, "ModelUtility" -> -0.7465483426181443, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 232952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9946242650746617, 0.21281242273887763`]}, 
              "AccuracyHistory" -> {
                Around[0.6492966259044488, 0.07613651474428952]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003147313529485416, "MeanCrossEntropy" -> 
             Around[0.9946242650746617, 0.30096221447879723`], "ModelMemory" -> 
             6288, "TrainingMemory" -> 232952, "TrainingTime" -> 
             0.059763396319187145`], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5940615332197731, 0.019390059120262017`], "Accuracy" -> 
              Around[0.8205140598984838, 0.039841231026326265`], 
              "EvaluationTime" -> 0.00008317573138474151, "TestSize" -> 191, 
              "ModelMemory" -> 96920, "ModelUtility" -> -0.1789368555280586, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 153664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5940615332197731, 0.013710842291545334`]}, 
              "AccuracyHistory" -> {
                Around[0.8205140598984838, 0.028172004629535174`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5403124575597849, 0.05187559310106601], "Accuracy" -> 
              Around[0.8081303134859656, 0.05641150649956242], 
              "EvaluationTime" -> 0.0001, "TestSize" -> 100, "ModelMemory" -> 
              97648, "ModelUtility" -> -0.0966150242204179, "TrainingSize" -> 
              40, "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
              178872, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5403124575597849, 0.036681583659837855`]}, 
              "AccuracyHistory" -> {
                Around[0.8081303134859656, 0.039888958782789585`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5366926691830276, 0.0727348331474449], "Accuracy" -> 
              Around[0.7956380893190828, 0.09268999751588472], 
              "EvaluationTime" -> 0.00019858205868107036`, "TestSize" -> 40, 
              "ModelMemory" -> 100528, "ModelUtility" -> -0.09761778272879873,
               "TrainingSize" -> 160, "TrainingTime" -> 0.025118864315095794`,
               "TrainingMemory" -> 278800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5366926691830276, 0.051431293747030364`]}, 
              "AccuracyHistory" -> {
                Around[0.7956380893190828, 0.06554172579164633]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00019858205868107036`, "MeanCrossEntropy" -> 
             Around[0.5366926691830276, 0.0727348331474449], "ModelMemory" -> 
             100528, "TrainingMemory" -> 278800, "TrainingTime" -> 
             0.05651744470896554], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5254015876080851, 0.09429028238519456], "Accuracy" -> 
              Around[0.8081303134859656, 0.05641150649956242], 
              "EvaluationTime" -> 0.00039810717055349714`, "TestSize" -> 100, 
              "ModelMemory" -> 25184, "ModelUtility" -> -0.08485723443667381, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 197328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5254015876080851, 0.06667329807456554]}, 
              "AccuracyHistory" -> {
                Around[0.8081303134859656, 0.039888958782789585`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5629026735543707, 0.1460865958935514], "Accuracy" -> 
              Around[0.7956380893190828, 0.09268999751588472], 
              "EvaluationTime" -> 0.000039622329811527814`, "TestSize" -> 40, 
              "ModelMemory" -> 80784, "ModelUtility" -> -0.169152706196245, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 743168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5629026735543707, 0.10329882259678905`]}, 
              "AccuracyHistory" -> {
                Around[0.7956380893190828, 0.06554172579164633]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5476969336140359, 0.039793584763231686`], "Accuracy" -> 
              Around[0.8205140598984838, 0.039841231026326265`], 
              "EvaluationTime" -> 0.00002144910797890415, "TestSize" -> 191, 
              "ModelMemory" -> 10848, "ModelUtility" -> -0.10557586887774784`,
               "TrainingSize" -> 9, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 61368, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5476969336140359, 0.028138313633802797`]}, 
              "AccuracyHistory" -> {
                Around[0.8205140598984838, 0.028172004629535174`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002144910797890415, "MeanCrossEntropy" -> 
             Around[0.5476969336140359, 0.039793584763231686`], "ModelMemory" -> 
             10848, "TrainingMemory" -> 61368, "TrainingTime" -> 
             0.07571488133762316], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.9675312386926445`, 1.2337203271829522`], "Accuracy" -> 
              Around[0.682938806187131, 0.05218927844255033], 
              "EvaluationTime" -> 0.000012832835290740298`, "TestSize" -> 160,
               "ModelMemory" -> 9560, "ModelUtility" -> -2.5200311843268737`, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 149216, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.9675312386926445`, 0.8723720094387515]}, 
              "AccuracyHistory" -> {
                Around[0.682938806187131, 0.03690339269196023]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000012832835290740298`, "MeanCrossEntropy" -> 
             Around[5.9675312386926445`, 1.2337203271829522`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 149216, "TrainingTime" -> 
             0.15035617008818167`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 278112224631443]], "MaxTrainingSize" -> 200, 
      "PreprocessorEvaluationTime" -> 0.0000121018619934283`2., 
      "PreprocessorMemory" -> 140184, "InputDimension" -> 57, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.4761639055129269,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8048367548832395`17.332911017421797*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 9, "TimeBudgets" -> 0.2869636000000001, 
          "ElapsedTimes" -> 0.6690004, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.40994800000000015`, 
          "ElapsedTimes" -> 0.3880036, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 160, "TimeBudgets" -> 0.5856400000000002, 
          "ElapsedTimes" -> 0.6150011, "ExperimentCounts" -> 4]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 278125109533331]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.003010539867820327}, "ID" -> 4730850974236313204], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.04015033779176883}, "ID" -> 8070888841571294593], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.001268097130631449}, "ID" -> 200488047418989656], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.006482455309771296}, "ID" -> 649973464428030971], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.9490885699000082}, "ID" -> 2962930339097242567], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5}, "ID" -> 
           8984778762395227084], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7677251628602301762], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6978832518023807152], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8085905760671259888], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1807462322367413625], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7225062226683468805], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6171879980778578740], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6071615161088542097], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8985381942506809675], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6720469682621542552], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5774090589300104817], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6633655677894042221], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5167009077448376928], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5726943600738795128], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           362668091862864570], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6114532221358890467], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6776604661742555048], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5501811208523267075], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9116531422756477118], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3361669447960751718], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7148851657126517589], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           121796140320537270], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7194622440174821200], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8258695795433865378], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5128217625321713112], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4166492459802648858], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3854765931736806729], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           779423242137009308], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7015491894996555203], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8303264919425016317], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1735807958849374234], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1781626822452880077], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6208746074206438753], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8813729114652997965], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8920056365435717381], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3112323824310310941], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4226541765485863313], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           9150995866243649049], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6958454004188162000], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8866621487209218754], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1447546961993734832], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           497102628346438316], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5196579960577662163], "f49" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2762527020898854667], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1971401650329358895], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8940823369760913223], "f52" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2055559695345892014], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7112306624109070421], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8808625968604005975], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           725564867946339449], "f56" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           114974085108334301], "f57" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8330525894808105073]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 2.7431492, 
      "MaxTrainingMemory" -> 1617224, "DataMemory" -> 1755760, 
      "FunctionMemory" -> 486144, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 7, 27, 11, 5, 55.0532342`9.493357676603555}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.804602886072148*^9, {3.804602986180338*^9, 3.804602999685937*^9}, 
   3.804851155237235*^9},
 CellLabel->
  "Out[308]=",ExpressionUUID->"99e7a5d5-9973-4a90-85db-7ea65c930384"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"its", "=", 
   RowBox[{"alItLoop", "[", 
    RowBox[{
    "cErMACCs1", ",", "erTrainMACCs", ",", "erALpool", ",", 
     "\"\<explore\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.804854839342472*^9, 3.8048548787875776`*^9}, 
   3.804855398253804*^9, 3.8048556379465747`*^9},
 CellLabel->
  "In[440]:=",ExpressionUUID->"bafc84f7-c9ae-48bd-b9e8-552c86e4f0a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cms", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"ClassifierMeasurements", "[", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"mLmaccs", "@", "erTestMACCs"}]}], "]"}], "&"}], "/@", 
    "its"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.804855743228421*^9, 3.8048557787780533`*^9}},
 CellLabel->
  "In[442]:=",ExpressionUUID->"5d7665fa-c07c-4ccf-9ed3-95fcdf676e63"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6b7f3661-ff2a-48be-b038-331172913692"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 170, 3, 97, "Title",ExpressionUUID->"6b4dd09e-6715-4f5f-a125-8d843f7ea704"],
Cell[753, 27, 156, 3, 31, "Author",ExpressionUUID->"d83df031-b9fc-418b-8e47-286474c3f643"],
Cell[CellGroupData[{
Cell[934, 34, 164, 3, 67, "Section",ExpressionUUID->"7c07ee20-ab93-438a-8ec1-ae835b9125ec"],
Cell[1101, 39, 6200, 150, 474, "Input",ExpressionUUID->"f73a3d2c-82c3-482d-bc33-3f5ed06f3f1a",
 InitializationCell->True],
Cell[7304, 191, 1268, 29, 143, "Input",ExpressionUUID->"313aeda6-9633-4ba6-b8c2-fd762e9a351b",
 InitializationCell->True],
Cell[8575, 222, 791, 15, 44, "Input",ExpressionUUID->"ae72564b-e2ca-42f9-b693-12fa7c65499a",
 InitializationCell->True],
Cell[9369, 239, 690, 14, 44, "Input",ExpressionUUID->"f77c67cb-f0bd-4e86-9b7a-6f43186bd7e2",
 InitializationCell->True],
Cell[10062, 255, 555, 14, 44, "Input",ExpressionUUID->"b0d4a967-f0df-4a02-ab2c-6e4dde732990",
 InitializationCell->True],
Cell[10620, 271, 558, 12, 44, "Input",ExpressionUUID->"a8b537e0-c52e-4a7a-807f-e6873488349d",
 InitializationCell->True],
Cell[11181, 285, 794, 16, 65, "Input",ExpressionUUID->"5171f080-931a-4aa4-bd1e-4f797c21ec56",
 InitializationCell->True],
Cell[11978, 303, 320, 6, 28, "Input",ExpressionUUID->"cd7da6dc-ae5f-492e-820e-7ae58a91f8a8"],
Cell[12301, 311, 342, 8, 44, "Input",ExpressionUUID->"4b38cb8d-aeb7-479f-99f1-1a4182010598",
 InitializationCell->True],
Cell[12646, 321, 1277, 37, 84, "Input",ExpressionUUID->"557c61ba-f89e-4c8b-a835-3ccba14dde16",
 InitializationCell->True],
Cell[13926, 360, 707, 16, 44, "Input",ExpressionUUID->"1fff0d1e-1b11-419f-8ebd-1c0f530699a0",
 InitializationCell->True],
Cell[14636, 378, 229, 5, 28, "Input",ExpressionUUID->"942c48c9-a02f-4827-b3c3-e659196f9c24"],
Cell[14868, 385, 358, 8, 44, "Input",ExpressionUUID->"1c1b86ca-e022-4772-9d84-8be4f2c4c64b",
 InitializationCell->True],
Cell[15229, 395, 389, 8, 28, "Input",ExpressionUUID->"84edf42e-bd69-4e3b-b110-7a38910571f2"],
Cell[15621, 405, 423, 10, 44, "Input",ExpressionUUID->"53548bd7-5611-4dd9-91ec-2272eff87e50",
 InitializationCell->True],
Cell[16047, 417, 423, 10, 44, "Input",ExpressionUUID->"8dd02bc8-d728-4a4a-822b-d6e26ddd93ad",
 InitializationCell->True],
Cell[16473, 429, 475, 11, 44, "Input",ExpressionUUID->"57063d85-831f-4e5a-8ed3-bf7b87e53e22",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[16973, 444, 177, 3, 54, "Subsection",ExpressionUUID->"02666971-04fb-4577-abe4-90fe6e2567dd"],
Cell[17153, 449, 572, 12, 44, "Input",ExpressionUUID->"92d0f3ba-3dd2-47ee-ae6c-d9be855c74a7",
 InitializationCell->True],
Cell[17728, 463, 570, 12, 44, "Input",ExpressionUUID->"bdfc9ce6-823c-4b03-837a-999ccc0dfaea",
 InitializationCell->True],
Cell[18301, 477, 737, 19, 88, "Input",ExpressionUUID->"751b95dd-a07d-4c54-87da-9666729f6ee9"],
Cell[19041, 498, 476, 11, 44, "Input",ExpressionUUID->"0e8128b5-e6de-42c2-92ad-0cf477c6b18a",
 InitializationCell->True],
Cell[19520, 511, 683, 17, 84, "Input",ExpressionUUID->"a282b186-a094-4186-93f9-8ad34619e001",
 InitializationCell->True],
Cell[20206, 530, 416, 9, 44, "Input",ExpressionUUID->"d6f04097-0079-4bc4-a0da-c9061b1a1940",
 InitializationCell->True],
Cell[20625, 541, 947, 21, 44, "Input",ExpressionUUID->"0710a27a-525d-4148-8bd2-ef2db8ec1acc",
 InitializationCell->True],
Cell[21575, 564, 972, 24, 44, "Input",ExpressionUUID->"50a1d803-37e3-4c60-870c-51e1ba728914",
 InitializationCell->True],
Cell[22550, 590, 933, 23, 44, "Input",ExpressionUUID->"b4a8257c-cbd9-4d0a-ba06-92d2629190b3",
 InitializationCell->True],
Cell[23486, 615, 1349, 25, 123, "Input",ExpressionUUID->"e5c614fb-0a34-4ada-b03a-889f1fb8c4a2",
 InitializationCell->True],
Cell[24838, 642, 1199, 24, 123, "Input",ExpressionUUID->"d53f6d00-222a-4cd4-8577-bbaed14594af",
 InitializationCell->True],
Cell[26040, 668, 1225, 24, 123, "Input",ExpressionUUID->"5d61392c-7d50-4ed7-a84d-e7c3a6712d6d",
 InitializationCell->True],
Cell[27268, 694, 1077, 22, 104, "Input",ExpressionUUID->"8ba0e897-8eb6-4c63-a7c5-9f382a6ceb96",
 InitializationCell->True],
Cell[28348, 718, 875, 22, 143, "Input",ExpressionUUID->"bf7a3b22-b8a1-4485-b1ba-1dfc7d5d9cd6",
 InitializationCell->True],
Cell[29226, 742, 1006, 26, 143, "Input",ExpressionUUID->"399763c1-11c1-4a5c-bc60-eb5ac0ee5845",
 InitializationCell->True],
Cell[30235, 770, 876, 20, 65, "Input",ExpressionUUID->"7f07a6f9-2c78-4606-9db3-8fbf6ef87493",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[31160, 796, 171, 3, 53, "Section",ExpressionUUID->"8bb6d680-ad22-43d4-bb13-3f1a9498138c"],
Cell[CellGroupData[{
Cell[31356, 803, 160, 3, 54, "Subsection",ExpressionUUID->"1b02fffb-5e21-435f-9f0f-1252cd1c860e"],
Cell[31519, 808, 634, 15, 44, "Input",ExpressionUUID->"f36a8485-2013-409d-8ff2-d2722129a491",
 InitializationCell->True],
Cell[32156, 825, 275, 5, 28, "Input",ExpressionUUID->"4f39cd32-710e-4d94-ad87-485a239d1b06"],
Cell[32434, 832, 2982, 65, 48, "Input",ExpressionUUID->"01b8eb54-e108-4471-b273-0c387ddc0c60",
 InitializationCell->True],
Cell[35419, 899, 368, 7, 28, "Input",ExpressionUUID->"bde02aed-928a-4188-9b96-39660f05fb1a"],
Cell[35790, 908, 1055, 26, 84, "Input",ExpressionUUID->"b7b09101-887d-489d-8ec5-3ff043ae399a",
 InitializationCell->True],
Cell[36848, 936, 473, 10, 28, "Input",ExpressionUUID->"3423186c-a548-43f3-9e07-c976796b7c12"],
Cell[37324, 948, 933, 25, 65, "Input",ExpressionUUID->"f112b039-fb53-4d0a-bf33-6f15a0fdf8ff",
 InitializationCell->True],
Cell[38260, 975, 890, 21, 44, "Input",ExpressionUUID->"e85ee864-22ac-4bb7-a645-3d7666f950e8",
 InitializationCell->True],
Cell[39153, 998, 1695, 40, 123, "Input",ExpressionUUID->"23fa21af-377d-4832-bd01-ffc3cb37f921",
 InitializationCell->True],
Cell[40851, 1040, 348, 7, 21, "Input",ExpressionUUID->"3b79a496-bd87-400f-b64b-4e6ed30d1a09"],
Cell[41202, 1049, 346, 8, 33, "Input",ExpressionUUID->"c6ef8b47-5061-421f-9172-bd67e96068bb",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[41573, 1061, 222, 4, 21, "Input",ExpressionUUID->"ad2b9c45-02fa-433c-b83a-5fe3d1caa6cc"],
Cell[41798, 1067, 1857, 44, 70, "Output",ExpressionUUID->"ced7230e-a2d4-48d9-b7aa-6c008ae190a2"]
}, Open  ]],
Cell[43670, 1114, 353, 7, 21, "Input",ExpressionUUID->"c8873c28-1393-4cb4-b6f6-0e0d53082359"],
Cell[44026, 1123, 828, 16, 48, "Input",ExpressionUUID->"9dde5512-f858-480b-a18a-657aea842d35",
 InitializationCell->True],
Cell[44857, 1141, 398, 8, 21, "Input",ExpressionUUID->"0da964f9-2a01-40e9-939d-288a3b8db68e"],
Cell[45258, 1151, 1416, 33, 76, "Input",ExpressionUUID->"90bc2d77-3c4c-41f2-8c73-e1423a639ddb",
 InitializationCell->True],
Cell[46677, 1186, 525, 10, 21, "Input",ExpressionUUID->"0ebb8817-cd2f-449d-bebb-73703fa2c73f"],
Cell[47205, 1198, 532, 11, 33, "Input",ExpressionUUID->"92923544-06cb-42fd-b9db-abca8dddce6c",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[47774, 1214, 168, 3, 38, "Subsection",ExpressionUUID->"8cb200c7-bbb2-43b0-9bd6-2ee942e0cb82"],
Cell[47945, 1219, 449, 11, 21, "Input",ExpressionUUID->"d230dfdb-eea0-45d4-b29e-7c0e089b8c99"],
Cell[CellGroupData[{
Cell[48419, 1234, 633, 11, 33, "Input",ExpressionUUID->"b3a72139-2fe9-4732-9b54-c7335529a31a",
 InitializationCell->True],
Cell[49055, 1247, 4328, 93, 70, "Output",ExpressionUUID->"bd21804a-b8ba-4402-a783-1f43d490925d"]
}, Open  ]],
Cell[53398, 1343, 329, 7, 21, "Input",ExpressionUUID->"ad702dd5-c05b-4bd4-9361-b325164780eb"],
Cell[53730, 1352, 1949, 58, 76, "Input",ExpressionUUID->"1a178f2e-e243-4c6e-8484-64306e5d0923",
 InitializationCell->True],
Cell[55682, 1412, 352, 7, 21, "Input",ExpressionUUID->"a70272ff-27a3-4da5-a9fe-86489a7a1205"],
Cell[56037, 1421, 739, 15, 48, "Input",ExpressionUUID->"37ffff50-9ab0-4c92-91fa-0391fd7eac77",
 InitializationCell->True],
Cell[56779, 1438, 353, 7, 21, "Input",ExpressionUUID->"3f0a203e-8843-43e5-bef9-7ff27774415c"],
Cell[57135, 1447, 1372, 34, 76, "Input",ExpressionUUID->"9c2ad11f-eecb-4dc8-b2dd-760c525c955e",
 InitializationCell->True],
Cell[58510, 1483, 501, 10, 21, "Input",ExpressionUUID->"ac705e7f-9d33-4358-b326-5490a63d7e75"],
Cell[59014, 1495, 478, 10, 33, "Input",ExpressionUUID->"7960f15a-d622-478f-8a61-f4817b2df185",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[59541, 1511, 157, 3, 53, "Section",ExpressionUUID->"d3a78690-de63-4552-8cbf-02695864ba72"],
Cell[59701, 1516, 333, 7, 28, "Input",ExpressionUUID->"1dcde0fe-f781-44ac-a891-9d8ea0ef8490"],
Cell[60037, 1525, 635, 16, 28, "Input",ExpressionUUID->"33ded86d-11b9-4e97-98be-007372272abd"],
Cell[60675, 1543, 657, 14, 49, "Input",ExpressionUUID->"770cf801-3415-4b1e-8ceb-5f1c421abe19"],
Cell[61335, 1559, 320, 8, 28, "Input",ExpressionUUID->"cc31b2d8-21d8-42c9-bf8a-22ac81962711"],
Cell[61658, 1569, 285, 7, 28, "Input",ExpressionUUID->"01786e04-14ca-4d18-94a4-77764fc3393b"],
Cell[61946, 1578, 315, 8, 28, "Input",ExpressionUUID->"38cd8c7d-71d6-42cc-9bf8-87c26ac6a023"]
}, Closed]],
Cell[CellGroupData[{
Cell[62298, 1591, 172, 3, 53, "Section",ExpressionUUID->"748afb97-cd0e-4ba2-9774-ca9c7b920dcc"],
Cell[CellGroupData[{
Cell[62495, 1598, 164, 3, 54, "Subsection",ExpressionUUID->"f3f0504b-77d6-42bf-b195-8b9dbe43a8d7"],
Cell[62662, 1603, 439, 9, 28, "Input",ExpressionUUID->"23ea11b3-9c16-496e-ad1a-240c7b717751"],
Cell[63104, 1614, 484, 10, 49, "Input",ExpressionUUID->"1649b1a7-7404-460b-8f6f-0831fae98f1b"],
Cell[63591, 1626, 7947, 182, 494, "Input",ExpressionUUID->"ce4f6966-6485-4086-b2f6-adf0f451e249",
 InitializationCell->True],
Cell[71541, 1810, 8070, 185, 630, "Input",ExpressionUUID->"4fd3f493-b910-4e25-8942-30bac99bbdfe",
 InitializationCell->True],
Cell[79614, 1997, 536, 12, 68, "Input",ExpressionUUID->"143a591c-e047-4612-a2c2-0d693f308f65"],
Cell[80153, 2011, 348, 8, 28, "Input",ExpressionUUID->"9b68b292-b2a9-4799-82ec-c5fdc303d116"],
Cell[80504, 2021, 441, 9, 28, "Input",ExpressionUUID->"48705537-5927-47e3-a9ba-5d901d006639"],
Cell[80948, 2032, 330, 7, 28, "Input",ExpressionUUID->"d73f982f-2448-400e-a16b-35400c648161"],
Cell[81281, 2041, 192, 3, 28, "Input",ExpressionUUID->"3c9c4434-f000-450c-8149-83378a103162"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81510, 2049, 167, 3, 54, "Subsection",ExpressionUUID->"ab102951-0288-4bf8-b684-0e5c800c6782"],
Cell[81680, 2054, 3870, 84, 260, "Input",ExpressionUUID->"22f13c19-381c-4785-9870-7677b6341c31",
 InitializationCell->True],
Cell[85553, 2140, 3242, 72, 299, "Input",ExpressionUUID->"913a2fe8-9658-465f-bff7-64c5c298b863",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[88844, 2218, 173, 3, 67, "Section",ExpressionUUID->"810eb5cd-53bf-457e-babe-cf3e53b8b8f4"],
Cell[CellGroupData[{
Cell[89042, 2225, 169, 3, 54, "Subsection",ExpressionUUID->"f9961597-e0e2-4afd-994e-3d41df53b67e"],
Cell[CellGroupData[{
Cell[89236, 2232, 216, 4, 45, "Subsubsection",ExpressionUUID->"4f4c0373-80a4-4a59-b1e8-e56ed51053fc"],
Cell[89455, 2238, 365, 9, 28, "Input",ExpressionUUID->"bbf2662a-e7a4-4367-a88a-71b3850059cc"],
Cell[CellGroupData[{
Cell[89845, 2251, 413, 10, 28, "Input",ExpressionUUID->"fc3ca2d9-c4a1-462d-a29e-21e80bb7f1a6"],
Cell[90261, 2263, 211693, 3589, 64, "Output",ExpressionUUID->"99e7a5d5-9973-4a90-85db-7ea65c930384"]
}, Open  ]],
Cell[301969, 5855, 402, 10, 28, "Input",ExpressionUUID->"bafc84f7-c9ae-48bd-b9e8-552c86e4f0a1"],
Cell[302374, 5867, 457, 13, 28, "Input",ExpressionUUID->"5d7665fa-c07c-4ccf-9ed3-95fcdf676e63"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

