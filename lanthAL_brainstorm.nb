(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    312516,       6158]
NotebookOptionsPosition[    299960,       5953]
NotebookOutlinePosition[    300398,       5970]
CellTagsIndexPosition[    300355,       5967]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Active Learning Brainstorm ", "Title",
 CellChangeTimes->{{3.804600318613331*^9, 
  3.804600323076214*^9}},ExpressionUUID->"6b4dd09e-6715-4f5f-a125-\
8d843f7ea704"],

Cell["Will Borrelli", "Author",
 CellChangeTimes->{{3.80460032884228*^9, 
  3.804600330480211*^9}},ExpressionUUID->"d83df031-b9fc-418b-8e47-\
286474c3f643"],

Cell[CellGroupData[{

Cell["Initial Data Import", "Section",
 CellChangeTimes->{{3.797728301126897*^9, 
  3.797728303946023*^9}},ExpressionUUID->"7c07ee20-ab93-438a-8ec1-\
ae835b9125ec"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "googleSheet", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"googleSheet", "[", 
    RowBox[{"docKey_String", ",", "sheetName_String", ",", 
     RowBox[{"columns_String", ":", "\"\<\>\""}], ",", 
     RowBox[{"format_String", ":", "\"\<csv\>\""}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rangeSpec", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringLength", "[", "columns", "]"}], ">", "0"}], ",", 
         RowBox[{"\"\<&range=\>\"", "<>", "columns"}], ",", "\"\<\>\""}], 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<https://docs.google.com/spreadsheets/d/\>\"", "<>", "docKey", 
       "<>", "\"\</gviz/tq?tqx=out:\>\"", "<>", "format", "<>", 
       "\"\<&sheet=\>\"", "<>", "sheetName", "<>", "rangeSpec"}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"googleSheet", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<Amines\>\"", ",", "\"\<A:E\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<name\>\"", ",", "\"\<abbreviation\>\"", ",", 
      "\"\<Chloride salt?\>\"", ",", "\"\<Amine formula\>\"", ",", 
      "\"\<SMILES \>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<ethylenediamine\>\"", ",", "\"\<en\>\"", ",", "\"\<no\>\"", ",", 
      "\"\<C2H8N2\>\"", ",", "\"\<NCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,3-diaminopropane\>\"", ",", "\"\<1,3-dap\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C3H10N2\>\"", ",", "\"\<NCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,4-diaminobutane\>\"", ",", "\"\<1,4-dab\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C4H12N2\>\"", ",", "\"\<NCCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,5-diaminopentane\>\"", ",", "\"\<1,5-dap\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C5H14N2\>\"", ",", "\"\<NCCCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,6-diaminohexane\>\"", ",", "\"\<1,6-dah\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C6H16N2\>\"", ",", "\"\<NCCCCCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<spermine\>\"", ",", "\"\<spermine\>\"", ",", "\"\<no\>\"", ",", 
      "\"\<C10H26N4\>\"", ",", "\"\<NCCCNCCCCNCCCN\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<N,N,N',N'-tetramethylethylenediamine\>\"", ",", "\"\<tmed\>\"", 
      ",", "\"\<no\>\"", ",", "\"\<C6H16N2\>\"", ",", 
      "\"\<CN(C)CCN(C)C\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<N,N'-dimethylethylenediamine\>\"", ",", "\"\<dmed\>\"", ",", 
      "\"\<no\>\"", ",", "\"\<C4H12N2\>\"", ",", "\"\<CNCCNC\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<piperazine\>\"", ",", "\"\<pip\>\"", ",", "\"\<no\>\"", ",", 
      "\"\<C4H10N2\>\"", ",", "\"\<C1CNCCN1\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<2-methylpiperazine\>\"", ",", "\"\<2-mpip\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C5H12N2\>\"", ",", "\"\<CC1CNCCN1\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<2,5-dimethylpiperazine\>\"", ",", "\"\<2,5-dmpip\>\"", ",", 
      "\"\<no\>\"", ",", "\"\<C6H14N2\>\"", ",", "\"\<CC1CNC(C)CN1\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<1,4-diaza[2.2.2]bicyclooctane\>\"", ",", "\"\<dabco\>\"", ",", 
      "\"\<no\>\"", ",", "\"\<C6H12N2\>\"", ",", "\"\<C1CN2CCN1CC2\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<3-aminoquinuclidine.2HCl\>\"", ",", "\"\<3-aqn\>\"", ",", 
      "\"\<yes\>\"", ",", "\"\<C7H14N2.2HCl\>\"", ",", 
      "\"\<Cl.Cl.NC1CN2CCC1CC2\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<3-aminopyrrolidine.2HCl\>\"", ",", "\"\<3-apry\>\"", ",", 
      "\"\<yes\>\"", ",", "\"\<C4H10N2.2HCl\>\"", ",", 
      "\"\<Cl.Cl.NC1CCNC1\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<2-(aminomethyl)piperidine\>\"", ",", "\"\<2-amp\>\"", ",", 
      "\"\<no\>\"", ",", "\"\<C6H14N2\>\"", ",", "\"\<NCC1CCCCN1\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<2-methylpyrazine\>\"", ",", "\"\<2-mpyr\>\"", ",", "\"\<no\>\"", 
      ",", "\"\<C5H6N2\>\"", ",", "\"\<CC1=NC=CN=C1\>\""}], "}"}]}], "}"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"smiles", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Rest", "@", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "5"}], "]"}], "]"}]}], ",", 
     RowBox[{"{", "\"\<C(CN)CN\>\"", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amines", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Molecule", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{"\"\<Cl.\>\"", "\[Rule]", "\"\<\>\""}], "]"}], "[", "#", 
       "]"}], "]"}], "&"}], "/@", "smiles"}]}], " ", ";", 
  RowBox[{"(*", 
   RowBox[{"remove", " ", "salts"}], "*)"}], "\n", 
  RowBox[{"{", 
   RowBox[{
   "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
    "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", 
    "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
    "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", ",", 
    "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
    "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
    "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\""}], "}"}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781546417928156*^9, 3.781546430534261*^9}, {
   3.7816021001566825`*^9, 3.7816021125612*^9}, {3.7816022308967695`*^9, 
   3.781602255699417*^9}, {3.781616996568091*^9, 3.7816170018758907`*^9}, 
   3.7816214627140718`*^9, {3.781739990456283*^9, 3.7817399945573225`*^9}, {
   3.7898348504343276`*^9, 3.7898348527750654`*^9}, {3.804600430185212*^9, 
   3.8046004340542984`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"f73a3d2c-82c3-482d-bc33-3f5ed06f3f1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"googleSheetDataset", "[", 
   RowBox[{"docKey_String", ",", "sheetName_String", ",", 
    RowBox[{"columns_String", ":", "\"\<\>\""}], ",", 
    RowBox[{"format_String", ":", "\"\<csv\>\""}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rangeSpec", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "columns", "]"}], ">", "0"}], ",", 
        RowBox[{"\"\<&range=\>\"", "<>", "columns"}], ",", "\"\<\>\""}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Import", "[", 
     RowBox[{
      RowBox[{
      "\"\<https://docs.google.com/spreadsheets/d/\>\"", "<>", "docKey", 
       "<>", "\"\</gviz/tq?tqx=out:\>\"", "<>", "format", "<>", 
       "\"\<&sheet=\>\"", "<>", "sheetName", "<>", "rangeSpec"}], ",", 
      "\"\<Dataset\>\"", ",", 
      RowBox[{"HeaderLines", "\[Rule]", "1"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816022642929835`*^9, 3.7816022759838495`*^9}, {
  3.7817400036511955`*^9, 3.7817400049078007`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"313aeda6-9633-4ba6-b8c2-fd762e9a351b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJE", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<JE_Lanthanide_reactions\>\"", ",", "\"\<A:L\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7815471126650867`*^9, 3.7815471166813517`*^9}, {
  3.7815630959481087`*^9, 3.7815631269771585`*^9}, {3.7815631800636263`*^9, 
  3.781563295748209*^9}, {3.7815665877287083`*^9, 3.7815665889803643`*^9}, {
  3.7816002305472493`*^9, 3.781600249695258*^9}, {3.781601977892505*^9, 
  3.7816020304303226`*^9}, {3.7816020672680607`*^9, 3.7816020827940273`*^9}, {
  3.7816022830706987`*^9, 3.781602333091202*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"ae72564b-e2ca-42f9-b693-12fa7c65499a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJZDunordered", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<JZD_Lanthanide_reactions\>\"", ",", "\"\<A:L\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781602363412743*^9, 3.7816023768451166`*^9}, {
  3.7816024491298723`*^9, 3.7816024894045286`*^9}, {3.78160253611205*^9, 
  3.7816026252922573`*^9}, {3.781602681574018*^9, 3.781602699229116*^9}, {
  3.782657906954549*^9, 3.782657916224681*^9}, {3.782661063452709*^9, 
  3.782661067986163*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"f77c67cb-f0bd-4e86-9b7a-6f43186bd7e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataJZD", "=", 
   RowBox[{"dataJZDunordered", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"dataJE", "//", "First"}], "//", "Keys"}], "//", "Normal"}]}],
      "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816027018717785`*^9, 3.7816027266596203`*^9}, {
  3.781602762947981*^9, 3.781602771068947*^9}, {3.78265789922052*^9, 
  3.7826579050229096`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"b0d4a967-f0df-4a02-ab2c-6e4dde732990"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMD", "=", 
   RowBox[{"googleSheetDataset", "[", 
    RowBox[{
    "\"\<1v4DM8c9qRlO8-WpnwmErlKnw5T1N8pOXkWiiDN9FMzk\>\"", ",", 
     "\"\<MD_Lanthanide_reactions\>\"", ",", "\"\<A:S\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.789341399313546*^9, 3.7893414112144556`*^9}, {
   3.789341443887838*^9, 3.789341473748061*^9}, {3.789341624269355*^9, 
   3.7893416281829476`*^9}, 3.7898348811072493`*^9},
 CellLabel->"In[77]:=",ExpressionUUID->"a8b537e0-c52e-4a7a-807f-e6873488349d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDord", "=", 
   RowBox[{"dataMD", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Reference\>\"", ",", "\"\<Ln ID\>\"", ",", "\"\<Ln Mass/g\>\"", 
       ",", "\"\<H2SeO4 (aq) 40%w/w /g\>\"", ",", "\"\<Na2C2O4/g\>\"", ",", 
       "\"\<Amine/g\>\"", ",", "\"\<Amine name\>\"", ",", "\"\<SMILES\>\"", 
       ",", "\"\<Added H2O/g\>\"", ",", "\"\<pH\>\"", ",", "\"\<Outcome\>\"", 
       ",", "\"\<Purity\>\""}], "}"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7893416301744895`*^9, 3.7893417528008356`*^9}, {
  3.7904607738810253`*^9, 3.790460776041793*^9}, {3.7912040602334223`*^9, 
  3.7912040609445353`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"5171f080-931a-4aa4-bd1e-4f797c21ec56"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "take", " ", "only", " ", "reactions", " ", "that", " ", "have", " ", 
   "outcome", " ", "entries"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7912179442892313`*^9, 3.791217956642193*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"cd7da6dc-ae5f-492e-820e-7ae58a91f8a8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDord", "=", 
   RowBox[{"dataMDord", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "200"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7912179596361895`*^9, 3.7912179643725195`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"4b38cb8d-aeb7-479f-99f1-1a4182010598"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataMDFull", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"dataMDord", "[", 
      RowBox[{"All", ",", 
       RowBox[{
        RowBox[{"KeyMap", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "/.", 
            RowBox[{
            "\"\<Reference\>\"", "\[Rule]", "\"\<Reaction number\>\""}]}], 
           "&"}], ",", "#"}], "]"}], "&"}]}], "]"}], "[", 
     RowBox[{"All", ",", 
      RowBox[{
       RowBox[{"KeyMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "/.", 
           RowBox[{
           "\"\<H2SeO4 (aq) 40%w/w /g\>\"", "\[Rule]", 
            "\"\<H2SeO4 (40 wt %)/g\>\""}]}], "&"}], ",", "#"}], "]"}], 
       "&"}]}], "]"}], "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"KeyMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "/.", 
          RowBox[{"\"\<Added H2O/g\>\"", "\[Rule]", "\"\<H2O/g\>\""}]}], 
         "&"}], ",", "#"}], "]"}], "&"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7912414155230637`*^9, 3.7912414598906307`*^9}, {
  3.791241498066386*^9, 3.791241620348447*^9}, {3.7912416813879967`*^9, 
  3.7912417362433567`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"557c61ba-f89e-4c8b-a835-3ccba14dde16"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataCombined", "=", 
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{"Catenate", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Normal", "[", "dataJE", "]"}], ",", 
         RowBox[{"Normal", "[", "dataJZD", "]"}]}], "}"}], "]"}], "]"}], ",", 
     RowBox[{"-", "25"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781602865872223*^9, 3.7816028879329557`*^9}, {
   3.7816029521238112`*^9, 3.7816030114814105`*^9}, 3.781603925653813*^9, 
   3.781615540265335*^9, {3.7821728512473164`*^9, 3.7821728544821634`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"1fff0d1e-1b11-419f-8ebd-1c0f530699a0"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"standardize", " ", "labels"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8046006614863033`*^9, 
  3.8046006680223036`*^9}},ExpressionUUID->"942c48c9-a02f-4827-b3c3-\
e659196f9c24"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataCombined", "=", 
   RowBox[{"dataCombined", "/.", 
    RowBox[{"\"\<ErCl3.6H2O/g\>\"", "\[Rule]", "\"\<ErCl3.6H2O\>\""}]}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797816954789365*^9, 3.7978169566574745`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"1c1b86ca-e022-4772-9d84-8be4f2c4c64b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genData2D", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\genData2D.csv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7954089003983264`*^9, 3.7954089207081604`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"84edf42e-bd69-4e3b-b110-7a38910571f2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genData2Dv2", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\genData2Dv2.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7954089226455493`*^9, 3.7954089314147415`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"53548bd7-5611-4dd9-91ec-2272eff87e50"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allDataMACCs", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\allDataMACCs.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.795376380925789*^9, 3.7953764503252993`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"8dd02bc8-d728-4a4a-822b-d6e26ddd93ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allDataOneHot", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<C:\\\\Users\\\\willr\\\\Desktop\\\\SchrierRsrch\\\\Data\\\\\
Lanthanides\\\\Processed_Data\\\\allDataOneHot.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.79534690939496*^9, 3.7953469300087214`*^9}, {
  3.7953470373660774`*^9, 3.795347044136973*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"57063d85-831f-4e5a-8ed3-bf7b87e53e22"],

Cell[CellGroupData[{

Cell["Data Processing Functions", "Subsection",
 CellChangeTimes->{{3.7977283618435545`*^9, 
  3.7977283717906923`*^9}},ExpressionUUID->"02666971-04fb-4577-abe4-\
90fe6e2567dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"laGroupQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<LaCl3.6H2O\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816155714819126`*^9, 3.781615577177689*^9}, {
  3.7816156247321773`*^9, 3.7816156292391233`*^9}, {3.782658876652196*^9, 
  3.7826588769882216`*^9}, {3.7918998515832415`*^9, 3.791899869640334*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"92d0f3ba-3dd2-47ee-ae6c-d9be855c74a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"erGroupQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<ErCl3.6H2O\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921040103059583`*^9, 3.792104021030526*^9}, {
  3.792104068501077*^9, 3.792104073095149*^9}, {3.7921041462506914`*^9, 
  3.7921041470356154`*^9}, {3.792104487220478*^9, 3.7921044913074737`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"bdfc9ce6-823c-4b03-837a-999ccc0dfaea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lanthGroup", "[", 
   RowBox[{"df_", ",", "lanth_String"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"lanthGroupQ", "[", 
      RowBox[{"row_", ",", 
       RowBox[{"query_String", ":", "\"\<Ln ID\>\""}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
      RowBox[{"lanth", "<>", "\"\<Cl3.6H2O\>\""}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "lanthGroupQ"}], "]"}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.797816682445188*^9, 3.797816765523422*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"751b95dd-a07d-4c54-87da-9666729f6ee9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", "\"\<SMILES\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[Equal]", 
   "\"\<NCCCNCCCCNCCCN\>\""}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7816157028235025`*^9, 3.7816157458544636`*^9}, {
  3.782172411151492*^9, 3.7821724138827496`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"0e8128b5-e6de-42c2-92ad-0cf477c6b18a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineGroup", "[", 
   RowBox[{"df_", ",", "amine_String"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"amineQ", "[", 
      RowBox[{"row_", ",", 
       RowBox[{"query_String", ":", "\"\<SMILES\>\""}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"row", "[", "query", "]"}], "\[Equal]", "amine"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "amineQ"}], "]"}]}], ")"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797816526361371*^9, 3.7978166174643745`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"a282b186-a094-4186-93f9-8ad34619e001"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rxnSuccessQ", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"query_String", ":", " ", "\"\<Outcome\>\""}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"row", "[", "query", "]"}], "\[GreaterEqual]", "3"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.781622007317878*^9, 3.7816220195361867`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"d6f04097-0079-4bc4-a0da-c9061b1a1940"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccs", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", "7", "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.791803122882662*^9, 3.7918031382559056`*^9}, {
   3.7918035309814463`*^9, 3.7918035696370006`*^9}, {3.792106289580659*^9, 
   3.792106290085314*^9}, {3.792148276635498*^9, 3.79214829072795*^9}, {
   3.7953765358516235`*^9, 3.795376538303071*^9}, 3.797778826863719*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"0710a27a-525d-4148-8bd2-ef2db8ec1acc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccsRed", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Delete", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "5", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "7", "}"}]}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921911434126787`*^9, 3.792191197483028*^9}, {
   3.7953765445483775`*^9, 3.795376544787736*^9}, 3.797778830770344*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"50a1d803-37e3-4c60-870c-51e1ba728914"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLmaccsRedpH", "[", "df_Dataset", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"Delete", "[", 
      RowBox[{
       RowBox[{"Rest", "[", 
        RowBox[{"Rest", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{"Keys", "[", 
           RowBox[{"First", "[", "df", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "5", "}"}], ",", 
         RowBox[{"{", "7", "}"}]}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7921919063748302`*^9, 3.79219191467488*^9}, {
   3.795376549355523*^9, 3.795376549498181*^9}, 3.7977788341736927`*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"b4a8257c-cbd9-4d0a-ba06-92d2629190b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOH", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<H2SeO4 Mole Fraction\>\"", ",", 
       "\"\<Sodium Oxalate Mole Fraction\>\"", ",", 
       "\"\<Amine Mole Fraction\>\"", ",", "\"\<H2O Mole Fraction\>\"", ",", 
       "\"\<pH\>\"", ",", "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", 
       "\"\<NCCCCN\>\"", ",", "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", 
       ",", "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948837777078834`*^9, 3.7948837984704933`*^9}, {
   3.7948844019697094`*^9, 3.794884405660018*^9}, 3.797798003770788*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"e5c614fb-0a34-4ada-b03a-889f1fb8c4a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHred", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<Sodium Oxalate Mole Fraction\>\"",
        ",", "\"\<Amine Mole Fraction\>\"", ",", "\"\<NCCN\>\"", ",", 
       "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", "\"\<NCCCCCN\>\"", ",", 
       "\"\<NCCCCCCCN\>\"", ",", "\"\<NCCCNCCCCNCCCN\>\"", ",", 
       "\"\<CN(C)CCN(C)C\>\"", ",", "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"",
        ",", "\"\<CC1CNCCN1\>\"", ",", "\"\<CC1CNC(C)CN1\>\"", ",", 
       "\"\<C1CN2CCN1CC2\>\"", ",", "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CCNC1\>\"", ",", "\"\<NCC1CCCCN1\>\"", ",", 
       "\"\<CC1=NC=CN=C1\>\"", ",", "\"\<NCCNCCN\>\"", ",", 
       "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", "\"\<C(CN)CN\>\""}], "}"}]}], "]"}],
    "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948847695973425`*^9, 3.79488478779722*^9}, 
   3.797778862286379*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"d53f6d00-222a-4cd4-8577-bbaed14594af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHredpH", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Ln Mole Fraction\>\"", ",", "\"\<Sodium Oxalate Mole Fraction\>\"",
        ",", "\"\<Amine Mole Fraction\>\"", ",", "\"\<pH\>\"", ",", 
       "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
       "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", 
       "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794884796554892*^9, 3.7948848103915005`*^9}, 
   3.797778849797413*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"5d61392c-7d50-4ed7-a84d-e7c3a6712d6d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mLOHonly", "[", "df_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"df", ",", "rxnSuccessQ"}], "]"}], "[", 
    RowBox[{"All", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<NCCN\>\"", ",", "\"\<NCCCN\>\"", ",", "\"\<NCCCCN\>\"", ",", 
       "\"\<NCCCCCN\>\"", ",", "\"\<NCCCCCCCN\>\"", ",", 
       "\"\<NCCCNCCCCNCCCN\>\"", ",", "\"\<CN(C)CCN(C)C\>\"", ",", 
       "\"\<CNCCNC\>\"", ",", "\"\<C1CNCCN1\>\"", ",", "\"\<CC1CNCCN1\>\"", 
       ",", "\"\<CC1CNC(C)CN1\>\"", ",", "\"\<C1CN2CCN1CC2\>\"", ",", 
       "\"\<Cl.Cl.NC1CN2CCC1CC2\>\"", ",", "\"\<Cl.Cl.NC1CCNC1\>\"", ",", 
       "\"\<NCC1CCCCN1\>\"", ",", "\"\<CC1=NC=CN=C1\>\"", ",", 
       "\"\<NCCNCCN\>\"", ",", "\"\<C1CC(CCN1)C2CCNCC2\>\"", ",", 
       "\"\<C(CN)CN\>\""}], "}"}]}], "]"}], "//", "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948849660265164`*^9, 3.7948849850306168`*^9}, 
   3.797778856985733*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"8ba0e897-8eb6-4c63-a7c5-9f382a6ceb96"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainTestSplit", "[", "fraction_", "]"}], "[", "df_Dataset", 
   "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nTrainingItems", " ", "=", " ", 
      RowBox[{"UpTo", "@", 
       RowBox[{"Round", "@", 
        RowBox[{"(", 
         RowBox[{"fraction", "*", 
          RowBox[{"Length", "[", "df", "]"}]}], ")"}]}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TakeDrop", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"RandomSample", "[", "df", "]"}], ",", " ", 
      "\[IndentingNewLine]", "nTrainingItems"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], " "}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7915552591974335`*^9, 3.791555263437021*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"bf7a3b22-b8a1-4485-b1ba-1dfc7d5d9cd6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainTestSplit", "[", "fraction_", "]"}], "[", 
   RowBox[{"df_Dataset", ",", "seed_"}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nTrainingItems", " ", "=", " ", 
      RowBox[{"UpTo", "@", 
       RowBox[{"Round", "@", 
        RowBox[{"(", 
         RowBox[{"fraction", "*", 
          RowBox[{"Length", "[", "df", "]"}]}], ")"}]}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TakeDrop", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"SeedRandom", "[", "seed", "]"}], ";", 
        RowBox[{"RandomSample", "[", "df", "]"}]}], ")"}], ",", " ", 
      "\[IndentingNewLine]", "nTrainingItems"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], " "}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.804602126514862*^9, 3.8046021741950445`*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"399763c1-11c1-4a5c-bc60-eb5ac0ee5845"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classMeasures", "[", "cm_ClassifierMeasurementsObject", "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", " ", 
       RowBox[{"cm", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Accuracy\>\"", ",", "\"\<Recall\>\"", ",", "\"\<MCC\>\"", ",", 
      "\"\<Sensitivity\>\"", ",", "\"\<Specificity\>\"", ",", 
      "\"\<AreaUnderROCCurve\>\"", ",", "\"\<F1Score\>\""}], "}"}]}], "//", 
   "TableForm"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.791293828248836*^9, 3.791293830784854*^9}, {
  3.791293873577479*^9, 3.7912938758373833`*^9}, {3.791720537960402*^9, 
  3.7917205555484447`*^9}, {3.7923259283658032`*^9, 3.7923259303311443`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"7f07a6f9-2c78-4606-9db3-8fbf6ef87493"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Make Sampling Datasets", "Section",
 CellChangeTimes->{{3.7977291888355694`*^9, 
  3.7977291931138754`*^9}},ExpressionUUID->"8bb6d680-ad22-43d4-bb13-\
3f1a9498138c"],

Cell[CellGroupData[{

Cell["MACCs Keys", "Subsection",
 CellChangeTimes->{{3.7977292038482203`*^9, 
  3.797729205434863*^9}},ExpressionUUID->"1b02fffb-5e21-435f-9f0f-\
1252cd1c860e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataRaw", "=", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"genData2Dv2", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", 
        "10", ",", "11", ",", "12", ",", "13"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977292091355968`*^9, 3.797729218862091*^9}, {
  3.7977293185267353`*^9, 3.7977293460560913`*^9}, {3.7977296240994773`*^9, 
  3.79772963654508*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"f36a8485-2013-409d-8ff2-d2722129a491"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"get", " ", "all", " ", "the", " ", "maccs", " ", "keys"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.797730156260543*^9, 3.797730161618863*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"4f39cd32-710e-4d94-ad87-485a239d1b06"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccs", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{
     InterpretationBox[
      TagBox[
       StyleBox[
        StyleBox[
         FrameBox[GridBox[{
            {
             StyleBox[
              StyleBox[
               AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                BoxBaselineShift->-0.25,
                BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
               
               FontColor->RGBColor[
                0.8745098039215686, 0.2784313725490196, 0.03137254901960784]],
              ShowStringCharacters->False,
              FontFamily->"Source Sans Pro Black",
              FontSize->Rational[10, 13] Inherited,
              FontWeight->"Heavy",
              PrivateFontOptions->{"OperatorSubstitution"->False}], 
             StyleBox[
              StyleBox["\<\"MACCSKeys\"\>", "ResourceFunctionLabel"],
              ShowStringCharacters->False,
              FontSize->Rational[12, 13] Inherited]}
           }]], "ResourceFunctionFrame"],
        FrameBoxOptions->{Background->GrayLevel[0.5, 0.15],
        BaseStyle->{
         "StandardForm", LineSpacing -> {0, 0}, LineBreakWithin -> False},
        FrameMargins->{{3, 3}, {0, 0}},
        FrameStyle->Directive[
          GrayLevel[0.5, 0.35], 
          AbsoluteThickness[0.5]],
        RoundingRadius->4},
        GridBoxOptions->{FrameStyle->GrayLevel[1, 0],
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
        GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{0.25}}, "Rows" -> {-0.1, {}, 0}}}],
       {"FunctionResourceBox", 
        RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784],
         "\"MACCSKeys\""}],
      ResourceFunction[
       ResourceObject[
        Association[
        "Name" -> "MACCSKeys", "ShortName" -> "MACCSKeys", "UUID" -> 
         "f8b0f1a9-223b-4eda-9d8c-9e4928b1b029", "ResourceType" -> "Function",
          "Version" -> "1.0.0", "Description" -> 
         "Compute the 166-bit MACCS (Molecular ACCess System) key", 
         "RepositoryLocation" -> 
         URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
         "SymbolName" -> 
         "FunctionRepository`$9d04496dd1d74429862dbd9de474c06d`MACCSKeys", 
         "FunctionLocation" -> 
         CloudObject[
          "https://www.wolframcloud.com/obj/e49eb676-b131-43dc-a539-\
cec4e5e85b7c"]], {ResourceSystemBase -> Automatic}]],
      Selectable->False], "/@", "smiles"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7954098603627405`*^9, 3.7954099252933607`*^9}, {
  3.795409968908456*^9, 3.795410083911524*^9}, {3.7954102185602927`*^9, 
  3.795410368181925*^9}, {3.7959231644070606`*^9, 3.795923172071984*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"01b8eb54-e108-4471-b273-0c387ddc0c60"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "make", " ", "an", " ", "assoc", " ", "of", " ", "each", " ", "maccs", " ", 
   "key", " ", "\"\<name\>\"", " ", "and", " ", "the", " ", "value"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.797730163349805*^9, 3.7977301747219367`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"bde02aed-928a-4188-9b96-39660f05fb1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsAssoc", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<maccs\>\"", "<>", 
        RowBox[{"ToString", "[", "j", "]"}]}], "->", 
       RowBox[{
        RowBox[{"maccs", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "j", "]"}], "]"}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "maccs", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"maccs", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.795924457764222*^9, 3.7959246559957795`*^9}, {
  3.795924689825609*^9, 3.7959247935113134`*^9}, {3.797730774950071*^9, 
  3.797730823417225*^9}, {3.797730879059975*^9, 3.797730882277068*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"b7b09101-887d-489d-8ec5-3ff043ae399a"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "get", " ", "only", " ", "the", " ", "maccs", " ", "keys", " ", "that", " ",
    "vary", " ", 
   RowBox[{"(", 
    RowBox[{
    "from", " ", "maccs", " ", "dataset", " ", "where", " ", "this", " ", 
     "was", " ", "already", " ", "computed"}], ")"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977301764903917`*^9, 3.797730194751487*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"3423186c-a548-43f3-9e07-c976796b7c12"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsRed", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Lookup", "[", 
      RowBox[{
       RowBox[{"Association", "[", 
        RowBox[{"maccsAssoc", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"First", "[", 
           RowBox[{"allDataMACCs", "[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"10", ";;"}], "}"}]}], "]"}], "]"}], "]"}], "]"}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "maccsAssoc", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797731037699054*^9, 3.797731163269812*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"f112b039-fb53-4d0a-bf33-6f15a0fdf8ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsAssocRed", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"First", "[", 
           RowBox[{"allDataMACCs", "[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"10", ";;"}], "}"}]}], "]"}], "]"}], "]"}], "]"}], 
        "]"}], ",", "#"}], "]"}], "&"}], "/@", "maccsRed"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797731387177384*^9, 3.797731469646494*^9}, {
  3.7977315006404223`*^9, 3.7977315151608515`*^9}, {3.7977315517990856`*^9, 
  3.797731581658821*^9}, {3.797731625682429*^9, 3.797731738263607*^9}, {
  3.797731801638977*^9, 3.797731804044848*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"e85ee864-22ac-4bb7-a645-3d7666f950e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"genDataRaw", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "#"}], "]"}], 
            "&"}], "/@", "maccsAssocRed"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"genDataRaw", "[", 
                RowBox[{"[", 
                 RowBox[{"i", "+", "1"}], "]"}], "]"}], "]"}], ",", "#"}], 
             "]"}], "&"}], "/@", "maccsAssocRed"}]}], "\[IndentingNewLine]", 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "20"}], "}"}]}], "]"}], "//", 
      "Flatten"}], "//", "DeleteDuplicates"}], "//", "Dataset"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977685099254184`*^9, 3.7977685301862717`*^9}, {
  3.797768654874099*^9, 3.797768812541133*^9}, {3.7977688550559883`*^9, 
  3.797768880494068*^9}, {3.797768914142953*^9, 3.797768924494399*^9}, {
  3.7977692894126697`*^9, 3.7977693049402647`*^9}, {3.7977734762860675`*^9, 
  3.797773481886305*^9}, {3.7977766008410673`*^9, 3.7977766009557905`*^9}, {
  3.797776930812009*^9, 3.7977769643033924`*^9}, {3.797781826838252*^9, 
  3.7977818300175962`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"23fa21af-377d-4832-bd01-ffc3cb37f921"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "amine", " ", "SMILES", " ", "to", " ", 
   "their", " ", "reduced", " ", "MACCS", " ", "keys"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797778366426738*^9, 3.797778376915882*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"3b79a496-bd87-400f-b64b-4e6ed30d1a09"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineRedMACCsAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "maccsAssocRed"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797778190938843*^9, 3.79777836057209*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"c6ef8b47-5061-421f-9172-bd67e96068bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositionIndex", "[", "smiles", "]"}]], "Input",
 CellChangeTimes->{{3.7977895686983175`*^9, 3.797789573105955*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"ad2b9c45-02fa-433c-b83a-5fe3d1caa6cc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NCCN\"\>", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"\<\"NCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{"\<\"NCCCNCCCCNCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{"\<\"CN(C)CCN(C)C\"\>", "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{"\<\"CNCCNC\"\>", "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{"\<\"C1CNCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{"\<\"CC1CNCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{"\<\"CC1CNC(C)CN1\"\>", "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{"\<\"C1CN2CCN1CC2\"\>", "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{"\<\"Cl.Cl.NC1CN2CCC1CC2\"\>", "\[Rule]", 
    RowBox[{"{", "13", "}"}]}], ",", 
   RowBox[{"\<\"Cl.Cl.NC1CCNC1\"\>", "\[Rule]", 
    RowBox[{"{", "14", "}"}]}], ",", 
   RowBox[{"\<\"NCC1CCCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "15", "}"}]}], ",", 
   RowBox[{"\<\"CC1=NC=CN=C1\"\>", "\[Rule]", 
    RowBox[{"{", "16", "}"}]}], ",", 
   RowBox[{"\<\"NCCNCCN\"\>", "\[Rule]", 
    RowBox[{"{", "17", "}"}]}], ",", 
   RowBox[{"\<\"C1CC(CCN1)C2CCNCC2\"\>", "\[Rule]", 
    RowBox[{"{", "18", "}"}]}], ",", 
   RowBox[{"\<\"C(CN)CN\"\>", "\[Rule]", 
    RowBox[{"{", "19", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.797789573440578*^9, 3.7977976271469975`*^9, 
  3.7985485558891315`*^9, 3.8046014449898987`*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"ced7230e-a2d4-48d9-b7aa-6c008ae190a2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "list", " ", "of", " ", "the", " ", "names", " ", "of", " ", "gen", " ", 
   "data", " ", "MACCs", " ", "key", " ", "datasets"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977902116394377`*^9, 3.7977902223723288`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"c8873c28-1393-4cb4-b6f6-0e0d53082359"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCsList", "=", 
   RowBox[{"{", 
    RowBox[{
    "genDataMACCsA1", ",", "genDataMACCsA2", ",", "genDataMACCsA3", ",", 
     "genDataMACCsA4", ",", "genDataMACCsA5", ",", "genDataMACCsA6", ",", 
     "genDataMACCsA7", ",", "genDataMACCsA8", ",", "genDataMACCsA9", ",", 
     "genDataMACCsA10", ",", "genDataMACCsA11", ",", "genDataMACCsA12", ",", 
     "genDataMACCsA13", ",", "genDataMACCsA14", ",", "genDataMACCsA15", ",", 
     "genDataMACCsA16", ",", "genDataMACCsA17", ",", "genDataMACCsA18", ",", 
     "genDataMACCsA19"}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797789827905715*^9, 3.797789876863767*^9}, {
  3.7977900907871294`*^9, 3.7977900914457607`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"9dde5512-f858-480b-a18a-657aea842d35"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "generates", " ", "separate", " ", "generated", " ", "sampling", " ", 
   "datasets", " ", "for", " ", "each", " ", "amine", " ", "with", " ", 
   "MACCs", " ", "descriptors"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.79779017762912*^9, 3.7977902016774435`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"0da964f9-2a01-40e9-939d-288a3b8db68e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "genDataMACCsA1", ",", "genDataMACCsA2", ",", "genDataMACCsA3", ",", 
     "genDataMACCsA4", ",", "genDataMACCsA5", ",", "genDataMACCsA6", ",", 
     "genDataMACCsA7", ",", "genDataMACCsA8", ",", "genDataMACCsA9", ",", 
     "genDataMACCsA10", ",", "genDataMACCsA11", ",", "genDataMACCsA12", ",", 
     "genDataMACCsA13", ",", "genDataMACCsA14", ",", "genDataMACCsA15", ",", 
     "genDataMACCsA16", ",", "genDataMACCsA17", ",", "genDataMACCsA18", ",", 
     "genDataMACCsA19"}], "}"}], "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"amineRedMACCsAssoc", "[", 
           RowBox[{"smiles", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
       RowBox[{"Normal", "[", "genDataRaw", "]"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "smiles", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977893833120947`*^9, 3.797789409895822*^9}, {
  3.7977899980614743`*^9, 3.797789999643379*^9}, {3.797790893144055*^9, 
  3.7977909191332893`*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"90bc2d77-3c4c-41f2-8c73-e1423a639ddb"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "each", " ", "smiles", " ", "string", " ", 
   "and", " ", "its", " ", "generated", " ", "sampling", " ", "dataset", " ", 
   "with", " ", "maccs", " ", "decriptors"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977901550150166`*^9, 3.7977901688104553`*^9}, {
  3.797791210847643*^9, 3.797791212053918*^9}, {3.7977977439748707`*^9, 
  3.7977977463800936`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"0ebb8817-cd2f-449d-bebb-73703fa2c73f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCsSAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "genDataMACCsList"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977899026079407`*^9, 3.7977899181563168`*^9}, 
   3.7977899684040127`*^9, {3.797790102989602*^9, 3.7977901304155207`*^9}, {
   3.7977912140535975`*^9, 3.797791225082279*^9}, {3.797797748981144*^9, 
   3.797797764176195*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"92923544-06cb-42fd-b9db-abca8dddce6c"]
}, Closed]],

Cell[CellGroupData[{

Cell["One Hot Encoding", "Subsection",
 CellChangeTimes->{{3.7977905195781918`*^9, 
  3.7977905234438753`*^9}},ExpressionUUID->"8cb200c7-bbb2-43b0-9bd6-\
2ee942e0cb82"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "one", " ", "hot", " ", "encode", " ", "for", " ", "each", " ", "amine"}], 
   ";", " ", 
   RowBox[{
   "enc", " ", "turns", " ", "True", " ", "or", " ", "False", " ", "to", " ", 
    "1", " ", "or", " ", "0"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948659943854885`*^9, 3.794866015501851*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"d230dfdb-eea0-45d4-b29e-7c0e089b8c99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"enc", "=", 
  RowBox[{"NetEncoder", "[", "\"\<Boolean\>\"", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948651781564693`*^9, 3.794865179126934*^9}, {
  3.7948653553328924`*^9, 3.7948653589806294`*^9}, {3.7948654716834154`*^9, 
  3.794865521904889*^9}, {3.7948655533867555`*^9, 3.794865554374774*^9}, {
  3.7948655907751646`*^9, 3.79486559244794*^9}, {3.7948657221804185`*^9, 
  3.7948657249116125`*^9}, {3.79486576204962*^9, 3.7948657656069517`*^9}, {
  3.7948658033034306`*^9, 3.794865854323888*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"b3a72139-2fe9-4732-9b54-c7335529a31a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Boolean\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Boolean\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7948658545894423`*^9, 3.7953467863934927`*^9, 
  3.797790576212371*^9, 3.797797635194351*^9, 3.7978055627008457`*^9, 
  3.798548185981921*^9, 3.798548564766074*^9, 3.804601452911669*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"bd21804a-b8ba-4402-a783-1f43d490925d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "create", " ", "True", " ", "and", " ", "False", " ", "lists", " ", "for", 
   " ", "each", " ", "amine"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948661471398582`*^9, 3.794866156451421*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"ad702dd5-c05b-4bd4-9361-b325164780eb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"amineTandF", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"smiles", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", 
      RowBox[{"smiles", "[", 
       RowBox[{"[", "j", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "19"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1and0", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"enc", "[", "#", "]"}], "&"}], "/@", "amineTandF"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1and0Assoc", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"smiles", "[", 
         RowBox[{"[", "m", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{
        RowBox[{"amine1and0", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "[", 
        RowBox[{"[", "m", "]"}], "]"}]}], " ", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "19"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1HotAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"smiles", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{"amine1and0Assoc", "[", 
        RowBox[{"[", "n", "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "19"}], "}"}]}], "]"}], "|>"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794866185026414*^9, 3.794866559763882*^9}, {
  3.7948666019431486`*^9, 3.794866639807707*^9}, {3.794867330970943*^9, 
  3.7948673631276274`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"1a178f2e-e243-4c6e-8484-64306e5d0923"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "list", " ", "of", " ", "gen", " ", "data", " ", "one", " ", "hot", " ", 
   "encoded", " ", "for", " ", "each", " ", "amine"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977911593124084`*^9, 3.7977911683431816`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"a70272ff-27a3-4da5-a9fe-86489a7a1205"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataOheList", "=", 
   RowBox[{"{", 
    RowBox[{
    "genDataOheA1", ",", "genDataOheA2", ",", "genDataOheA3", ",", 
     "genDataOheA4", ",", "genDataOheA5", ",", "genDataOheA6", ",", 
     "genDataOheA7", ",", "genDataOheA8", ",", "genDataOheA9", ",", 
     "genDataOheA10", ",", "genDataOheA11", ",", "genDataOheA12", ",", 
     "genDataOheA13", ",", "genDataOheA14", ",", "genDataOheA15", ",", 
     "genDataOheA16", ",", "genDataOheA17", ",", "genDataOheA18", ",", 
     "genDataOheA19"}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977911030695877`*^9, 3.7977911077625537`*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"37ffff50-9ab0-4c92-91fa-0391fd7eac77"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "generated", " ", "sampling", " ", "datasets", " ", "for", " ", "each", " ",
    "amine", " ", "one", " ", "hot", " ", "encoded"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977911708534155`*^9, 3.797791182773553*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"3f0a203e-8843-43e5-bef9-7ff27774415c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "genDataOheA1", ",", "genDataOheA2", ",", "genDataOheA3", ",", 
     "genDataOheA4", ",", "genDataOheA5", ",", "genDataOheA6", ",", 
     "genDataOheA7", ",", "genDataOheA8", ",", "genDataOheA9", ",", 
     "genDataOheA10", ",", "genDataOheA11", ",", "genDataOheA12", ",", 
     "genDataOheA13", ",", "genDataOheA14", ",", "genDataOheA15", ",", 
     "genDataOheA16", ",", "genDataOheA17", ",", "genDataOheA18", ",", 
     "genDataOheA19"}], "}"}], "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"Association", "@", 
           RowBox[{"amine1HotAssoc", "[", 
            RowBox[{"smiles", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", "#"}], "]"}], 
        "&"}], "/@", 
       RowBox[{"Normal", "[", "genDataRaw", "]"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "smiles", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797790761633565*^9, 3.797790770993244*^9}, {
  3.797790993063525*^9, 3.797791094142624*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"9c2ad11f-eecb-4dc8-b2dd-760c525c955e"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "each", " ", "smiles", " ", "string", " ", 
   "and", " ", "its", " ", "generated", " ", "sampling", " ", "dataset", " ", 
   "with", " ", "one", " ", "hot", " ", "encoded", " ", "decriptors"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7977901550150166`*^9, 3.7977901688104553`*^9}, {
  3.797791210847643*^9, 3.797791212053918*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"ac705e7f-9d33-4358-b326-5490a63d7e75"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataOheSAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "genDataOheList"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977899026079407`*^9, 3.7977899181563168`*^9}, 
   3.7977899684040127`*^9, {3.797790102989602*^9, 3.7977901304155207`*^9}, {
   3.7977912140535975`*^9, 3.797791225082279*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"7960f15a-d622-478f-8a61-f4817b2df185"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Split Data", "Section",
 CellChangeTimes->{{3.8046018771637926`*^9, 
  3.804601878417282*^9}},ExpressionUUID->"d3a78690-de63-4552-8cbf-\
02695864ba72"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"take", " ", "initial", " ", 
   RowBox[{"80", "/", "20"}], " ", "split", " ", "of", " ", "288", " ", 
   "erbium", " ", "reactions"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8046024149322343`*^9, 
  3.8046024392660556`*^9}},ExpressionUUID->"1dcde0fe-f781-44ac-a891-\
9d8ea0ef8490"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GroupBy", "[", 
    RowBox[{"allDataMACCs", ",", "laGroupQ"}], "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], "//", "Length"}]], "Input",
 CellChangeTimes->{{3.804877554540715*^9, 3.804877562368873*^9}},
 CellLabel->
  "In[453]:=",ExpressionUUID->"668a791f-ff0e-41cb-a6dd-3de71f683535"],

Cell[BoxData["288"], "Output",
 CellChangeTimes->{3.804877562955778*^9},
 CellLabel->
  "Out[453]=",ExpressionUUID->"bf9d44ea-5789-4a94-a90a-13aa81a80447"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"erTrainMACCs", ",", "erTestMACCs"}], "}"}], "=", 
   RowBox[{
    RowBox[{"trainTestSplit", "[", "0.85", "]"}], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"GroupBy", "[", 
       RowBox[{"allDataMACCs", ",", "laGroupQ"}], "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}], ",", "1841"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8046018815455284`*^9, 3.804602001561383*^9}, {
  3.80460218407016*^9, 3.8046022339013057`*^9}, {3.8046022930418186`*^9, 
  3.8046023455243845`*^9}, {3.8049402395878396`*^9, 3.8049402616798315`*^9}},
 CellLabel->
  "In[642]:=",ExpressionUUID->"33ded86d-11b9-4e97-98be-007372272abd"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "take", " ", "some", " ", "from", " ", "the", " ", "training", " ", "data",
     " ", "to", " ", "use", " ", "as", " ", "active", " ", "sample", " ", 
    "pool"}], " ", "-", " ", 
   RowBox[{
   "note", " ", "that", " ", "the", " ", "rxns", " ", "are", " ", "already", 
    " ", "randomly", " ", "samples", " ", "from", " ", "the", " ", 
    RowBox[{"train", "/", "test"}], " ", "split"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.804602459992835*^9, 3.8046024733296824`*^9}, {
  3.8046025089782734`*^9, 3.8046025171070457`*^9}},
 CellLabel->
  "In[643]:=",ExpressionUUID->"770cf801-3415-4b1e-8ceb-5f1c421abe19"],

Cell[BoxData[
 RowBox[{
  RowBox[{"erALpool", "=", 
   RowBox[{"erTrainMACCs", "[", 
    RowBox[{"[", 
     RowBox[{";;", "100"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.804940277391921*^9, 3.8049402984188185`*^9}},
 CellLabel->
  "In[644]:=",ExpressionUUID->"3d765bb4-59b5-4547-badc-b82d023c58e6"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"now", " ", 
   RowBox[{"there", "'"}], "s", "  ", "training", " ", "rxns", " ", "and", "  ",
    "testing", " ", "rxns"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8046025627171*^9, 3.8046025668706713`*^9}, {
  3.804939916697866*^9, 3.8049399198402534`*^9}, {3.804939954303057*^9, 
  3.8049399544158792`*^9}, {3.8049402338586154`*^9, 3.8049402376748095`*^9}},
 CellLabel->
  "In[645]:=",ExpressionUUID->"01786e04-14ca-4d18-94a4-77764fc3393b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"erTrainMACCs", "=", 
   RowBox[{"erTrainMACCs", "[", 
    RowBox[{"[", 
     RowBox[{"101", ";;"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8049403020271845`*^9, 3.8049403134926805`*^9}, {
  3.804940351848074*^9, 3.804940366119506*^9}},
 CellLabel->
  "In[646]:=",ExpressionUUID->"907eb26e-1e6f-41dc-9e99-decefd5ee228"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Active Learning Sampling ", "Section",
 CellChangeTimes->{{3.7943150232371006`*^9, 
  3.794315027733412*^9}},ExpressionUUID->"748afb97-cd0e-4ba2-9774-\
ca9c7b920dcc"],

Cell[CellGroupData[{

Cell["Do Sampling ", "Subsection",
 CellChangeTimes->{{3.7977913209215913`*^9, 
  3.7977913228027563`*^9}},ExpressionUUID->"f3f0504b-77d6-42bf-b195-\
8b9dbe43a8d7"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "want", " ", "to", " ", "keep", " ", "this", " ", "outside", " ", "of", " ",
    "a", " ", "module", " ", "to", " ", "allow", " ", "for", " ", "variables",
    " ", "to", " ", "be", " ", 
   RowBox[{"utilized", "?"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797791466322353*^9, 3.797791478592635*^9}},
 CellLabel->
  "In[244]:=",ExpressionUUID->"23ea11b3-9c16-496e-ad1a-240c7b717751"],

Cell[BoxData[
 RowBox[{"Clear", "[", "sample", "]"}]], "Input",
 CellChangeTimes->{{3.804879264196018*^9, 3.8048792672520175`*^9}},
 CellLabel->
  "In[759]:=",ExpressionUUID->"acb9b07a-7ff4-426b-97aa-daec545c63c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{
   "classifier_ClassifierFunction", ",", "sampleDS_Dataset", ",", 
    "goal_String", ",", "\[Beta]_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "feats", ",", "sampleDataML", ",", "classProbs", ",", "classProbsValues",
       ",", "classProbsValuesF", ",", "classProbsValuesT", ",", 
      "classEntropies", ",", "softMaxclass", ",", "choice", ",", "probs", ",",
       "out"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"feats", "=", 
      RowBox[{"Keys", "@", 
       RowBox[{"Information", "[", 
        RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"generate", " ", "sampling", " ", "weights"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"sampleDataML", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"sampleDS", "[", 
        RowBox[{"All", ",", 
         RowBox[{"Keys", "[", 
          RowBox[{"Information", "[", 
           RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}], 
          "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"classProbs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{"sampleDataML", ",", "\"\<Probabilities\>\""}], "]"}]}], ";", 
     "\n", 
     RowBox[{"classProbsValues", "=", 
      RowBox[{"classProbs", "//", "Values"}]}], ";", "\n", 
     RowBox[{"classProbsValuesF", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classProbsValuesT", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classEntropies", "=", 
      RowBox[{"Which", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<explore\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"#1", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
              RowBox[{"#2", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<exploit\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", ">", "0.5"}], ",", 
             RowBox[{
              RowBox[{"-", "\[Beta]"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}]}], "]"}], 
           "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", "\n", 
     RowBox[{"softMaxclass", "=", 
      RowBox[{
       RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classEntropies", "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Makes", " ", "1", " ", "choice"}], ",", " ", 
       RowBox[{
       "gets", " ", "the", " ", "probs", " ", "and", " ", "outputs", " ", "a",
         " ", "dataset", " ", "and", " ", "table"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"choice", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{
          RowBox[{"softMaxclass", "\[Rule]", 
           RowBox[{"Normal", "[", "sampleDS", "]"}]}], ",", "1"}], "]"}], 
        "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"probs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "choice", "]"}], ",", 
        "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"{", 
       RowBox[{
       "choice", ",", "classProbs", ",", "classEntropies", ",", 
        "softMaxclass", ",", "feats", ",", 
        RowBox[{"TableForm", "@", "probs"}]}], "}"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977825106654043`*^9, 3.7977826808436165`*^9}, {
   3.7977827894281693`*^9, 3.7977828251004467`*^9}, {3.797782926008704*^9, 
   3.7977829519301214`*^9}, {3.7977829828717723`*^9, 
   3.7977830121078405`*^9}, {3.7977835603765044`*^9, 
   3.7977835606773367`*^9}, {3.797783651368411*^9, 3.7977836530448356`*^9}, {
   3.7977837641872344`*^9, 3.7977837648755417`*^9}, {3.7977837950188437`*^9, 
   3.797783897570631*^9}, {3.797791535613364*^9, 3.797791549633828*^9}, {
   3.79779219983659*^9, 3.797792203713299*^9}, {3.7977922359268303`*^9, 
   3.79779224044201*^9}, {3.7977924951041236`*^9, 3.7977924976437025`*^9}, {
   3.797792638685742*^9, 3.797792640412073*^9}, {3.7977929213116045`*^9, 
   3.7977929214426565`*^9}, {3.797798139288637*^9, 3.797798139889425*^9}, {
   3.7977982506559677`*^9, 3.797798258691498*^9}, 3.7978057594612546`*^9, {
   3.7978058169272633`*^9, 3.7978058283093843`*^9}, {3.7978060501541615`*^9, 
   3.797806053188048*^9}, {3.7981686440436573`*^9, 3.7981686452769604`*^9}, {
   3.798548256056916*^9, 3.798548259830098*^9}, {3.798549918231038*^9, 
   3.798549918714188*^9}, {3.804602625159012*^9, 3.8046027153504305`*^9}, {
   3.804608316927*^9, 3.8046083667520056`*^9}, {3.80460933862428*^9, 
   3.8046094318898516`*^9}, 3.804610106547855*^9, {3.804610265806364*^9, 
   3.8046102850887704`*^9}, {3.8046103210313463`*^9, 3.804610328744605*^9}, {
   3.8046103658261967`*^9, 3.80461043059576*^9}, {3.8046104667665906`*^9, 
   3.804610549291696*^9}, {3.804611155063016*^9, 3.8046111671170683`*^9}, {
   3.8046112353633957`*^9, 3.8046112452174144`*^9}, {3.8046112873363523`*^9, 
   3.804611362355996*^9}, {3.8048531390941334`*^9, 3.8048531395566263`*^9}, {
   3.804878998174662*^9, 3.804879019180512*^9}, {3.804879368908109*^9, 
   3.8048794637498493`*^9}, {3.804879495945173*^9, 3.80487962421844*^9}, {
   3.804880222937925*^9, 3.804880251758574*^9}, {3.8049415235884547`*^9, 
   3.8049415251653495`*^9}, {3.8049548567456617`*^9, 3.80495486050657*^9}, {
   3.804958948700059*^9, 3.8049589576937604`*^9}, {3.8049590263897705`*^9, 
   3.804959065098333*^9}, 3.804959552029599*^9, {3.80496026864709*^9, 
   3.8049602752862644`*^9}},
 CellLabel->
  "In[803]:=",ExpressionUUID->"ce4f6966-6485-4086-b2f6-adf0f451e249"],

Cell[BoxData[
 RowBox[{"(*", " ", "outdated", " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8049531550340385`*^9, 
  3.804953157162504*^9}},ExpressionUUID->"f3d6b4a8-a204-4ddc-9e82-\
cdc7a7528ca8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{
   "classifier_ClassifierFunction", ",", "amine_String", ",", 
    "descriptor_String", ",", "goal_String", ",", "\[Beta]_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sampleDS", ",", "sampleDataML", ",", "classProbs", ",", 
      "classProbsValues", ",", "classProbsValuesF", ",", "classProbsValuesT", 
      ",", "classEntropies", ",", "softMaxclass", ",", "choice", ",", "probs",
       ",", "out"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{"ToString", "@", "descriptor"}], ",", "\"\<maccs\>\"", ",", 
         RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"sampleDS", "=", 
        RowBox[{"genDataMACCsSAssoc", "[", "amine", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{"ToString", "@", "descriptor"}], ",", "\"\<one hot\>\"", ",", 
         RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"sampleDS", "=", 
        RowBox[{"genDataOheSAssoc", "[", "amine", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"sampleDataML", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"sampleDS", "[", 
        RowBox[{"All", ",", 
         RowBox[{"Keys", "[", 
          RowBox[{"Information", "[", 
           RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}], 
          "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"classProbs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{"sampleDataML", ",", "\"\<Probabilities\>\""}], "]"}]}], ";", 
     "\n", 
     RowBox[{"classProbsValues", "=", 
      RowBox[{"classProbs", "//", "Values"}]}], ";", "\n", 
     RowBox[{"classProbsValuesF", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classProbsValuesT", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classEntropies", "=", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<explore\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"#1", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
              RowBox[{"#2", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<exploit\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", ">", "0.5"}], ",", 
             RowBox[{
              RowBox[{"-", "\[Beta]"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}]}], "]"}], 
           "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\n", 
     RowBox[{"softMaxclass", "=", 
      RowBox[{
       RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classEntropies", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"choice", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{
          RowBox[{"softMaxclass", "\[Rule]", 
           RowBox[{"Normal", "[", "sampleDS", "]"}]}], ",", "1"}], "]"}], 
        "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"probs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "choice", "]"}], ",", 
        "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"choice", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"TableForm", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "}"}], ",", 
            RowBox[{"TableHeadings", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"None", ",", 
               RowBox[{"{", 
                RowBox[{
                "\"\<False Probability\>\"", ",", 
                 "\"\<True Probability\>\""}], "}"}]}], "}"}]}]}], "]"}]}], 
         "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "@", "choice"}]}], "}"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977825106654043`*^9, 3.7977826808436165`*^9}, {
   3.7977827894281693`*^9, 3.7977828251004467`*^9}, {3.797782926008704*^9, 
   3.7977829519301214`*^9}, {3.7977829828717723`*^9, 
   3.7977830121078405`*^9}, {3.7977835603765044`*^9, 
   3.7977835606773367`*^9}, {3.797783651368411*^9, 3.7977836530448356`*^9}, {
   3.7977837641872344`*^9, 3.7977837648755417`*^9}, {3.7977837950188437`*^9, 
   3.797783897570631*^9}, {3.797791535613364*^9, 3.797791549633828*^9}, {
   3.7977916315682526`*^9, 3.797791691174432*^9}, {3.7977918077122416`*^9, 
   3.7977918131341486`*^9}, {3.7977918529721518`*^9, 3.7977918662202396`*^9}, 
   3.797792075301162*^9, 3.797792501973387*^9, {3.797792677783868*^9, 
   3.797792684883569*^9}, {3.7977981417225294`*^9, 3.797798143106787*^9}, {
   3.7977982403341837`*^9, 3.7977982407361126`*^9}, 3.797805753711633*^9, {
   3.7978057850016193`*^9, 3.7978058043967466`*^9}, {3.797806043636631*^9, 
   3.7978060462566233`*^9}, 3.798168586138627*^9, {3.798168636159231*^9, 
   3.798168637251999*^9}, {3.798548263477145*^9, 3.798548267501492*^9}, {
   3.798549912126979*^9, 3.798549912418627*^9}, {3.8046027236127243`*^9, 
   3.8046027686071224`*^9}, {3.804611423709182*^9, 3.8046114358734813`*^9}, {
   3.8046114988120017`*^9, 3.804611520110611*^9}, {3.80485313408119*^9, 
   3.804853134595708*^9}, {3.804879210774118*^9, 3.8048792430867147`*^9}, {
   3.8048801591606345`*^9, 3.8048801950037394`*^9}},
 CellLabel->
  "In[467]:=",ExpressionUUID->"4fd3f493-b910-4e25-8942-30bac99bbdfe"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"can", " ", "sample", " ", "with", " ", "model"}], ",", " ", 
   "amine", ",", " ", 
   RowBox[{
   "and", " ", "descriptor", " ", "type", " ", "\[IndentingNewLine]", 
    "parses", " ", "which", " ", "sampling", " ", "dataset", " ", "is", " ", 
    "needed", " ", "based", " ", "on", " ", "amine"}]}], " ", 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.7985499538758097`*^9, 
  3.798549982151496*^9}},ExpressionUUID->"143a591c-e047-4612-a2c2-\
0d693f308f65"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "can", " ", "sample", " ", "just", " ", "using", " ", "classifier", " ", 
   "and", " ", "the", " ", "correct", " ", "sampling", " ", "dataset"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7985499379170732`*^9, 
  3.798549949130329*^9}},ExpressionUUID->"9b68b292-b2a9-4799-82ec-\
c5fdc303d116"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{
   "cErMACCs1", ",", "erALpool", ",", "2", ",", "\"\<explore\>\"", ",", "0"}],
    "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.797805840849839*^9, 3.797805876744236*^9}, {
   3.797805913767771*^9, 3.7978059193698206`*^9}, {3.804611582256496*^9, 
   3.8046116623844805`*^9}, {3.80485317817981*^9, 3.8048531818928237`*^9}, {
   3.8048790252378254`*^9, 3.8048790485520334`*^9}, {3.8048790816464114`*^9, 
   3.8048790862068033`*^9}, {3.8048791537954903`*^9, 
   3.8048791541012335`*^9}, {3.804879251428151*^9, 3.804879251533136*^9}, 
   3.8049394801215696`*^9},
 CellLabel->
  "In[596]:=",ExpressionUUID->"48705537-5927-47e3-a9ba-5d901d006639"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "or", " ", "using", " ", "a", " ", "parameter", " ", "for", " ", "how", " ",
    "much", " ", "to", " ", "favor", " ", "successes"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.804611620347427*^9, 
  3.804611631294649*^9}},ExpressionUUID->"d73f982f-2448-400e-a16b-\
35400c648161"],

Cell[BoxData[
 RowBox[{"sample", "[", 
  RowBox[{"cErMACCs1", ",", "erALpool", ",", "\"\<exploit\>\"", ",", "1.15"}],
   "]"}]], "Input",ExpressionUUID->"3c9c4434-f000-450c-8149-83378a103162"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Do active learning ", "Subsection",
 CellChangeTimes->{{3.804603236857339*^9, 
  3.804603244779775*^9}},ExpressionUUID->"ab102951-0288-4bf8-b684-\
0e5c800c6782"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"alIterate", ",", "alItLoop"}], "]"}]], "Input",
 CellChangeTimes->{{3.8049390806134925`*^9, 3.804939083351383*^9}, {
  3.8049410534769635`*^9, 3.8049410549305177`*^9}},
 CellLabel->
  "In[689]:=",ExpressionUUID->"721079b2-39c7-4ce7-ac55-4047f48d1c85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alIterate", "[", 
   RowBox[{
   "classifier_", ",", "trainDat_Dataset", ",", "testDat_Dataset", ",", 
    "sampDat_Dataset", ",", "goal_String", ",", "\[Beta]_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "choice", ",", "mLTrainDat", ",", "mLTestDat", ",", "featCols", ",", 
      "model", ",", "cm", ",", "choiceInds", ",", "newPoolInds", ",", 
      "newPool", ",", "nTrainDat"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"choice", "=", 
      RowBox[{"First", "@", 
       RowBox[{"sample", "[", 
        RowBox[{"classifier", ",", "sampDat", ",", "goal", ",", "\[Beta]"}], 
        "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "combined", " ", "previously", " ", "trained", " ", "dat", " ", "with", 
       " ", "new", " ", "point"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"featCols", "=", 
      RowBox[{"Keys", "@", 
       RowBox[{"Information", "[", 
        RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"nTrainDat", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"choice", ",", "trainDat"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mLTrainDat", "=", 
      RowBox[{"Normal", "@", 
       RowBox[{
        RowBox[{"GroupBy", "[", 
         RowBox[{"nTrainDat", ",", "rxnSuccessQ"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "All", ",", "featCols"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mLTestDat", "=", 
      RowBox[{"Normal", "@", 
       RowBox[{
        RowBox[{"GroupBy", "[", 
         RowBox[{"testDat", ",", "rxnSuccessQ"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "All", ",", "featCols"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "train", " ", "new", " ", "classifier", " ", "on", " ", "old", " ", 
        "training", " ", "dat"}], " ", "+", " ", 
       RowBox[{"new", " ", "data", " ", "point"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"model", "=", 
      RowBox[{"Classify", "[", 
       RowBox[{"mLTrainDat", ",", 
        RowBox[{
        "FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cm", "=", 
      RowBox[{"ClassifierMeasurements", "[", 
       RowBox[{"model", ",", "mLTestDat"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"choiceInds", "=", 
      RowBox[{"Normal", "@", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{
             RowBox[{"Normal", "@", "sampDat"}], ",", "#"}], "]"}], "&"}], "/@",
           "choice"}], ",", "1"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newPoolInds", "=", 
      RowBox[{"Delete", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "@", "sampDat"}], "]"}], ",", "choiceInds"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newPool", "=", 
      RowBox[{"sampDat", "[", 
       RowBox[{"[", "newPoolInds", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "model", ",", "cm", ",", "choice", ",", "nTrainDat", ",", "newPool"}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8046032535993085`*^9, 3.804603263322758*^9}, {
   3.8046033132866106`*^9, 3.8046033329826355`*^9}, {3.804603380051915*^9, 
   3.804603381811007*^9}, {3.804603548407754*^9, 3.8046035837193007`*^9}, {
   3.8046036329764423`*^9, 3.8046036803346386`*^9}, {3.8046037185796857`*^9, 
   3.8046037478385353`*^9}, {3.804603792331096*^9, 3.8046038300226216`*^9}, {
   3.804603923865199*^9, 3.8046039516310587`*^9}, {3.804604032908296*^9, 
   3.804604033859706*^9}, {3.804604187675151*^9, 3.8046042476286616`*^9}, {
   3.8046054404356318`*^9, 3.8046054706767654`*^9}, {3.8046065024177537`*^9, 
   3.8046065340871725`*^9}, {3.804606673880054*^9, 3.8046066748930097`*^9}, 
   3.804606753352315*^9, {3.8048509775907617`*^9, 3.80485098020088*^9}, {
   3.8048513009191837`*^9, 3.804851304943771*^9}, {3.804851628796821*^9, 
   3.8048516352368116`*^9}, {3.804851817940166*^9, 3.804851819091364*^9}, {
   3.8048519655827627`*^9, 3.80485196589484*^9}, {3.804852183747939*^9, 
   3.8048522442665415`*^9}, {3.8048523318570237`*^9, 3.804852381508545*^9}, {
   3.8048525155760994`*^9, 3.8048525309249907`*^9}, {3.804852666721877*^9, 
   3.8048527005197215`*^9}, {3.804853101081296*^9, 3.8048531015753603`*^9}, {
   3.8048957275688667`*^9, 3.8048957411034613`*^9}, {3.804895777000099*^9, 
   3.8048959121267924`*^9}, {3.804896000587886*^9, 3.8048960022299056`*^9}, {
   3.804938578902594*^9, 3.8049386034758472`*^9}, {3.804938903563538*^9, 
   3.8049389500296583`*^9}, {3.8049389801118555`*^9, 
   3.8049389864490385`*^9}, {3.804939272748485*^9, 3.8049393130933247`*^9}, {
   3.8049408319394712`*^9, 3.8049408865552163`*^9}, {3.8049411231985135`*^9, 
   3.8049411499697795`*^9}, {3.804954889845209*^9, 3.8049548962655754`*^9}},
 CellLabel->
  "In[749]:=",ExpressionUUID->"22f13c19-381c-4785-9870-7677b6341c31"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "this", " ", "trains", " ", "a", " ", "new", " ", "classifier", " ", 
    "each", " ", "loop"}], " ", "-", " ", 
   RowBox[{
    RowBox[{"doesn", "'"}], "t", " ", "seem", " ", "like", " ", "you", " ", 
    "can", " ", "re"}], "-", 
   RowBox[{"train", " ", "an", " ", "existing", " ", "classifier"}]}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.804877757334168*^9, 3.8048777644207335`*^9}, {
  3.8048789104592047`*^9, 3.8048789184298596`*^9}},
 CellLabel->
  "In[691]:=",ExpressionUUID->"44cd192d-a49b-43b7-b358-5b5840a3aa05"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alItLoop", "[", 
   RowBox[{
   "classifier_", ",", "trainDat_Dataset", ",", "testDat_Dataset", ",", 
    "sampDat_Dataset", ",", "goal_String", ",", "batchNumb_Integer", ",", 
    "\[Beta]_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"loopNumb", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Length", "@", "sampDat"}], ")"}], "/", "batchNumb"}], 
         ")"}], "-", "1"}]}], ",", "firstIt", ",", "subIts", ",", "model", 
      ",", "tDat", ",", "sDat", ",", "rest"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"firstIt", "=", 
      RowBox[{"alIterate", "[", 
       RowBox[{
       "classifier", ",", "trainDat", ",", "testDat", ",", "sampDat", ",", 
        "goal", ",", "\[Beta]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"model", "=", 
      RowBox[{"firstIt", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tDat", "=", 
      RowBox[{"firstIt", "[", 
       RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sDat", "=", 
      RowBox[{"firstIt", "[", 
       RowBox[{"[", "5", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rest", "=", 
      RowBox[{"Reap", "[", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"subIts", "=", 
           RowBox[{"alIterate", "[", 
            RowBox[{
            "model", ",", "tDat", ",", "testDat", ",", "sDat", ",", "goal", 
             ",", "\[Beta]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", "subIts", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"model", "=", 
           RowBox[{"subIts", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"tDat", "=", 
           RowBox[{"subIts", "[", 
            RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"sDat", "=", 
           RowBox[{"subIts", "[", 
            RowBox[{"[", "5", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
         ",", "loopNumb"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"rest", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}], ",", "firstIt"}],
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGCQAGIQPe2NYK1e5BtHU6acFSC6h/fwdhCtoXcRTEefEvgB
om+tdmDUB9JFpxL4QPSVqxNEQPQBrlnSIPpRyiowbSRrowCiAxQTwfSGaGkN
EN10cwmYdhC7qAui055q6oHVTThmBqK99A+Zg2iDxwdqQPStc5ubQPSfZ5va
QPS2pG1g+lTCpy4QXWHK3AOiSxc6TQbRJv3OU0C0pfqx2SB6i1PVHBCt5TN7
IVhdY+tSEP0gNnA1iA6tnAGmzwvFhDsDaaGzbDEguvhtZBKIlvjhlAyiM3a5
6UcCaf/nCQYg+k/9Ym8QvUMuIhJER5SLNoHoDtZoMO3wdvkyEO3LnLscRH+w
KG6MB9ITsu83gegZfsYKCUB6sv5uMA0A6B6uAQ==
  "],
 CellLabel->
  "In[748]:=",ExpressionUUID->"913a2fe8-9658-465f-bff7-64c5c298b863"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"what", " ", "about", " ", "using", " ", 
   RowBox[{"different", " ", "'"}], 
   RowBox[{"radii", "'"}], " ", "based", " ", "batch", " ", "sampling", " ", 
   "methods", "\[IndentingNewLine]", 
   RowBox[{"sample", "[", 
    RowBox[{
    "classifier_ClassifierFunction", ",", "sampleDS_Dataset", ",", 
     "goal_String", ",", "\[Beta]_"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
    "choice", ",", "classProbs", ",", "classEntropies", ",", "softMaxclass", 
     ",", "feats", ",", 
     RowBox[{"TableForm", "@", "probs"}]}], "}"}]}], "\[IndentingNewLine]", 
  " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8049570059070554`*^9, 3.8049570211527357`*^9}, {
  3.8049591244503345`*^9, 3.804959126181926*^9}, {3.804959184691037*^9, 
  3.8049591848461113`*^9}},ExpressionUUID->"00eaf0c9-d5c7-4426-b8aa-\
506d028d226c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"t", "[", 
   RowBox[{
   "classifier_", ",", "trainDat_Dataset", ",", "testDat_Dataset", ",", 
    "sampDat_Dataset", ",", "goal_String", ",", "batchNumb_Integer", ",", 
    "bMethod_String", ",", "\[Beta]_", ",", "\[Gamma]_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"feats", "=", 
       RowBox[{"Keys", "@", 
        RowBox[{"Information", "[", 
         RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}]}]}], ",", 
      "fChoice", ",", "lChoice", ",", "choiceInd", ",", "rSampDat", ",", 
      "tSampDat", ",", "rSM", ",", "nSampDat", ",", "rest", ",", "batch", ",",
       "batchInds", ",", "mLtDat", ",", "fSampDat", ",", "fTrainDat"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"Which", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"bMethod", ",", "\"\<delete uncertain\>\"", ",", 
        RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"tSampDat", "=", "sampDat"}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{
        "necessary", " ", "variable", " ", "reassignment", " ", "for", " ", 
         "the", " ", "looping", " ", "construct"}], " ", "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"fChoice", "=", 
        RowBox[{"sample", "[", 
         RowBox[{"classifier", ",", "tSampDat", ",", "goal", ",", "\[Beta]"}],
          "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"choiceInd", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"Normal", "@", "tSampDat"}], ",", 
           RowBox[{"Normal", "@", 
            RowBox[{"First", "@", 
             RowBox[{"fChoice", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}]}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"rSM", "=", 
        RowBox[{"Delete", "[", 
         RowBox[{
          RowBox[{"fChoice", "[", 
           RowBox[{"[", "4", "]"}], "]"}], ",", "choiceInd"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rest", "=", 
        RowBox[{"Reap", "[", 
         RowBox[{"Do", "[", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "this", " ", "loop", " ", "repeats", " ", "for", " ", "each", " ",
              "batch"}], ",", " ", 
            RowBox[{
             RowBox[{"generating", " ", "n"}], "-", 
             RowBox[{"1", " ", "more", " ", "choices"}]}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"rSampDat", "=", 
             RowBox[{"Delete", "[", 
              RowBox[{"tSampDat", ",", "choiceInd"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "@", "rSampDat"}], ">", "\[Gamma]"}], ",", 
              "Nothing", ",", 
              RowBox[{"Break", "[", "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"tSampDat", "=", 
             RowBox[{
              RowBox[{"Drop", "[", 
               RowBox[{
                RowBox[{"ReverseSortBy", "[", 
                 RowBox[{
                  RowBox[{"rSampDat", "[", 
                   RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"\"\<Softmax Values\>\"", "\[Rule]", "#2"}]}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"#", ",", "rSM"}], "}"}]}], "]"}], "&"}], "]"}], 
                  ",", "\"\<Softmax Values\>\""}], "]"}], ",", "\[Gamma]"}], 
               "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", 
                RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"lChoice", "=", 
             RowBox[{"sample", "[", 
              RowBox[{
              "classifier", ",", "tSampDat", ",", "goal", ",", "\[Beta]"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"choiceInd", "=", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Position", "[", 
               RowBox[{
                RowBox[{"Normal", "@", "tSampDat"}], ",", 
                RowBox[{"Normal", "@", 
                 RowBox[{"First", "@", 
                  RowBox[{"lChoice", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}]}]}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"rSM", "=", 
             RowBox[{"Delete", "[", 
              RowBox[{
               RowBox[{"lChoice", "[", 
                RowBox[{"[", "4", "]"}], "]"}], ",", "choiceInd"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Sow", "[", 
             RowBox[{"lChoice", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"batchNumb", "-", "1"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"batch", "=", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Normal", "@", 
            RowBox[{"fChoice", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"rest", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "@", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"rest", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}]}], "]"}]}], 
          "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"batchInds", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"Normal", "@", "sampDat"}], ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"Normal", "@", "batch"}], ")"}]}], ",", "1"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"fSampDat", "=", 
        RowBox[{"Delete", "[", 
         RowBox[{"sampDat", ",", "batchInds"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"fTrainDat", "=", 
        RowBox[{"Join", "[", 
         RowBox[{"trainDat", ",", "batch"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "batch", ",", "fTrainDat", ",", "fSampDat", ",", "batchInds"}], 
        "}"}]}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.804958622135892*^9, 3.8049587024219427`*^9}, {
   3.8049587338293653`*^9, 3.8049588207106714`*^9}, {3.804958981672351*^9, 
   3.8049589836109133`*^9}, {3.804959088607216*^9, 3.804959092193686*^9}, {
   3.804959129515729*^9, 3.804959166969663*^9}, {3.8049591990123186`*^9, 
   3.8049592717558713`*^9}, {3.8049593123968973`*^9, 3.804959316303136*^9}, 
   3.804959385926242*^9, {3.804959503620305*^9, 3.8049595052815046`*^9}, {
   3.80495965742618*^9, 3.8049597693460035`*^9}, {3.804959891356683*^9, 
   3.8049599035482454`*^9}, {3.80495993914981*^9, 3.8049599425190725`*^9}, {
   3.804960051573757*^9, 3.8049600531068754`*^9}, {3.804960124529456*^9, 
   3.8049601424319715`*^9}, {3.80496018071764*^9, 3.80496018344864*^9}, {
   3.8049602243530617`*^9, 3.80496023293114*^9}, {3.8049603261406965`*^9, 
   3.8049603287662044`*^9}, {3.804960372633292*^9, 3.8049603954331527`*^9}, {
   3.804960437652636*^9, 3.804960462513016*^9}, {3.8049604931173153`*^9, 
   3.804960528572583*^9}, {3.8049605717190404`*^9, 3.804960598908567*^9}, {
   3.804960630974801*^9, 3.804960639245867*^9}, {3.804960674909625*^9, 
   3.8049606963174996`*^9}, {3.8049607321786833`*^9, 3.804960805524065*^9}, 
   3.804960862612671*^9, {3.804960933955956*^9, 3.80496094526388*^9}, {
   3.8049610194258194`*^9, 3.8049610411637816`*^9}, {3.804961147489563*^9, 
   3.804961180145536*^9}, {3.804962286373917*^9, 3.80496255352274*^9}, 
   3.8049631295295486`*^9, {3.8049631925730505`*^9, 3.8049632339063663`*^9}, {
   3.804963273273776*^9, 3.804963274182769*^9}, {3.804963307418866*^9, 
   3.8049634006963964`*^9}, {3.8049634417694206`*^9, 
   3.8049634772747436`*^9}, {3.804963509334724*^9, 3.80496356858053*^9}, {
   3.8050245004579935`*^9, 3.8050245138386707`*^9}, {3.805024562771996*^9, 
   3.8050245963287373`*^9}, {3.8050247075720916`*^9, 3.805024734220065*^9}, {
   3.8050247774695845`*^9, 3.805024868456416*^9}, {3.8050249632945347`*^9, 
   3.805024992378853*^9}, {3.805025062891463*^9, 3.805025068429968*^9}, {
   3.805025104267479*^9, 3.805025120182907*^9}, {3.8050251696593227`*^9, 
   3.805025185456416*^9}, {3.805025229900173*^9, 3.8050252410269594`*^9}, {
   3.805025273298915*^9, 3.805025383258047*^9}, {3.805025451583463*^9, 
   3.8050254666207047`*^9}, {3.8050255032270064`*^9, 3.805025515087923*^9}, {
   3.8050256194942403`*^9, 3.8050256303025675`*^9}, {3.80502568325673*^9, 
   3.80502568578461*^9}, {3.8050257655736217`*^9, 3.805025825809635*^9}, {
   3.805026142806152*^9, 3.8050262095786343`*^9}, {3.805026241465294*^9, 
   3.805026362414554*^9}, {3.805026395907713*^9, 3.8050264280620127`*^9}, {
   3.8050264760939837`*^9, 3.8050264764579887`*^9}, {3.805026515098308*^9, 
   3.8050265155535555`*^9}, {3.805026610794939*^9, 3.8050266309186163`*^9}, {
   3.8050266843208313`*^9, 3.805026688595003*^9}, {3.805026727775872*^9, 
   3.805026731027559*^9}, {3.8050269356034346`*^9, 3.8050270080695744`*^9}, {
   3.8050270819521832`*^9, 3.805027154201692*^9}, {3.805027200084507*^9, 
   3.805027213315961*^9}, {3.805027275724657*^9, 3.805027343688587*^9}, {
   3.8050273921910696`*^9, 3.8050273955516663`*^9}, {3.805027513410932*^9, 
   3.8050275178510046`*^9}, {3.8050276005020237`*^9, 
   3.8050276799813166`*^9}, {3.8050277130561132`*^9, 
   3.8050277679498334`*^9}, {3.8050277991491446`*^9, 3.8050277997471905`*^9}, 
   3.805027855267364*^9, {3.8050279112733574`*^9, 3.8050279143653955`*^9}, {
   3.8050279973694124`*^9, 3.805028149110001*^9}, {3.8050281848257885`*^9, 
   3.805028197213135*^9}, {3.8050282359911394`*^9, 3.805028263026074*^9}, {
   3.80502835044713*^9, 3.8050283642551155`*^9}, {3.805028396095521*^9, 
   3.8050284190750923`*^9}, {3.8050284808307776`*^9, 
   3.8050285457824087`*^9}, {3.805028599839775*^9, 3.805028646332972*^9}, {
   3.8050287121768923`*^9, 3.8050288050855637`*^9}, {3.805029004426024*^9, 
   3.805029064581876*^9}, {3.805029445815069*^9, 3.8050295545895195`*^9}, {
   3.8050295975007687`*^9, 3.8050296294542885`*^9}, {3.8050297054789715`*^9, 
   3.8050297344977264`*^9}, {3.805029766961892*^9, 3.8050297937818713`*^9}, {
   3.805029848093313*^9, 3.805030120689605*^9}, {3.8050301519717536`*^9, 
   3.805030279235946*^9}, {3.805030833530594*^9, 3.805030834149661*^9}, {
   3.805030880054984*^9, 3.8050308849184895`*^9}, 3.8050310440078554`*^9, {
   3.80503108958225*^9, 3.805031093082838*^9}, {3.805031181523679*^9, 
   3.805031359893508*^9}, {3.805036460563387*^9, 3.8050365017059164`*^9}, {
   3.805040239651554*^9, 3.8050402644552*^9}, {3.8050408942765093`*^9, 
   3.8050409292226133`*^9}, {3.8051134691080165`*^9, 3.805113490168439*^9}, 
   3.8051139975637217`*^9, {3.8051140503991423`*^9, 3.805114051196231*^9}, {
   3.8051140870757327`*^9, 3.8051140878257895`*^9}, 3.8051141613672066`*^9, {
   3.805114305951969*^9, 3.805114307266697*^9}, {3.805116046135373*^9, 
   3.805116133042464*^9}, {3.8051182822431464`*^9, 3.8051183338427105`*^9}, {
   3.8051183738881454`*^9, 3.805118457686366*^9}, 3.805118517794797*^9, {
   3.805118637944839*^9, 3.805118638314842*^9}, {3.8051188833956084`*^9, 
   3.8051189098173733`*^9}, {3.805119026343736*^9, 3.805119026559889*^9}, {
   3.8051193112444925`*^9, 3.805119322191767*^9}, {3.805119753116723*^9, 
   3.8051197879842453`*^9}},
 CellLabel->
  "In[1524]:=",ExpressionUUID->"9c4e6f65-4cd9-4479-93f2-58d13fffaa0e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alLoop", "[", 
   RowBox[{
   "classifier_", ",", "trainDat_Dataset", ",", "testDat_Dataset", ",", 
    "sampDat_Dataset", ",", "goal_String", ",", "batchNumb_Integer", ",", 
    "bMethod_String", ",", "\[Beta]_", ",", "\[Gamma]_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"feats", "=", 
       RowBox[{"Keys", "@", 
        RowBox[{"Information", "[", 
         RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}]}]}], ",", 
      RowBox[{"loopNumb", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Length", "@", "sampDat"}], ")"}], "/", "batchNumb"}], 
         ")"}], "-", "1"}]}], ",", "fCM", ",", "batching", ",", "tTrainDat", 
      ",", "tSampDat", ",", "mLtTrainDat", ",", "class", ",", "cms", ",", 
      "out"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fCM", "=", 
      RowBox[{"ClassifierMeasurements", "[", 
       RowBox[{"classifier", ",", 
        RowBox[{"Normal", "@", 
         RowBox[{
          RowBox[{"GroupBy", "[", 
           RowBox[{"testDat", ",", "rxnSuccessQ"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "All", ",", "feats"}], "]"}], "]"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"class", "=", "classifier"}], ";", "\[IndentingNewLine]", 
     RowBox[{"tTrainDat", "=", "trainDat"}], ";", "\[IndentingNewLine]", 
     RowBox[{"tSampDat", "=", "sampDat"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"Reap", "[", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"batching", "=", 
           RowBox[{"t", "[", 
            RowBox[{
            "class", ",", "tTrainDat", ",", "testDat", ",", "tSampDat", ",", 
             "goal", ",", "batchNumb", ",", "bMethod", ",", "\[Beta]", ",", 
             "\[Gamma]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "@", 
              RowBox[{"batching", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "<", "batchNumb"}], ",", 
            RowBox[{"Break", "[", "]"}], ",", "Nothing"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tTrainDat", "=", 
           RowBox[{"batching", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"tSampDat", "=", 
           RowBox[{"batching", "[", 
            RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"mLtTrainDat", "=", 
           RowBox[{"Normal", "@", 
            RowBox[{
             RowBox[{"GroupBy", "[", 
              RowBox[{"tTrainDat", ",", "rxnSuccessQ"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "All", ",", "feats"}], "]"}], "]"}]}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"class", "=", 
           RowBox[{"Classify", "[", 
            RowBox[{"mLtTrainDat", ",", 
             RowBox[{
             "FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"cms", "=", 
           RowBox[{"ClassifierMeasurements", "[", 
            RowBox[{"class", ",", 
             RowBox[{"Normal", "@", 
              RowBox[{
               RowBox[{"GroupBy", "[", 
                RowBox[{"testDat", ",", "rxnSuccessQ"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "All", ",", "feats"}], "]"}], "]"}]}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", "class", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", "cms", "]"}], ";"}], "\[IndentingNewLine]", ",",
          "loopNumb"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"class", ",", "fCM"}], "}"}], "}"}], ",", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"Flatten", "@", 
          RowBox[{"out", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", "2"}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJwdyk0og3EAx/GZ25Z2mcy01Rw3TY20JcqK5qWIvK4UbRZWm1aTlzE5TCxW
dtjUcFjI++YlzcVabEnRmtJEE+by1LxeRnh+/8O3z+Ur6jY0apkMBkNAB09E
PV32dqrCwioeh/6gaRIOMpMOmN+26IKVL6ojaB0zizdpvdFlKaRazuWwz6kp
haqRLCUcbRYSpYrnVvJLqtSQvyC2QmGTZAI6xfYodPeGY/Bec3wDlTvDCZiq
3k5BR+SauO5b+YbptRhxWh9gb9FeURIOPNX1cyFlmSPWrXp4sDOxR1yx8cug
u+C1HMoon5r8+juiK+3RwKU8P7HIFG7fpY2/1HfAfduBATouB4zQmTkUgD8X
uiBc/wzFIO/9iZiQFd7CktlforxB8ADNjzVE41ToD3rtMxk+2rO3KRYMRKJE
nnafA62KD+L7RpwLD+dzsiG7djoXir+SfPgPRsX4zQ==
  "],
 CellLabel->
  "In[1555]:=",ExpressionUUID->"03f02bbe-1949-4d70-893e-b11d53b94cbb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "=", 
   RowBox[{"alLoop", "[", 
    RowBox[{"cErMACCs1", ",", "erTrainMACCs", ",", "erTestMACCs", ",", 
     RowBox[{"erALpool", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", "\"\<explore\>\"", ",", 
     "10", ",", "\"\<delete uncertain\>\"", ",", "0", ",", "2"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.805045633451112*^9, 3.80504565295302*^9}, {
   3.8050457702638407`*^9, 3.80504578510703*^9}, {3.8050459993323555`*^9, 
   3.805046000534813*^9}, {3.805046036632321*^9, 3.8050460475481*^9}, {
   3.805046078288368*^9, 3.8050460894215016`*^9}, {3.805111404720232*^9, 
   3.8051114058673077`*^9}, {3.8051114611061015`*^9, 3.8051114618739357`*^9}, 
   3.8051190943292575`*^9, {3.805119171389434*^9, 3.8051191744988422`*^9}, {
   3.805119368731268*^9, 3.8051193690700064`*^9}, {3.8051200140919733`*^9, 
   3.805120050233881*^9}, {3.805120095979684*^9, 3.8051200962191534`*^9}, {
   3.8051203939543514`*^9, 3.8051204111403418`*^9}, {3.8051206101356936`*^9, 
   3.805120643394873*^9}},
 CellLabel->
  "In[1556]:=",ExpressionUUID->"5056f030-d8ad-4383-93a0-49e6489c5ce9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Active Learning Iterations", "Section",
 CellChangeTimes->{{3.8046031084114676`*^9, 
  3.804603148025961*^9}},ExpressionUUID->"810eb5cd-53bf-457e-babe-\
cf3e53b8b8f4"],

Cell[CellGroupData[{

Cell["Pure Exploration ", "Subsection",
 CellChangeTimes->{{3.8046031503239183`*^9, 
  3.8046031539165564`*^9}},ExpressionUUID->"f9961597-e0e2-4afd-994e-\
3d41df53b67e"],

Cell[CellGroupData[{

Cell["Iterations", "Subsubsection",
 CellChangeTimes->{{3.8046030604643526`*^9, 3.8046030618433475`*^9}, {
  3.8048547930946417`*^9, 
  3.804854795379844*^9}},ExpressionUUID->"4f4c0373-80a4-4a59-b1e8-\
e56ed51053fc"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"train", " ", "classifier"}], " ", "-", " ", 
   RowBox[{"NearestNeighbors", " ", "is", " ", "chosen"}]}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.804602906412613*^9, 3.80460291375661*^9}, {
  3.8046029909119854`*^9, 
  3.804602993341894*^9}},ExpressionUUID->"bbf2662a-e7a4-4367-a88a-\
71b3850059cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cErMACCs1", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"mLmaccs", "[", "erTrainMACCs", "]"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.804602799034092*^9, 3.804602877383569*^9}, 
   3.804602980354585*^9},
 CellLabel->
  "In[706]:=",ExpressionUUID->"fc3ca2d9-c4a1-462d-a29e-21e80bb7f1a6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["145", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 145, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
           "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
           "Sodium Oxalate Mole Fraction" -> 
           Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
           Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
           Association["Type" -> "Numerical"], "pH" -> 
           Association["Type" -> "Numerical"], "maccs53" -> 
           Association["Type" -> "Boolean"], "maccs54" -> 
           Association["Type" -> "Boolean"], "maccs62" -> 
           Association["Type" -> "Boolean"], "maccs65" -> 
           Association["Type" -> "Boolean"], "maccs74" -> 
           Association["Type" -> "Boolean"], "maccs79" -> 
           Association["Type" -> "Boolean"], "maccs80" -> 
           Association["Type" -> "Boolean"], "maccs82" -> 
           Association["Type" -> "Boolean"], "maccs83" -> 
           Association["Type" -> "Boolean"], "maccs84" -> 
           Association["Type" -> "Boolean"], "maccs85" -> 
           Association["Type" -> "Boolean"], "maccs86" -> 
           Association["Type" -> "Boolean"], "maccs90" -> 
           Association["Type" -> "Boolean"], "maccs91" -> 
           Association["Type" -> "Boolean"], "maccs93" -> 
           Association["Type" -> "Boolean"], "maccs96" -> 
           Association["Type" -> "Boolean"], "maccs98" -> 
           Association["Type" -> "Boolean"], "maccs100" -> 
           Association["Type" -> "Boolean"], "maccs103" -> 
           Association["Type" -> "Boolean"], "maccs104" -> 
           Association["Type" -> "Boolean"], "maccs105" -> 
           Association["Type" -> "Boolean"], "maccs108" -> 
           Association["Type" -> "Boolean"], "maccs111" -> 
           Association["Type" -> "Boolean"], "maccs115" -> 
           Association["Type" -> "Boolean"], "maccs116" -> 
           Association["Type" -> "Boolean"], "maccs118" -> 
           Association["Type" -> "Boolean"], "maccs120" -> 
           Association["Type" -> "Boolean"], "maccs121" -> 
           Association["Type" -> "Boolean"], "maccs122" -> 
           Association["Type" -> "Boolean"], "maccs128" -> 
           Association["Type" -> "Boolean"], "maccs129" -> 
           Association["Type" -> "Boolean"], "maccs131" -> 
           Association["Type" -> "Boolean"], "maccs133" -> 
           Association["Type" -> "Boolean"], "maccs134" -> 
           Association["Type" -> "Boolean"], "maccs137" -> 
           Association["Type" -> "Boolean"], "maccs138" -> 
           Association["Type" -> "Boolean"], "maccs141" -> 
           Association["Type" -> "Boolean"], "maccs145" -> 
           Association["Type" -> "Boolean"], "maccs147" -> 
           Association["Type" -> "Boolean"], "maccs148" -> 
           Association["Type" -> "Boolean"], "maccs149" -> 
           Association["Type" -> "Boolean"], "maccs151" -> 
           Association["Type" -> "Boolean"], "maccs153" -> 
           Association["Type" -> "Boolean"], "maccs155" -> 
           Association["Type" -> "Boolean"], "maccs156" -> 
           Association["Type" -> "Boolean"], "maccs158" -> 
           Association["Type" -> "Boolean"], "maccs160" -> 
           Association["Type" -> "Boolean"], "maccs162" -> 
           Association["Type" -> "Boolean"], "maccs163" -> 
           Association["Type" -> "Boolean"], "maccs165" -> 
           Association["Type" -> "Boolean"], "maccs166" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                  "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                  "H2O Mole Fraction", "pH", "maccs53", "maccs54", "maccs62", 
                  "maccs65", "maccs74", "maccs79", "maccs80", "maccs82", 
                  "maccs83", "maccs84", "maccs85", "maccs86", "maccs90", 
                  "maccs91", "maccs93", "maccs96", "maccs98", "maccs100", 
                  "maccs103", "maccs104", "maccs105", "maccs108", "maccs111", 
                  "maccs115", "maccs116", "maccs118", "maccs120", "maccs121", 
                  "maccs122", "maccs128", "maccs129", "maccs131", "maccs133", 
                  "maccs134", "maccs137", "maccs138", "maccs141", "maccs145", 
                  "maccs147", "maccs148", "maccs149", "maccs151", "maccs153", 
                  "maccs155", "maccs156", "maccs158", "maccs160", "maccs162", 
                  "maccs163", "maccs165", "maccs166"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 57]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55", "f56", "f57"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Version" -> {12.1, 0}, "ID" -> 2890808244938110393]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Mean" -> {0.002991134489098436, 0.036530743720948194`, 
              0.0013016786280847016`, 0.006008421892263591, 0.953168021269605,
               2.496551724137931}, 
             "StandardDeviation" -> {0.002033808061633251, 
              0.008015899872253379, 0.0007755537451810504, 
              0.0034358712345204092`, 0.007581358549506412, 
              1.6820518583626263`}, "Version" -> {12.1, 0}, "ID" -> 
             5899696106768861539, "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]]]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 1421983425515021190]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 8693536121458706544, "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "BooleanVector", "Weight" -> 51]], 
             "Version" -> {12.1, 0}, "ID" -> 7278254295148636010, "Output" -> 
             Association[
              "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f2\
8f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f5\
4f55f56f57)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6], 
               "(f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f\
28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f\
54f55f56f57)" -> Association["Type" -> "NumericalVector", "Weight" -> 51]], 
             "Spans" -> {
               Span[1, 6], 
               Span[7, 57]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0}, 
             "ID" -> 9160275731445607812]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 145, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLCA4/52W3m2fiwrt0XcmGXzRMg79+HCzZT3txyOblu
rY1WxtelTdN4bXMXpVxX85q2Byzse8TecbW+6JZfj+w//DjM2G9fA6Xn2Kvu
NgvclL3ZXvJSZbfi3Of2MPUaN7d2Top9bT+tWipx5/KN9lVA2e0Sj+zrLR58
bGfeB6XvQdXdhpsPMe8wXB/Y2O037MHK5d7bb/kVBFS61Z7n5Z6jE869hvKX
2jtb5Rsu+bwNri5uNsjkS3AaTE16C3XHJfsdEiCT78LdA3MH52nb3g13HqOZ
vxVOw/TB7IH5H+YOmD0wc2fNBIGTcPNg+iDh9MR+BldU7coFV9HEr8DDF+Z/
mL0wdwAAJcbt0g==
                    "], "Method" -> "Naive", "VectorLength" -> 57, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLCA4/52W3m2fiwrt0XcmGXzRMg79+HCzZT3txyOblu
rY1WxtelTdN4bXMXpVxX85q2Byzse8TecbW+6JZfj+w//DjM2G9fA6Xn2Kvu
NgvclL3ZXvJSZbfi3Of2MPUaN7d2Top9bT+tWipx5/KN9lVA2e0Sj+zrLR58
bGfeB6XvQdXdhpsPMe8wXB/Y2O037MHK5d7bb/kVBFS61Z7n5Z6jE869hvKX
2jtb5Rsu+bwNri5uNsjkS3AaTE16C3XHJfsdEiCT78LdA3MH52nb3g13HqOZ
vxVOw/TB7IH5H+YOmD0wc2fNBIGTcPNg+iDh9MR+BldU7coFV9HEr8DDF+Z/
mL0wdwAAJcbt0g==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOK//0Hgvf17KM3MAAIf4HQ7H4RmhPJTNHZ05Sdet5df
9vvnzoL79lt+BTmu1t9qL904n/nBtyP2ARs2lsl8umAv/UXoG5vqHbj6zOva
NT9ar9nL6frtWGh+wV6FfcrX2J337S9or7x1e9oV+82+7ukmH+7bryx91r5w
5X24+aV5BrEXviL0/djil86med9eDmrff+tZmkKLLtorWWRcmjrjqv2jbVcu
uNSdtDdfoDNpk8cluDrFRoOfF9nvwukgqDvz5Jp04y/dsc99+K2G6T7CPTB3
eCaf/HuE9z7cfJh9MBqmTw7N/zB3wOyBmTtrJgjchJsH01cfadktf+mefWSZ
VOY213twcZ541lVqJ+/Cwxfmf5i9MHcAAKDo6B8=
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 57, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 57]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 16]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association["Matrix" -> CompressedData["
1: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
PzSof8RT/9Cm/vGc+kcA9Q876h+8Qqz+MZM/Kv+BP1HEHxPiz1HiTx3xh4P4
8yfxR5z4M136v/mDxJ+9xJ9/96cL5a8o5a8Y5e8pyt9Ayt9VlL97KX8jKX/f
VbHy15zyV4jyt5Hyd4Lyt4/2Zyrlb2rY6HyzX5UQNXbtz6XKedBfcW9g8+ds
rD4skiv1OgvqTPo16q43waOS6aufR0uAa5bNgEtQHIonFSjtj6rFgQuCPzV/
888xYu5J59AcdHe7mVJScB8YP761WpZVY5eRVovGtVw4ssc/fal0Me71vGGq
bZCDJ+Ufv5L6u/R/8k+S8i+M8s9+Rv5ZUf4pUf4xKf8iKP9KJf93//03/95T
/m2n/BOh/OMpZuWf2gz/zex/58h/6uQ/V/JfLflvO/lPj/xH728wQP7jI//t
ov5XRv5bS/4r//mu9ZLrIzw35i0dYNMMX3xfcA4MlkKkwxrejvmRyFbdOfi3
2h2cDhvq//jFHkotXwg+rvcGy0Ahc7mfxSgtorfiIVs5qPEqOHDYlqDs3ISB
KcFyXKXddtetwB3lR6z2x2xkYFrpvCUu+r/7d4/CVEF9E+bb37G/u5oJfMXD
BslPAzBxRezxuU5NaO8gvGxTMxPZ3hQWKazXw+of6YPpl/IhaPGXnxm/9fFO
7vTlR3ujYGv/+FWvwWq0s9ZxEW6tgm3GCRyl+g8x0URo8+HjTZjDMyo0/TtP
dAK7tLW2VSJfh674PPVqvBTa764aUY9ZSao7GRpV/75/YuyM/Pv3+7vS99em
7+9E37+Jvr8afX+pGfn3kr5/Dzvr+w9R/nXT99eh7y8vFZLzyaYO2NoWFjNr
orF9crSBuz0WbQLLHaRri2AkkMd9i2YzGHiFeM0WyIFVo9YXEovywMl2YMrg
aCR4bVt1+fuRdDTnaO/hj80AvjlX+HtSalEuRU1tVV8CbGsYUX0lmgW/Uhov
BbVk4euhLbdRKRMvaAaEDd5PQxV6/yX9Yd6M91/6+4H+fiT9wVt6/xWk918N
ev8NpfdfoPffefT+a07vv0x6/1Wk999S2v9OtP/1aP9P0P4/R/t/M+3/XUGs
/d9J+1+N9j8/7X872v/vaf9P0/5no/1vTPufl/b/LuLvY+Lvxxn9t4v4q0b8
ffeNxd8k4q868XdQkcVfJP7Wv2PxV4P4W/uKxd9U4u894q8w9Y/v1D/EqX8w
qX80U/9Y5sfqH3XUP7yo/xRR/3hH/eMt9Y/11D/2UP/gpP4jF8LqHxnUP/4L
nRrIEA==
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLCA4/52W3m2fiwrt0XcmGXzRMg79+HCzZT3txyOblu
rY1WxtelTdN4bXMXpVxX85q2Byzse8TecbW+6JZfj+w//DjM2G9fA6Xn2Kvu
NgvclL3ZXvJSZbfi3Of2MPUaN7d2Top9bT+tWipx5/KN9lVA2e0Sj+zrLR58
bGfeB6XvQdXdhpsPMe8wXB/Y2O037MHK5d7bb/kVBFS61Z7n5Z6jE869hvKX
2jtb5Rsu+bwNri5uNsjkS3AaTE16C3XHJfsdEiCT78LdA3MH52nb3g13HqOZ
vxVOw/TB7IH5H+YOmD0wc2fNBIGTcPNg+iDh9MR+BldU7coFV9HEr8DDF+Z/
mL0wdwAAJcbt0g==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOK//0Hgvf17KM3MAAIf4HQ7H4RmhPJTNHZ05Sdet5df
9vvnzoL79lt+BTmu1t9qL904n/nBtyP2ARs2lsl8umAv/UXoG5vqHbj6zOva
NT9ar9nL6frtWGh+wV6FfcrX2J337S9or7x1e9oV+82+7ukmH+7bryx91r5w
5X24+aV5BrEXviL0/djil86med9eDmrff+tZmkKLLtorWWRcmjrjqv2jbVcu
uNSdtDdfoDNpk8cluDrFRoOfF9nvwukgqDvz5Jp04y/dsc99+K2G6T7CPTB3
eCaf/HuE9z7cfJh9MBqmTw7N/zB3wOyBmTtrJgjchJsH01cfadktf+mefWSZ
VOY213twcZ541lVqJ+/Cwxfmf5i9MHcAAKDo6B8=
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 16, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0109803, "MaxTrainingMemory" -> 251592, 
                  "DataMemory" -> 66328, "FunctionMemory" -> 33720, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 7, 28, 12, 12, 44.3456796`9.399426184020395}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 57, "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             6691904909924163924]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOLCA4/52W3m2fiwrt0XcmGXzRMg79+HCzZT3txyOblu
rY1WxtelTdN4bXMXpVxX85q2Byzse8TecbW+6JZfj+w//DjM2G9fA6Xn2Kvu
NgvclL3ZXvJSZbfi3Of2MPUaN7d2Top9bT+tWipx5/KN9lVA2e0Sj+zrLR58
bGfeB6XvQdXdhpsPMe8wXB/Y2O037MHK5d7bb/kVBFS61Z7n5Z6jE869hvKX
2jtb5Rsu+bwNri5uNsjkS3AaTE16C3XHJfsdEiCT78LdA3MH52nb3g13HqOZ
vxVOw/TB7IH5H+YOmD0wc2fNBIGTcPNg+iDh9MR+BldU7coFV9HEr8DDF+Z/
mL0wdwAAJcbt0g==
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOK//0Hgvf17KM3MAAIf4HQ7H4RmhPJTNHZ05Sdet5df
9vvnzoL79lt+BTmu1t9qL904n/nBtyP2ARs2lsl8umAv/UXoG5vqHbj6zOva
NT9ar9nL6frtWGh+wV6FfcrX2J337S9or7x1e9oV+82+7ukmH+7bryx91r5w
5X24+aV5BrEXviL0/djil86med9eDmrff+tZmkKLLtorWWRcmjrjqv2jbVcu
uNSdtDdfoDNpk8cluDrFRoOfF9nvwukgqDvz5Jp04y/dsc99+K2G6T7CPTB3
eCaf/HuE9z7cfJh9MBqmTw7N/zB3wOyBmTtrJgjchJsH01cfadktf+mefWSZ
VOY213twcZ541lVqJ+/Cwxfmf5i9MHcAAKDo6B8=
              "], "Output" -> 
             Association[
              "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
             "Version" -> {12.1, 0}, "ID" -> 7086583162346593019]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 4863075080722682652]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 6109108068464494161, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5058747499126877519]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.14965986394557823`, True -> 0.8503401360544217]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction[
       "BruteForce", {CompressedData["
1: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
Pb5sTEJ/70nu7hQloeWFp4SpWhLKTPBwf1fWj9qFjE+9WupHiR8cHXk82fQ+
D0Vc9O4ioWSbC6vbbUjo5bGxB710ElJjtV6rvM2mt/9O+NiOoyTE0tMqw1JP
Qjs+VUn7YPHFIs6+2UHAxjcE2r+UJqGjzN5VCqEfddOJKQmd/Yi1N2y3DJZv
+sHwMwJRJLRWl/q74goJNaQ95NheQUKsTCc7/SISUngjX1OrRUK/tsncF40j
ofN+NwmXt5MQb3hpuD4fCTUV7L5kz+xHy2rKvSJBbHr5dxuvhtzE8j2baXms
j4SmO+VsRbqx9VXp/jEl/Wj31d8Vke4kFNO8tefNdTY9frriGWUSCRV4+/9w
wOpwT/sd8m++HxEGrsbxCpBQLf/cgbHufvQ+YaPuC1b3kwLGqoEfm96m/PrX
YyP9KNxdUlJsJzbfr294XJuExvu+XHuqSUI6+h9oST4kxP6iNXn/TTa9R1FD
rIwANj3z5EMPo7C8jXd+yuXTJ6HrFfd3O9xi09sYmDgWTSWhx932aXlSJNQs
f+6I91sSuvXhss8zQRKqUDjy9vNkP1L0IhhIYD5eeCO7j9uShN6UOphqlJHQ
fO1d6zbMH5lrw2JPWjA94wc+vbEnIcHKx04hniRUaBW1dnsOy1O/sSXKl03v
vWZy9xd+ElrP/fD9aCUJZTMecVs4ktC5qrYavCub3l3+XyTrMDa95ufvIwtw
/ej6mqiVITbf81XQKbE3JJTPIxofwU1CC4rD8REJJLRFvu2/eCw/FQlZ9xed
WH78odNr4SSkTn2hYBvMpkfdIyIbto2E/Px7rlfGk1BNwoyMnBIJfThjo5k+
gXHp+3PyuD2bnr+1ctFzOxJio/a5vi3tR3Iqrz8xNEiINLUh2KNLQj9XzbZL
LvajamZ3+K17JLTzZvzFSx5sek+GmBGnMV73Z8o9Ju0iocU524QaLP/YkD02
PvtJ6MDGm0X8bRIKMP+i6vuZhC5Zf8ropvejpaxv29YwPSnXzzfv+YX5EvPW
bWm8HzkItBi5RWD9xL+tyImThHJ4ziX4JpFQdPezlVe/sXy9JURvObDpVX4L
K/iqQkIqZvzKAc5sel93ugvvHSKh5yJSjmKYn/wumW66bSQkIBZKO4jp6zyV
zWW3m4Q+ch4aiNjsR1kXYrfph2B1i32jXRwhIR6KbHrPecxvHeOc7Jl+5Htn
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
jlqInwkTGoevu8fQEt8U2nRs+tOY8TgsvT5kUfl9DBIf7Da2Hx6D0O+aSnd1
ptDhvW7d3nrjICBcqvts3TjoWbJEj3En0W7r/+bMfkwiw6RjtCGdcbj2/vbS
DJ5r2cHyg8umxoDrdfM38+cYKCpoKYyzx+CB8BKxYs84RKsH3koemkRe7Bq3
0wJTaKdkY1SM1BTK2xPSmc2aRFJTJ1Skf40Bn7jjkPD3SdT2YKL9zrFxeGMo
eF9rehJFXLDwOWw0DqrzCr+XDMbhcO8avzVm42Cf9fCKq+w4DBv7HTL4MwYv
jF0kjMTHod87cMUxjFsmOVZeSXAKeVhqjHnwJtHXwYHdOzvGgPl0cUJFego1
SXQqyluOQ2j9XOsT+Sm08o0Iv43iFBotTf48tjSJVsIN7wv8U8hXIiqIQxsD
s0PUPaTOMRh6ohwzfmQc2FETR06tnEJv/wr2HcN8Xi4qU72lNA7n7zdWBfGP
g/fxRvIZzSk092Ba793yKbRtbUaLnP04sPKWJdivn0KTOxqDW8bG8DnTXiFl
cAy0gnLHHESnkLXGX6i1GwfZDKMsFfEpdDJFzlj7wDhs+LuqXFlsCsW1V93y
Vp9CpTdiN5dr4LmfSHpcxvMkb7pf/xP7xTSZ1+DNHAOjxUnPoZ+TaNHIxObL
1CRyZLK7ndiTqNZHMaNSbRxSZscdR1eOQ5zYTz3PvklkvrhRsBbjph+wI73f
Pg58eRY1x7Euw2t+m1Bdx0HtaJTSlO4UEtmAZluEp5A5p9t1O8anoMTqlpcb
h/VrDG46rx2HiOyPGkewLw3SntW+wzqet1vf/ZQ1Bv6N3xyzN0yhz71DLlbc
MXi8fGa/OcZz2DWyskVxHHTPTw8KY3/8884Km9g7DlkvzBxWY1/2j67duhLz
9q5Di8zVnkLSYSacjyfHoWlDesYzjXFgelW6WWF+WyRvL1zC+RrZ07h/mS5e
/9619wv2e8owp3cY56PHdTDPD/uNA1sdwWkcVq998PGG9jgsuxdTl7Y4iQQj
RnqR1zjklw8fevt/3fkcP4dhnwpf61hL3zUOgmYPfhhiHG5P/8T8Vp5C/c9U
soeUptCXz05xepxJtO7t/JQ+rpuopvPTH/MrvVduvZTLOAw4Gp2+hnWatihz
mB6dRMsv2oa/wnMwtg/b++G8udfzbQbeGHTvNi8j49wRtDzvO2B/nzidIVWI
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
k4f8y3w3f1uCuHetjJN4TlJRsVjW7ngOTlJsyYPeGahz5vzA7dlSKrK2Llbk
c6SiH5uLfyUATjUV5hLb2rvRabt1T6RBF1XX9cbcf1FRt3RqqzS8F3pQe3wr
PNdlownpLHGQhvabtX54QkXiWw+oC012ow8VG+VLg6novMNBnZXxbrQUkj1/
Y4GDFFa7J2+5mIpmx+Idr1pSUe1JC8eBq1Tk3af3uhv4DIvr+9jCoCLWN9c3
Zm8HvGsKdKNp8LzhXK3DLw6SViHTqq6Wiuzrjk+dmucgZSle3fES8PYOrE68
u46K7B6wLJ4F/bdXWAvMkLrRVMK2C3dWupFflU8FryYVJV3kSv2USkWBad7Z
8teoaEju7vGAdCpSmZyO0eumIo9vrUa6lG7kaWtvXj/BQSqkeX04PN2N3EUn
xEchnvr9v1QaGepvOGeetYeK8i+a6K+Degaead/7rEZF2/XPM9LKutHzh1I1
hz9Tkd6m4xMv/anol4j0Dup5Krp3ybzbLwN86P7r3yVVKkp84HWocJyDZPv3
RtXvHVTEc33GYO/U//Xe22QI+DwZ44yyVqSiB7UZqm9Adwo3OPnVQadUMb7a
IxQq2ojYb7RDX5hF9coj4KM3Zg868nZT0XeX2Z7MKipqsLRdMsynopMPbTNm
QDcn+a2JuOpuZLov6XnJKSrSavWaTAOfrddg+9upTUVLf1kiDWSpyPUbZ0si
8CG5nTfMFeIYRB837eKkosFlLh/HQjqyjn0ZrPZwGqcXJWwavzWNKRyZSOsi
HdUuXNTRdpjGG1p7+NifTGOqeXTwkyg6il54y2J+iY6o1c/iPWKn8dNrOi3L
j6fxYPVPT66n0/hf3Dovz4hp/JW3/tpA4TSePX/y61QoHbV+aMpkCZvGZeGb
j7/2mMY0H6Or+Q/paLtbz93mO9M4NOzzviavaXw4Llo9+wMdZYkGfXtZQ0es
5WXD4pDnvc0JIypddGRWPktJuT6NScyVEFbbaey3vNLbA3lzBMUH/7GcxucG
N78ym6OjQ+nUt0wXOrIUoodn1tKR+r/DvpsDp3FRnwch1kFHzpI9maoRdFTZ
9bDxQc40NmiXEJJ/Skd8HrcbU23oiM2sNf5r6DQW82V+HbCZxi8lJwqDM6dx
btNsqFsCHQkO7xPvGqejJJoLdRudjt4ltXSnDNHREy7M/uoCHfEEnj7t8IiO
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
ivI/kNGO53o7K49C3jTX7y7WBAr55fSo14BASLJDUB/Ou1ska45pw/wHuQbP
/wO+kuTkzBd2EihR5ofzQfALmcdC2Qaee79Ndwif5iEt+YQ4azSRUT/f1eAx
wP1DKAejHvSrbLPBQE8f9Pc5Tle/i4x+ZXceboPz+Uz9rjmyCOR9UeGxINS/
OXJR8TXUGTh04dLvFTIaazf7dr8SzrcrHPaFkQQiBah8kX0LepSoSt1MAt4M
r4/fzoR6G7XOtcsTyIKQnFoSh/4wcd76wHYCZSrMK3J+IBAhdjWrFs6n9ZUC
mVdTgfcOXYNsiTbEeUfxvV1mK8o6l3sgRa0VtW2vOGa1tw1JBr7uK+ZpQ3O/
vSri/rUiPZ01R/x6W9DmVNbC9OpWdPD4mh+6PK1o6gw36m5uQeK/0vI7VAVI
8Tl+ShtM2xCNZmcmSmpFgdyR2/70tiH1E577yo4KkO7SBK/e+9aGBke3VwdT
W9Ev/V3bhQNbkQwtteD2ciuye3G4dVdSG/rE2UDVG25FmYMZR0d3tCKX90uC
PwtbEe/a904CLW0or4R8f8tqC/rFX5uXer4Frfv+iekn24b+GK4qjOq3IZMO
rU/9JS2ooFMQefi3oPNOp/serWlDArayR0qyW9BgYNjlf5CXbIhY5KUtbcid
X9PQB/KSOVBf+mN3G3L2KRXJi2hB95LPkA+Ht6Hmj0WUvlMCpFP/XCl9Qq3I
PEvcfhxwsOG3kr801YpOxd+uU3jfghKZksSxqBZkd1rgdyRvG+Kq8w+uEW5D
MUFnZIPaWtB7rZbRm4/bUNutrXWn51vQow1yrTMjLeh5F/+Eg24rEv1jXbD/
bBuabmiPHgN89RasIzmvtaFHnjP1SeRW1M6pU60z2oJu3RbJmwb8yLm9gw7M
VrS25UjqudhW1LtDQiNIBnC8j3+3h7Wi2glbLkezFmSPkpP4K1vQ3bTJDtnQ
NnRktL9kZbIFLR25oXdiQysKk1c6pAc46io+5ls/1Iq8jnytKbvehr77RTLS
Yd679/h8VG61oZaUwG2e7q1ImXjcupzQguZ2JF4vsW1BcjotWnuA31mHlY/7
bVrQDZm+409/taJ9I3s9/cTbkLzJz6yDJm1I6db7tc35bajPukXNY38rUjxM
qRhtbEH+G6u/7JmB+1nH+9SnLUjNeFRqDfAlIzt4fPtKC7og8tBkZLUVJY49
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
sZjnJ5tJVeW9OB/flz29ivX/H0DcNZw=
         "], CompressedData["
1:eJwNkfs31AkARyXEVBxqs6dlaV7fMRPznRry2KnPTtox39lGSnaWySLZihZ5
FLMeW50ec6RpakNRdjDWW7VKStjTlCSLHDmnKFspPbahZs9UlvXD/QPuvcti
Ejdum2NhYXF8lrE3fykX+ZF4eMs3W3iYCfX4eW/lb3wIqvppc0Ip8AKvTZ14
7oOYXUtlKaM+yFIWWyXEMGHeUD/UliaAvXuXKrKBwGsqMoCoEGJv6sy7v5fK
EZbcV245QWD0CO1JUXYY3NNouvHfSSh271PX6kOQm9ivryhjQzNjZ+XpsAIj
vknZ72fYWBNp7lvhQCBk0eIgo8VqpCeU/WHIJ6FpFjsucGZCe7XmXSmPjjNV
Vqr0ZiHqPknGo28D6YGukU8/Z4HTluZZMiXElp6rlxdPkIDIMMXrZsHYMv9i
RrsPhGr1mrFKNuam3xAeOErCbGQetLGW4Wa4Z9K+Hf5YErO+P6NUAJePd2mc
DQKcDCqWeAiE0I/S69Jnvf2HV6+cr10PL7NTCc1aAMcrdvchYmNsIUrvnuSj
RtX0cKEniZcjdRr7Rj6GJP5BSZeAre2Z/zBvUjC055R+VimE2i2z39qShM5N
0jR9nI4Y+bD/xHceWKKbrmhqZSLSUNIjz5chtW+ZU9R9CqeCvXojfvaGlaOq
quu5FBFf27RHfxuLSfmIa+htFqrZbso2BYmyZ1S/tzOBhuOy4MckE4MZL8eq
NGzY3edkzZ3HRu6WiJnecW/IcnPE0gA+YltLioq2emHu9rrdyd0ENhp2FS4M
ZkF8LqzRPMjA4c3ho6SJROcy3xrtjlh0WKve6luk2GNQx/e30LFWzxNMvuLg
marA1EdR6PzxyWUHezmU2p0pYtFydI746MN5LARYH/1+ehEBfRK/IbFWit7d
FS6TWinMw8uHDDlCNAlz3garubDUxnM2GRkozHtsftVCQX4qxXbASYChQ4cT
Gl3YWOUkWBzfQUfKKsmnqk42ukMHGJLe9UhKsFOWX5Fi+wHXFxdoXKyYOpAo
/5NAqXaPlf78V7C/91xRb/JAQKvz2fYAFmxsh8tPbo4FXfcgWeegAIqa/QbW
iZA679YlyQcK7105xECBDC0VeeWBhVJ4vf1yOesEB20FDd4Key6ePop+lBXF
wqRpomPEKEXSdZkpcPbDB6/kO2kpDHzgvL9zLMEDYXSqWGyxDjbcwZepeQSe
bnDzrUyWYe32xmZTOwv/No+G+bE3Iu6KZipty2pQ66i1zt0MVO+4OP9oBA+1
RZesTutCERW9bVC0TwpxD3M6Yj+JesJX1xUWC8EI3TIui4//Dj3MKu+Soisj
PbxhJ4VNvxyhTQ9SGKq8d+xmmQhcMduk+JUNLe/MXtpOEs2anLILSi5y86vH
JqZWYkGQbX1imRDGnP3GgWcCRL2hnXndQYCIqxF+UczCT9ta1N+4EIh1v5Bd
N9vPZ9C61zFehNPOtZkEg4Hs/J5r1z+ycG5NyA+aOAZClH7uJ1qFuHtWxac9
YIJWuLkqb9gLisytpyX+JJSVN15EFxCoPmjjM2rLxf+dV/da
         "]}], "NeighborsNumber" -> 20, 
      "ClassPriors" -> {0.14965986394557823`, 0.8503401360544217}, 
      "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
        2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 
        2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 
        2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 
        2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 
        2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
        1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2}], 
      "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 57.], 
         "Key" -> 
         "((f1f2f3f4f5f6)(\
f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f25f26f27f28f29f30f31f32f33\
f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f50f51f52f53f54f55f56f57))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Method" -> "NearestNeighbors", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 20, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "Scan", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[814257], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.3842092`7.036112753452663, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.427851880190472, 0.1534266019899935], 
         "Accuracy" -> Around[0.8551885417334798, 0.09817359568964383], 
         "EvaluationTime" -> 0.00005465148939521078, "TestSize" -> 29, 
         "ModelMemory" -> 61088, "ModelUtility" -> 0.08651974918244865, 
         "TrainingSize" -> 116, "TrainingTime" -> 0.0630957344480193, 
         "TrainingMemory" -> 470976, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.427851880190472, 0.10848899068153385`]}, 
         "AccuracyHistory" -> {
           Around[0.8551885417334798, 0.06941921524561356]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 145], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 273632573832127]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6831330634481708, 0.009958040571573266], "Accuracy" -> 
              Around[0.8443643380888818, 0.0448661911774691], 
              "EvaluationTime" -> 0.000023753195085861644`, "TestSize" -> 137,
               "ModelMemory" -> 20720, 
              "ModelUtility" -> -0.31503022117292245`, "TrainingSize" -> 8, 
              "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
              63056, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6831330634481708, 0.007041398015490219]}, 
              "AccuracyHistory" -> {
                Around[0.8443643380888818, 0.03172518802760045]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5524783553460689, 0.1712313178653916], "Accuracy" -> 
              Around[0.8381748143762824, 0.05296721673750994], 
              "EvaluationTime" -> 0.0001, "TestSize" -> 100, "ModelMemory" -> 
              116368, "ModelUtility" -> -0.1600073199563008, "TrainingSize" -> 
              30, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              269288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5524783553460689, 0.12107882601412763`]}, 
              "AccuracyHistory" -> {
                Around[0.8381748143762824, 0.037453478135670876`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0001, "MeanCrossEntropy" -> 
             Around[0.5524783553460689, 0.1712313178653916], "ModelMemory" -> 
             116368, "TrainingMemory" -> 269288, "TrainingTime" -> 
             0.07767816287994588], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.45136707701980666`, 0.11357857046540835`], "Accuracy" -> 
              Around[0.8480758044752923, 0.051700304400472887`], 
              "EvaluationTime" -> 0.00039810717055349714`, "TestSize" -> 100, 
              "ModelMemory" -> 47248, "ModelUtility" -> 0.05318208068652708, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 124736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45136707701980666`, 0.08031217737356437]}, 
              "AccuracyHistory" -> {
                Around[0.8480758044752923, 0.03655763583098308]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[7.709732484077638, 2.7097904541810984`], "Accuracy" -> 
              Around[0.8480758044752923, 0.051700304400472887`], 
              "EvaluationTime" -> 0.00031622776601683794`, "TestSize" -> 100, 
              "ModelMemory" -> 65424, "ModelUtility" -> -2.80361347463301, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 277032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[7.709732484077638, 1.916111205746029]}, 
              "AccuracyHistory" -> {
                Around[0.8480758044752923, 0.03655763583098308]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00031622776601683794`, "MeanCrossEntropy" -> 
             Around[7.709732484077638, 2.7097904541810984`], "ModelMemory" -> 
             65424, "TrainingMemory" -> 277032, "TrainingTime" -> 
             0.0774758026741253], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4584060227816154, 0.09694510932644677], "Accuracy" -> 
              Around[0.8443643380888818, 0.0448661911774691], 
              "EvaluationTime" -> 0.0000596653284411759, "TestSize" -> 137, 
              "ModelMemory" -> 92448, "ModelUtility" -> 0.0453720027703165, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 131120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4584060227816154, 0.06855054420760172]}, 
              "AccuracyHistory" -> {
                Around[0.8443643380888818, 0.03172518802760045]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.44549838234901956`, 0.07162607664122563], "Accuracy" -> 
              Around[0.8480758044752923, 0.051700304400472887`], 
              "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 100, 
              "ModelMemory" -> 97648, "ModelUtility" -> 0.08370973262429615, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 171728, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.44549838234901956`, 0.05064728450279801]}, 
              "AccuracyHistory" -> {
                Around[0.8480758044752923, 0.03655763583098308]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.47504369770650123`, 0.0969421895265843], "Accuracy" -> 
              Around[0.8551885417334798, 0.09817359568964383], 
              "EvaluationTime" -> 0.0002739062878359591, "TestSize" -> 29, 
              "ModelMemory" -> 97904, "ModelUtility" -> 0.011142478610439044`,
               "TrainingSize" -> 116, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              241864, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.47504369770650123`, 0.06854847959731926]}, 
              "AccuracyHistory" -> {
                Around[0.8551885417334798, 0.06941921524561356]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002739062878359591, "MeanCrossEntropy" -> 
             Around[0.47504369770650123`, 0.0969421895265843], "ModelMemory" -> 
             97904, "TrainingMemory" -> 241864, "TrainingTime" -> 
             0.13758925411794168`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4584060227816154, 0.09694510932644677], "Accuracy" -> 
              Around[0.8443643380888818, 0.0448661911774691], 
              "EvaluationTime" -> 9.456317287237617*^-6, "TestSize" -> 137, 
              "ModelMemory" -> 5840, "ModelUtility" -> 0.045392217975713245`, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 68608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4584060227816154, 0.06855054420760172]}, 
              "AccuracyHistory" -> {
                Around[0.8443643380888818, 0.03172518802760045]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6378706292448617, 0.16490090436978153`], "Accuracy" -> 
              Around[0.758966893584203, 0.06104586520110213], 
              "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 100,
               "ModelMemory" -> 6032, "ModelUtility" -> -0.2939727513755628, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 93472, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6378706292448617, 0.11660254770366689`]}, 
              "AccuracyHistory" -> {
                Around[0.758966893584203, 0.0431659452470992]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9357985777194137, 0.36814797092703655`], "Accuracy" -> 
              Around[0.6885218750668135, 0.12372918561762171`], 
              "EvaluationTime" -> 0.00004341122109635056, "TestSize" -> 29, 
              "ModelMemory" -> 6160, "ModelUtility" -> -0.7025653099056584, 
              "TrainingSize" -> 116, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 185856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9357985777194137, 0.2603199267225755]}, 
              "AccuracyHistory" -> {
                Around[0.6885218750668135, 0.08748974618090935]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004341122109635056, "MeanCrossEntropy" -> 
             Around[0.9357985777194137, 0.36814797092703655`], "ModelMemory" -> 
             6160, "TrainingMemory" -> 185856, "TrainingTime" -> 
             0.047471753099347556`], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7514465051907895, 0.2065538211083221], "Accuracy" -> 
              Around[0.8443643380888818, 0.0448661911774691], 
              "EvaluationTime" -> 0.000011904798134891919`, "TestSize" -> 137,
               "ModelMemory" -> 10080, 
              "ModelUtility" -> -0.46094399126756225`, "TrainingSize" -> 8, 
              "TrainingTime" -> 0.003981071705534969, "TrainingMemory" -> 
              58912, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7514465051907895, 0.14605560758568759`]}, 
              "AccuracyHistory" -> {
                Around[0.8443643380888818, 0.03172518802760045]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5912989695389126, 0.08810101360899852], "Accuracy" -> 
              Around[0.743444439247851, 0.10284667991898952`], 
              "EvaluationTime" -> 0.000020462809104917636`, "TestSize" -> 230,
               "ModelMemory" -> 20576., 
              "ModelUtility" -> -0.19711489720585196`, "TrainingSize" -> 30, 
              "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
              110096., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.5264112923360178, 0.09440081469684762], 
                Around[0.6561866467418073, 0.0768398113374752]}, 
              "AccuracyHistory" -> {
                Around[0.8425551801037451, 0.03474537352677641], 
                Around[0.644333698391957, 0.044854103071519213`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.427851880190472, 0.1534266019899935], "Accuracy" -> 
              Around[0.8551885417334798, 0.09817359568964383], 
              "EvaluationTime" -> 0.00005465148939521078, "TestSize" -> 29, 
              "ModelMemory" -> 61088, "ModelUtility" -> 0.08651974918244865, 
              "TrainingSize" -> 116, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 470976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.427851880190472, 0.10848899068153385`]}, 
              "AccuracyHistory" -> {
                Around[0.8551885417334798, 0.06941921524561356]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005465148939521078, "MeanCrossEntropy" -> 
             Around[0.427851880190472, 0.1534266019899935], "ModelMemory" -> 
             61088, "TrainingMemory" -> 470976, "TrainingTime" -> 
             0.0828507397655591], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8099379654842271, 0.08557674592862219], "Accuracy" -> 
              Around[0.5637922109917167, 0.05994006440952775], 
              "EvaluationTime" -> 7.511419817764159*^-6, "TestSize" -> 137, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.5032959430614695, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 118024, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8099379654842271, 0.060511897358007015`]}, 
              "AccuracyHistory" -> {
                Around[0.5637922109917167, 0.042384026008735504`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6839235912016862, 0.11822925762740363`], "Accuracy" -> 
              Around[0.7294500707325082, 0.05930698324953576], 
              "EvaluationTime" -> 8.948387087249477*^-6, "TestSize" -> 115, 
              "ModelMemory" -> 9560, "ModelUtility" -> -0.34726256096063257`, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 139032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6839235912016862, 0.08360070980298845]}, 
              "AccuracyHistory" -> {
                Around[0.7294500707325082, 0.04193637002746372]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.948387087249477*^-6, "MeanCrossEntropy" -> 
             Around[0.6839235912016862, 0.11822925762740363`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 139032, "TrainingTime" -> 
             0.08284440404535287], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6836745491542682, 0.010523946989051515`], "Accuracy" -> 
              Around[0.7294500707325082, 0.05930698324953576], 
              "EvaluationTime" -> 0.000013814404082161414`, "TestSize" -> 115,
               "ModelMemory" -> 9560, "ModelUtility" -> -0.3159827009240257, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 106560, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6836745491542682, 0.007441554280806075]}, 
              "AccuracyHistory" -> {
                Around[0.7294500707325082, 0.04193637002746372]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000013814404082161414`, "MeanCrossEntropy" -> 
             Around[0.6836745491542682, 0.010523946989051515`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 106560, "TrainingTime" -> 
             0.030843672588957087`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.5948080618086626`, 1.0618502690055374`], "Accuracy" -> 
              Around[0.6023591372609421, 0.06461533901077579], 
              "EvaluationTime" -> 0.000010369003524154594`, "TestSize" -> 115,
               "ModelMemory" -> 9560, "ModelUtility" -> -2.030070327047495, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 139288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.5948080618086626`, 0.7508415258185751]}, 
              "AccuracyHistory" -> {
                Around[0.6023591372609421, 0.04568994438318722]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010369003524154594`, "MeanCrossEntropy" -> 
             Around[3.5948080618086626`, 1.0618502690055374`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 139288, "TrainingTime" -> 
             0.12279087223868168`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.211421282095314, 0.8870699308406097], "Accuracy" -> 
              Around[0.5857501885002941, 0.05956029000498637], 
              "EvaluationTime" -> 7.511419817764159*^-6, "TestSize" -> 137, 
              "ModelMemory" -> 9560, "ModelUtility" -> -2.172245938679007, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 117792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.211421282095314, 0.6272531634840768]}, 
              "AccuracyHistory" -> {
                Around[0.5857501885002941, 0.042115484951963204`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[8.228861051588593, 3.3687442613019343`], "Accuracy" -> 
              Around[0.695076480426986, 0.060882729316552725`], 
              "EvaluationTime" -> 0.000010369003524154594`, "TestSize" -> 115,
               "ModelMemory" -> 9560, "ModelUtility" -> -2.8795265457709593`, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 139160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.228861051588593, 2.382061911249864]}, 
              "AccuracyHistory" -> {
                Around[0.695076480426986, 0.04305059075687945]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010369003524154594`, "MeanCrossEntropy" -> 
             Around[8.228861051588593, 3.3687442613019343`], "ModelMemory" -> 
             9560, "TrainingMemory" -> 139160, "TrainingTime" -> 
             0.0680451298585727], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.219646169756603, 2.163748776252805], "Accuracy" -> 
              Around[0.695076480426986, 0.060882729316552725`], 
              "EvaluationTime" -> 0.000014182237778088635`, "TestSize" -> 115,
               "ModelMemory" -> 9560, "ModelUtility" -> -2.425261581006059, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 139176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.219646169756603, 1.530001432472452]}, 
              "AccuracyHistory" -> {
                Around[0.695076480426986, 0.04305059075687945]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014182237778088635`, "MeanCrossEntropy" -> 
             Around[5.219646169756603, 2.163748776252805], "ModelMemory" -> 
             9560, "TrainingMemory" -> 139176, "TrainingTime" -> 
             0.09753625678560679], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 273628278864831]], "MaxTrainingSize" -> 145, 
      "PreprocessorEvaluationTime" -> 8.4772126144456`2.*^-6, 
      "PreprocessorMemory" -> 140184, "InputDimension" -> 57, 
      "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.42211863346805206`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8049271665725296`17.332921337136877*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 8, "TimeBudgets" -> 0.2869636000000001, 
          "ElapsedTimes" -> 0.5087176, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 30, "TimeBudgets" -> 0.4099480000000001, 
          "ElapsedTimes" -> 0.4028478999999999, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 116, "TimeBudgets" -> 0.5856400000000002, 
          "ElapsedTimes" -> 0.81122, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 273641163766719]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.002071983932069992}, "ID" -> 1162718923129740014], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.042264539103521036`}, "ID" -> 4187411234444480327], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0008012289705745583}, "ID" -> 5656057673758756522], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.004043713850801853}, "ID" -> 1828916188125059713], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.9508185341430325}, "ID" -> 5817400184462107317], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3}, "ID" -> 
           2259017168000744454], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2977504233457389808], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2883073030701475202], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8542155782354463042], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1087122466154045299], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7098082226810779443], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7527085726711710894], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7302131928529783435], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6610884175331864273], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8430200022104770794], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1880536765393926571], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2289609561718250111], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1861866698837459122], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           721662028173966090], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5293093256126856488], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4916449274797872053], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6738418342009516474], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3859969914682152777], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6138410690729605700], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4962899876905593196], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3934452181314908967], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5525350609633579900], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1394050439506431714], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7424777280375559184], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3793475901036520362], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4460684676930793160], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           685404826483308035], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3827672818639294870], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6624873324528393173], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4599872756151087439], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3754199495784806728], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2506808626983062011], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1324134237217055003], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4526950110311207803], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6942178859739616307], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4563299482863735599], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           78521884504585867], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6168504287399193887], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8592382463581154530], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2096620997321730544], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5031936294927250306], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2310777668585032998], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1863318859499765349], "f49" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4027914077740042513], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1735164631324514589], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7223892132023612801], "f52" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1173613016501980468], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4870533774562541095], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3890935771456833989], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4172833904468172479], "f56" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           192266689413895279], "f57" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5906616251917354923]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 2.5807908, 
      "MaxTrainingMemory" -> 1472984, "DataMemory" -> 1273072, 
      "FunctionMemory" -> 478432, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 7, 28, 12, 12, 46.7689394`9.422532385025015}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.804602886072148*^9, {3.804602986180338*^9, 3.804602999685937*^9}, 
   3.804851155237235*^9, 3.8049403980929823`*^9, 3.804940456758148*^9, 
   3.8049415669139395`*^9},
 CellLabel->
  "Out[706]=",ExpressionUUID->"6ca23a33-88b1-4a40-af07-34ce717b4240"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"its", "=", 
   RowBox[{"alItLoop", "[", 
    RowBox[{
    "cErMACCs1", ",", "erTrainMACCs", ",", "erTestMACCs", ",", "erALpool", 
     ",", "\"\<explore\>\"", ",", "1", ",", "0"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.804854839342472*^9, 3.8048548787875776`*^9}, 
   3.804855398253804*^9, 3.8048556379465747`*^9, {3.80494044503106*^9, 
   3.804940447188218*^9}, {3.8049410237664957`*^9, 3.8049410260550966`*^9}, {
   3.8049412522146397`*^9, 3.804941253736408*^9}, 3.80494153247447*^9},
 CellLabel->
  "In[710]:=",ExpressionUUID->"bafc84f7-c9ae-48bd-b9e8-552c86e4f0a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "[", "\"\<MeanCrossEntropy\>\"", "]"}],
      "&"}], ",", "its"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.8049413719771347`*^9, 3.804941394048763*^9}, {
  3.8049414282845387`*^9, 3.80494147288137*^9}, {3.8049419532512336`*^9, 
  3.804942012018367*^9}, {3.8049420992856264`*^9, 3.8049421089458494`*^9}, {
  3.804942255683758*^9, 3.804942329478219*^9}},
 CellLabel->
  "In[728]:=",ExpressionUUID->"d0d07309-c669-4735-b597-c54d5e628ea1"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6b7f3661-ff2a-48be-b038-331172913692"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 170, 3, 97, "Title",ExpressionUUID->"6b4dd09e-6715-4f5f-a125-8d843f7ea704"],
Cell[753, 27, 156, 3, 31, "Author",ExpressionUUID->"d83df031-b9fc-418b-8e47-286474c3f643"],
Cell[CellGroupData[{
Cell[934, 34, 164, 3, 67, "Section",ExpressionUUID->"7c07ee20-ab93-438a-8ec1-ae835b9125ec"],
Cell[1101, 39, 6200, 150, 474, "Input",ExpressionUUID->"f73a3d2c-82c3-482d-bc33-3f5ed06f3f1a",
 InitializationCell->True],
Cell[7304, 191, 1268, 29, 143, "Input",ExpressionUUID->"313aeda6-9633-4ba6-b8c2-fd762e9a351b",
 InitializationCell->True],
Cell[8575, 222, 791, 15, 44, "Input",ExpressionUUID->"ae72564b-e2ca-42f9-b693-12fa7c65499a",
 InitializationCell->True],
Cell[9369, 239, 690, 14, 44, "Input",ExpressionUUID->"f77c67cb-f0bd-4e86-9b7a-6f43186bd7e2",
 InitializationCell->True],
Cell[10062, 255, 555, 14, 44, "Input",ExpressionUUID->"b0d4a967-f0df-4a02-ab2c-6e4dde732990",
 InitializationCell->True],
Cell[10620, 271, 558, 12, 44, "Input",ExpressionUUID->"a8b537e0-c52e-4a7a-807f-e6873488349d",
 InitializationCell->True],
Cell[11181, 285, 794, 16, 65, "Input",ExpressionUUID->"5171f080-931a-4aa4-bd1e-4f797c21ec56",
 InitializationCell->True],
Cell[11978, 303, 320, 6, 28, "Input",ExpressionUUID->"cd7da6dc-ae5f-492e-820e-7ae58a91f8a8"],
Cell[12301, 311, 342, 8, 44, "Input",ExpressionUUID->"4b38cb8d-aeb7-479f-99f1-1a4182010598",
 InitializationCell->True],
Cell[12646, 321, 1277, 37, 84, "Input",ExpressionUUID->"557c61ba-f89e-4c8b-a835-3ccba14dde16",
 InitializationCell->True],
Cell[13926, 360, 707, 16, 44, "Input",ExpressionUUID->"1fff0d1e-1b11-419f-8ebd-1c0f530699a0",
 InitializationCell->True],
Cell[14636, 378, 229, 5, 28, "Input",ExpressionUUID->"942c48c9-a02f-4827-b3c3-e659196f9c24"],
Cell[14868, 385, 358, 8, 44, "Input",ExpressionUUID->"1c1b86ca-e022-4772-9d84-8be4f2c4c64b",
 InitializationCell->True],
Cell[15229, 395, 389, 8, 28, "Input",ExpressionUUID->"84edf42e-bd69-4e3b-b110-7a38910571f2"],
Cell[15621, 405, 423, 10, 44, "Input",ExpressionUUID->"53548bd7-5611-4dd9-91ec-2272eff87e50",
 InitializationCell->True],
Cell[16047, 417, 423, 10, 44, "Input",ExpressionUUID->"8dd02bc8-d728-4a4a-822b-d6e26ddd93ad",
 InitializationCell->True],
Cell[16473, 429, 475, 11, 44, "Input",ExpressionUUID->"57063d85-831f-4e5a-8ed3-bf7b87e53e22",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[16973, 444, 177, 3, 54, "Subsection",ExpressionUUID->"02666971-04fb-4577-abe4-90fe6e2567dd"],
Cell[17153, 449, 572, 12, 44, "Input",ExpressionUUID->"92d0f3ba-3dd2-47ee-ae6c-d9be855c74a7",
 InitializationCell->True],
Cell[17728, 463, 570, 12, 44, "Input",ExpressionUUID->"bdfc9ce6-823c-4b03-837a-999ccc0dfaea",
 InitializationCell->True],
Cell[18301, 477, 737, 19, 88, "Input",ExpressionUUID->"751b95dd-a07d-4c54-87da-9666729f6ee9"],
Cell[19041, 498, 476, 11, 44, "Input",ExpressionUUID->"0e8128b5-e6de-42c2-92ad-0cf477c6b18a",
 InitializationCell->True],
Cell[19520, 511, 683, 17, 84, "Input",ExpressionUUID->"a282b186-a094-4186-93f9-8ad34619e001",
 InitializationCell->True],
Cell[20206, 530, 416, 9, 44, "Input",ExpressionUUID->"d6f04097-0079-4bc4-a0da-c9061b1a1940",
 InitializationCell->True],
Cell[20625, 541, 947, 21, 44, "Input",ExpressionUUID->"0710a27a-525d-4148-8bd2-ef2db8ec1acc",
 InitializationCell->True],
Cell[21575, 564, 972, 24, 44, "Input",ExpressionUUID->"50a1d803-37e3-4c60-870c-51e1ba728914",
 InitializationCell->True],
Cell[22550, 590, 933, 23, 44, "Input",ExpressionUUID->"b4a8257c-cbd9-4d0a-ba06-92d2629190b3",
 InitializationCell->True],
Cell[23486, 615, 1349, 25, 123, "Input",ExpressionUUID->"e5c614fb-0a34-4ada-b03a-889f1fb8c4a2",
 InitializationCell->True],
Cell[24838, 642, 1199, 24, 123, "Input",ExpressionUUID->"d53f6d00-222a-4cd4-8577-bbaed14594af",
 InitializationCell->True],
Cell[26040, 668, 1225, 24, 123, "Input",ExpressionUUID->"5d61392c-7d50-4ed7-a84d-e7c3a6712d6d",
 InitializationCell->True],
Cell[27268, 694, 1077, 22, 104, "Input",ExpressionUUID->"8ba0e897-8eb6-4c63-a7c5-9f382a6ceb96",
 InitializationCell->True],
Cell[28348, 718, 875, 22, 143, "Input",ExpressionUUID->"bf7a3b22-b8a1-4485-b1ba-1dfc7d5d9cd6",
 InitializationCell->True],
Cell[29226, 742, 1006, 26, 143, "Input",ExpressionUUID->"399763c1-11c1-4a5c-bc60-eb5ac0ee5845",
 InitializationCell->True],
Cell[30235, 770, 876, 20, 65, "Input",ExpressionUUID->"7f07a6f9-2c78-4606-9db3-8fbf6ef87493",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[31160, 796, 171, 3, 53, "Section",ExpressionUUID->"8bb6d680-ad22-43d4-bb13-3f1a9498138c"],
Cell[CellGroupData[{
Cell[31356, 803, 160, 3, 54, "Subsection",ExpressionUUID->"1b02fffb-5e21-435f-9f0f-1252cd1c860e"],
Cell[31519, 808, 634, 15, 44, "Input",ExpressionUUID->"f36a8485-2013-409d-8ff2-d2722129a491",
 InitializationCell->True],
Cell[32156, 825, 275, 5, 28, "Input",ExpressionUUID->"4f39cd32-710e-4d94-ad87-485a239d1b06"],
Cell[32434, 832, 2982, 65, 48, "Input",ExpressionUUID->"01b8eb54-e108-4471-b273-0c387ddc0c60",
 InitializationCell->True],
Cell[35419, 899, 368, 7, 28, "Input",ExpressionUUID->"bde02aed-928a-4188-9b96-39660f05fb1a"],
Cell[35790, 908, 1055, 26, 84, "Input",ExpressionUUID->"b7b09101-887d-489d-8ec5-3ff043ae399a",
 InitializationCell->True],
Cell[36848, 936, 473, 10, 28, "Input",ExpressionUUID->"3423186c-a548-43f3-9e07-c976796b7c12"],
Cell[37324, 948, 933, 25, 65, "Input",ExpressionUUID->"f112b039-fb53-4d0a-bf33-6f15a0fdf8ff",
 InitializationCell->True],
Cell[38260, 975, 890, 21, 44, "Input",ExpressionUUID->"e85ee864-22ac-4bb7-a645-3d7666f950e8",
 InitializationCell->True],
Cell[39153, 998, 1695, 40, 123, "Input",ExpressionUUID->"23fa21af-377d-4832-bd01-ffc3cb37f921",
 InitializationCell->True],
Cell[40851, 1040, 348, 7, 21, "Input",ExpressionUUID->"3b79a496-bd87-400f-b64b-4e6ed30d1a09"],
Cell[41202, 1049, 346, 8, 33, "Input",ExpressionUUID->"c6ef8b47-5061-421f-9172-bd67e96068bb",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[41573, 1061, 222, 4, 21, "Input",ExpressionUUID->"ad2b9c45-02fa-433c-b83a-5fe3d1caa6cc"],
Cell[41798, 1067, 1857, 44, 70, "Output",ExpressionUUID->"ced7230e-a2d4-48d9-b7aa-6c008ae190a2"]
}, Open  ]],
Cell[43670, 1114, 353, 7, 21, "Input",ExpressionUUID->"c8873c28-1393-4cb4-b6f6-0e0d53082359"],
Cell[44026, 1123, 828, 16, 48, "Input",ExpressionUUID->"9dde5512-f858-480b-a18a-657aea842d35",
 InitializationCell->True],
Cell[44857, 1141, 398, 8, 21, "Input",ExpressionUUID->"0da964f9-2a01-40e9-939d-288a3b8db68e"],
Cell[45258, 1151, 1416, 33, 76, "Input",ExpressionUUID->"90bc2d77-3c4c-41f2-8c73-e1423a639ddb",
 InitializationCell->True],
Cell[46677, 1186, 525, 10, 21, "Input",ExpressionUUID->"0ebb8817-cd2f-449d-bebb-73703fa2c73f"],
Cell[47205, 1198, 532, 11, 33, "Input",ExpressionUUID->"92923544-06cb-42fd-b9db-abca8dddce6c",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[47774, 1214, 168, 3, 38, "Subsection",ExpressionUUID->"8cb200c7-bbb2-43b0-9bd6-2ee942e0cb82"],
Cell[47945, 1219, 449, 11, 21, "Input",ExpressionUUID->"d230dfdb-eea0-45d4-b29e-7c0e089b8c99"],
Cell[CellGroupData[{
Cell[48419, 1234, 633, 11, 33, "Input",ExpressionUUID->"b3a72139-2fe9-4732-9b54-c7335529a31a",
 InitializationCell->True],
Cell[49055, 1247, 4328, 93, 70, "Output",ExpressionUUID->"bd21804a-b8ba-4402-a783-1f43d490925d"]
}, Open  ]],
Cell[53398, 1343, 329, 7, 21, "Input",ExpressionUUID->"ad702dd5-c05b-4bd4-9361-b325164780eb"],
Cell[53730, 1352, 1949, 58, 76, "Input",ExpressionUUID->"1a178f2e-e243-4c6e-8484-64306e5d0923",
 InitializationCell->True],
Cell[55682, 1412, 352, 7, 21, "Input",ExpressionUUID->"a70272ff-27a3-4da5-a9fe-86489a7a1205"],
Cell[56037, 1421, 739, 15, 48, "Input",ExpressionUUID->"37ffff50-9ab0-4c92-91fa-0391fd7eac77",
 InitializationCell->True],
Cell[56779, 1438, 353, 7, 21, "Input",ExpressionUUID->"3f0a203e-8843-43e5-bef9-7ff27774415c"],
Cell[57135, 1447, 1372, 34, 76, "Input",ExpressionUUID->"9c2ad11f-eecb-4dc8-b2dd-760c525c955e",
 InitializationCell->True],
Cell[58510, 1483, 501, 10, 21, "Input",ExpressionUUID->"ac705e7f-9d33-4358-b326-5490a63d7e75"],
Cell[59014, 1495, 478, 10, 33, "Input",ExpressionUUID->"7960f15a-d622-478f-8a61-f4817b2df185",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[59541, 1511, 157, 3, 53, "Section",ExpressionUUID->"d3a78690-de63-4552-8cbf-02695864ba72"],
Cell[59701, 1516, 333, 7, 28, "Input",ExpressionUUID->"1dcde0fe-f781-44ac-a891-9d8ea0ef8490"],
Cell[CellGroupData[{
Cell[60059, 1527, 334, 8, 28, "Input",ExpressionUUID->"668a791f-ff0e-41cb-a6dd-3de71f683535"],
Cell[60396, 1537, 155, 3, 32, "Output",ExpressionUUID->"bf9d44ea-5789-4a94-a90a-13aa81a80447"]
}, Open  ]],
Cell[60566, 1543, 686, 16, 28, "Input",ExpressionUUID->"33ded86d-11b9-4e97-98be-007372272abd"],
Cell[61255, 1561, 680, 14, 49, "Input",ExpressionUUID->"770cf801-3415-4b1e-8ceb-5f1c421abe19"],
Cell[61938, 1577, 314, 8, 28, "Input",ExpressionUUID->"3d765bb4-59b5-4547-badc-b82d023c58e6"],
Cell[62255, 1587, 492, 9, 28, "Input",ExpressionUUID->"01786e04-14ca-4d18-94a4-77764fc3393b"],
Cell[62750, 1598, 369, 9, 28, "Input",ExpressionUUID->"907eb26e-1e6f-41dc-9e99-decefd5ee228"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63156, 1612, 172, 3, 67, "Section",ExpressionUUID->"748afb97-cd0e-4ba2-9774-ca9c7b920dcc"],
Cell[CellGroupData[{
Cell[63353, 1619, 164, 3, 54, "Subsection",ExpressionUUID->"f3f0504b-77d6-42bf-b195-8b9dbe43a8d7"],
Cell[63520, 1624, 439, 9, 28, "Input",ExpressionUUID->"23ea11b3-9c16-496e-ad1a-240c7b717751"],
Cell[63962, 1635, 214, 4, 28, "Input",ExpressionUUID->"acb9b07a-7ff4-426b-97aa-daec545c63c7"],
Cell[64179, 1641, 8094, 177, 591, "Input",ExpressionUUID->"ce4f6966-6485-4086-b2f6-adf0f451e249",
 InitializationCell->True],
Cell[72276, 1820, 196, 4, 28, "Input",ExpressionUUID->"f3d6b4a8-a204-4ddc-9e82-cdc7a7528ca8"],
Cell[72475, 1826, 8633, 198, 630, "Input",ExpressionUUID->"4fd3f493-b910-4e25-8942-30bac99bbdfe",
 InitializationCell->True],
Cell[81111, 2026, 536, 12, 68, "Input",ExpressionUUID->"143a591c-e047-4612-a2c2-0d693f308f65"],
Cell[81650, 2040, 348, 8, 28, "Input",ExpressionUUID->"9b68b292-b2a9-4799-82ec-c5fdc303d116"],
Cell[82001, 2050, 704, 14, 28, "Input",ExpressionUUID->"48705537-5927-47e3-a9ba-5d901d006639"],
Cell[82708, 2066, 330, 7, 28, "Input",ExpressionUUID->"d73f982f-2448-400e-a16b-35400c648161"],
Cell[83041, 2075, 192, 3, 28, "Input",ExpressionUUID->"3c9c4434-f000-450c-8149-83378a103162"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83270, 2083, 167, 3, 54, "Subsection",ExpressionUUID->"ab102951-0288-4bf8-b684-0e5c800c6782"],
Cell[83440, 2088, 300, 6, 28, "Input",ExpressionUUID->"721079b2-39c7-4ce7-ac55-4047f48d1c85"],
Cell[83743, 2096, 5313, 113, 357, "Input",ExpressionUUID->"22f13c19-381c-4785-9870-7677b6341c31",
 InitializationCell->True],
Cell[89059, 2211, 593, 14, 28, "Input",ExpressionUUID->"44cd192d-a49b-43b7-b358-5b5840a3aa05"],
Cell[89655, 2227, 3069, 74, 318, "Input",ExpressionUUID->"913a2fe8-9658-465f-bff7-64c5c298b863",
 InitializationCell->True],
Cell[92727, 2303, 881, 19, 88, "Input",ExpressionUUID->"00eaf0c9-d5c7-4426-b8aa-506d028d226c"],
Cell[93611, 2324, 12499, 247, 611, "Input",ExpressionUUID->"9c4e6f65-4cd9-4479-93f2-58d13fffaa0e",
 InitializationCell->True],
Cell[106113, 2573, 4930, 114, 419, "Input",ExpressionUUID->"03f02bbe-1949-4d70-893e-b11d53b94cbb"],
Cell[111046, 2689, 1154, 21, 28, "Input",ExpressionUUID->"5056f030-d8ad-4383-93a0-49e6489c5ce9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[112249, 2716, 173, 3, 67, "Section",ExpressionUUID->"810eb5cd-53bf-457e-babe-cf3e53b8b8f4"],
Cell[CellGroupData[{
Cell[112447, 2723, 169, 3, 54, "Subsection",ExpressionUUID->"f9961597-e0e2-4afd-994e-3d41df53b67e"],
Cell[CellGroupData[{
Cell[112641, 2730, 216, 4, 45, "Subsubsection",ExpressionUUID->"4f4c0373-80a4-4a59-b1e8-e56ed51053fc"],
Cell[112860, 2736, 365, 9, 28, "Input",ExpressionUUID->"bbf2662a-e7a4-4367-a88a-71b3850059cc"],
Cell[CellGroupData[{
Cell[113250, 2749, 413, 10, 28, "Input",ExpressionUUID->"fc3ca2d9-c4a1-462d-a29e-21e80bb7f1a6"],
Cell[113666, 2761, 185019, 3155, 64, "Output",ExpressionUUID->"6ca23a33-88b1-4a40-af07-34ce717b4240"]
}, Open  ]],
Cell[298700, 5919, 614, 12, 28, "Input",ExpressionUUID->"bafc84f7-c9ae-48bd-b9e8-552c86e4f0a1"],
Cell[299317, 5933, 591, 14, 28, "Input",ExpressionUUID->"d0d07309-c669-4735-b597-c54d5e628ea1"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

