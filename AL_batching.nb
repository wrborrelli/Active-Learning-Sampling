(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    217393,       4105]
NotebookOptionsPosition[    211728,       4007]
NotebookOutlinePosition[    212166,       4024]
CellTagsIndexPosition[    212123,       4021]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Make Sampling Datasets", "Section",
 CellChangeTimes->{{3.7977291888355694`*^9, 
  3.7977291931138754`*^9}},ExpressionUUID->"d32339d8-9464-45ba-a3d5-\
112532c16bf8"],

Cell[CellGroupData[{

Cell["MACCs Keys", "Subsection",
 CellChangeTimes->{{3.7977292038482203`*^9, 
  3.797729205434863*^9}},ExpressionUUID->"86708cfa-70d3-4f07-95c4-\
663d38a6fc6e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataRaw", "=", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"genData2Dv2", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", 
        "10", ",", "11", ",", "12", ",", "13"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977292091355968`*^9, 3.797729218862091*^9}, {
  3.7977293185267353`*^9, 3.7977293460560913`*^9}, {3.7977296240994773`*^9, 
  3.79772963654508*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"b41f50f1-139c-4ed3-a1d0-ea6aa7cedd1b"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"get", " ", "all", " ", "the", " ", "maccs", " ", "keys"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.797730156260543*^9, 3.797730161618863*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"aa819cdb-18de-479d-b39a-d6a584770744"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccs", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{
     InterpretationBox[
      TagBox[
       StyleBox[
        StyleBox[
         FrameBox[GridBox[{
            {
             StyleBox[
              StyleBox[
               AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                BoxBaselineShift->-0.25,
                BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
               
               FontColor->RGBColor[
                0.8745098039215686, 0.2784313725490196, 0.03137254901960784]],
              ShowStringCharacters->False,
              FontFamily->"Source Sans Pro Black",
              FontSize->Rational[10, 13] Inherited,
              FontWeight->"Heavy",
              PrivateFontOptions->{"OperatorSubstitution"->False}], 
             StyleBox[
              StyleBox["\<\"MACCSKeys\"\>", "ResourceFunctionLabel"],
              ShowStringCharacters->False,
              FontSize->Rational[12, 13] Inherited]}
           }]], "ResourceFunctionFrame"],
        FrameBoxOptions->{Background->GrayLevel[0.5, 0.15],
        BaseStyle->{
         "StandardForm", LineSpacing -> {0, 0}, LineBreakWithin -> False},
        FrameMargins->{{3, 3}, {0, 0}},
        FrameStyle->Directive[
          GrayLevel[0.5, 0.35], 
          AbsoluteThickness[0.5]],
        RoundingRadius->4},
        GridBoxOptions->{FrameStyle->GrayLevel[1, 0],
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
        GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{0.25}}, "Rows" -> {-0.1, {}, 0}}}],
       {"FunctionResourceBox", 
        RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784],
         "\"MACCSKeys\""}],
      ResourceFunction[
       ResourceObject[
        Association[
        "Name" -> "MACCSKeys", "ShortName" -> "MACCSKeys", "UUID" -> 
         "f8b0f1a9-223b-4eda-9d8c-9e4928b1b029", "ResourceType" -> "Function",
          "Version" -> "1.0.0", "Description" -> 
         "Compute the 166-bit MACCS (Molecular ACCess System) key", 
         "RepositoryLocation" -> 
         URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
         "SymbolName" -> 
         "FunctionRepository`$9d04496dd1d74429862dbd9de474c06d`MACCSKeys", 
         "FunctionLocation" -> 
         CloudObject[
          "https://www.wolframcloud.com/obj/e49eb676-b131-43dc-a539-\
cec4e5e85b7c"]], {ResourceSystemBase -> Automatic}]],
      Selectable->False], "/@", "smiles"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7954098603627405`*^9, 3.7954099252933607`*^9}, {
  3.795409968908456*^9, 3.795410083911524*^9}, {3.7954102185602927`*^9, 
  3.795410368181925*^9}, {3.7959231644070606`*^9, 3.795923172071984*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"6451bb58-7b00-487e-b382-a73bf1604d45"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "make", " ", "an", " ", "assoc", " ", "of", " ", "each", " ", "maccs", " ", 
   "key", " ", "\"\<name\>\"", " ", "and", " ", "the", " ", "value"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.797730163349805*^9, 3.7977301747219367`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"64905480-75bd-42a7-a129-269ebd8468c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsAssoc", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<maccs\>\"", "<>", 
        RowBox[{"ToString", "[", "j", "]"}]}], "->", 
       RowBox[{
        RowBox[{"maccs", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "j", "]"}], "]"}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "maccs", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"maccs", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.795924457764222*^9, 3.7959246559957795`*^9}, {
  3.795924689825609*^9, 3.7959247935113134`*^9}, {3.797730774950071*^9, 
  3.797730823417225*^9}, {3.797730879059975*^9, 3.797730882277068*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"98e2e85e-9738-4662-ab9b-b5aa34ad06a1"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "get", " ", "only", " ", "the", " ", "maccs", " ", "keys", " ", "that", " ",
    "vary", " ", 
   RowBox[{"(", 
    RowBox[{
    "from", " ", "maccs", " ", "dataset", " ", "where", " ", "this", " ", 
     "was", " ", "already", " ", "computed"}], ")"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977301764903917`*^9, 3.797730194751487*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"4ef9b233-1622-42a5-b075-f1844d000fff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsRed", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Lookup", "[", 
      RowBox[{
       RowBox[{"Association", "[", 
        RowBox[{"maccsAssoc", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"First", "[", 
           RowBox[{"allDataMACCs", "[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"10", ";;"}], "}"}]}], "]"}], "]"}], "]"}], "]"}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "maccsAssoc", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797731037699054*^9, 3.797731163269812*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"fa365607-cfb1-4546-a275-60b7191bce48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maccsAssocRed", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"First", "[", 
           RowBox[{"allDataMACCs", "[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"10", ";;"}], "}"}]}], "]"}], "]"}], "]"}], "]"}], 
        "]"}], ",", "#"}], "]"}], "&"}], "/@", "maccsRed"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797731387177384*^9, 3.797731469646494*^9}, {
  3.7977315006404223`*^9, 3.7977315151608515`*^9}, {3.7977315517990856`*^9, 
  3.797731581658821*^9}, {3.797731625682429*^9, 3.797731738263607*^9}, {
  3.797731801638977*^9, 3.797731804044848*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"b65291a3-cc72-44b4-b756-0d2010538ce3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"genDataRaw", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "#"}], "]"}], 
            "&"}], "/@", "maccsAssocRed"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"genDataRaw", "[", 
                RowBox[{"[", 
                 RowBox[{"i", "+", "1"}], "]"}], "]"}], "]"}], ",", "#"}], 
             "]"}], "&"}], "/@", "maccsAssocRed"}]}], "\[IndentingNewLine]", 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "20"}], "}"}]}], "]"}], "//", 
      "Flatten"}], "//", "DeleteDuplicates"}], "//", "Dataset"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977685099254184`*^9, 3.7977685301862717`*^9}, {
  3.797768654874099*^9, 3.797768812541133*^9}, {3.7977688550559883`*^9, 
  3.797768880494068*^9}, {3.797768914142953*^9, 3.797768924494399*^9}, {
  3.7977692894126697`*^9, 3.7977693049402647`*^9}, {3.7977734762860675`*^9, 
  3.797773481886305*^9}, {3.7977766008410673`*^9, 3.7977766009557905`*^9}, {
  3.797776930812009*^9, 3.7977769643033924`*^9}, {3.797781826838252*^9, 
  3.7977818300175962`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"5ec4a9c1-f117-4f04-8a2d-3eba6c33125d"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "amine", " ", "SMILES", " ", "to", " ", 
   "their", " ", "reduced", " ", "MACCS", " ", "keys"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797778366426738*^9, 3.797778376915882*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"fdf0cec3-c1d3-4b26-ad09-83efdb75371f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"amineRedMACCsAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "maccsAssocRed"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797778190938843*^9, 3.79777836057209*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"6b0485d4-054c-42ee-8931-9512aae4ca4f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositionIndex", "[", "smiles", "]"}]], "Input",
 CellChangeTimes->{{3.7977895686983175`*^9, 3.797789573105955*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"6b7b8f6d-771f-427e-888f-8b8449912cfd"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NCCN\"\>", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"\<\"NCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"\<\"NCCCCCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{"\<\"NCCCNCCCCNCCCN\"\>", "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{"\<\"CN(C)CCN(C)C\"\>", "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{"\<\"CNCCNC\"\>", "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{"\<\"C1CNCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{"\<\"CC1CNCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{"\<\"CC1CNC(C)CN1\"\>", "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{"\<\"C1CN2CCN1CC2\"\>", "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{"\<\"Cl.Cl.NC1CN2CCC1CC2\"\>", "\[Rule]", 
    RowBox[{"{", "13", "}"}]}], ",", 
   RowBox[{"\<\"Cl.Cl.NC1CCNC1\"\>", "\[Rule]", 
    RowBox[{"{", "14", "}"}]}], ",", 
   RowBox[{"\<\"NCC1CCCCN1\"\>", "\[Rule]", 
    RowBox[{"{", "15", "}"}]}], ",", 
   RowBox[{"\<\"CC1=NC=CN=C1\"\>", "\[Rule]", 
    RowBox[{"{", "16", "}"}]}], ",", 
   RowBox[{"\<\"NCCNCCN\"\>", "\[Rule]", 
    RowBox[{"{", "17", "}"}]}], ",", 
   RowBox[{"\<\"C1CC(CCN1)C2CCNCC2\"\>", "\[Rule]", 
    RowBox[{"{", "18", "}"}]}], ",", 
   RowBox[{"\<\"C(CN)CN\"\>", "\[Rule]", 
    RowBox[{"{", "19", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.797789573440578*^9, 3.7977976271469975`*^9, 
  3.7985485558891315`*^9, 3.8046014449898987`*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"268426da-f6ac-4947-90f4-a7d7c523de70"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "list", " ", "of", " ", "the", " ", "names", " ", "of", " ", "gen", " ", 
   "data", " ", "MACCs", " ", "key", " ", "datasets"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977902116394377`*^9, 3.7977902223723288`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"6d7ba03a-7bbc-4c66-a8d4-7e3f088162fd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCsList", "=", 
   RowBox[{"{", 
    RowBox[{
    "genDataMACCsA1", ",", "genDataMACCsA2", ",", "genDataMACCsA3", ",", 
     "genDataMACCsA4", ",", "genDataMACCsA5", ",", "genDataMACCsA6", ",", 
     "genDataMACCsA7", ",", "genDataMACCsA8", ",", "genDataMACCsA9", ",", 
     "genDataMACCsA10", ",", "genDataMACCsA11", ",", "genDataMACCsA12", ",", 
     "genDataMACCsA13", ",", "genDataMACCsA14", ",", "genDataMACCsA15", ",", 
     "genDataMACCsA16", ",", "genDataMACCsA17", ",", "genDataMACCsA18", ",", 
     "genDataMACCsA19"}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797789827905715*^9, 3.797789876863767*^9}, {
  3.7977900907871294`*^9, 3.7977900914457607`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"4c98e6ea-5ada-45cf-90b8-baedc0a2120e"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "generates", " ", "separate", " ", "generated", " ", "sampling", " ", 
   "datasets", " ", "for", " ", "each", " ", "amine", " ", "with", " ", 
   "MACCs", " ", "descriptors"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.79779017762912*^9, 3.7977902016774435`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"8ad2ff13-670a-4e39-9fe7-3d071b5cef64"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "genDataMACCsA1", ",", "genDataMACCsA2", ",", "genDataMACCsA3", ",", 
     "genDataMACCsA4", ",", "genDataMACCsA5", ",", "genDataMACCsA6", ",", 
     "genDataMACCsA7", ",", "genDataMACCsA8", ",", "genDataMACCsA9", ",", 
     "genDataMACCsA10", ",", "genDataMACCsA11", ",", "genDataMACCsA12", ",", 
     "genDataMACCsA13", ",", "genDataMACCsA14", ",", "genDataMACCsA15", ",", 
     "genDataMACCsA16", ",", "genDataMACCsA17", ",", "genDataMACCsA18", ",", 
     "genDataMACCsA19"}], "}"}], "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"amineRedMACCsAssoc", "[", 
           RowBox[{"smiles", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
       RowBox[{"Normal", "[", "genDataRaw", "]"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "smiles", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977893833120947`*^9, 3.797789409895822*^9}, {
  3.7977899980614743`*^9, 3.797789999643379*^9}, {3.797790893144055*^9, 
  3.7977909191332893`*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"af50c4bb-b242-4e83-bf20-30e41bce70fb"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "each", " ", "smiles", " ", "string", " ", 
   "and", " ", "its", " ", "generated", " ", "sampling", " ", "dataset", " ", 
   "with", " ", "maccs", " ", "decriptors"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977901550150166`*^9, 3.7977901688104553`*^9}, {
  3.797791210847643*^9, 3.797791212053918*^9}, {3.7977977439748707`*^9, 
  3.7977977463800936`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"b482bfa4-0498-44a1-9cdd-8fbeef50337d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataMACCsSAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "genDataMACCsList"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977899026079407`*^9, 3.7977899181563168`*^9}, 
   3.7977899684040127`*^9, {3.797790102989602*^9, 3.7977901304155207`*^9}, {
   3.7977912140535975`*^9, 3.797791225082279*^9}, {3.797797748981144*^9, 
   3.797797764176195*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"9ec13e57-9d8c-455b-bef5-03c5a8970d98"]
}, Closed]],

Cell[CellGroupData[{

Cell["One Hot Encoding", "Subsection",
 CellChangeTimes->{{3.7977905195781918`*^9, 
  3.7977905234438753`*^9}},ExpressionUUID->"068b839e-ef7d-4757-b02b-\
525a6c8b7004"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
   "one", " ", "hot", " ", "encode", " ", "for", " ", "each", " ", "amine"}], 
   ";", " ", 
   RowBox[{
   "enc", " ", "turns", " ", "True", " ", "or", " ", "False", " ", "to", " ", 
    "1", " ", "or", " ", "0"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948659943854885`*^9, 3.794866015501851*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"869be5ff-a142-4be1-adaf-7bbbf3aea2e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"enc", "=", 
  RowBox[{"NetEncoder", "[", "\"\<Boolean\>\"", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7948651781564693`*^9, 3.794865179126934*^9}, {
  3.7948653553328924`*^9, 3.7948653589806294`*^9}, {3.7948654716834154`*^9, 
  3.794865521904889*^9}, {3.7948655533867555`*^9, 3.794865554374774*^9}, {
  3.7948655907751646`*^9, 3.79486559244794*^9}, {3.7948657221804185`*^9, 
  3.7948657249116125`*^9}, {3.79486576204962*^9, 3.7948657656069517`*^9}, {
  3.7948658033034306`*^9, 3.794865854323888*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"94c95d89-45ac-4e29-888e-33fa85499256"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Boolean\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Boolean\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7948658545894423`*^9, 3.7953467863934927`*^9, 
  3.797790576212371*^9, 3.797797635194351*^9, 3.7978055627008457`*^9, 
  3.798548185981921*^9, 3.798548564766074*^9, 3.804601452911669*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"9cb93910-2449-4ac9-b5d6-e1eb016e010e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "create", " ", "True", " ", "and", " ", "False", " ", "lists", " ", "for", 
   " ", "each", " ", "amine"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7948661471398582`*^9, 3.794866156451421*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"2a9c9826-8f21-4016-b112-b83d0918bd87"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"amineTandF", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"smiles", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", 
      RowBox[{"smiles", "[", 
       RowBox[{"[", "j", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "19"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1and0", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"enc", "[", "#", "]"}], "&"}], "/@", "amineTandF"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1and0Assoc", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"smiles", "[", 
         RowBox[{"[", "m", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{
        RowBox[{"amine1and0", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "[", 
        RowBox[{"[", "m", "]"}], "]"}]}], " ", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "19"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amine1HotAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"smiles", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{"amine1and0Assoc", "[", 
        RowBox[{"[", "n", "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "19"}], "}"}]}], "]"}], "|>"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.794866185026414*^9, 3.794866559763882*^9}, {
  3.7948666019431486`*^9, 3.794866639807707*^9}, {3.794867330970943*^9, 
  3.7948673631276274`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"fc5145b5-b021-4df8-a125-31a0d17e2af1"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "list", " ", "of", " ", "gen", " ", "data", " ", "one", " ", "hot", " ", 
   "encoded", " ", "for", " ", "each", " ", "amine"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977911593124084`*^9, 3.7977911683431816`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"1ec5dd86-f8fc-407d-9996-6da5b7a01c7e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataOheList", "=", 
   RowBox[{"{", 
    RowBox[{
    "genDataOheA1", ",", "genDataOheA2", ",", "genDataOheA3", ",", 
     "genDataOheA4", ",", "genDataOheA5", ",", "genDataOheA6", ",", 
     "genDataOheA7", ",", "genDataOheA8", ",", "genDataOheA9", ",", 
     "genDataOheA10", ",", "genDataOheA11", ",", "genDataOheA12", ",", 
     "genDataOheA13", ",", "genDataOheA14", ",", "genDataOheA15", ",", 
     "genDataOheA16", ",", "genDataOheA17", ",", "genDataOheA18", ",", 
     "genDataOheA19"}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977911030695877`*^9, 3.7977911077625537`*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"4a3c9506-da6d-4b8b-8d78-2a2ac1cb23fa"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "generated", " ", "sampling", " ", "datasets", " ", "for", " ", "each", " ",
    "amine", " ", "one", " ", "hot", " ", "encoded"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7977911708534155`*^9, 3.797791182773553*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"cff34f74-e208-467a-b271-d20a3350ee09"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "genDataOheA1", ",", "genDataOheA2", ",", "genDataOheA3", ",", 
     "genDataOheA4", ",", "genDataOheA5", ",", "genDataOheA6", ",", 
     "genDataOheA7", ",", "genDataOheA8", ",", "genDataOheA9", ",", 
     "genDataOheA10", ",", "genDataOheA11", ",", "genDataOheA12", ",", 
     "genDataOheA13", ",", "genDataOheA14", ",", "genDataOheA15", ",", 
     "genDataOheA16", ",", "genDataOheA17", ",", "genDataOheA18", ",", 
     "genDataOheA19"}], "}"}], "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"Association", "@", 
           RowBox[{"amine1HotAssoc", "[", 
            RowBox[{"smiles", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", "#"}], "]"}], 
        "&"}], "/@", 
       RowBox[{"Normal", "[", "genDataRaw", "]"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "smiles", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797790761633565*^9, 3.797790770993244*^9}, {
  3.797790993063525*^9, 3.797791094142624*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"2744670b-abb7-4077-9fa1-cbbb378e8321"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "association", " ", "of", " ", "each", " ", "smiles", " ", "string", " ", 
   "and", " ", "its", " ", "generated", " ", "sampling", " ", "dataset", " ", 
   "with", " ", "one", " ", "hot", " ", "encoded", " ", "decriptors"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7977901550150166`*^9, 3.7977901688104553`*^9}, {
  3.797791210847643*^9, 3.797791212053918*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"4d4329c7-3236-4974-bf0c-4fe89b45ec52"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genDataOheSAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"smiles", ",", "genDataOheList"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977899026079407`*^9, 3.7977899181563168`*^9}, 
   3.7977899684040127`*^9, {3.797790102989602*^9, 3.7977901304155207`*^9}, {
   3.7977912140535975`*^9, 3.797791225082279*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"98a20e72-66e4-4e68-b924-988b83dc81f8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Active Learning Sampling ", "Section",
 CellChangeTimes->{{3.7943150232371006`*^9, 
  3.794315027733412*^9}},ExpressionUUID->"ff316ade-1da8-4166-87d3-\
db2b1221732e"],

Cell[CellGroupData[{

Cell["Do Sampling ", "Subsection",
 CellChangeTimes->{{3.7977913209215913`*^9, 
  3.7977913228027563`*^9}},ExpressionUUID->"f7a0b7cf-2955-4056-813f-\
2c1eaf2ee634"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "want", " ", "to", " ", "keep", " ", "this", " ", "outside", " ", "of", " ",
    "a", " ", "module", " ", "to", " ", "allow", " ", "for", " ", "variables",
    " ", "to", " ", "be", " ", 
   RowBox[{"utilized", "?"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.797791466322353*^9, 3.797791478592635*^9}},
 CellLabel->
  "In[244]:=",ExpressionUUID->"f1262731-ed37-4b08-b8c5-b234e1afd980"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{
  "sampleDataML", ",", "classProbs", ",", "classProbsValues", ",", 
   "classProbsValuesF", ",", "classProbsValuesT", ",", "classEntropies", ",", 
   "softMaxclass", ",", "choice", ",", "probs", ",", "sampleDS"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7977828309245634`*^9, 3.797782850049828*^9}, {
  3.7977923825151615`*^9, 3.797792393571061*^9}},
 CellLabel->
  "In[245]:=",ExpressionUUID->"d23d8295-220b-4f4c-9fb1-dd8402711eff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{
   "classifier_ClassifierFunction", ",", "sampleDS_Dataset", ",", 
    "goal_String", ",", "\[Beta]_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sampleDataML", ",", "classProbs", ",", "classProbsValues", ",", 
      "classProbsValuesF", ",", "classProbsValuesT", ",", "classEntropies", 
      ",", "softMaxclass", ",", "choice", ",", "probs", ",", "out"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"generate", " ", "sampling", " ", "weights"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sampleDataML", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"sampleDS", "[", 
        RowBox[{"All", ",", 
         RowBox[{"Keys", "[", 
          RowBox[{"Information", "[", 
           RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}], 
          "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"classProbs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{"sampleDataML", ",", "\"\<Probabilities\>\""}], "]"}]}], ";", 
     "\n", 
     RowBox[{"classProbsValues", "=", 
      RowBox[{"classProbs", "//", "Values"}]}], ";", "\n", 
     RowBox[{"classProbsValuesF", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classProbsValuesT", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classEntropies", "=", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<explore\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"#1", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
              RowBox[{"#2", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<exploit\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", ">", "0.5"}], ",", 
             RowBox[{
              RowBox[{"-", "\[Beta]"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}]}], "]"}], 
           "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\n", 
     RowBox[{"softMaxclass", "=", 
      RowBox[{
       RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classEntropies", "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Makes", " ", "one", " ", "choice"}], ",", " ", 
       RowBox[{
       "gets", " ", "the", " ", "probs", " ", "and", " ", "outputs", " ", "a",
         " ", "dataset", " ", "and", " ", "table"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"choice", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{
          RowBox[{"softMaxclass", "\[Rule]", 
           RowBox[{"Normal", "[", "sampleDS", "]"}]}], ",", "1"}], "]"}], 
        "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"probs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "choice", "]"}], ",", 
        "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"{", 
       RowBox[{"choice", ",", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "}"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<False Probability\>\"", ",", "\"\<True Probability\>\""}], 
              "}"}]}], "}"}]}]}], "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977825106654043`*^9, 3.7977826808436165`*^9}, {
   3.7977827894281693`*^9, 3.7977828251004467`*^9}, {3.797782926008704*^9, 
   3.7977829519301214`*^9}, {3.7977829828717723`*^9, 
   3.7977830121078405`*^9}, {3.7977835603765044`*^9, 
   3.7977835606773367`*^9}, {3.797783651368411*^9, 3.7977836530448356`*^9}, {
   3.7977837641872344`*^9, 3.7977837648755417`*^9}, {3.7977837950188437`*^9, 
   3.797783897570631*^9}, {3.797791535613364*^9, 3.797791549633828*^9}, {
   3.79779219983659*^9, 3.797792203713299*^9}, {3.7977922359268303`*^9, 
   3.79779224044201*^9}, {3.7977924951041236`*^9, 3.7977924976437025`*^9}, {
   3.797792638685742*^9, 3.797792640412073*^9}, {3.7977929213116045`*^9, 
   3.7977929214426565`*^9}, {3.797798139288637*^9, 3.797798139889425*^9}, {
   3.7977982506559677`*^9, 3.797798258691498*^9}, 3.7978057594612546`*^9, {
   3.7978058169272633`*^9, 3.7978058283093843`*^9}, {3.7978060501541615`*^9, 
   3.797806053188048*^9}, {3.7981686440436573`*^9, 3.7981686452769604`*^9}, {
   3.798548256056916*^9, 3.798548259830098*^9}, {3.798549918231038*^9, 
   3.798549918714188*^9}, {3.804602625159012*^9, 3.8046027153504305`*^9}, {
   3.804608316927*^9, 3.8046083667520056`*^9}, {3.80460933862428*^9, 
   3.8046094318898516`*^9}, 3.804610106547855*^9, {3.804610265806364*^9, 
   3.8046102850887704`*^9}, {3.8046103210313463`*^9, 3.804610328744605*^9}, {
   3.8046103658261967`*^9, 3.80461043059576*^9}, {3.8046104667665906`*^9, 
   3.804610549291696*^9}, {3.804611155063016*^9, 3.8046111671170683`*^9}, {
   3.8046112353633957`*^9, 3.8046112452174144`*^9}, {3.8046112873363523`*^9, 
   3.804611362355996*^9}},
 CellLabel->
  "In[279]:=",ExpressionUUID->"714f7b35-15c8-4b5f-b816-242c5349c784"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{
   "classifier_ClassifierFunction", ",", "amine_String", ",", 
    "descriptor_String", ",", "goal_String", ",", "\[Beta]_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sampleDS", ",", "sampleDataML", ",", "classProbs", ",", 
      "classProbsValues", ",", "classProbsValuesF", ",", "classProbsValuesT", 
      ",", "classEntropies", ",", "softMaxclass", ",", "choice", ",", "probs",
       ",", "out"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{"ToString", "@", "descriptor"}], ",", "\"\<maccs\>\"", ",", 
         RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"sampleDS", "=", 
        RowBox[{"genDataMACCsSAssoc", "[", "amine", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{"ToString", "@", "descriptor"}], ",", "\"\<one hot\>\"", ",", 
         RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"sampleDS", "=", 
        RowBox[{"genDataOheSAssoc", "[", "amine", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"sampleDataML", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"sampleDS", "[", 
        RowBox[{"All", ",", 
         RowBox[{"Keys", "[", 
          RowBox[{"Information", "[", 
           RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}], 
          "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"classProbs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{"sampleDataML", ",", "\"\<Probabilities\>\""}], "]"}]}], ";", 
     "\n", 
     RowBox[{"classProbsValues", "=", 
      RowBox[{"classProbs", "//", "Values"}]}], ";", "\n", 
     RowBox[{"classProbsValuesF", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"1", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classProbsValuesT", "=", 
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"classProbsValues", "//", "Flatten"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"classProbsValues", "//", "Flatten"}], "]"}], ",", "2"}], 
         "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"classEntropies", "=", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<explore\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"#1", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
              RowBox[{"#2", "*", 
               RowBox[{"Log", "[", 
                RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"ToString", "@", "goal"}], ",", "\"\<exploit\>\"", ",", 
          RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", ">", "0.5"}], ",", 
             RowBox[{
              RowBox[{"-", "\[Beta]"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#1"}], "]"}]}], "+", 
                RowBox[{"#2", "*", 
                 RowBox[{"Log", "[", 
                  RowBox[{"2", ",", "#2"}], "]"}]}]}], ")"}]}]}], "]"}], 
           "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"classProbsValuesF", ",", "classProbsValuesT"}], "}"}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\n", 
     RowBox[{"softMaxclass", "=", 
      RowBox[{
       RowBox[{"SoftmaxLayer", "[", "]"}], "[", "classEntropies", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"choice", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{
          RowBox[{"softMaxclass", "\[Rule]", 
           RowBox[{"Normal", "[", "sampleDS", "]"}]}], ",", "1"}], "]"}], 
        "]"}], "//", "Dataset"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"probs", "=", 
      RowBox[{"classifier", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "choice", "]"}], ",", 
        "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"{", 
       RowBox[{"choice", ",", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Values", "[", "probs", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "}"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<False Probability\>\"", ",", "\"\<True Probability\>\""}], 
              "}"}]}], "}"}]}]}], "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7977825106654043`*^9, 3.7977826808436165`*^9}, {
   3.7977827894281693`*^9, 3.7977828251004467`*^9}, {3.797782926008704*^9, 
   3.7977829519301214`*^9}, {3.7977829828717723`*^9, 
   3.7977830121078405`*^9}, {3.7977835603765044`*^9, 
   3.7977835606773367`*^9}, {3.797783651368411*^9, 3.7977836530448356`*^9}, {
   3.7977837641872344`*^9, 3.7977837648755417`*^9}, {3.7977837950188437`*^9, 
   3.797783897570631*^9}, {3.797791535613364*^9, 3.797791549633828*^9}, {
   3.7977916315682526`*^9, 3.797791691174432*^9}, {3.7977918077122416`*^9, 
   3.7977918131341486`*^9}, {3.7977918529721518`*^9, 3.7977918662202396`*^9}, 
   3.797792075301162*^9, 3.797792501973387*^9, {3.797792677783868*^9, 
   3.797792684883569*^9}, {3.7977981417225294`*^9, 3.797798143106787*^9}, {
   3.7977982403341837`*^9, 3.7977982407361126`*^9}, 3.797805753711633*^9, {
   3.7978057850016193`*^9, 3.7978058043967466`*^9}, {3.797806043636631*^9, 
   3.7978060462566233`*^9}, 3.798168586138627*^9, {3.798168636159231*^9, 
   3.798168637251999*^9}, {3.798548263477145*^9, 3.798548267501492*^9}, {
   3.798549912126979*^9, 3.798549912418627*^9}, {3.8046027236127243`*^9, 
   3.8046027686071224`*^9}, {3.804611423709182*^9, 3.8046114358734813`*^9}, {
   3.8046114988120017`*^9, 3.804611520110611*^9}},
 CellLabel->
  "In[281]:=",ExpressionUUID->"4ea7f9a3-c2dc-4622-822b-995b537a3630"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"can", " ", "sample", " ", "with", " ", "model"}], ",", " ", 
   "amine", ",", " ", 
   RowBox[{
   "and", " ", "descriptor", " ", "type", " ", "\[IndentingNewLine]", 
    "parses", " ", "which", " ", "sampling", " ", "dataset", " ", "is", " ", 
    "needed", " ", "based", " ", "on", " ", "amine"}]}], " ", 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.7985499538758097`*^9, 
  3.798549982151496*^9}},ExpressionUUID->"70f47674-0d3b-45c7-868b-\
5915de87563c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sample", "[", 
  RowBox[{
  "classErAllMaccs", ",", "\"\<NCCN\>\"", ",", "\"\<maccs\>\"", ",", 
   "\"\<explore\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7977982129158344`*^9, 3.7977982297112384`*^9}, {
  3.797798270010337*^9, 3.797798290540391*^9}, {3.8046115425666695`*^9, 
  3.8046115444817557`*^9}},
 CellLabel->
  "In[282]:=",ExpressionUUID->"d6f63ead-e514-44c3-aa4e-d8a96565e336"],

Cell[BoxData[
 RowBox[{"sample", "[", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["ClassifierFunction",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", "Boolean",
                     "Numerical", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "False", "True"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "57", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Boolean\"",
                     ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Numerical\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Numerical", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Numerical", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Numerical", "Boolean", "Boolean", "Numerical", "Boolean",
                     "Numerical", "Boolean", "Boolean", "Boolean"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "False", "True"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                   "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["110", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    ClassifierFunction[
     Association[
     "ExampleNumber" -> 110, "ClassNumber" -> 2, "Input" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association[
            "Ln Mole Fraction" -> Association["Type" -> "Numerical"], 
             "H2SeO4 Mole Fraction" -> Association["Type" -> "Numerical"], 
             "Sodium Oxalate Mole Fraction" -> 
             Association["Type" -> "Numerical"], "Amine Mole Fraction" -> 
             Association["Type" -> "Numerical"], "H2O Mole Fraction" -> 
             Association["Type" -> "Numerical"], "pH" -> 
             Association["Type" -> "Numerical"], "maccs53" -> 
             Association["Type" -> "Boolean"], "maccs54" -> 
             Association["Type" -> "Boolean"], "maccs62" -> 
             Association["Type" -> "Boolean"], "maccs65" -> 
             Association["Type" -> "Numerical"], "maccs74" -> 
             Association["Type" -> "Boolean"], "maccs79" -> 
             Association["Type" -> "Boolean"], "maccs80" -> 
             Association["Type" -> "Boolean"], "maccs82" -> 
             Association["Type" -> "Boolean"], "maccs83" -> 
             Association["Type" -> "Boolean"], "maccs84" -> 
             Association["Type" -> "Boolean"], "maccs85" -> 
             Association["Type" -> "Boolean"], "maccs86" -> 
             Association["Type" -> "Boolean"], "maccs90" -> 
             Association["Type" -> "Boolean"], "maccs91" -> 
             Association["Type" -> "Boolean"], "maccs93" -> 
             Association["Type" -> "Boolean"], "maccs96" -> 
             Association["Type" -> "Boolean"], "maccs98" -> 
             Association["Type" -> "Boolean"], "maccs100" -> 
             Association["Type" -> "Numerical"], "maccs103" -> 
             Association["Type" -> "Boolean"], "maccs104" -> 
             Association["Type" -> "Boolean"], "maccs105" -> 
             Association["Type" -> "Boolean"], "maccs108" -> 
             Association["Type" -> "Boolean"], "maccs111" -> 
             Association["Type" -> "Numerical"], "maccs115" -> 
             Association["Type" -> "Boolean"], "maccs116" -> 
             Association["Type" -> "Boolean"], "maccs118" -> 
             Association["Type" -> "Boolean"], "maccs120" -> 
             Association["Type" -> "Boolean"], "maccs121" -> 
             Association["Type" -> "Boolean"], "maccs122" -> 
             Association["Type" -> "Boolean"], "maccs128" -> 
             Association["Type" -> "Boolean"], "maccs129" -> 
             Association["Type" -> "Boolean"], "maccs131" -> 
             Association["Type" -> "Boolean"], "maccs133" -> 
             Association["Type" -> "Boolean"], "maccs134" -> 
             Association["Type" -> "Boolean"], "maccs137" -> 
             Association["Type" -> "Boolean"], "maccs138" -> 
             Association["Type" -> "Numerical"], "maccs141" -> 
             Association["Type" -> "Boolean"], "maccs145" -> 
             Association["Type" -> "Boolean"], "maccs147" -> 
             Association["Type" -> "Boolean"], "maccs148" -> 
             Association["Type" -> "Boolean"], "maccs149" -> 
             Association["Type" -> "Boolean"], "maccs151" -> 
             Association["Type" -> "Boolean"], "maccs153" -> 
             Association["Type" -> "Numerical"], "maccs155" -> 
             Association["Type" -> "Boolean"], "maccs156" -> 
             Association["Type" -> "Boolean"], "maccs158" -> 
             Association["Type" -> "Numerical"], "maccs160" -> 
             Association["Type" -> "Boolean"], "maccs162" -> 
             Association["Type" -> "Numerical"], "maccs163" -> 
             Association["Type" -> "Boolean"], "maccs165" -> 
             Association["Type" -> "Boolean"], "maccs166" -> 
             Association["Type" -> "Boolean"]], "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f43" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f50" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f53" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f55" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
             Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
           MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["FromNamedFeatures", 
                 Association[
                 "FeatureNames" -> {
                   "Ln Mole Fraction", "H2SeO4 Mole Fraction", 
                    "Sodium Oxalate Mole Fraction", "Amine Mole Fraction", 
                    "H2O Mole Fraction", "pH", "maccs53", "maccs54", 
                    "maccs62", "maccs65", "maccs74", "maccs79", "maccs80", 
                    "maccs82", "maccs83", "maccs84", "maccs85", "maccs86", 
                    "maccs90", "maccs91", "maccs93", "maccs96", "maccs98", 
                    "maccs100", "maccs103", "maccs104", "maccs105", 
                    "maccs108", "maccs111", "maccs115", "maccs116", 
                    "maccs118", "maccs120", "maccs121", "maccs122", 
                    "maccs128", "maccs129", "maccs131", "maccs133", 
                    "maccs134", "maccs137", "maccs138", "maccs141", 
                    "maccs145", "maccs147", "maccs148", "maccs149", 
                    "maccs151", "maccs153", "maccs155", "maccs156", 
                    "maccs158", "maccs160", "maccs162", "maccs163", 
                    "maccs165", "maccs166"}]], 
                MachineLearning`MLProcessor["Transpose", 
                 Association["FeatureNumber" -> 57]], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {
                   "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Boolean", "Boolean", "Boolean",
                     "Numerical", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Numerical", 
                    "Boolean", "Boolean", "Numerical", "Boolean", "Numerical",
                     "Boolean", "Boolean", "Boolean"}, 
                  "FeatureKeys" -> {
                   "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", 
                    "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", 
                    "f34", "f35", "f36", "f37", "f38", "f39", "f40", "f41", 
                    "f42", "f43", "f44", "f45", "f46", "f47", "f48", "f49", 
                    "f50", "f51", "f52", "f53", "f54", "f55", "f56", "f57"}, 
                  "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                  Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f42" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f49" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f52" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f54" -> 
             Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
             Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
             Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
           Association[
            "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
             Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
           "Processors" -> {
             MachineLearning`MLProcessor["ToVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f10" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f24" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f29" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f42" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f49" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f52" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                 "f54" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 13]], 
               "Version" -> {12.1, 0}, "ID" -> 3843819132712164175]], 
             MachineLearning`MLProcessor["NumericalVectorStandardize", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 13]], 
               "Mean" -> {0.0027125744939508526`, 0.03661327540196216, 
                0.0013702662912860152`, 0.005885270631865775, 
                0.9534186131809349, 2.436363636363636, 0., 1., 1., 1., 1., 1.,
                 0.}, "StandardDeviation" -> {0.0008922678396605211, 
                0.007732101328696449, 0.0011033857541175838`, 
                0.0028718051216307847`, 0.006045733366698505, 
                1.8267072847427503`, 1., 1., 1., 1., 1., 1., 1.}, 
               "Version" -> {12.1, 0}, "ID" -> 841287822409083141, "Output" -> 
               Association[
                "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 13]]]], 
             MachineLearning`MLProcessor["ToVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
                 Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
               Association[
                "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30\
f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                 Association["Type" -> "BooleanVector", "Weight" -> 44]], 
               "Version" -> {12.1, 0}, "ID" -> 7898357694074848566]], 
             MachineLearning`MLProcessor["ConformBooleanVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30\
f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                 Association["Type" -> "BooleanVector", "Weight" -> 44]], 
               "Version" -> {12.1, 0}, "ID" -> 8596124423182320670, "Output" -> 
               Association[
                "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30\
f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                 Association["Type" -> "BooleanVector", "Weight" -> 44]]]], 
             MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30\
f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                 Association["Type" -> "BooleanVector", "Weight" -> 44]], 
               "Version" -> {12.1, 0}, "ID" -> 8693524375696191030, "Output" -> 
               Association[
                "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30\
f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 44]]]], 
             MachineLearning`MLProcessor["MergeVectors", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "(f1f2f3f4f5f6f10f24f29f42f49f52f54)" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 13], 
                 "(f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f3\
0f31f32f33f34f35f36f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57)" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 44]], 
               "Spans" -> {
                 Span[1, 13], 
                 Span[14, 57]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
               Association[
                "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                 Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 0},
                "ID" -> 102437435096265169]], 
             MachineLearning`MLProcessor["ImputeMissing", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                 Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCwZICBD/aj9NCmAfWNRVs=
                    "], "Type" -> "NumericalVector"]], 
               "Imputer" -> (DimensionReducerFunction[
                 Association[
                 "ExampleNumber" -> 110, "Imputer" -> 
                  MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "Method" -> "Naive", "VectorLength" -> 57, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                  MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 57, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                  MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 57]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                  MachineLearning`MLProcessor["Identity"], "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                  MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 14]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                  Association["Matrix" -> CompressedData["
1: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
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 14, "Method" -> "Linear"], 
                  "PerformanceGoal" -> Automatic, "Invertibility" -> 
                  "Approximate", "Log" -> 
                  Association[
                   "TrainingTime" -> 0.010838, "MaxTrainingMemory" -> 205344, 
                    "DataMemory" -> 51312, "FunctionMemory" -> 33208, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 7, 24, 13, 30, 3.1094623`8.245260276649747}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                 PerformanceGoal -> "Quality"]& ), "Method" -> 
               "DimensionReduction", "VectorLength" -> 57, "Output" -> 
               Association[
                "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
               "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
               7259735455847470961]], 
             MachineLearning`MLProcessor["Standardize", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
               "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOKLruKxJRev2AAJIOuYza4Xi7r1dnXsgdBHbNq35kf8
rtKy5fw0RcGfc5UNA5kAbHzJQXuweW1P7ecJPdF0nDfJ3g1kvetyKP3cHqbO
EazgHVTdJntjMHhs/1b62r7Et6vtwcrF79rPBIOb9hD3P4HK74brg5h7Hc5H
NbfJHuytT1ug5p2F0yBTpK/B1F2Cmnsbbj+Mv5yl0mvC8icY7oXRMHUwf8Ls
hZkPMw8ifghuDsw/9zd8482+fwHuLph/YObC7AEAr7fCow==
                "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGCwBOJb/0Hgvf1TKM3EAAIf7H9A+epP/oLp/1A+A1SeVDrq
6Cm/id+u2j+Y/fPmSvZ79g5ry2eISh20r+lMOd658pS9aNnxFeca7sDVZU2Z
zBggeNbeuvrR5t3zLth7Zdx+UxN13z4DKi7GUSclcu8+XDykcd/94pP37Evn
d985/PkyXB9MHMaHmZtXZSOo6rPDXvFWfNyyrov2oUW7LnNfugWnD5zYzPj5
63GofXftOx4fK0nci7Afxje517Nk89x7GO6F0TB1MH/C7EU1/6z9l+j2NYET
rsHNgbn7y4r3R+4Y3YG7CyYOMxdmDwATV+fV
                "], "Output" -> 
               Association[
                "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))" -> 
                 Association["Type" -> "NumericalVector", "Weight" -> 57.]], 
               "Version" -> {12.1, 0}, "ID" -> 2367778904976982516]]}, 
           "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
           "Missing" -> "Imputed"]]], "Output" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                  "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                  Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["ToVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], 
               "Version" -> {12.1, 0}, "ID" -> 6995767557603505475]], 
             MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                 Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
               "Version" -> {12.1, 0}, "ID" -> 2734911975669049395, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["FromVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1, 
                   "SetSize" -> {2}]], "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Version" -> {12.1, 0}, "ID" -> 2109313300824996630]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
               "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
               False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect",
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
        Association[False -> 0.3482142857142857, True -> 0.6517857142857143]],
       "Prior" -> Automatic, "Utility" -> 
      SparseArray[
       Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
      "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
      Automatic, "BatchProcessing" -> Automatic, "Model" -> 
      Association[
       "NeighborsFunction" -> 
        MachineLearning`PackageScope`NeighborsFunction[
         "BruteForce", {CompressedData["
1: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
           "], CompressedData["
1:eJwN0ntPUwcAh+EaQQaZmSJzNx09HHp6oYF2LaWI1t8AC9KSVQJIxyC2Edxg
uhtSDaWUgBYHS0BQakLKwA4HGVEGrC4UqbNEDVIodcOBSkMHy5a0BMkIt8L4
4/0CT15C/UVGwQ4ajXZuO55/8uOgY0LMJo4JijhChH27gvVqClN1qit+tgwh
9DO5X9+XgjfPsh20i9Dq/GVOcJZCvbYhhp5NQtfBzHus5SFdFX6MvHUY/vZZ
yjPNwuDi6IUBCx0lXH/hliEemYsPDNkfETh19/N3jsTF469DenX6bT50Qfmf
at1sGKKfphmHKEz7fDHR/zJQlxS43vU3C02Koo29G7EQhwxlFkg54OtDCeJh
BKx8bL10MvFHY/odq4mE68ID24sFBlp3T52gR2XglWQtxLmTjX98cnugnIRi
boKZp1Hi9J4Z92mJCDb36wFqUzx+LqtYyjeSsKhHZ72DIqxMHvdJbxLoU7h8
wgkBJvaY21r6SfzpWFjdmycD7VVCXYmJgYe2BKvlogzGol3RXbUEjMP69i9T
GFA8uWd/bUaEnKvdAQt2JS6xunNrho+jxr3Gumxjw1MmWXftFGL/++KKZz1C
1NcrfLx1Ah9YnJe00RTCxYLmfRoSNdc6eP/VMTE+xwgofZePc6oPbdxABszl
l20GnRCcNkfSRJgMvjBXd1UWE+WxkqXvb7BxoMyT6dDKwE1fkal7SDh3W7NC
x0gUvWVv6axmgdNlriybj0Sv7c2jKbUkekc6nHX0ODhbb8u/ioqE95qhyjVJ
4fyWqrF5QIlxEzt3upiPO/ckA9flHNwwnfGOmCNwgKFf8vp4yP6t0lSqiUBk
xlwnTcmBx294MRhFwuEStcUOFWL5sKw6uZxE10W1+NGtDLDOxiTmSOKQFMyS
N1jYeFmbr9gQ8PBeTfHzqd4oVDQ9+0EScQgrN+f3Ga/GYmhMpNvMEqP0ZOpw
zranuefUSEsohSO04THHjxQ+8QvaNS0E7ldxt5qX09Dwu/0nTwkPTXFa/ZpC
iG/CTWFMJYGghsmjwVVszCvsqaPFDNiVREFykxKPN0+wGlc5cI/vcPRmM1Bi
O7k400lhQZXzduYqF0m/aryPzqfBsEkl9kVykNxq5z7ZlYKpYBcjlE3gbkKZ
tOeN7V83N+SJOhnGlgMOSvsiIXyq7d9fKQO930o+/4zC9bZU5neFTPwPYwKK
wQ==
           "]}], "NeighborsNumber" -> 5, 
        "ClassPriors" -> {0.3482142857142857, 0.6517857142857143}, 
        "TrainingOutput" -> 
        RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1,
           2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 
          2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2,
           2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 
          2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
           2, 1, 1, 2, 2, 2}], "DistributionSmoothing" -> 0.5, "Processor" -> 
        MachineLearning`MLProcessor["FirstValues", 
          Association[
          "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 57.],
            "Key" -> 
           "((f1f2f3f4f5f6f10f24f29f42f49f52f54)(\
f7f8f9f11f12f13f14f15f16f17f18f19f20f21f22f23f25f26f27f28f30f31f32f33f34f35f36\
f37f38f39f40f41f43f44f45f46f47f48f50f51f53f55f56f57))", "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Method" -> "NearestNeighbors", "PostProcessor" -> 
        MachineLearning`MLProcessor["Identity"], "Options" -> 
        Association[
         "NeighborsNumber" -> 
          Association["Value" -> 5, "Options" -> Association[]], 
          "DistributionSmoothing" -> 
          Association["Value" -> 0.5, "Options" -> Association[]], 
          "NearestMethod" -> 
          Association["Value" -> "Scan", "Options" -> Association[]]]], 
      "TrainingInformation" -> 
      Association[
       "PanelCell" -> CellObject[15825], "TrainingFunction" -> Classify, 
        "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
        "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
        0.2829928`6.903320379691474, "LossName" -> "MeanCrossEntropy", 
        "BestModelInformation" -> Dataset[
          Association[
          "MeanCrossEntropy" -> 
           Around[0.6630300629157142, 0.031251911055319014`], "Accuracy" -> 
           Around[0.6408746146367451, 0.06985175830050416], "EvaluationTime" -> 
           0.00001325184643993859, "TestSize" -> 95, "ModelMemory" -> 13408, 
           "ModelUtility" -> -0.29163071980651223`, "TrainingSize" -> 15, 
           "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 73984, 
           "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
             Around[0.6630300629157142, 0.022098438232254908`]}, 
           "AccuracyHistory" -> {
             Around[0.6408746146367451, 0.0493926519720902]}, 
           "Configuration" -> {
            "NearestNeighbors", "NeighborsNumber" -> Automatic, 
             "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
           "FinalTrainingSize" -> 110], 
          
          TypeSystem`Struct[{
           "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
            "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
            "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
            "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Tuple[{
              TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType,
               TypeSystem`AnyType}], 
            TypeSystem`Atom[Integer]}], 
          Association["ID" -> 264209415243740]], "Configurations" -> Dataset[
          Association[
          Association[
            "Value" -> "NaiveBayes", "Options" -> 
             Association[
              "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[6.353706902127919, 1.3703720805094761`], "Accuracy" -> 
                Around[0.6304579479700784, 0.07025589306900139], 
                "EvaluationTime" -> 0.00041906017952999695`, "TestSize" -> 95,
                 "ModelMemory" -> 56336, 
                "ModelUtility" -> -2.5844633321655857`, "TrainingSize" -> 15, 
                "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                174120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[6.353706902127919, 0.968999390876968]}, 
                "AccuracyHistory" -> {
                  Around[0.6304579479700784, 0.04967841840740784]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00041906017952999695`, "MeanCrossEntropy" -> 
               Around[6.353706902127919, 1.3703720805094761`], "ModelMemory" -> 
               56336, "TrainingMemory" -> 174120, "TrainingTime" -> 
               0.05274961506170117], "Index" -> 1], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
               Association["Value" -> 0.1], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 2], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 15], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6916370843501094, 0.008851354117805741], "Accuracy" -> 
                Around[0.6408746146367451, 0.06985175830050416], 
                "EvaluationTime" -> 0.000016683086236432762`, "TestSize" -> 
                95, "ModelMemory" -> 20720, 
                "ModelUtility" -> -0.32704689351699534`, "TrainingSize" -> 15,
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                69456, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6916370843501094, 0.0062588525193839105`]}, 
                "AccuracyHistory" -> {
                  Around[0.6408746146367451, 0.0493926519720902]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.8970808755570837, 0.19787871003986512`], "Accuracy" -> 
                Around[0.5010418697881557, 0.15049692772910647`], 
                "EvaluationTime" -> 0.0002867987929455423, "TestSize" -> 22, 
                "ModelMemory" -> 119560, 
                "ModelUtility" -> -0.6277692810391342, "TrainingSize" -> 88, 
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                371096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.8970808755570837, 0.13992137772163518`]}, 
                "AccuracyHistory" -> {
                  Around[0.5010418697881557, 0.10641739814499294`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0002867987929455423, "MeanCrossEntropy" -> 
               Around[0.8970808755570837, 0.19787871003986512`], 
               "ModelMemory" -> 119560, "TrainingMemory" -> 371096, 
               "TrainingTime" -> 0.10322503774428209`], "Index" -> 2], 
           Association[
            "Value" -> "NearestNeighbors", "Options" -> 
             Association[
              "NeighborsNumber" -> Association["Value" -> Automatic], 
               "DistributionSmoothing" -> Association["Value" -> 0.5], 
               "NearestMethod" -> Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6630300629157142, 0.031251911055319014`], "Accuracy" -> 
                Around[0.6408746146367451, 0.06985175830050416], 
                "EvaluationTime" -> 0.00001325184643993859, "TestSize" -> 95, 
                "ModelMemory" -> 13408, 
                "ModelUtility" -> -0.29163071980651223`, "TrainingSize" -> 15,
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                73984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6630300629157142, 0.022098438232254908`]}, 
                "AccuracyHistory" -> {
                  Around[0.6408746146367451, 0.0493926519720902]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6909221944459606, 0.11500884084989826`], "Accuracy" -> 
                Around[0.6749549132664163, 0.14368460052805063`], 
                "EvaluationTime" -> 0.00004545454545454546, "TestSize" -> 22, 
                "ModelMemory" -> 48800, "ModelUtility" -> -0.3562122813075811,
                 "TrainingSize" -> 88, "TrainingTime" -> 0.01, 
                "TrainingMemory" -> 330528, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6909221944459606, 0.08132353126136747]}, 
                "AccuracyHistory" -> {
                  Around[0.6749549132664163, 0.10160035538546477`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00004545454545454546, "MeanCrossEntropy" -> 
               Around[0.6909221944459606, 0.11500884084989826`], 
               "ModelMemory" -> 48800, "TrainingMemory" -> 330528, 
               "TrainingTime" -> 0.017309573444801933`], "Index" -> 3], 
           Association[
            "Value" -> "DecisionTree", "Options" -> 
             Association[
              "DistributionSmoothing" -> Association["Value" -> 1], 
               "FeatureFraction" -> Association["Value" -> 1]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.9697429710695182, 0.16050384665976547`], "Accuracy" -> 
                Around[0.6096246146367451, 0.07096176357285101], 
                "EvaluationTime" -> 0.000021002761210198725`, "TestSize" -> 
                95, "ModelMemory" -> 5968, 
                "ModelUtility" -> -0.6950231443013098, "TrainingSize" -> 15, 
                "TrainingTime" -> 0.01, "TrainingMemory" -> 77416, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.9697429710695182, 0.11349335837964596`]}, 
                "AccuracyHistory" -> {
                  Around[0.6096246146367451, 0.05017754422731947]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[1.496035859354483, 0.4075001456002754], "Accuracy" -> 
                Around[0.4575636089185905, 0.14942705635897574`], 
                "EvaluationTime" -> 0.000022781237892148727`, "TestSize" -> 
                22, "ModelMemory" -> 6288, 
                "ModelUtility" -> -1.1490452431831752`, "TrainingSize" -> 88, 
                "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                161160, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[1.496035859354483, 0.2881461162884602]}, 
                "AccuracyHistory" -> {
                  Around[0.4575636089185905, 0.10566088484417616`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000022781237892148727`, 
               "MeanCrossEntropy" -> 
               Around[1.496035859354483, 0.4075001456002754], "ModelMemory" -> 
               6288, "TrainingMemory" -> 161160, "TrainingTime" -> 
               0.023848179529735836`], "Index" -> 4], 
           Association[
            "Value" -> "RandomForest", "Options" -> 
             Association[
              "FeatureFraction" -> Association["Value" -> Automatic], 
               "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
               Association["Value" -> Automatic], "DistributionSmoothing" -> 
               Association["Value" -> 0.5], "Implementation" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6670585337741283, 0.0208804694467081], "Accuracy" -> 
                Around[0.6512912813034117, 0.06941271239287487], 
                "EvaluationTime" -> 0.00008361349839202962, "TestSize" -> 95, 
                "ModelMemory" -> 97544, 
                "ModelUtility" -> -0.29456595133132357`, "TrainingSize" -> 15,
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                160664, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6670585337741283, 0.014764721540125814`]}, 
                "AccuracyHistory" -> {
                  Around[0.6512912813034117, 0.04908219963355333]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6688049968452939, 0.04878338910086194], "Accuracy" -> 
                Around[0.5879983915272861, 0.14934795303195378`], 
                "EvaluationTime" -> 0.00014373989364401725`, "TestSize" -> 22,
                 "ModelMemory" -> 98480, 
                "ModelUtility" -> -0.30542285857922435`, "TrainingSize" -> 88,
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                221024, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6688049968452939, 0.03449506524248139]}, 
                "AccuracyHistory" -> {
                  Around[0.5879983915272861, 0.10560495034522452`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00014373989364401725`, "MeanCrossEntropy" -> 
               Around[0.6688049968452939, 0.04878338910086194], "ModelMemory" -> 
               98480, "TrainingMemory" -> 221024, "TrainingTime" -> 
               0.0377968173892688], "Index" -> 5], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 0.00001], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[11.778099694062453`, 2.5281582707962307`], "Accuracy" -> 
                Around[0.5783746146367452, 0.07177176002370075], 
                "EvaluationTime" -> 0.000010526315789473684`, "TestSize" -> 
                95, "ModelMemory" -> 9560, 
                "ModelUtility" -> -3.2014576596366697`, "TrainingSize" -> 15, 
                "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                124184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[11.778099694062453`, 1.7876778571928706`]}, 
                "AccuracyHistory" -> {
                  Around[0.5783746146367452, 0.05075029821045236]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000010526315789473684`, 
               "MeanCrossEntropy" -> 
               Around[11.778099694062453`, 2.5281582707962307`], 
               "ModelMemory" -> 9560, "TrainingMemory" -> 124184, 
               "TrainingTime" -> 0.08360250581623441], "Index" -> 6], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 0.01], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[4.46697973491159, 0.9290152414448153], "Accuracy" -> 
                Around[0.557541281303412, 0.07215022999612741], 
                "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                "ModelMemory" -> 9560, "ModelUtility" -> -2.230647412070224, 
                "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
                "TrainingMemory" -> 124104, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[4.46697973491159, 0.6569129770512866]}, 
                "AccuracyHistory" -> {
                  Around[0.557541281303412, 0.05101791689443074]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 6.641656257686242*^-6, "MeanCrossEntropy" -> 
               Around[4.46697973491159, 0.9290152414448153], "ModelMemory" -> 
               9560, "TrainingMemory" -> 124104, "TrainingTime" -> 
               0.06640783086353597], "Index" -> 7], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 1.], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[1.1111321051226817`, 0.1685284510522687], "Accuracy" -> 
                Around[0.526291281303412, 0.0724807042994671], 
                "EvaluationTime" -> 6.641656257686242*^-6, "TestSize" -> 95, 
                "ModelMemory" -> 9560, "ModelUtility" -> -0.8284448869759099, 
                "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`,
                 "TrainingMemory" -> 124408, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[1.1111321051226817`, 0.11916761056192435`]}, 
                "AccuracyHistory" -> {
                  Around[0.526291281303412, 0.051251597515330136`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6776255685612659, 0.19277198549132407`], "Accuracy" -> 
                Around[0.5879983915272861, 0.14934795303195378`], 
                "EvaluationTime" -> 0.000018095780479704407`, "TestSize" -> 
                22, "ModelMemory" -> 9560, 
                "ModelUtility" -> -0.3593581400057728, "TrainingSize" -> 88, 
                "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                194680, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6776255685612659, 0.13631037816371]}, 
                "AccuracyHistory" -> {
                  Around[0.5879983915272861, 0.10560495034522452`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000018095780479704407`, 
               "MeanCrossEntropy" -> 
               Around[0.6776255685612659, 0.19277198549132407`], 
               "ModelMemory" -> 9560, "TrainingMemory" -> 194680, 
               "TrainingTime" -> 0.05990391857694797], "Index" -> 8], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 0.0001], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association[
            "Experiments" -> {}, "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
               1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 0.1], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association[
            "Experiments" -> {}, "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
               1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
             10]], 
          TypeSystem`Assoc[
           TypeSystem`Struct[{"Value", "Options"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
               "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
             TypeSystem`Assoc[TypeSystem`AnyType, 
              TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
              TypeSystem`AnyLength]}], 
           
           TypeSystem`Struct[{
            "Experiments", "PredictedPerformances", "Index"}, {
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime",
                 "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "AccuracyHistory"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, 1], 
                TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
              TypeSystem`AnyLength], 
             
             TypeSystem`Struct[{
              "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
               "TrainingMemory", "TrainingTime"}, {
               TypeSystem`Atom[Real], TypeSystem`AnyType, 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real]}], 
             TypeSystem`Atom[Integer]}], 10], 
          Association["ID" -> 264205120276444]], "MaxTrainingSize" -> 110, 
        "PreprocessorEvaluationTime" -> 9.111669921875`1.*^-6, 
        "PreprocessorMemory" -> 139592, "InputDimension" -> 57, 
        "OutputDimension" -> 1, 
        "BaselineLogProbability" -> -0.6463341980550162, "VariableBudget" -> 
        True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
        "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
        "LastReportingTime" -> 3.8045862040164982`17.33288241791839*^9, 
        "RoundPartitioning" -> Dataset[{
           Association[
           "TrainingSizes" -> 15, "TimeBudgets" -> 0.27999999999999997`, 
            "ElapsedTimes" -> 0.26401189999999997`, "ExperimentCounts" -> 8], 
           Association[
           "TrainingSizes" -> 88, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
            0.37903960000000003`, "ExperimentCounts" -> 5]}, 
          TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
             "ExperimentCounts"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer]}], 2], 
          Association["ID" -> 264218005178332]]], "AnomalyDetector" -> None, 
      "Log" -> Association["Example" -> MachineLearning`MLDataset[
          Association[
          "f1" -> Association[
            "Type" -> "Numerical", "Weight" -> 1, 
             "Values" -> {0.0035287043272917724`}, "ID" -> 
             4207867539065565879], "f2" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, 
             "Values" -> {0.03914674950054545}, "ID" -> 7912806483560731870], 
           "f3" -> Association[
            "Type" -> "Numerical", "Weight" -> 1, 
             "Values" -> {0.0012942147020720321`}, "ID" -> 
             5965761203752319867], "f4" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, 
             "Values" -> {0.010105931360086088`}, "ID" -> 
             8375076442043603798], "f5" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, 
             "Values" -> {0.9459244001100046}, "ID" -> 5205097644896790818], 
           "f6" -> Association[
            "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7}, "ID" -> 
             8854627039274792559], "f7" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             7754319326773593989], "f8" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             207921897603130099], "f9" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             6351408238769381299], "f10" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             344037314210118452], "f11" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             6348694679514505666], "f12" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             5252554518335886713], "f13" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             5232607783926513996], "f14" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             7303145252814796550], "f15" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             90808447787319741], "f16" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             4503794452530117548], "f17" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             2837405527786401704], "f18" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             5636028782333709093], "f19" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             1813727850741997469], "f20" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             6709913498313238271], "f21" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             5143675974651387584], "f22" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             8726886491183455211], "f23" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             6773162551935999198], "f24" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             8757666475647580641], "f25" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             1532675434602055945], "f26" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             6119616733510316592], "f27" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             6164073935886628217], "f28" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             6406882757140105747], "f29" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             9118073656617951559], "f30" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             3471280781960335485], "f31" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             2991007088969221471], "f32" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             5991154010994051748], "f33" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             2743158781995461983], "f34" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             8871617069128402592], "f35" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             5786645781650657112], "f36" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             4449226368872108253], "f37" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             4497375785093605930], "f38" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             8697050170407933116], "f39" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             2443537405650142890], "f40" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             7115060319833467586], "f41" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             9063755240371144440], "f42" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             7161298486736233804], "f43" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             1149423396418762070], "f44" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             2479344111619379829], "f45" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             3271438083699756007], "f46" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             1605112137093190899], "f47" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             8487197176029100879], "f48" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             3425091239092551824], "f49" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             2468318163169225798], "f50" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             2050087499797751690], "f51" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             3833063325018811940], "f52" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
             506134768010460531], "f53" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             3692097242707087664], "f54" -> 
           Association[
            "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             4732741083377867666], "f55" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             3623758047278371766], "f56" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             7432134570476923960], "f57" -> 
           Association[
            "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
             3923686153078021548]], 
          Association[
          "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
           "LogDensityRatios" -> 0]], "TrainingTime" -> 1.2062786, 
        "MaxTrainingMemory" -> 1131376, "DataMemory" -> 965888, 
        "FunctionMemory" -> 444664, "LanguageVersion" -> {12.1, 0}, "Date" -> 
        DateObject[{2020, 7, 24, 13, 30, 4.1934787`8.375149419690363}, 
          "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
        "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
        "SystemWordLength" -> 64, "Evaluations" -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", "\<\"NCCN\"\>", ",", "\<\"maccs\"\>", 
   ",", "\<\"explore\"\>"}], "]"}]], "Output",
 CellChangeTimes->{3.8046115455037537`*^9},
 CellLabel->
  "Out[282]=",ExpressionUUID->"9d652937-3af2-407e-a8db-97c451008d45"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "can", " ", "sample", " ", "just", " ", "using", " ", "classifier", " ", 
   "and", " ", "the", " ", "correct", " ", "sampling", " ", "dataset"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7985499379170732`*^9, 
  3.798549949130329*^9}},ExpressionUUID->"9125af0f-6d54-4252-8cd1-\
0899e21ee5cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample", "[", 
   RowBox[{"cErMACCs1", ",", "erALpool", ",", "\"\<explore\>\""}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.797805840849839*^9, 3.797805876744236*^9}, {
  3.797805913767771*^9, 3.7978059193698206`*^9}, {3.804611582256496*^9, 
  3.8046116623844805`*^9}},
 CellLabel->
  "In[297]:=",ExpressionUUID->"1390c6eb-7663-49b6-8ec9-2258b89b4098"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "or", " ", "using", " ", "a", " ", "parameter", " ", "for", " ", "how", " ",
    "much", " ", "to", " ", "favor", " ", "successes"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.804611620347427*^9, 
  3.804611631294649*^9}},ExpressionUUID->"248fd622-af83-464a-86a1-\
54d68e6fccb2"],

Cell[BoxData[
 RowBox[{"sample", "[", 
  RowBox[{"cErMACCs1", ",", "erALpool", ",", "\"\<exploit\>\"", ",", "1.15"}],
   "]"}]], "Input",ExpressionUUID->"94908a2e-d420-4b17-940e-45664dfdedd7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Do active learning ", "Subsection",
 CellChangeTimes->{{3.804603236857339*^9, 
  3.804603244779775*^9}},ExpressionUUID->"1490c189-78c2-44ef-96db-\
69e92a7ad481"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alIterate", "[", 
   RowBox[{"classifier_", ",", "trainDat_", ",", "sampDat_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "choice", ",", "mLTrainDat", ",", "featCols", ",", "model", ",", 
      "newPool"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"choice", "=", 
      RowBox[{"sample", "[", 
       RowBox[{"classifier", ",", "sampDat"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "combined", " ", "previously", " ", "trained", " ", "dat", " ", "with", 
       " ", "new", " ", "point"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"featCols", "=", 
      RowBox[{"Keys", "@", 
       RowBox[{"Information", "[", 
        RowBox[{"classifier", ",", "\"\<FeatureTypes\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"mLTrainDat", "=", 
      RowBox[{"Normal", "@", 
       RowBox[{
        RowBox[{"GroupBy", "[", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"First", "[", 
             RowBox[{"sample", "[", 
              RowBox[{"classifier", ",", "sampDat"}], "]"}], "]"}], ",", 
            "trainDat"}], "]"}], ",", "rxnSuccessQ"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "All", ",", "featCols"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "train", " ", "new", " ", "classifier", " ", "on", " ", "old", " ", 
        "training", " ", "dat"}], " ", "+", " ", 
       RowBox[{"new", " ", "data", " ", "point"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"model", "=", 
      RowBox[{"Classify", "[", 
       RowBox[{"mLTrainDat", ",", 
        RowBox[{
        "FeatureExtractor", "\[Rule]", "\"\<StandardizedVector\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newPool", "=", 
      RowBox[{"Dataset", "@", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Normal", "@", "sampDat"}], ",", 
         RowBox[{
          RowBox[{"#", "\[NotEqual]", 
           RowBox[{"Normal", "@", "choice"}]}], "&"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"model", ",", "choice", ",", 
       RowBox[{"Dataset", "@", "mLTrainDat"}], ",", "newPool"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8046032535993085`*^9, 3.804603263322758*^9}, {
   3.8046033132866106`*^9, 3.8046033329826355`*^9}, {3.804603380051915*^9, 
   3.804603381811007*^9}, {3.804603548407754*^9, 3.8046035837193007`*^9}, {
   3.8046036329764423`*^9, 3.8046036803346386`*^9}, {3.8046037185796857`*^9, 
   3.8046037478385353`*^9}, {3.804603792331096*^9, 3.8046038300226216`*^9}, {
   3.804603923865199*^9, 3.8046039516310587`*^9}, {3.804604032908296*^9, 
   3.804604033859706*^9}, {3.804604187675151*^9, 3.8046042476286616`*^9}, {
   3.8046054404356318`*^9, 3.8046054706767654`*^9}, {3.8046065024177537`*^9, 
   3.8046065340871725`*^9}, {3.804606673880054*^9, 3.8046066748930097`*^9}, 
   3.804606753352315*^9},
 CellLabel->
  "In[234]:=",ExpressionUUID->"98d8df29-f8cd-4554-93e2-abe0c9fd8cd8"]
}, Open  ]]
}, Closed]]
},
WindowSize->{1152., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"d4e5d397-9f4e-47d3-8eee-6510e067a64f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 171, 3, 67, "Section",ExpressionUUID->"d32339d8-9464-45ba-a3d5-112532c16bf8"],
Cell[CellGroupData[{
Cell[776, 29, 160, 3, 54, "Subsection",ExpressionUUID->"86708cfa-70d3-4f07-95c4-663d38a6fc6e"],
Cell[939, 34, 634, 15, 44, "Input",ExpressionUUID->"b41f50f1-139c-4ed3-a1d0-ea6aa7cedd1b",
 InitializationCell->True],
Cell[1576, 51, 275, 5, 28, "Input",ExpressionUUID->"aa819cdb-18de-479d-b39a-d6a584770744"],
Cell[1854, 58, 2982, 65, 48, "Input",ExpressionUUID->"6451bb58-7b00-487e-b382-a73bf1604d45",
 InitializationCell->True],
Cell[4839, 125, 368, 7, 28, "Input",ExpressionUUID->"64905480-75bd-42a7-a129-269ebd8468c6"],
Cell[5210, 134, 1055, 26, 84, "Input",ExpressionUUID->"98e2e85e-9738-4662-ab9b-b5aa34ad06a1",
 InitializationCell->True],
Cell[6268, 162, 473, 10, 28, "Input",ExpressionUUID->"4ef9b233-1622-42a5-b075-f1844d000fff"],
Cell[6744, 174, 933, 25, 65, "Input",ExpressionUUID->"fa365607-cfb1-4546-a275-60b7191bce48",
 InitializationCell->True],
Cell[7680, 201, 890, 21, 44, "Input",ExpressionUUID->"b65291a3-cc72-44b4-b756-0d2010538ce3",
 InitializationCell->True],
Cell[8573, 224, 1695, 40, 123, "Input",ExpressionUUID->"5ec4a9c1-f117-4f04-8a2d-3eba6c33125d",
 InitializationCell->True],
Cell[10271, 266, 348, 7, 21, "Input",ExpressionUUID->"fdf0cec3-c1d3-4b26-ad09-83efdb75371f"],
Cell[10622, 275, 346, 8, 33, "Input",ExpressionUUID->"6b0485d4-054c-42ee-8931-9512aae4ca4f",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[10993, 287, 222, 4, 21, "Input",ExpressionUUID->"6b7b8f6d-771f-427e-888f-8b8449912cfd"],
Cell[11218, 293, 1857, 44, 70, "Output",ExpressionUUID->"268426da-f6ac-4947-90f4-a7d7c523de70"]
}, Open  ]],
Cell[13090, 340, 353, 7, 21, "Input",ExpressionUUID->"6d7ba03a-7bbc-4c66-a8d4-7e3f088162fd"],
Cell[13446, 349, 828, 16, 48, "Input",ExpressionUUID->"4c98e6ea-5ada-45cf-90b8-baedc0a2120e",
 InitializationCell->True],
Cell[14277, 367, 398, 8, 21, "Input",ExpressionUUID->"8ad2ff13-670a-4e39-9fe7-3d071b5cef64"],
Cell[14678, 377, 1416, 33, 76, "Input",ExpressionUUID->"af50c4bb-b242-4e83-bf20-30e41bce70fb",
 InitializationCell->True],
Cell[16097, 412, 525, 10, 21, "Input",ExpressionUUID->"b482bfa4-0498-44a1-9cdd-8fbeef50337d"],
Cell[16625, 424, 532, 11, 33, "Input",ExpressionUUID->"9ec13e57-9d8c-455b-bef5-03c5a8970d98",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[17194, 440, 168, 3, 38, "Subsection",ExpressionUUID->"068b839e-ef7d-4757-b02b-525a6c8b7004"],
Cell[17365, 445, 449, 11, 28, "Input",ExpressionUUID->"869be5ff-a142-4be1-adaf-7bbbf3aea2e6"],
Cell[CellGroupData[{
Cell[17839, 460, 633, 11, 44, "Input",ExpressionUUID->"94c95d89-45ac-4e29-888e-33fa85499256",
 InitializationCell->True],
Cell[18475, 473, 4328, 93, 68, "Output",ExpressionUUID->"9cb93910-2449-4ac9-b5d6-e1eb016e010e"]
}, Open  ]],
Cell[22818, 569, 329, 7, 28, "Input",ExpressionUUID->"2a9c9826-8f21-4016-b112-b83d0918bd87"],
Cell[23150, 578, 1949, 58, 104, "Input",ExpressionUUID->"fc5145b5-b021-4df8-a125-31a0d17e2af1",
 InitializationCell->True],
Cell[25102, 638, 352, 7, 28, "Input",ExpressionUUID->"1ec5dd86-f8fc-407d-9996-6da5b7a01c7e"],
Cell[25457, 647, 739, 15, 84, "Input",ExpressionUUID->"4a3c9506-da6d-4b8b-8d78-2a2ac1cb23fa",
 InitializationCell->True],
Cell[26199, 664, 353, 7, 28, "Input",ExpressionUUID->"cff34f74-e208-467a-b271-d20a3350ee09"],
Cell[26555, 673, 1372, 34, 123, "Input",ExpressionUUID->"2744670b-abb7-4077-9fa1-cbbb378e8321",
 InitializationCell->True],
Cell[27930, 709, 501, 10, 28, "Input",ExpressionUUID->"4d4329c7-3236-4974-bf0c-4fe89b45ec52"],
Cell[28434, 721, 478, 10, 44, "Input",ExpressionUUID->"98a20e72-66e4-4e68-b924-988b83dc81f8",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28961, 737, 172, 3, 67, "Section",ExpressionUUID->"ff316ade-1da8-4166-87d3-db2b1221732e"],
Cell[CellGroupData[{
Cell[29158, 744, 164, 3, 54, "Subsection",ExpressionUUID->"f7a0b7cf-2955-4056-813f-2c1eaf2ee634"],
Cell[29325, 749, 439, 9, 28, "Input",ExpressionUUID->"f1262731-ed37-4b08-b8c5-b234e1afd980"],
Cell[29767, 760, 484, 10, 49, "Input",ExpressionUUID->"d23d8295-220b-4f4c-9fb1-dd8402711eff"],
Cell[30254, 772, 7898, 182, 494, "Input",ExpressionUUID->"714f7b35-15c8-4b5f-b816-242c5349c784",
 InitializationCell->True],
Cell[38155, 956, 8022, 184, 630, "Input",ExpressionUUID->"4ea7f9a3-c2dc-4622-822b-995b537a3630",
 InitializationCell->True],
Cell[46180, 1142, 536, 12, 68, "Input",ExpressionUUID->"70f47674-0d3b-45c7-868b-5915de87563c"],
Cell[CellGroupData[{
Cell[46741, 1158, 415, 9, 28, "Input",ExpressionUUID->"d6f63ead-e514-44c3-aa4e-d8a96565e336"],
Cell[47159, 1169, 159784, 2712, 86, "Output",ExpressionUUID->"9d652937-3af2-407e-a8db-97c451008d45"]
}, Open  ]],
Cell[206958, 3884, 348, 8, 28, "Input",ExpressionUUID->"9125af0f-6d54-4252-8cd1-0899e21ee5cf"],
Cell[207309, 3894, 394, 9, 28, "Input",ExpressionUUID->"1390c6eb-7663-49b6-8ec9-2258b89b4098"],
Cell[207706, 3905, 330, 7, 28, "Input",ExpressionUUID->"248fd622-af83-464a-86a1-54d68e6fccb2"],
Cell[208039, 3914, 192, 3, 28, "Input",ExpressionUUID->"94908a2e-d420-4b17-940e-45664dfdedd7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208268, 3922, 167, 3, 54, "Subsection",ExpressionUUID->"1490c189-78c2-44ef-96db-69e92a7ad481"],
Cell[208438, 3927, 3262, 76, 240, "Input",ExpressionUUID->"98d8df29-f8cd-4554-93e2-abe0c9fd8cd8",
 InitializationCell->True]
}, Open  ]]
}, Closed]]
}
]
*)

(* End of internal cache information *)

